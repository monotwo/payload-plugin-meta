"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mongodb@6.10.0";
exports.ids = ["vendor-chunks/mongodb@6.10.0"];
exports.modules = {

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/admin.js":
/*!******************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/admin.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Admin = void 0;\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/execute_operation.js\");\nconst list_databases_1 = __webpack_require__(/*! ./operations/list_databases */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/list_databases.js\");\nconst remove_user_1 = __webpack_require__(/*! ./operations/remove_user */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/remove_user.js\");\nconst run_command_1 = __webpack_require__(/*! ./operations/run_command */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/run_command.js\");\nconst validate_collection_1 = __webpack_require__(/*! ./operations/validate_collection */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/validate_collection.js\");\n/**\n * The **Admin** class is an internal class that allows convenient access to\n * the admin functionality and commands for MongoDB.\n *\n * **ADMIN Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const admin = client.db().admin();\n * const dbInfo = await admin.listDatabases();\n * for (const db of dbInfo.databases) {\n *   console.log(db.name);\n * }\n * ```\n */\nclass Admin {\n    /**\n     * Create a new Admin instance\n     * @internal\n     */\n    constructor(db) {\n        this.s = { db };\n    }\n    /**\n     * Execute a command\n     *\n     * The driver will ensure the following fields are attached to the command sent to the server:\n     * - `lsid` - sourced from an implicit session or options.session\n     * - `$readPreference` - defaults to primary or can be configured by options.readPreference\n     * - `$db` - sourced from the name of this database\n     *\n     * If the client has a serverApi setting:\n     * - `apiVersion`\n     * - `apiStrict`\n     * - `apiDeprecationErrors`\n     *\n     * When in a transaction:\n     * - `readConcern` - sourced from readConcern set on the TransactionOptions\n     * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\n     *\n     * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\n     *\n     * @param command - The command to execute\n     * @param options - Optional settings for the command\n     */\n    async command(command, options) {\n        return await (0, execute_operation_1.executeOperation)(this.s.db.client, new run_command_1.RunAdminCommandOperation(command, {\n            ...(0, bson_1.resolveBSONOptions)(options),\n            session: options?.session,\n            readPreference: options?.readPreference\n        }));\n    }\n    /**\n     * Retrieve the server build information\n     *\n     * @param options - Optional settings for the command\n     */\n    async buildInfo(options) {\n        return await this.command({ buildinfo: 1 }, options);\n    }\n    /**\n     * Retrieve the server build information\n     *\n     * @param options - Optional settings for the command\n     */\n    async serverInfo(options) {\n        return await this.command({ buildinfo: 1 }, options);\n    }\n    /**\n     * Retrieve this db's server status.\n     *\n     * @param options - Optional settings for the command\n     */\n    async serverStatus(options) {\n        return await this.command({ serverStatus: 1 }, options);\n    }\n    /**\n     * Ping the MongoDB server and retrieve results\n     *\n     * @param options - Optional settings for the command\n     */\n    async ping(options) {\n        return await this.command({ ping: 1 }, options);\n    }\n    /**\n     * Remove a user from a database\n     *\n     * @param username - The username to remove\n     * @param options - Optional settings for the command\n     */\n    async removeUser(username, options) {\n        return await (0, execute_operation_1.executeOperation)(this.s.db.client, new remove_user_1.RemoveUserOperation(this.s.db, username, { dbName: 'admin', ...options }));\n    }\n    /**\n     * Validate an existing collection\n     *\n     * @param collectionName - The name of the collection to validate.\n     * @param options - Optional settings for the command\n     */\n    async validateCollection(collectionName, options = {}) {\n        return await (0, execute_operation_1.executeOperation)(this.s.db.client, new validate_collection_1.ValidateCollectionOperation(this, collectionName, options));\n    }\n    /**\n     * List the available databases\n     *\n     * @param options - Optional settings for the command\n     */\n    async listDatabases(options) {\n        return await (0, execute_operation_1.executeOperation)(this.s.db.client, new list_databases_1.ListDatabasesOperation(this.s.db, options));\n    }\n    /**\n     * Get ReplicaSet status\n     *\n     * @param options - Optional settings for the command\n     */\n    async replSetGetStatus(options) {\n        return await this.command({ replSetGetStatus: 1 }, options);\n    }\n}\nexports.Admin = Admin;\n//# sourceMappingURL=admin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/admin.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/beta.js":
/*!*****************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/beta.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./index */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/index.js\"), exports);\n/**\n * @internal\n *\n * Since we don't bundle tslib helpers, we need to polyfill this method.\n *\n * This is used in the generated JS.  Adapted from https://github.com/microsoft/TypeScript/blob/aafdfe5b3f76f5c41abeec412ce73c86da94c75f/src/compiler/factory/emitHelpers.ts#L1202.\n */\nfunction __exportStar(mod) {\n    for (const key of Object.keys(mod)) {\n        Object.defineProperty(exports, key, {\n            enumerable: true,\n            get: function () {\n                return mod[key];\n            }\n        });\n    }\n}\n//# sourceMappingURL=beta.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9iZXRhLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyw2RkFBUztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2xpbmt1cy9HaXRodWIvbW9ub3R3by9wYXlsb2FkLXBsdWdpbi1tZXRhL25vZGVfbW9kdWxlcy8ucG5wbS9tb25nb2RiQDYuMTAuMC9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvYmV0YS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9pbmRleFwiKSwgZXhwb3J0cyk7XG4vKipcbiAqIEBpbnRlcm5hbFxuICpcbiAqIFNpbmNlIHdlIGRvbid0IGJ1bmRsZSB0c2xpYiBoZWxwZXJzLCB3ZSBuZWVkIHRvIHBvbHlmaWxsIHRoaXMgbWV0aG9kLlxuICpcbiAqIFRoaXMgaXMgdXNlZCBpbiB0aGUgZ2VuZXJhdGVkIEpTLiAgQWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9ibG9iL2FhZmRmZTViM2Y3NmY1YzQxYWJlZWM0MTJjZTczYzg2ZGE5NGM3NWYvc3JjL2NvbXBpbGVyL2ZhY3RvcnkvZW1pdEhlbHBlcnMudHMjTDEyMDIuXG4gKi9cbmZ1bmN0aW9uIF9fZXhwb3J0U3Rhcihtb2QpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhtb2QpKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9kW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJldGEuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/beta.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js":
/*!*****************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.toUTF8 = exports.getBigInt64LE = exports.getFloat64LE = exports.getInt32LE = exports.UUID = exports.Timestamp = exports.serialize = exports.ObjectId = exports.MinKey = exports.MaxKey = exports.Long = exports.Int32 = exports.EJSON = exports.Double = exports.deserialize = exports.Decimal128 = exports.DBRef = exports.Code = exports.calculateObjectSize = exports.BSONType = exports.BSONSymbol = exports.BSONRegExp = exports.BSONError = exports.BSON = exports.Binary = void 0;\nexports.parseToElementsToArray = parseToElementsToArray;\nexports.pluckBSONSerializeOptions = pluckBSONSerializeOptions;\nexports.resolveBSONOptions = resolveBSONOptions;\nexports.parseUtf8ValidationOption = parseUtf8ValidationOption;\n/* eslint-disable no-restricted-imports */\nconst bson_1 = __webpack_require__(/*! bson */ \"(rsc)/../node_modules/.pnpm/bson@6.10.1/node_modules/bson/lib/bson.cjs\");\nvar bson_2 = __webpack_require__(/*! bson */ \"(rsc)/../node_modules/.pnpm/bson@6.10.1/node_modules/bson/lib/bson.cjs\");\nObject.defineProperty(exports, \"Binary\", ({ enumerable: true, get: function () { return bson_2.Binary; } }));\nObject.defineProperty(exports, \"BSON\", ({ enumerable: true, get: function () { return bson_2.BSON; } }));\nObject.defineProperty(exports, \"BSONError\", ({ enumerable: true, get: function () { return bson_2.BSONError; } }));\nObject.defineProperty(exports, \"BSONRegExp\", ({ enumerable: true, get: function () { return bson_2.BSONRegExp; } }));\nObject.defineProperty(exports, \"BSONSymbol\", ({ enumerable: true, get: function () { return bson_2.BSONSymbol; } }));\nObject.defineProperty(exports, \"BSONType\", ({ enumerable: true, get: function () { return bson_2.BSONType; } }));\nObject.defineProperty(exports, \"calculateObjectSize\", ({ enumerable: true, get: function () { return bson_2.calculateObjectSize; } }));\nObject.defineProperty(exports, \"Code\", ({ enumerable: true, get: function () { return bson_2.Code; } }));\nObject.defineProperty(exports, \"DBRef\", ({ enumerable: true, get: function () { return bson_2.DBRef; } }));\nObject.defineProperty(exports, \"Decimal128\", ({ enumerable: true, get: function () { return bson_2.Decimal128; } }));\nObject.defineProperty(exports, \"deserialize\", ({ enumerable: true, get: function () { return bson_2.deserialize; } }));\nObject.defineProperty(exports, \"Double\", ({ enumerable: true, get: function () { return bson_2.Double; } }));\nObject.defineProperty(exports, \"EJSON\", ({ enumerable: true, get: function () { return bson_2.EJSON; } }));\nObject.defineProperty(exports, \"Int32\", ({ enumerable: true, get: function () { return bson_2.Int32; } }));\nObject.defineProperty(exports, \"Long\", ({ enumerable: true, get: function () { return bson_2.Long; } }));\nObject.defineProperty(exports, \"MaxKey\", ({ enumerable: true, get: function () { return bson_2.MaxKey; } }));\nObject.defineProperty(exports, \"MinKey\", ({ enumerable: true, get: function () { return bson_2.MinKey; } }));\nObject.defineProperty(exports, \"ObjectId\", ({ enumerable: true, get: function () { return bson_2.ObjectId; } }));\nObject.defineProperty(exports, \"serialize\", ({ enumerable: true, get: function () { return bson_2.serialize; } }));\nObject.defineProperty(exports, \"Timestamp\", ({ enumerable: true, get: function () { return bson_2.Timestamp; } }));\nObject.defineProperty(exports, \"UUID\", ({ enumerable: true, get: function () { return bson_2.UUID; } }));\nfunction parseToElementsToArray(bytes, offset) {\n    const res = bson_1.BSON.onDemand.parseToElements(bytes, offset);\n    return Array.isArray(res) ? res : [...res];\n}\nexports.getInt32LE = bson_1.BSON.onDemand.NumberUtils.getInt32LE;\nexports.getFloat64LE = bson_1.BSON.onDemand.NumberUtils.getFloat64LE;\nexports.getBigInt64LE = bson_1.BSON.onDemand.NumberUtils.getBigInt64LE;\nexports.toUTF8 = bson_1.BSON.onDemand.ByteUtils.toUTF8;\nfunction pluckBSONSerializeOptions(options) {\n    const { fieldsAsRaw, useBigInt64, promoteValues, promoteBuffers, promoteLongs, serializeFunctions, ignoreUndefined, bsonRegExp, raw, enableUtf8Validation } = options;\n    return {\n        fieldsAsRaw,\n        useBigInt64,\n        promoteValues,\n        promoteBuffers,\n        promoteLongs,\n        serializeFunctions,\n        ignoreUndefined,\n        bsonRegExp,\n        raw,\n        enableUtf8Validation\n    };\n}\n/**\n * Merge the given BSONSerializeOptions, preferring options over the parent's options, and\n * substituting defaults for values not set.\n *\n * @internal\n */\nfunction resolveBSONOptions(options, parent) {\n    const parentOptions = parent?.bsonOptions;\n    return {\n        raw: options?.raw ?? parentOptions?.raw ?? false,\n        useBigInt64: options?.useBigInt64 ?? parentOptions?.useBigInt64 ?? false,\n        promoteLongs: options?.promoteLongs ?? parentOptions?.promoteLongs ?? true,\n        promoteValues: options?.promoteValues ?? parentOptions?.promoteValues ?? true,\n        promoteBuffers: options?.promoteBuffers ?? parentOptions?.promoteBuffers ?? false,\n        ignoreUndefined: options?.ignoreUndefined ?? parentOptions?.ignoreUndefined ?? false,\n        bsonRegExp: options?.bsonRegExp ?? parentOptions?.bsonRegExp ?? false,\n        serializeFunctions: options?.serializeFunctions ?? parentOptions?.serializeFunctions ?? false,\n        fieldsAsRaw: options?.fieldsAsRaw ?? parentOptions?.fieldsAsRaw ?? {},\n        enableUtf8Validation: options?.enableUtf8Validation ?? parentOptions?.enableUtf8Validation ?? true\n    };\n}\n/** @internal */\nfunction parseUtf8ValidationOption(options) {\n    const enableUtf8Validation = options?.enableUtf8Validation;\n    if (enableUtf8Validation === false) {\n        return { utf8: false };\n    }\n    return { utf8: { writeErrors: false } };\n}\n//# sourceMappingURL=bson.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bulk/common.js":
/*!************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bulk/common.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BulkOperationBase = exports.BulkWriteShimOperation = exports.FindOperators = exports.MongoBulkWriteError = exports.WriteError = exports.WriteConcernError = exports.BulkWriteResult = exports.Batch = exports.BatchType = void 0;\nexports.mergeBatchResults = mergeBatchResults;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst delete_1 = __webpack_require__(/*! ../operations/delete */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/delete.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/execute_operation.js\");\nconst insert_1 = __webpack_require__(/*! ../operations/insert */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/insert.js\");\nconst operation_1 = __webpack_require__(/*! ../operations/operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js\");\nconst update_1 = __webpack_require__(/*! ../operations/update */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/update.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/write_concern.js\");\n/** @internal */\nconst kServerError = Symbol('serverError');\n/** @public */\nexports.BatchType = Object.freeze({\n    INSERT: 1,\n    UPDATE: 2,\n    DELETE: 3\n});\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n *\n * @public\n */\nclass Batch {\n    constructor(batchType, originalZeroIndex) {\n        this.originalZeroIndex = originalZeroIndex;\n        this.currentIndex = 0;\n        this.originalIndexes = [];\n        this.batchType = batchType;\n        this.operations = [];\n        this.size = 0;\n        this.sizeBytes = 0;\n    }\n}\nexports.Batch = Batch;\n/**\n * @public\n * The result of a bulk write.\n */\nclass BulkWriteResult {\n    static generateIdMap(ids) {\n        const idMap = {};\n        for (const doc of ids) {\n            idMap[doc.index] = doc._id;\n        }\n        return idMap;\n    }\n    /**\n     * Create a new BulkWriteResult instance\n     * @internal\n     */\n    constructor(bulkResult, isOrdered) {\n        this.result = bulkResult;\n        this.insertedCount = this.result.nInserted ?? 0;\n        this.matchedCount = this.result.nMatched ?? 0;\n        this.modifiedCount = this.result.nModified ?? 0;\n        this.deletedCount = this.result.nRemoved ?? 0;\n        this.upsertedCount = this.result.upserted.length ?? 0;\n        this.upsertedIds = BulkWriteResult.generateIdMap(this.result.upserted);\n        this.insertedIds = BulkWriteResult.generateIdMap(this.getSuccessfullyInsertedIds(bulkResult, isOrdered));\n        Object.defineProperty(this, 'result', { value: this.result, enumerable: false });\n    }\n    /** Evaluates to true if the bulk operation correctly executes */\n    get ok() {\n        return this.result.ok;\n    }\n    /**\n     * Returns document_ids that were actually inserted\n     * @internal\n     */\n    getSuccessfullyInsertedIds(bulkResult, isOrdered) {\n        if (bulkResult.writeErrors.length === 0)\n            return bulkResult.insertedIds;\n        if (isOrdered) {\n            return bulkResult.insertedIds.slice(0, bulkResult.writeErrors[0].index);\n        }\n        return bulkResult.insertedIds.filter(({ index }) => !bulkResult.writeErrors.some(writeError => index === writeError.index));\n    }\n    /** Returns the upserted id at the given index */\n    getUpsertedIdAt(index) {\n        return this.result.upserted[index];\n    }\n    /** Returns raw internal result */\n    getRawResponse() {\n        return this.result;\n    }\n    /** Returns true if the bulk operation contains a write error */\n    hasWriteErrors() {\n        return this.result.writeErrors.length > 0;\n    }\n    /** Returns the number of write errors off the bulk operation */\n    getWriteErrorCount() {\n        return this.result.writeErrors.length;\n    }\n    /** Returns a specific write error object */\n    getWriteErrorAt(index) {\n        return index < this.result.writeErrors.length ? this.result.writeErrors[index] : undefined;\n    }\n    /** Retrieve all write errors */\n    getWriteErrors() {\n        return this.result.writeErrors;\n    }\n    /** Retrieve the write concern error if one exists */\n    getWriteConcernError() {\n        if (this.result.writeConcernErrors.length === 0) {\n            return;\n        }\n        else if (this.result.writeConcernErrors.length === 1) {\n            // Return the error\n            return this.result.writeConcernErrors[0];\n        }\n        else {\n            // Combine the errors\n            let errmsg = '';\n            for (let i = 0; i < this.result.writeConcernErrors.length; i++) {\n                const err = this.result.writeConcernErrors[i];\n                errmsg = errmsg + err.errmsg;\n                // TODO: Something better\n                if (i === 0)\n                    errmsg = errmsg + ' and ';\n            }\n            return new WriteConcernError({ errmsg, code: error_1.MONGODB_ERROR_CODES.WriteConcernFailed });\n        }\n    }\n    toString() {\n        return `BulkWriteResult(${bson_1.EJSON.stringify(this.result)})`;\n    }\n    isOk() {\n        return this.result.ok === 1;\n    }\n}\nexports.BulkWriteResult = BulkWriteResult;\n/**\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\n * @public\n * @category Error\n */\nclass WriteConcernError {\n    constructor(error) {\n        this[kServerError] = error;\n    }\n    /** Write concern error code. */\n    get code() {\n        return this[kServerError].code;\n    }\n    /** Write concern error message. */\n    get errmsg() {\n        return this[kServerError].errmsg;\n    }\n    /** Write concern error info. */\n    get errInfo() {\n        return this[kServerError].errInfo;\n    }\n    toJSON() {\n        return this[kServerError];\n    }\n    toString() {\n        return `WriteConcernError(${this.errmsg})`;\n    }\n}\nexports.WriteConcernError = WriteConcernError;\n/**\n * An error that occurred during a BulkWrite on the server.\n * @public\n * @category Error\n */\nclass WriteError {\n    constructor(err) {\n        this.err = err;\n    }\n    /** WriteError code. */\n    get code() {\n        return this.err.code;\n    }\n    /** WriteError original bulk operation index. */\n    get index() {\n        return this.err.index;\n    }\n    /** WriteError message. */\n    get errmsg() {\n        return this.err.errmsg;\n    }\n    /** WriteError details. */\n    get errInfo() {\n        return this.err.errInfo;\n    }\n    /** Returns the underlying operation that caused the error */\n    getOperation() {\n        return this.err.op;\n    }\n    toJSON() {\n        return { code: this.err.code, index: this.err.index, errmsg: this.err.errmsg, op: this.err.op };\n    }\n    toString() {\n        return `WriteError(${JSON.stringify(this.toJSON())})`;\n    }\n}\nexports.WriteError = WriteError;\n/** Merges results into shared data structure */\nfunction mergeBatchResults(batch, bulkResult, err, result) {\n    // If we have an error set the result to be the err object\n    if (err) {\n        result = err;\n    }\n    else if (result && result.result) {\n        result = result.result;\n    }\n    if (result == null) {\n        return;\n    }\n    // Do we have a top level error stop processing and return\n    if (result.ok === 0 && bulkResult.ok === 1) {\n        bulkResult.ok = 0;\n        const writeError = {\n            index: 0,\n            code: result.code || 0,\n            errmsg: result.message,\n            errInfo: result.errInfo,\n            op: batch.operations[0]\n        };\n        bulkResult.writeErrors.push(new WriteError(writeError));\n        return;\n    }\n    else if (result.ok === 0 && bulkResult.ok === 0) {\n        return;\n    }\n    // If we have an insert Batch type\n    if (isInsertBatch(batch) && result.n) {\n        bulkResult.nInserted = bulkResult.nInserted + result.n;\n    }\n    // If we have an insert Batch type\n    if (isDeleteBatch(batch) && result.n) {\n        bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n    }\n    let nUpserted = 0;\n    // We have an array of upserted values, we need to rewrite the indexes\n    if (Array.isArray(result.upserted)) {\n        nUpserted = result.upserted.length;\n        for (let i = 0; i < result.upserted.length; i++) {\n            bulkResult.upserted.push({\n                index: result.upserted[i].index + batch.originalZeroIndex,\n                _id: result.upserted[i]._id\n            });\n        }\n    }\n    else if (result.upserted) {\n        nUpserted = 1;\n        bulkResult.upserted.push({\n            index: batch.originalZeroIndex,\n            _id: result.upserted\n        });\n    }\n    // If we have an update Batch type\n    if (isUpdateBatch(batch) && result.n) {\n        const nModified = result.nModified;\n        bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n        bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n        if (typeof nModified === 'number') {\n            bulkResult.nModified = bulkResult.nModified + nModified;\n        }\n        else {\n            bulkResult.nModified = 0;\n        }\n    }\n    if (Array.isArray(result.writeErrors)) {\n        for (let i = 0; i < result.writeErrors.length; i++) {\n            const writeError = {\n                index: batch.originalIndexes[result.writeErrors[i].index],\n                code: result.writeErrors[i].code,\n                errmsg: result.writeErrors[i].errmsg,\n                errInfo: result.writeErrors[i].errInfo,\n                op: batch.operations[result.writeErrors[i].index]\n            };\n            bulkResult.writeErrors.push(new WriteError(writeError));\n        }\n    }\n    if (result.writeConcernError) {\n        bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n    }\n}\nasync function executeCommands(bulkOperation, options) {\n    if (bulkOperation.s.batches.length === 0) {\n        return new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered);\n    }\n    for (const batch of bulkOperation.s.batches) {\n        const finalOptions = (0, utils_1.resolveOptions)(bulkOperation, {\n            ...options,\n            ordered: bulkOperation.isOrdered\n        });\n        if (finalOptions.bypassDocumentValidation !== true) {\n            delete finalOptions.bypassDocumentValidation;\n        }\n        // Is the bypassDocumentValidation options specific\n        if (bulkOperation.s.bypassDocumentValidation === true) {\n            finalOptions.bypassDocumentValidation = true;\n        }\n        // Is the checkKeys option disabled\n        if (bulkOperation.s.checkKeys === false) {\n            finalOptions.checkKeys = false;\n        }\n        if (finalOptions.retryWrites) {\n            if (isUpdateBatch(batch)) {\n                finalOptions.retryWrites =\n                    finalOptions.retryWrites && !batch.operations.some(op => op.multi);\n            }\n            if (isDeleteBatch(batch)) {\n                finalOptions.retryWrites =\n                    finalOptions.retryWrites && !batch.operations.some(op => op.limit === 0);\n            }\n        }\n        const operation = isInsertBatch(batch)\n            ? new insert_1.InsertOperation(bulkOperation.s.namespace, batch.operations, finalOptions)\n            : isUpdateBatch(batch)\n                ? new update_1.UpdateOperation(bulkOperation.s.namespace, batch.operations, finalOptions)\n                : isDeleteBatch(batch)\n                    ? new delete_1.DeleteOperation(bulkOperation.s.namespace, batch.operations, finalOptions)\n                    : null;\n        if (operation == null)\n            throw new error_1.MongoRuntimeError(`Unknown batchType: ${batch.batchType}`);\n        let thrownError = null;\n        let result;\n        try {\n            result = await (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.client, operation);\n        }\n        catch (error) {\n            thrownError = error;\n        }\n        if (thrownError != null) {\n            if (thrownError instanceof error_1.MongoWriteConcernError) {\n                mergeBatchResults(batch, bulkOperation.s.bulkResult, thrownError, result);\n                const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered);\n                throw new MongoBulkWriteError({\n                    message: thrownError.result.writeConcernError.errmsg,\n                    code: thrownError.result.writeConcernError.code\n                }, writeResult);\n            }\n            else {\n                // Error is a driver related error not a bulk op error, return early\n                throw new MongoBulkWriteError(thrownError, new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered));\n            }\n        }\n        mergeBatchResults(batch, bulkOperation.s.bulkResult, thrownError, result);\n        const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered);\n        bulkOperation.handleWriteError(writeResult);\n    }\n    bulkOperation.s.batches.length = 0;\n    const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered);\n    bulkOperation.handleWriteError(writeResult);\n    return writeResult;\n}\n/**\n * An error indicating an unsuccessful Bulk Write\n * @public\n * @category Error\n */\nclass MongoBulkWriteError extends error_1.MongoServerError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(error, result) {\n        super(error);\n        this.writeErrors = [];\n        if (error instanceof WriteConcernError)\n            this.err = error;\n        else if (!(error instanceof Error)) {\n            this.message = error.message;\n            this.code = error.code;\n            this.writeErrors = error.writeErrors ?? [];\n        }\n        this.result = result;\n        Object.assign(this, error);\n    }\n    get name() {\n        return 'MongoBulkWriteError';\n    }\n    /** Number of documents inserted. */\n    get insertedCount() {\n        return this.result.insertedCount;\n    }\n    /** Number of documents matched for update. */\n    get matchedCount() {\n        return this.result.matchedCount;\n    }\n    /** Number of documents modified. */\n    get modifiedCount() {\n        return this.result.modifiedCount;\n    }\n    /** Number of documents deleted. */\n    get deletedCount() {\n        return this.result.deletedCount;\n    }\n    /** Number of documents upserted. */\n    get upsertedCount() {\n        return this.result.upsertedCount;\n    }\n    /** Inserted document generated Id's, hash key is the index of the originating operation */\n    get insertedIds() {\n        return this.result.insertedIds;\n    }\n    /** Upserted document generated Id's, hash key is the index of the originating operation */\n    get upsertedIds() {\n        return this.result.upsertedIds;\n    }\n}\nexports.MongoBulkWriteError = MongoBulkWriteError;\n/**\n * A builder object that is returned from {@link BulkOperationBase#find}.\n * Is used to build a write operation that involves a query filter.\n *\n * @public\n */\nclass FindOperators {\n    /**\n     * Creates a new FindOperators object.\n     * @internal\n     */\n    constructor(bulkOperation) {\n        this.bulkOperation = bulkOperation;\n    }\n    /** Add a multiple update operation to the bulk operation */\n    update(updateDocument) {\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, {\n            ...currentOp,\n            multi: true\n        }));\n    }\n    /** Add a single update operation to the bulk operation */\n    updateOne(updateDocument) {\n        if (!(0, utils_1.hasAtomicOperators)(updateDocument)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, { ...currentOp, multi: false }));\n    }\n    /** Add a replace one operation to the bulk operation */\n    replaceOne(replacement) {\n        if ((0, utils_1.hasAtomicOperators)(replacement)) {\n            throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n        }\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, replacement, { ...currentOp, multi: false }));\n    }\n    /** Add a delete one operation to the bulk operation */\n    deleteOne() {\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, { ...currentOp, limit: 1 }));\n    }\n    /** Add a delete many operation to the bulk operation */\n    delete() {\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, { ...currentOp, limit: 0 }));\n    }\n    /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */\n    upsert() {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.upsert = true;\n        return this;\n    }\n    /** Specifies the collation for the query condition. */\n    collation(collation) {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.collation = collation;\n        return this;\n    }\n    /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */\n    arrayFilters(arrayFilters) {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.arrayFilters = arrayFilters;\n        return this;\n    }\n    /** Specifies hint for the bulk operation. */\n    hint(hint) {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.hint = hint;\n        return this;\n    }\n}\nexports.FindOperators = FindOperators;\n/**\n * TODO(NODE-4063)\n * BulkWrites merge complexity is implemented in executeCommands\n * This provides a vehicle to treat bulkOperations like any other operation (hence \"shim\")\n * We would like this logic to simply live inside the BulkWriteOperation class\n * @internal\n */\nclass BulkWriteShimOperation extends operation_1.AbstractOperation {\n    constructor(bulkOperation, options) {\n        super(options);\n        this.bulkOperation = bulkOperation;\n    }\n    get commandName() {\n        return 'bulkWrite';\n    }\n    async execute(_server, session) {\n        if (this.options.session == null) {\n            // An implicit session could have been created by 'executeOperation'\n            // So if we stick it on finalOptions here, each bulk operation\n            // will use this same session, it'll be passed in the same way\n            // an explicit session would be\n            this.options.session = session;\n        }\n        return await executeCommands(this.bulkOperation, this.options);\n    }\n}\nexports.BulkWriteShimOperation = BulkWriteShimOperation;\n/** @public */\nclass BulkOperationBase {\n    /**\n     * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\n     * @internal\n     */\n    constructor(collection, options, isOrdered) {\n        this.collection = collection;\n        // determine whether bulkOperation is ordered or unordered\n        this.isOrdered = isOrdered;\n        const topology = (0, utils_1.getTopology)(collection);\n        options = options == null ? {} : options;\n        // TODO Bring from driver information in hello\n        // Get the namespace for the write operations\n        const namespace = collection.s.namespace;\n        // Used to mark operation as executed\n        const executed = false;\n        // Current item\n        const currentOp = undefined;\n        // Set max byte size\n        const hello = topology.lastHello();\n        // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents\n        // over 2mb are still allowed\n        const usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);\n        const maxBsonObjectSize = hello && hello.maxBsonObjectSize ? hello.maxBsonObjectSize : 1024 * 1024 * 16;\n        const maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;\n        const maxWriteBatchSize = hello && hello.maxWriteBatchSize ? hello.maxWriteBatchSize : 1000;\n        // Calculates the largest possible size of an Array key, represented as a BSON string\n        // element. This calculation:\n        //     1 byte for BSON type\n        //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\n        //   + 1 bytes for null terminator\n        const maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2;\n        // Final options for retryable writes\n        let finalOptions = Object.assign({}, options);\n        finalOptions = (0, utils_1.applyRetryableWrites)(finalOptions, collection.s.db);\n        // Final results\n        const bulkResult = {\n            ok: 1,\n            writeErrors: [],\n            writeConcernErrors: [],\n            insertedIds: [],\n            nInserted: 0,\n            nUpserted: 0,\n            nMatched: 0,\n            nModified: 0,\n            nRemoved: 0,\n            upserted: []\n        };\n        // Internal state\n        this.s = {\n            // Final result\n            bulkResult,\n            // Current batch state\n            currentBatch: undefined,\n            currentIndex: 0,\n            // ordered specific\n            currentBatchSize: 0,\n            currentBatchSizeBytes: 0,\n            // unordered specific\n            currentInsertBatch: undefined,\n            currentUpdateBatch: undefined,\n            currentRemoveBatch: undefined,\n            batches: [],\n            // Write concern\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n            // Max batch size options\n            maxBsonObjectSize,\n            maxBatchSizeBytes,\n            maxWriteBatchSize,\n            maxKeySize,\n            // Namespace\n            namespace,\n            // Topology\n            topology,\n            // Options\n            options: finalOptions,\n            // BSON options\n            bsonOptions: (0, bson_1.resolveBSONOptions)(options),\n            // Current operation\n            currentOp,\n            // Executed\n            executed,\n            // Collection\n            collection,\n            // Fundamental error\n            err: undefined,\n            // check keys\n            checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : false\n        };\n        // bypass Validation\n        if (options.bypassDocumentValidation === true) {\n            this.s.bypassDocumentValidation = true;\n        }\n    }\n    /**\n     * Add a single insert document to the bulk operation\n     *\n     * @example\n     * ```ts\n     * const bulkOp = collection.initializeOrderedBulkOp();\n     *\n     * // Adds three inserts to the bulkOp.\n     * bulkOp\n     *   .insert({ a: 1 })\n     *   .insert({ b: 2 })\n     *   .insert({ c: 3 });\n     * await bulkOp.execute();\n     * ```\n     */\n    insert(document) {\n        (0, utils_1.maybeAddIdToDocuments)(this.collection, document, {\n            forceServerObjectId: this.shouldForceServerObjectId()\n        });\n        return this.addToOperationsList(exports.BatchType.INSERT, document);\n    }\n    /**\n     * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\n     * Returns a builder object used to complete the definition of the operation.\n     *\n     * @example\n     * ```ts\n     * const bulkOp = collection.initializeOrderedBulkOp();\n     *\n     * // Add an updateOne to the bulkOp\n     * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\n     *\n     * // Add an updateMany to the bulkOp\n     * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\n     *\n     * // Add an upsert\n     * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\n     *\n     * // Add a deletion\n     * bulkOp.find({ g: 7 }).deleteOne();\n     *\n     * // Add a multi deletion\n     * bulkOp.find({ h: 8 }).delete();\n     *\n     * // Add a replaceOne\n     * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\n     *\n     * // Update using a pipeline (requires Mongodb 4.2 or higher)\n     * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\n     *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\n     * ]);\n     *\n     * // All of the ops will now be executed\n     * await bulkOp.execute();\n     * ```\n     */\n    find(selector) {\n        if (!selector) {\n            throw new error_1.MongoInvalidArgumentError('Bulk find operation must specify a selector');\n        }\n        // Save a current selector\n        this.s.currentOp = {\n            selector: selector\n        };\n        return new FindOperators(this);\n    }\n    /** Specifies a raw operation to perform in the bulk write. */\n    raw(op) {\n        if (op == null || typeof op !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Operation must be an object with an operation key');\n        }\n        if ('insertOne' in op) {\n            const forceServerObjectId = this.shouldForceServerObjectId();\n            const document = op.insertOne && op.insertOne.document == null\n                ? // TODO(NODE-6003): remove support for omitting the `documents` subdocument in bulk inserts\n                    op.insertOne\n                : op.insertOne.document;\n            (0, utils_1.maybeAddIdToDocuments)(this.collection, document, { forceServerObjectId });\n            return this.addToOperationsList(exports.BatchType.INSERT, document);\n        }\n        if ('replaceOne' in op || 'updateOne' in op || 'updateMany' in op) {\n            if ('replaceOne' in op) {\n                if ('q' in op.replaceOne) {\n                    throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n                }\n                const updateStatement = (0, update_1.makeUpdateStatement)(op.replaceOne.filter, op.replaceOne.replacement, { ...op.replaceOne, multi: false });\n                if ((0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n                    throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n                }\n                return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n            }\n            if ('updateOne' in op) {\n                if ('q' in op.updateOne) {\n                    throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n                }\n                const updateStatement = (0, update_1.makeUpdateStatement)(op.updateOne.filter, op.updateOne.update, {\n                    ...op.updateOne,\n                    multi: false\n                });\n                if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n                    throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n                }\n                return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n            }\n            if ('updateMany' in op) {\n                if ('q' in op.updateMany) {\n                    throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n                }\n                const updateStatement = (0, update_1.makeUpdateStatement)(op.updateMany.filter, op.updateMany.update, {\n                    ...op.updateMany,\n                    multi: true\n                });\n                if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n                    throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n                }\n                return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n            }\n        }\n        if ('deleteOne' in op) {\n            if ('q' in op.deleteOne) {\n                throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n            }\n            return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteOne.filter, { ...op.deleteOne, limit: 1 }));\n        }\n        if ('deleteMany' in op) {\n            if ('q' in op.deleteMany) {\n                throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n            }\n            return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteMany.filter, { ...op.deleteMany, limit: 0 }));\n        }\n        // otherwise an unknown operation was provided\n        throw new error_1.MongoInvalidArgumentError('bulkWrite only supports insertOne, updateOne, updateMany, deleteOne, deleteMany');\n    }\n    get length() {\n        return this.s.currentIndex;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    get writeConcern() {\n        return this.s.writeConcern;\n    }\n    get batches() {\n        const batches = [...this.s.batches];\n        if (this.isOrdered) {\n            if (this.s.currentBatch)\n                batches.push(this.s.currentBatch);\n        }\n        else {\n            if (this.s.currentInsertBatch)\n                batches.push(this.s.currentInsertBatch);\n            if (this.s.currentUpdateBatch)\n                batches.push(this.s.currentUpdateBatch);\n            if (this.s.currentRemoveBatch)\n                batches.push(this.s.currentRemoveBatch);\n        }\n        return batches;\n    }\n    async execute(options = {}) {\n        if (this.s.executed) {\n            throw new error_1.MongoBatchReExecutionError();\n        }\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        if (writeConcern) {\n            this.s.writeConcern = writeConcern;\n        }\n        // If we have current batch\n        if (this.isOrdered) {\n            if (this.s.currentBatch)\n                this.s.batches.push(this.s.currentBatch);\n        }\n        else {\n            if (this.s.currentInsertBatch)\n                this.s.batches.push(this.s.currentInsertBatch);\n            if (this.s.currentUpdateBatch)\n                this.s.batches.push(this.s.currentUpdateBatch);\n            if (this.s.currentRemoveBatch)\n                this.s.batches.push(this.s.currentRemoveBatch);\n        }\n        // If we have no operations in the bulk raise an error\n        if (this.s.batches.length === 0) {\n            throw new error_1.MongoInvalidArgumentError('Invalid BulkOperation, Batch cannot be empty');\n        }\n        this.s.executed = true;\n        const finalOptions = { ...this.s.options, ...options };\n        const operation = new BulkWriteShimOperation(this, finalOptions);\n        return await (0, execute_operation_1.executeOperation)(this.s.collection.client, operation);\n    }\n    /**\n     * Handles the write error before executing commands\n     * @internal\n     */\n    handleWriteError(writeResult) {\n        if (this.s.bulkResult.writeErrors.length > 0) {\n            const msg = this.s.bulkResult.writeErrors[0].errmsg\n                ? this.s.bulkResult.writeErrors[0].errmsg\n                : 'write operation failed';\n            throw new MongoBulkWriteError({\n                message: msg,\n                code: this.s.bulkResult.writeErrors[0].code,\n                writeErrors: this.s.bulkResult.writeErrors\n            }, writeResult);\n        }\n        const writeConcernError = writeResult.getWriteConcernError();\n        if (writeConcernError) {\n            throw new MongoBulkWriteError(writeConcernError, writeResult);\n        }\n    }\n    shouldForceServerObjectId() {\n        return (this.s.options.forceServerObjectId === true ||\n            this.s.collection.s.db.options?.forceServerObjectId === true);\n    }\n}\nexports.BulkOperationBase = BulkOperationBase;\nfunction isInsertBatch(batch) {\n    return batch.batchType === exports.BatchType.INSERT;\n}\nfunction isUpdateBatch(batch) {\n    return batch.batchType === exports.BatchType.UPDATE;\n}\nfunction isDeleteBatch(batch) {\n    return batch.batchType === exports.BatchType.DELETE;\n}\nfunction buildCurrentOp(bulkOp) {\n    let { currentOp } = bulkOp.s;\n    bulkOp.s.currentOp = undefined;\n    if (!currentOp)\n        currentOp = {};\n    return currentOp;\n}\n//# sourceMappingURL=common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bulk/common.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bulk/ordered.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bulk/ordered.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OrderedBulkOperation = void 0;\nconst BSON = __webpack_require__(/*! ../bson */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bulk/common.js\");\n/** @public */\nclass OrderedBulkOperation extends common_1.BulkOperationBase {\n    /** @internal */\n    constructor(collection, options) {\n        super(collection, options, true);\n    }\n    addToOperationsList(batchType, document) {\n        // Get the bsonSize\n        const bsonSize = BSON.calculateObjectSize(document, {\n            checkKeys: false,\n            // Since we don't know what the user selected for BSON options here,\n            // err on the safe side, and check the size with ignoreUndefined: false.\n            ignoreUndefined: false\n        });\n        // Throw error if the doc is bigger than the max BSON size\n        if (bsonSize >= this.s.maxBsonObjectSize)\n            // TODO(NODE-3483): Change this to MongoBSONError\n            throw new error_1.MongoInvalidArgumentError(`Document is larger than the maximum size ${this.s.maxBsonObjectSize}`);\n        // Create a new batch object if we don't have a current one\n        if (this.s.currentBatch == null) {\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n        }\n        const maxKeySize = this.s.maxKeySize;\n        // Check if we need to create a new batch\n        if (\n        // New batch if we exceed the max batch op size\n        this.s.currentBatchSize + 1 >= this.s.maxWriteBatchSize ||\n            // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n            // since we can't sent an empty batch\n            (this.s.currentBatchSize > 0 &&\n                this.s.currentBatchSizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes) ||\n            // New batch if the new op does not have the same op type as the current batch\n            this.s.currentBatch.batchType !== batchType) {\n            // Save the batch to the execution stack\n            this.s.batches.push(this.s.currentBatch);\n            // Create a new batch\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n            // Reset the current size trackers\n            this.s.currentBatchSize = 0;\n            this.s.currentBatchSizeBytes = 0;\n        }\n        if (batchType === common_1.BatchType.INSERT) {\n            this.s.bulkResult.insertedIds.push({\n                index: this.s.currentIndex,\n                _id: document._id\n            });\n        }\n        // We have an array of documents\n        if (Array.isArray(document)) {\n            throw new error_1.MongoInvalidArgumentError('Operation passed in cannot be an Array');\n        }\n        this.s.currentBatch.originalIndexes.push(this.s.currentIndex);\n        this.s.currentBatch.operations.push(document);\n        this.s.currentBatchSize += 1;\n        this.s.currentBatchSizeBytes += maxKeySize + bsonSize;\n        this.s.currentIndex += 1;\n        return this;\n    }\n}\nexports.OrderedBulkOperation = OrderedBulkOperation;\n//# sourceMappingURL=ordered.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9idWxrL29yZGVyZWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCO0FBQzVCLGFBQWEsbUJBQU8sQ0FBQyw0RkFBUztBQUM5QixnQkFBZ0IsbUJBQU8sQ0FBQyw4RkFBVTtBQUNsQyxpQkFBaUIsbUJBQU8sQ0FBQyxvR0FBVTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxvR0FBb0cseUJBQXlCO0FBQzdIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QiIsInNvdXJjZXMiOlsiL1VzZXJzL2xpbmt1cy9HaXRodWIvbW9ub3R3by9wYXlsb2FkLXBsdWdpbi1tZXRhL25vZGVfbW9kdWxlcy8ucG5wbS9tb25nb2RiQDYuMTAuMC9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvYnVsay9vcmRlcmVkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PcmRlcmVkQnVsa09wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IEJTT04gPSByZXF1aXJlKFwiLi4vYnNvblwiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCBjb21tb25fMSA9IHJlcXVpcmUoXCIuL2NvbW1vblwiKTtcbi8qKiBAcHVibGljICovXG5jbGFzcyBPcmRlcmVkQnVsa09wZXJhdGlvbiBleHRlbmRzIGNvbW1vbl8xLkJ1bGtPcGVyYXRpb25CYXNlIHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihjb2xsZWN0aW9uLCBvcHRpb25zLCB0cnVlKTtcbiAgICB9XG4gICAgYWRkVG9PcGVyYXRpb25zTGlzdChiYXRjaFR5cGUsIGRvY3VtZW50KSB7XG4gICAgICAgIC8vIEdldCB0aGUgYnNvblNpemVcbiAgICAgICAgY29uc3QgYnNvblNpemUgPSBCU09OLmNhbGN1bGF0ZU9iamVjdFNpemUoZG9jdW1lbnQsIHtcbiAgICAgICAgICAgIGNoZWNrS2V5czogZmFsc2UsXG4gICAgICAgICAgICAvLyBTaW5jZSB3ZSBkb24ndCBrbm93IHdoYXQgdGhlIHVzZXIgc2VsZWN0ZWQgZm9yIEJTT04gb3B0aW9ucyBoZXJlLFxuICAgICAgICAgICAgLy8gZXJyIG9uIHRoZSBzYWZlIHNpZGUsIGFuZCBjaGVjayB0aGUgc2l6ZSB3aXRoIGlnbm9yZVVuZGVmaW5lZDogZmFsc2UuXG4gICAgICAgICAgICBpZ25vcmVVbmRlZmluZWQ6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBUaHJvdyBlcnJvciBpZiB0aGUgZG9jIGlzIGJpZ2dlciB0aGFuIHRoZSBtYXggQlNPTiBzaXplXG4gICAgICAgIGlmIChic29uU2l6ZSA+PSB0aGlzLnMubWF4QnNvbk9iamVjdFNpemUpXG4gICAgICAgICAgICAvLyBUT0RPKE5PREUtMzQ4Myk6IENoYW5nZSB0aGlzIHRvIE1vbmdvQlNPTkVycm9yXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKGBEb2N1bWVudCBpcyBsYXJnZXIgdGhhbiB0aGUgbWF4aW11bSBzaXplICR7dGhpcy5zLm1heEJzb25PYmplY3RTaXplfWApO1xuICAgICAgICAvLyBDcmVhdGUgYSBuZXcgYmF0Y2ggb2JqZWN0IGlmIHdlIGRvbid0IGhhdmUgYSBjdXJyZW50IG9uZVxuICAgICAgICBpZiAodGhpcy5zLmN1cnJlbnRCYXRjaCA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoID0gbmV3IGNvbW1vbl8xLkJhdGNoKGJhdGNoVHlwZSwgdGhpcy5zLmN1cnJlbnRJbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWF4S2V5U2l6ZSA9IHRoaXMucy5tYXhLZXlTaXplO1xuICAgICAgICAvLyBDaGVjayBpZiB3ZSBuZWVkIHRvIGNyZWF0ZSBhIG5ldyBiYXRjaFxuICAgICAgICBpZiAoXG4gICAgICAgIC8vIE5ldyBiYXRjaCBpZiB3ZSBleGNlZWQgdGhlIG1heCBiYXRjaCBvcCBzaXplXG4gICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2hTaXplICsgMSA+PSB0aGlzLnMubWF4V3JpdGVCYXRjaFNpemUgfHxcbiAgICAgICAgICAgIC8vIE5ldyBiYXRjaCBpZiB3ZSBleGNlZWQgdGhlIG1heEJhdGNoU2l6ZUJ5dGVzLiBPbmx5IG1hdHRlcnMgaWYgYmF0Y2ggYWxyZWFkeSBoYXMgYSBkb2MsXG4gICAgICAgICAgICAvLyBzaW5jZSB3ZSBjYW4ndCBzZW50IGFuIGVtcHR5IGJhdGNoXG4gICAgICAgICAgICAodGhpcy5zLmN1cnJlbnRCYXRjaFNpemUgPiAwICYmXG4gICAgICAgICAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaFNpemVCeXRlcyArIG1heEtleVNpemUgKyBic29uU2l6ZSA+PSB0aGlzLnMubWF4QmF0Y2hTaXplQnl0ZXMpIHx8XG4gICAgICAgICAgICAvLyBOZXcgYmF0Y2ggaWYgdGhlIG5ldyBvcCBkb2VzIG5vdCBoYXZlIHRoZSBzYW1lIG9wIHR5cGUgYXMgdGhlIGN1cnJlbnQgYmF0Y2hcbiAgICAgICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2guYmF0Y2hUeXBlICE9PSBiYXRjaFR5cGUpIHtcbiAgICAgICAgICAgIC8vIFNhdmUgdGhlIGJhdGNoIHRvIHRoZSBleGVjdXRpb24gc3RhY2tcbiAgICAgICAgICAgIHRoaXMucy5iYXRjaGVzLnB1c2godGhpcy5zLmN1cnJlbnRCYXRjaCk7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSBuZXcgYmF0Y2hcbiAgICAgICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2ggPSBuZXcgY29tbW9uXzEuQmF0Y2goYmF0Y2hUeXBlLCB0aGlzLnMuY3VycmVudEluZGV4KTtcbiAgICAgICAgICAgIC8vIFJlc2V0IHRoZSBjdXJyZW50IHNpemUgdHJhY2tlcnNcbiAgICAgICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2hTaXplID0gMDtcbiAgICAgICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2hTaXplQnl0ZXMgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiYXRjaFR5cGUgPT09IGNvbW1vbl8xLkJhdGNoVHlwZS5JTlNFUlQpIHtcbiAgICAgICAgICAgIHRoaXMucy5idWxrUmVzdWx0Lmluc2VydGVkSWRzLnB1c2goe1xuICAgICAgICAgICAgICAgIGluZGV4OiB0aGlzLnMuY3VycmVudEluZGV4LFxuICAgICAgICAgICAgICAgIF9pZDogZG9jdW1lbnQuX2lkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBXZSBoYXZlIGFuIGFycmF5IG9mIGRvY3VtZW50c1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShkb2N1bWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ09wZXJhdGlvbiBwYXNzZWQgaW4gY2Fubm90IGJlIGFuIEFycmF5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaC5vcmlnaW5hbEluZGV4ZXMucHVzaCh0aGlzLnMuY3VycmVudEluZGV4KTtcbiAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaC5vcGVyYXRpb25zLnB1c2goZG9jdW1lbnQpO1xuICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoU2l6ZSArPSAxO1xuICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoU2l6ZUJ5dGVzICs9IG1heEtleVNpemUgKyBic29uU2l6ZTtcbiAgICAgICAgdGhpcy5zLmN1cnJlbnRJbmRleCArPSAxO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5leHBvcnRzLk9yZGVyZWRCdWxrT3BlcmF0aW9uID0gT3JkZXJlZEJ1bGtPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vcmRlcmVkLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bulk/ordered.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bulk/unordered.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bulk/unordered.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UnorderedBulkOperation = void 0;\nconst BSON = __webpack_require__(/*! ../bson */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bulk/common.js\");\n/** @public */\nclass UnorderedBulkOperation extends common_1.BulkOperationBase {\n    /** @internal */\n    constructor(collection, options) {\n        super(collection, options, false);\n    }\n    handleWriteError(writeResult) {\n        if (this.s.batches.length) {\n            return;\n        }\n        return super.handleWriteError(writeResult);\n    }\n    addToOperationsList(batchType, document) {\n        // Get the bsonSize\n        const bsonSize = BSON.calculateObjectSize(document, {\n            checkKeys: false,\n            // Since we don't know what the user selected for BSON options here,\n            // err on the safe side, and check the size with ignoreUndefined: false.\n            ignoreUndefined: false\n        });\n        // Throw error if the doc is bigger than the max BSON size\n        if (bsonSize >= this.s.maxBsonObjectSize) {\n            // TODO(NODE-3483): Change this to MongoBSONError\n            throw new error_1.MongoInvalidArgumentError(`Document is larger than the maximum size ${this.s.maxBsonObjectSize}`);\n        }\n        // Holds the current batch\n        this.s.currentBatch = undefined;\n        // Get the right type of batch\n        if (batchType === common_1.BatchType.INSERT) {\n            this.s.currentBatch = this.s.currentInsertBatch;\n        }\n        else if (batchType === common_1.BatchType.UPDATE) {\n            this.s.currentBatch = this.s.currentUpdateBatch;\n        }\n        else if (batchType === common_1.BatchType.DELETE) {\n            this.s.currentBatch = this.s.currentRemoveBatch;\n        }\n        const maxKeySize = this.s.maxKeySize;\n        // Create a new batch object if we don't have a current one\n        if (this.s.currentBatch == null) {\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n        }\n        // Check if we need to create a new batch\n        if (\n        // New batch if we exceed the max batch op size\n        this.s.currentBatch.size + 1 >= this.s.maxWriteBatchSize ||\n            // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n            // since we can't sent an empty batch\n            (this.s.currentBatch.size > 0 &&\n                this.s.currentBatch.sizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes) ||\n            // New batch if the new op does not have the same op type as the current batch\n            this.s.currentBatch.batchType !== batchType) {\n            // Save the batch to the execution stack\n            this.s.batches.push(this.s.currentBatch);\n            // Create a new batch\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n        }\n        // We have an array of documents\n        if (Array.isArray(document)) {\n            throw new error_1.MongoInvalidArgumentError('Operation passed in cannot be an Array');\n        }\n        this.s.currentBatch.operations.push(document);\n        this.s.currentBatch.originalIndexes.push(this.s.currentIndex);\n        this.s.currentIndex = this.s.currentIndex + 1;\n        // Save back the current Batch to the right type\n        if (batchType === common_1.BatchType.INSERT) {\n            this.s.currentInsertBatch = this.s.currentBatch;\n            this.s.bulkResult.insertedIds.push({\n                index: this.s.bulkResult.insertedIds.length,\n                _id: document._id\n            });\n        }\n        else if (batchType === common_1.BatchType.UPDATE) {\n            this.s.currentUpdateBatch = this.s.currentBatch;\n        }\n        else if (batchType === common_1.BatchType.DELETE) {\n            this.s.currentRemoveBatch = this.s.currentBatch;\n        }\n        // Update current batch size\n        this.s.currentBatch.size += 1;\n        this.s.currentBatch.sizeBytes += maxKeySize + bsonSize;\n        return this;\n    }\n}\nexports.UnorderedBulkOperation = UnorderedBulkOperation;\n//# sourceMappingURL=unordered.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9idWxrL3Vub3JkZXJlZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw4QkFBOEI7QUFDOUIsYUFBYSxtQkFBTyxDQUFDLDRGQUFTO0FBQzlCLGdCQUFnQixtQkFBTyxDQUFDLDhGQUFVO0FBQ2xDLGlCQUFpQixtQkFBTyxDQUFDLG9HQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLG9HQUFvRyx5QkFBeUI7QUFDN0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9saW5rdXMvR2l0aHViL21vbm90d28vcGF5bG9hZC1wbHVnaW4tbWV0YS9ub2RlX21vZHVsZXMvLnBucG0vbW9uZ29kYkA2LjEwLjAvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2J1bGsvdW5vcmRlcmVkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Vbm9yZGVyZWRCdWxrT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgQlNPTiA9IHJlcXVpcmUoXCIuLi9ic29uXCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IGNvbW1vbl8xID0gcmVxdWlyZShcIi4vY29tbW9uXCIpO1xuLyoqIEBwdWJsaWMgKi9cbmNsYXNzIFVub3JkZXJlZEJ1bGtPcGVyYXRpb24gZXh0ZW5kcyBjb21tb25fMS5CdWxrT3BlcmF0aW9uQmFzZSB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoY29sbGVjdGlvbiwgb3B0aW9ucywgZmFsc2UpO1xuICAgIH1cbiAgICBoYW5kbGVXcml0ZUVycm9yKHdyaXRlUmVzdWx0KSB7XG4gICAgICAgIGlmICh0aGlzLnMuYmF0Y2hlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIuaGFuZGxlV3JpdGVFcnJvcih3cml0ZVJlc3VsdCk7XG4gICAgfVxuICAgIGFkZFRvT3BlcmF0aW9uc0xpc3QoYmF0Y2hUeXBlLCBkb2N1bWVudCkge1xuICAgICAgICAvLyBHZXQgdGhlIGJzb25TaXplXG4gICAgICAgIGNvbnN0IGJzb25TaXplID0gQlNPTi5jYWxjdWxhdGVPYmplY3RTaXplKGRvY3VtZW50LCB7XG4gICAgICAgICAgICBjaGVja0tleXM6IGZhbHNlLFxuICAgICAgICAgICAgLy8gU2luY2Ugd2UgZG9uJ3Qga25vdyB3aGF0IHRoZSB1c2VyIHNlbGVjdGVkIGZvciBCU09OIG9wdGlvbnMgaGVyZSxcbiAgICAgICAgICAgIC8vIGVyciBvbiB0aGUgc2FmZSBzaWRlLCBhbmQgY2hlY2sgdGhlIHNpemUgd2l0aCBpZ25vcmVVbmRlZmluZWQ6IGZhbHNlLlxuICAgICAgICAgICAgaWdub3JlVW5kZWZpbmVkOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gVGhyb3cgZXJyb3IgaWYgdGhlIGRvYyBpcyBiaWdnZXIgdGhhbiB0aGUgbWF4IEJTT04gc2l6ZVxuICAgICAgICBpZiAoYnNvblNpemUgPj0gdGhpcy5zLm1heEJzb25PYmplY3RTaXplKSB7XG4gICAgICAgICAgICAvLyBUT0RPKE5PREUtMzQ4Myk6IENoYW5nZSB0aGlzIHRvIE1vbmdvQlNPTkVycm9yXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKGBEb2N1bWVudCBpcyBsYXJnZXIgdGhhbiB0aGUgbWF4aW11bSBzaXplICR7dGhpcy5zLm1heEJzb25PYmplY3RTaXplfWApO1xuICAgICAgICB9XG4gICAgICAgIC8vIEhvbGRzIHRoZSBjdXJyZW50IGJhdGNoXG4gICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2ggPSB1bmRlZmluZWQ7XG4gICAgICAgIC8vIEdldCB0aGUgcmlnaHQgdHlwZSBvZiBiYXRjaFxuICAgICAgICBpZiAoYmF0Y2hUeXBlID09PSBjb21tb25fMS5CYXRjaFR5cGUuSU5TRVJUKSB7XG4gICAgICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoID0gdGhpcy5zLmN1cnJlbnRJbnNlcnRCYXRjaDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChiYXRjaFR5cGUgPT09IGNvbW1vbl8xLkJhdGNoVHlwZS5VUERBVEUpIHtcbiAgICAgICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2ggPSB0aGlzLnMuY3VycmVudFVwZGF0ZUJhdGNoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGJhdGNoVHlwZSA9PT0gY29tbW9uXzEuQmF0Y2hUeXBlLkRFTEVURSkge1xuICAgICAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaCA9IHRoaXMucy5jdXJyZW50UmVtb3ZlQmF0Y2g7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWF4S2V5U2l6ZSA9IHRoaXMucy5tYXhLZXlTaXplO1xuICAgICAgICAvLyBDcmVhdGUgYSBuZXcgYmF0Y2ggb2JqZWN0IGlmIHdlIGRvbid0IGhhdmUgYSBjdXJyZW50IG9uZVxuICAgICAgICBpZiAodGhpcy5zLmN1cnJlbnRCYXRjaCA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoID0gbmV3IGNvbW1vbl8xLkJhdGNoKGJhdGNoVHlwZSwgdGhpcy5zLmN1cnJlbnRJbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2hlY2sgaWYgd2UgbmVlZCB0byBjcmVhdGUgYSBuZXcgYmF0Y2hcbiAgICAgICAgaWYgKFxuICAgICAgICAvLyBOZXcgYmF0Y2ggaWYgd2UgZXhjZWVkIHRoZSBtYXggYmF0Y2ggb3Agc2l6ZVxuICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoLnNpemUgKyAxID49IHRoaXMucy5tYXhXcml0ZUJhdGNoU2l6ZSB8fFxuICAgICAgICAgICAgLy8gTmV3IGJhdGNoIGlmIHdlIGV4Y2VlZCB0aGUgbWF4QmF0Y2hTaXplQnl0ZXMuIE9ubHkgbWF0dGVycyBpZiBiYXRjaCBhbHJlYWR5IGhhcyBhIGRvYyxcbiAgICAgICAgICAgIC8vIHNpbmNlIHdlIGNhbid0IHNlbnQgYW4gZW1wdHkgYmF0Y2hcbiAgICAgICAgICAgICh0aGlzLnMuY3VycmVudEJhdGNoLnNpemUgPiAwICYmXG4gICAgICAgICAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaC5zaXplQnl0ZXMgKyBtYXhLZXlTaXplICsgYnNvblNpemUgPj0gdGhpcy5zLm1heEJhdGNoU2l6ZUJ5dGVzKSB8fFxuICAgICAgICAgICAgLy8gTmV3IGJhdGNoIGlmIHRoZSBuZXcgb3AgZG9lcyBub3QgaGF2ZSB0aGUgc2FtZSBvcCB0eXBlIGFzIHRoZSBjdXJyZW50IGJhdGNoXG4gICAgICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoLmJhdGNoVHlwZSAhPT0gYmF0Y2hUeXBlKSB7XG4gICAgICAgICAgICAvLyBTYXZlIHRoZSBiYXRjaCB0byB0aGUgZXhlY3V0aW9uIHN0YWNrXG4gICAgICAgICAgICB0aGlzLnMuYmF0Y2hlcy5wdXNoKHRoaXMucy5jdXJyZW50QmF0Y2gpO1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IGJhdGNoXG4gICAgICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoID0gbmV3IGNvbW1vbl8xLkJhdGNoKGJhdGNoVHlwZSwgdGhpcy5zLmN1cnJlbnRJbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2UgaGF2ZSBhbiBhcnJheSBvZiBkb2N1bWVudHNcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZG9jdW1lbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdPcGVyYXRpb24gcGFzc2VkIGluIGNhbm5vdCBiZSBhbiBBcnJheScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2gub3BlcmF0aW9ucy5wdXNoKGRvY3VtZW50KTtcbiAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaC5vcmlnaW5hbEluZGV4ZXMucHVzaCh0aGlzLnMuY3VycmVudEluZGV4KTtcbiAgICAgICAgdGhpcy5zLmN1cnJlbnRJbmRleCA9IHRoaXMucy5jdXJyZW50SW5kZXggKyAxO1xuICAgICAgICAvLyBTYXZlIGJhY2sgdGhlIGN1cnJlbnQgQmF0Y2ggdG8gdGhlIHJpZ2h0IHR5cGVcbiAgICAgICAgaWYgKGJhdGNoVHlwZSA9PT0gY29tbW9uXzEuQmF0Y2hUeXBlLklOU0VSVCkge1xuICAgICAgICAgICAgdGhpcy5zLmN1cnJlbnRJbnNlcnRCYXRjaCA9IHRoaXMucy5jdXJyZW50QmF0Y2g7XG4gICAgICAgICAgICB0aGlzLnMuYnVsa1Jlc3VsdC5pbnNlcnRlZElkcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBpbmRleDogdGhpcy5zLmJ1bGtSZXN1bHQuaW5zZXJ0ZWRJZHMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIF9pZDogZG9jdW1lbnQuX2lkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChiYXRjaFR5cGUgPT09IGNvbW1vbl8xLkJhdGNoVHlwZS5VUERBVEUpIHtcbiAgICAgICAgICAgIHRoaXMucy5jdXJyZW50VXBkYXRlQmF0Y2ggPSB0aGlzLnMuY3VycmVudEJhdGNoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGJhdGNoVHlwZSA9PT0gY29tbW9uXzEuQmF0Y2hUeXBlLkRFTEVURSkge1xuICAgICAgICAgICAgdGhpcy5zLmN1cnJlbnRSZW1vdmVCYXRjaCA9IHRoaXMucy5jdXJyZW50QmF0Y2g7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXBkYXRlIGN1cnJlbnQgYmF0Y2ggc2l6ZVxuICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoLnNpemUgKz0gMTtcbiAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaC5zaXplQnl0ZXMgKz0gbWF4S2V5U2l6ZSArIGJzb25TaXplO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5leHBvcnRzLlVub3JkZXJlZEJ1bGtPcGVyYXRpb24gPSBVbm9yZGVyZWRCdWxrT3BlcmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dW5vcmRlcmVkLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bulk/unordered.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/change_stream.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/change_stream.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChangeStream = void 0;\nconst collection_1 = __webpack_require__(/*! ./collection */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/collection.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/constants.js\");\nconst change_stream_cursor_1 = __webpack_require__(/*! ./cursor/change_stream_cursor */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/change_stream_cursor.js\");\nconst db_1 = __webpack_require__(/*! ./db */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/db.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst mongo_client_1 = __webpack_require__(/*! ./mongo_client */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_client.js\");\nconst mongo_types_1 = __webpack_require__(/*! ./mongo_types */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_types.js\");\nconst resource_management_1 = __webpack_require__(/*! ./resource_management */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/resource_management.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\n/** @internal */\nconst kCursorStream = Symbol('cursorStream');\n/** @internal */\nconst kClosed = Symbol('closed');\n/** @internal */\nconst kMode = Symbol('mode');\nconst CHANGE_STREAM_OPTIONS = [\n    'resumeAfter',\n    'startAfter',\n    'startAtOperationTime',\n    'fullDocument',\n    'fullDocumentBeforeChange',\n    'showExpandedEvents'\n];\nconst CHANGE_DOMAIN_TYPES = {\n    COLLECTION: Symbol('Collection'),\n    DATABASE: Symbol('Database'),\n    CLUSTER: Symbol('Cluster')\n};\nconst CHANGE_STREAM_EVENTS = [constants_1.RESUME_TOKEN_CHANGED, constants_1.END, constants_1.CLOSE];\nconst NO_RESUME_TOKEN_ERROR = 'A change stream document has been received that lacks a resume token (_id).';\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\nclass ChangeStream extends mongo_types_1.TypedEventEmitter {\n    /** @internal */\n    async asyncDispose() {\n        await this.close();\n    }\n    /**\n     * @internal\n     *\n     * @param parent - The parent object that created this change stream\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n     */\n    constructor(parent, pipeline = [], options = {}) {\n        super();\n        this.pipeline = pipeline;\n        this.options = { ...options };\n        delete this.options.writeConcern;\n        if (parent instanceof collection_1.Collection) {\n            this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n        }\n        else if (parent instanceof db_1.Db) {\n            this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n        }\n        else if (parent instanceof mongo_client_1.MongoClient) {\n            this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n        }\n        else {\n            throw new error_1.MongoChangeStreamError('Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient');\n        }\n        this.parent = parent;\n        this.namespace = parent.s.namespace;\n        if (!this.options.readPreference && parent.readPreference) {\n            this.options.readPreference = parent.readPreference;\n        }\n        // Create contained Change Stream cursor\n        this.cursor = this._createChangeStreamCursor(options);\n        this[kClosed] = false;\n        this[kMode] = false;\n        // Listen for any `change` listeners being added to ChangeStream\n        this.on('newListener', eventName => {\n            if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n                this._streamEvents(this.cursor);\n            }\n        });\n        this.on('removeListener', eventName => {\n            if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n                this[kCursorStream]?.removeAllListeners('data');\n            }\n        });\n    }\n    /** @internal */\n    get cursorStream() {\n        return this[kCursorStream];\n    }\n    /** The cached resume token that is used to resume after the most recently returned change. */\n    get resumeToken() {\n        return this.cursor?.resumeToken;\n    }\n    /** Check if there is any document still available in the Change Stream */\n    async hasNext() {\n        this._setIsIterator();\n        // Change streams must resume indefinitely while each resume event succeeds.\n        // This loop continues until either a change event is received or until a resume attempt\n        // fails.\n        while (true) {\n            try {\n                const hasNext = await this.cursor.hasNext();\n                return hasNext;\n            }\n            catch (error) {\n                try {\n                    await this._processErrorIteratorMode(error);\n                }\n                catch (error) {\n                    try {\n                        await this.close();\n                    }\n                    catch (error) {\n                        (0, utils_1.squashError)(error);\n                    }\n                    throw error;\n                }\n            }\n        }\n    }\n    /** Get the next available document from the Change Stream. */\n    async next() {\n        this._setIsIterator();\n        // Change streams must resume indefinitely while each resume event succeeds.\n        // This loop continues until either a change event is received or until a resume attempt\n        // fails.\n        while (true) {\n            try {\n                const change = await this.cursor.next();\n                const processedChange = this._processChange(change ?? null);\n                return processedChange;\n            }\n            catch (error) {\n                try {\n                    await this._processErrorIteratorMode(error);\n                }\n                catch (error) {\n                    try {\n                        await this.close();\n                    }\n                    catch (error) {\n                        (0, utils_1.squashError)(error);\n                    }\n                    throw error;\n                }\n            }\n        }\n    }\n    /**\n     * Try to get the next available document from the Change Stream's cursor or `null` if an empty batch is returned\n     */\n    async tryNext() {\n        this._setIsIterator();\n        // Change streams must resume indefinitely while each resume event succeeds.\n        // This loop continues until either a change event is received or until a resume attempt\n        // fails.\n        while (true) {\n            try {\n                const change = await this.cursor.tryNext();\n                return change ?? null;\n            }\n            catch (error) {\n                try {\n                    await this._processErrorIteratorMode(error);\n                }\n                catch (error) {\n                    try {\n                        await this.close();\n                    }\n                    catch (error) {\n                        (0, utils_1.squashError)(error);\n                    }\n                    throw error;\n                }\n            }\n        }\n    }\n    async *[Symbol.asyncIterator]() {\n        if (this.closed) {\n            return;\n        }\n        try {\n            // Change streams run indefinitely as long as errors are resumable\n            // So the only loop breaking condition is if `next()` throws\n            while (true) {\n                yield await this.next();\n            }\n        }\n        finally {\n            try {\n                await this.close();\n            }\n            catch (error) {\n                (0, utils_1.squashError)(error);\n            }\n        }\n    }\n    /** Is the cursor closed */\n    get closed() {\n        return this[kClosed] || this.cursor.closed;\n    }\n    /**\n     * Frees the internal resources used by the change stream.\n     */\n    async close() {\n        this[kClosed] = true;\n        const cursor = this.cursor;\n        try {\n            await cursor.close();\n        }\n        finally {\n            this._endStream();\n        }\n    }\n    /**\n     * Return a modified Readable stream including a possible transform method.\n     *\n     * NOTE: When using a Stream to process change stream events, the stream will\n     * NOT automatically resume in the case a resumable error is encountered.\n     *\n     * @throws MongoChangeStreamError if the underlying cursor or the change stream is closed\n     */\n    stream(options) {\n        if (this.closed) {\n            throw new error_1.MongoChangeStreamError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        this.streamOptions = options;\n        return this.cursor.stream(options);\n    }\n    /** @internal */\n    _setIsEmitter() {\n        if (this[kMode] === 'iterator') {\n            // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n            throw new error_1.MongoAPIError('ChangeStream cannot be used as an EventEmitter after being used as an iterator');\n        }\n        this[kMode] = 'emitter';\n    }\n    /** @internal */\n    _setIsIterator() {\n        if (this[kMode] === 'emitter') {\n            // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n            throw new error_1.MongoAPIError('ChangeStream cannot be used as an iterator after being used as an EventEmitter');\n        }\n        this[kMode] = 'iterator';\n    }\n    /**\n     * Create a new change stream cursor based on self's configuration\n     * @internal\n     */\n    _createChangeStreamCursor(options) {\n        const changeStreamStageOptions = (0, utils_1.filterOptions)(options, CHANGE_STREAM_OPTIONS);\n        if (this.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n            changeStreamStageOptions.allChangesForCluster = true;\n        }\n        const pipeline = [{ $changeStream: changeStreamStageOptions }, ...this.pipeline];\n        const client = this.type === CHANGE_DOMAIN_TYPES.CLUSTER\n            ? this.parent\n            : this.type === CHANGE_DOMAIN_TYPES.DATABASE\n                ? this.parent.client\n                : this.type === CHANGE_DOMAIN_TYPES.COLLECTION\n                    ? this.parent.client\n                    : null;\n        if (client == null) {\n            // This should never happen because of the assertion in the constructor\n            throw new error_1.MongoRuntimeError(`Changestream type should only be one of cluster, database, collection. Found ${this.type.toString()}`);\n        }\n        const changeStreamCursor = new change_stream_cursor_1.ChangeStreamCursor(client, this.namespace, pipeline, options);\n        for (const event of CHANGE_STREAM_EVENTS) {\n            changeStreamCursor.on(event, e => this.emit(event, e));\n        }\n        if (this.listenerCount(ChangeStream.CHANGE) > 0) {\n            this._streamEvents(changeStreamCursor);\n        }\n        return changeStreamCursor;\n    }\n    /** @internal */\n    _closeEmitterModeWithError(error) {\n        this.emit(ChangeStream.ERROR, error);\n        this.close().then(undefined, utils_1.squashError);\n    }\n    /** @internal */\n    _streamEvents(cursor) {\n        this._setIsEmitter();\n        const stream = this[kCursorStream] ?? cursor.stream();\n        this[kCursorStream] = stream;\n        stream.on('data', change => {\n            try {\n                const processedChange = this._processChange(change);\n                this.emit(ChangeStream.CHANGE, processedChange);\n            }\n            catch (error) {\n                this.emit(ChangeStream.ERROR, error);\n            }\n        });\n        stream.on('error', error => this._processErrorStreamMode(error));\n    }\n    /** @internal */\n    _endStream() {\n        const cursorStream = this[kCursorStream];\n        if (cursorStream) {\n            ['data', 'close', 'end', 'error'].forEach(event => cursorStream.removeAllListeners(event));\n            cursorStream.destroy();\n        }\n        this[kCursorStream] = undefined;\n    }\n    /** @internal */\n    _processChange(change) {\n        if (this[kClosed]) {\n            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n            throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        // a null change means the cursor has been notified, implicitly closing the change stream\n        if (change == null) {\n            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n            throw new error_1.MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        if (change && !change._id) {\n            throw new error_1.MongoChangeStreamError(NO_RESUME_TOKEN_ERROR);\n        }\n        // cache the resume token\n        this.cursor.cacheResumeToken(change._id);\n        // wipe the startAtOperationTime if there was one so that there won't be a conflict\n        // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n        this.options.startAtOperationTime = undefined;\n        return change;\n    }\n    /** @internal */\n    _processErrorStreamMode(changeStreamError) {\n        // If the change stream has been closed explicitly, do not process error.\n        if (this[kClosed])\n            return;\n        if (this.cursor.id != null && (0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion)) {\n            this._endStream();\n            this.cursor.close().then(undefined, utils_1.squashError);\n            const topology = (0, utils_1.getTopology)(this.parent);\n            topology\n                .selectServer(this.cursor.readPreference, {\n                operationName: 'reconnect topology in change stream'\n            })\n                .then(() => {\n                this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n            }, () => this._closeEmitterModeWithError(changeStreamError));\n        }\n        else {\n            this._closeEmitterModeWithError(changeStreamError);\n        }\n    }\n    /** @internal */\n    async _processErrorIteratorMode(changeStreamError) {\n        if (this[kClosed]) {\n            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n            throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        if (this.cursor.id == null ||\n            !(0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion)) {\n            try {\n                await this.close();\n            }\n            catch (error) {\n                (0, utils_1.squashError)(error);\n            }\n            throw changeStreamError;\n        }\n        try {\n            await this.cursor.close();\n        }\n        catch (error) {\n            (0, utils_1.squashError)(error);\n        }\n        const topology = (0, utils_1.getTopology)(this.parent);\n        try {\n            await topology.selectServer(this.cursor.readPreference, {\n                operationName: 'reconnect topology in change stream'\n            });\n            this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n        }\n        catch {\n            // if the topology can't reconnect, close the stream\n            await this.close();\n            throw changeStreamError;\n        }\n    }\n}\nexports.ChangeStream = ChangeStream;\n/** @event */\nChangeStream.RESPONSE = constants_1.RESPONSE;\n/** @event */\nChangeStream.MORE = constants_1.MORE;\n/** @event */\nChangeStream.INIT = constants_1.INIT;\n/** @event */\nChangeStream.CLOSE = constants_1.CLOSE;\n/**\n * Fired for each new matching change in the specified namespace. Attaching a `change`\n * event listener to a Change Stream will switch the stream into flowing mode. Data will\n * then be passed as soon as it is available.\n * @event\n */\nChangeStream.CHANGE = constants_1.CHANGE;\n/** @event */\nChangeStream.END = constants_1.END;\n/** @event */\nChangeStream.ERROR = constants_1.ERROR;\n/**\n * Emitted each time the change stream stores a new resume token.\n * @event\n */\nChangeStream.RESUME_TOKEN_CHANGED = constants_1.RESUME_TOKEN_CHANGED;\n(0, resource_management_1.configureResourceManagement)(ChangeStream.prototype);\n//# sourceMappingURL=change_stream.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/change_stream.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js":
/*!**************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AutoEncrypter = exports.AutoEncryptionLoggerLevel = void 0;\nconst net = __webpack_require__(/*! net */ \"net\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/constants.js\");\nconst deps_1 = __webpack_require__(/*! ../deps */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst mongo_client_1 = __webpack_require__(/*! ../mongo_client */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_client.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst client_encryption_1 = __webpack_require__(/*! ./client_encryption */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/client_encryption.js\");\nconst cryptoCallbacks = __webpack_require__(/*! ./crypto_callbacks */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/errors.js\");\nconst mongocryptd_manager_1 = __webpack_require__(/*! ./mongocryptd_manager */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/mongocryptd_manager.js\");\nconst providers_1 = __webpack_require__(/*! ./providers */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/providers/index.js\");\nconst state_machine_1 = __webpack_require__(/*! ./state_machine */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/state_machine.js\");\n/** @public */\nexports.AutoEncryptionLoggerLevel = Object.freeze({\n    FatalError: 0,\n    Error: 1,\n    Warning: 2,\n    Info: 3,\n    Trace: 4\n});\n/**\n * @internal An internal class to be used by the driver for auto encryption\n * **NOTE**: Not meant to be instantiated directly, this is for internal use only.\n */\nclass AutoEncrypter {\n    /** @internal */\n    static getMongoCrypt() {\n        const encryption = (0, deps_1.getMongoDBClientEncryption)();\n        if ('kModuleError' in encryption) {\n            throw encryption.kModuleError;\n        }\n        return encryption.MongoCrypt;\n    }\n    /**\n     * Create an AutoEncrypter\n     *\n     * **Note**: Do not instantiate this class directly. Rather, supply the relevant options to a MongoClient\n     *\n     * **Note**: Supplying `options.schemaMap` provides more security than relying on JSON Schemas obtained from the server.\n     * It protects against a malicious server advertising a false JSON Schema, which could trick the client into sending unencrypted data that should be encrypted.\n     * Schemas supplied in the schemaMap only apply to configuring automatic encryption for Client-Side Field Level Encryption.\n     * Other validation rules in the JSON schema will not be enforced by the driver and will result in an error.\n     *\n     * @example <caption>Create an AutoEncrypter that makes use of mongocryptd</caption>\n     * ```ts\n     * // Enabling autoEncryption via a MongoClient using mongocryptd\n     * const { MongoClient } = require('mongodb');\n     * const client = new MongoClient(URL, {\n     *   autoEncryption: {\n     *     kmsProviders: {\n     *       aws: {\n     *         accessKeyId: AWS_ACCESS_KEY,\n     *         secretAccessKey: AWS_SECRET_KEY\n     *       }\n     *     }\n     *   }\n     * });\n     * ```\n     *\n     * await client.connect();\n     * // From here on, the client will be encrypting / decrypting automatically\n     * @example <caption>Create an AutoEncrypter that makes use of libmongocrypt's CSFLE shared library</caption>\n     * ```ts\n     * // Enabling autoEncryption via a MongoClient using CSFLE shared library\n     * const { MongoClient } = require('mongodb');\n     * const client = new MongoClient(URL, {\n     *   autoEncryption: {\n     *     kmsProviders: {\n     *       aws: {}\n     *     },\n     *     extraOptions: {\n     *       cryptSharedLibPath: '/path/to/local/crypt/shared/lib',\n     *       cryptSharedLibRequired: true\n     *     }\n     *   }\n     * });\n     * ```\n     *\n     * await client.connect();\n     * // From here on, the client will be encrypting / decrypting automatically\n     */\n    constructor(client, options) {\n        /**\n         * Used by devtools to enable decorating decryption results.\n         *\n         * When set and enabled, `decrypt` will automatically recursively\n         * traverse a decrypted document and if a field has been decrypted,\n         * it will mark it as decrypted.  Compass uses this to determine which\n         * fields were decrypted.\n         */\n        this[_a] = false;\n        this._client = client;\n        this._bypassEncryption = options.bypassAutoEncryption === true;\n        this._keyVaultNamespace = options.keyVaultNamespace || 'admin.datakeys';\n        this._keyVaultClient = options.keyVaultClient || client;\n        this._metaDataClient = options.metadataClient || client;\n        this._proxyOptions = options.proxyOptions || {};\n        this._tlsOptions = options.tlsOptions || {};\n        this._kmsProviders = options.kmsProviders || {};\n        const mongoCryptOptions = {\n            cryptoCallbacks\n        };\n        if (options.schemaMap) {\n            mongoCryptOptions.schemaMap = Buffer.isBuffer(options.schemaMap)\n                ? options.schemaMap\n                : (0, bson_1.serialize)(options.schemaMap);\n        }\n        if (options.encryptedFieldsMap) {\n            mongoCryptOptions.encryptedFieldsMap = Buffer.isBuffer(options.encryptedFieldsMap)\n                ? options.encryptedFieldsMap\n                : (0, bson_1.serialize)(options.encryptedFieldsMap);\n        }\n        mongoCryptOptions.kmsProviders = !Buffer.isBuffer(this._kmsProviders)\n            ? (0, bson_1.serialize)(this._kmsProviders)\n            : this._kmsProviders;\n        if (options.options?.logger) {\n            mongoCryptOptions.logger = options.options.logger;\n        }\n        if (options.extraOptions && options.extraOptions.cryptSharedLibPath) {\n            mongoCryptOptions.cryptSharedLibPath = options.extraOptions.cryptSharedLibPath;\n        }\n        if (options.bypassQueryAnalysis) {\n            mongoCryptOptions.bypassQueryAnalysis = options.bypassQueryAnalysis;\n        }\n        this._bypassMongocryptdAndCryptShared = this._bypassEncryption || !!options.bypassQueryAnalysis;\n        if (options.extraOptions && options.extraOptions.cryptSharedLibSearchPaths) {\n            // Only for driver testing\n            mongoCryptOptions.cryptSharedLibSearchPaths = options.extraOptions.cryptSharedLibSearchPaths;\n        }\n        else if (!this._bypassMongocryptdAndCryptShared) {\n            mongoCryptOptions.cryptSharedLibSearchPaths = ['$SYSTEM'];\n        }\n        const MongoCrypt = AutoEncrypter.getMongoCrypt();\n        this._mongocrypt = new MongoCrypt(mongoCryptOptions);\n        this._contextCounter = 0;\n        if (options.extraOptions &&\n            options.extraOptions.cryptSharedLibRequired &&\n            !this.cryptSharedLibVersionInfo) {\n            throw new errors_1.MongoCryptInvalidArgumentError('`cryptSharedLibRequired` set but no crypt_shared library loaded');\n        }\n        // Only instantiate mongocryptd manager/client once we know for sure\n        // that we are not using the CSFLE shared library.\n        if (!this._bypassMongocryptdAndCryptShared && !this.cryptSharedLibVersionInfo) {\n            this._mongocryptdManager = new mongocryptd_manager_1.MongocryptdManager(options.extraOptions);\n            const clientOptions = {\n                serverSelectionTimeoutMS: 10000\n            };\n            if ((options.extraOptions == null || typeof options.extraOptions.mongocryptdURI !== 'string') &&\n                !net.getDefaultAutoSelectFamily) {\n                // Only set family if autoSelectFamily options are not supported.\n                clientOptions.family = 4;\n            }\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore: TS complains as this always returns true on versions where it is present.\n            if (net.getDefaultAutoSelectFamily) {\n                Object.assign(clientOptions, (0, client_encryption_1.autoSelectSocketOptions)(this._client.options));\n            }\n            this._mongocryptdClient = new mongo_client_1.MongoClient(this._mongocryptdManager.uri, clientOptions);\n        }\n    }\n    /**\n     * Initializes the auto encrypter by spawning a mongocryptd and connecting to it.\n     *\n     * This function is a no-op when bypassSpawn is set or the crypt shared library is used.\n     */\n    async init() {\n        if (this._bypassMongocryptdAndCryptShared || this.cryptSharedLibVersionInfo) {\n            return;\n        }\n        if (!this._mongocryptdManager) {\n            throw new error_1.MongoRuntimeError('Reached impossible state: mongocryptdManager is undefined when neither bypassSpawn nor the shared lib are specified.');\n        }\n        if (!this._mongocryptdClient) {\n            throw new error_1.MongoRuntimeError('Reached impossible state: mongocryptdClient is undefined when neither bypassSpawn nor the shared lib are specified.');\n        }\n        if (!this._mongocryptdManager.bypassSpawn) {\n            await this._mongocryptdManager.spawn();\n        }\n        try {\n            const client = await this._mongocryptdClient.connect();\n            return client;\n        }\n        catch (error) {\n            const { message } = error;\n            if (message && (message.match(/timed out after/) || message.match(/ENOTFOUND/))) {\n                throw new error_1.MongoRuntimeError('Unable to connect to `mongocryptd`, please make sure it is running or in your PATH for auto-spawn', { cause: error });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Cleans up the `_mongocryptdClient`, if present.\n     */\n    async teardown(force) {\n        await this._mongocryptdClient?.close(force);\n    }\n    /**\n     * Encrypt a command for a given namespace.\n     */\n    async encrypt(ns, cmd, options = {}) {\n        if (this._bypassEncryption) {\n            // If `bypassAutoEncryption` has been specified, don't encrypt\n            return cmd;\n        }\n        const commandBuffer = Buffer.isBuffer(cmd) ? cmd : (0, bson_1.serialize)(cmd, options);\n        const context = this._mongocrypt.makeEncryptionContext(utils_1.MongoDBCollectionNamespace.fromString(ns).db, commandBuffer);\n        context.id = this._contextCounter++;\n        context.ns = ns;\n        context.document = cmd;\n        const stateMachine = new state_machine_1.StateMachine({\n            promoteValues: false,\n            promoteLongs: false,\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions,\n            socketOptions: (0, client_encryption_1.autoSelectSocketOptions)(this._client.options)\n        });\n        return (0, bson_1.deserialize)(await stateMachine.execute(this, context), {\n            promoteValues: false,\n            promoteLongs: false\n        });\n    }\n    /**\n     * Decrypt a command response\n     */\n    async decrypt(response, options = {}) {\n        const context = this._mongocrypt.makeDecryptionContext(response);\n        context.id = this._contextCounter++;\n        const stateMachine = new state_machine_1.StateMachine({\n            ...options,\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions,\n            socketOptions: (0, client_encryption_1.autoSelectSocketOptions)(this._client.options)\n        });\n        return await stateMachine.execute(this, context);\n    }\n    /**\n     * Ask the user for KMS credentials.\n     *\n     * This returns anything that looks like the kmsProviders original input\n     * option. It can be empty, and any provider specified here will override\n     * the original ones.\n     */\n    async askForKMSCredentials() {\n        return await (0, providers_1.refreshKMSCredentials)(this._kmsProviders);\n    }\n    /**\n     * Return the current libmongocrypt's CSFLE shared library version\n     * as `{ version: bigint, versionStr: string }`, or `null` if no CSFLE\n     * shared library was loaded.\n     */\n    get cryptSharedLibVersionInfo() {\n        return this._mongocrypt.cryptSharedLibVersionInfo;\n    }\n    static get libmongocryptVersion() {\n        return AutoEncrypter.getMongoCrypt().libmongocryptVersion;\n    }\n}\nexports.AutoEncrypter = AutoEncrypter;\n_a = constants_1.kDecorateResult;\n//# sourceMappingURL=auto_encrypter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/client_encryption.js":
/*!*****************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/client_encryption.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ClientEncryption = void 0;\nexports.autoSelectSocketOptions = autoSelectSocketOptions;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\");\nconst deps_1 = __webpack_require__(/*! ../deps */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/deps.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst cryptoCallbacks = __webpack_require__(/*! ./crypto_callbacks */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/errors.js\");\nconst index_1 = __webpack_require__(/*! ./providers/index */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/providers/index.js\");\nconst state_machine_1 = __webpack_require__(/*! ./state_machine */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/state_machine.js\");\n/**\n * @public\n * The public interface for explicit in-use encryption\n */\nclass ClientEncryption {\n    /** @internal */\n    static getMongoCrypt() {\n        const encryption = (0, deps_1.getMongoDBClientEncryption)();\n        if ('kModuleError' in encryption) {\n            throw encryption.kModuleError;\n        }\n        return encryption.MongoCrypt;\n    }\n    /**\n     * Create a new encryption instance\n     *\n     * @example\n     * ```ts\n     * new ClientEncryption(mongoClient, {\n     *   keyVaultNamespace: 'client.encryption',\n     *   kmsProviders: {\n     *     local: {\n     *       key: masterKey // The master key used for encryption/decryption. A 96-byte long Buffer\n     *     }\n     *   }\n     * });\n     * ```\n     *\n     * @example\n     * ```ts\n     * new ClientEncryption(mongoClient, {\n     *   keyVaultNamespace: 'client.encryption',\n     *   kmsProviders: {\n     *     aws: {\n     *       accessKeyId: AWS_ACCESS_KEY,\n     *       secretAccessKey: AWS_SECRET_KEY\n     *     }\n     *   }\n     * });\n     * ```\n     */\n    constructor(client, options) {\n        this._client = client;\n        this._proxyOptions = options.proxyOptions ?? {};\n        this._tlsOptions = options.tlsOptions ?? {};\n        this._kmsProviders = options.kmsProviders || {};\n        if (options.keyVaultNamespace == null) {\n            throw new errors_1.MongoCryptInvalidArgumentError('Missing required option `keyVaultNamespace`');\n        }\n        const mongoCryptOptions = {\n            ...options,\n            cryptoCallbacks,\n            kmsProviders: !Buffer.isBuffer(this._kmsProviders)\n                ? (0, bson_1.serialize)(this._kmsProviders)\n                : this._kmsProviders\n        };\n        this._keyVaultNamespace = options.keyVaultNamespace;\n        this._keyVaultClient = options.keyVaultClient || client;\n        const MongoCrypt = ClientEncryption.getMongoCrypt();\n        this._mongoCrypt = new MongoCrypt(mongoCryptOptions);\n    }\n    /**\n     * Creates a data key used for explicit encryption and inserts it into the key vault namespace\n     *\n     * @example\n     * ```ts\n     * // Using async/await to create a local key\n     * const dataKeyId = await clientEncryption.createDataKey('local');\n     * ```\n     *\n     * @example\n     * ```ts\n     * // Using async/await to create an aws key\n     * const dataKeyId = await clientEncryption.createDataKey('aws', {\n     *   masterKey: {\n     *     region: 'us-east-1',\n     *     key: 'xxxxxxxxxxxxxx' // CMK ARN here\n     *   }\n     * });\n     * ```\n     *\n     * @example\n     * ```ts\n     * // Using async/await to create an aws key with a keyAltName\n     * const dataKeyId = await clientEncryption.createDataKey('aws', {\n     *   masterKey: {\n     *     region: 'us-east-1',\n     *     key: 'xxxxxxxxxxxxxx' // CMK ARN here\n     *   },\n     *   keyAltNames: [ 'mySpecialKey' ]\n     * });\n     * ```\n     */\n    async createDataKey(provider, options = {}) {\n        if (options.keyAltNames && !Array.isArray(options.keyAltNames)) {\n            throw new errors_1.MongoCryptInvalidArgumentError(`Option \"keyAltNames\" must be an array of strings, but was of type ${typeof options.keyAltNames}.`);\n        }\n        let keyAltNames = undefined;\n        if (options.keyAltNames && options.keyAltNames.length > 0) {\n            keyAltNames = options.keyAltNames.map((keyAltName, i) => {\n                if (typeof keyAltName !== 'string') {\n                    throw new errors_1.MongoCryptInvalidArgumentError(`Option \"keyAltNames\" must be an array of strings, but item at index ${i} was of type ${typeof keyAltName}`);\n                }\n                return (0, bson_1.serialize)({ keyAltName });\n            });\n        }\n        let keyMaterial = undefined;\n        if (options.keyMaterial) {\n            keyMaterial = (0, bson_1.serialize)({ keyMaterial: options.keyMaterial });\n        }\n        const dataKeyBson = (0, bson_1.serialize)({\n            provider,\n            ...options.masterKey\n        });\n        const context = this._mongoCrypt.makeDataKeyContext(dataKeyBson, {\n            keyAltNames,\n            keyMaterial\n        });\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions,\n            socketOptions: autoSelectSocketOptions(this._client.options)\n        });\n        const dataKey = (0, bson_1.deserialize)(await stateMachine.execute(this, context));\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const { insertedId } = await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .insertOne(dataKey, { writeConcern: { w: 'majority' } });\n        return insertedId;\n    }\n    /**\n     * Searches the keyvault for any data keys matching the provided filter.  If there are matches, rewrapManyDataKey then attempts to re-wrap the data keys using the provided options.\n     *\n     * If no matches are found, then no bulk write is performed.\n     *\n     * @example\n     * ```ts\n     * // rewrapping all data data keys (using a filter that matches all documents)\n     * const filter = {};\n     *\n     * const result = await clientEncryption.rewrapManyDataKey(filter);\n     * if (result.bulkWriteResult != null) {\n     *  // keys were re-wrapped, results will be available in the bulkWrite object.\n     * }\n     * ```\n     *\n     * @example\n     * ```ts\n     * // attempting to rewrap all data keys with no matches\n     * const filter = { _id: new Binary() } // assume _id matches no documents in the database\n     * const result = await clientEncryption.rewrapManyDataKey(filter);\n     *\n     * if (result.bulkWriteResult == null) {\n     *  // no keys matched, `bulkWriteResult` does not exist on the result object\n     * }\n     * ```\n     */\n    async rewrapManyDataKey(filter, options) {\n        let keyEncryptionKeyBson = undefined;\n        if (options) {\n            const keyEncryptionKey = Object.assign({ provider: options.provider }, options.masterKey);\n            keyEncryptionKeyBson = (0, bson_1.serialize)(keyEncryptionKey);\n        }\n        const filterBson = (0, bson_1.serialize)(filter);\n        const context = this._mongoCrypt.makeRewrapManyDataKeyContext(filterBson, keyEncryptionKeyBson);\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions,\n            socketOptions: autoSelectSocketOptions(this._client.options)\n        });\n        const { v: dataKeys } = (0, bson_1.deserialize)(await stateMachine.execute(this, context));\n        if (dataKeys.length === 0) {\n            return {};\n        }\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const replacements = dataKeys.map((key) => ({\n            updateOne: {\n                filter: { _id: key._id },\n                update: {\n                    $set: {\n                        masterKey: key.masterKey,\n                        keyMaterial: key.keyMaterial\n                    },\n                    $currentDate: {\n                        updateDate: true\n                    }\n                }\n            }\n        }));\n        const result = await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .bulkWrite(replacements, {\n            writeConcern: { w: 'majority' }\n        });\n        return { bulkWriteResult: result };\n    }\n    /**\n     * Deletes the key with the provided id from the keyvault, if it exists.\n     *\n     * @example\n     * ```ts\n     * // delete a key by _id\n     * const id = new Binary(); // id is a bson binary subtype 4 object\n     * const { deletedCount } = await clientEncryption.deleteKey(id);\n     *\n     * if (deletedCount != null && deletedCount > 0) {\n     *   // successful deletion\n     * }\n     * ```\n     *\n     */\n    async deleteKey(_id) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .deleteOne({ _id }, { writeConcern: { w: 'majority' } });\n    }\n    /**\n     * Finds all the keys currently stored in the keyvault.\n     *\n     * This method will not throw.\n     *\n     * @returns a FindCursor over all keys in the keyvault.\n     * @example\n     * ```ts\n     * // fetching all keys\n     * const keys = await clientEncryption.getKeys().toArray();\n     * ```\n     */\n    getKeys() {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .find({}, { readConcern: { level: 'majority' } });\n    }\n    /**\n     * Finds a key in the keyvault with the specified _id.\n     *\n     * Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the id.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // getting a key by id\n     * const id = new Binary(); // id is a bson binary subtype 4 object\n     * const key = await clientEncryption.getKey(id);\n     * if (!key) {\n     *  // key is null if there was no matching key\n     * }\n     * ```\n     */\n    async getKey(_id) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .findOne({ _id }, { readConcern: { level: 'majority' } });\n    }\n    /**\n     * Finds a key in the keyvault which has the specified keyAltName.\n     *\n     * @param keyAltName - a keyAltName to search for a key\n     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the keyAltName.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // get a key by alt name\n     * const keyAltName = 'keyAltName';\n     * const key = await clientEncryption.getKeyByAltName(keyAltName);\n     * if (!key) {\n     *  // key is null if there is no matching key\n     * }\n     * ```\n     */\n    async getKeyByAltName(keyAltName) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .findOne({ keyAltNames: keyAltName }, { readConcern: { level: 'majority' } });\n    }\n    /**\n     * Adds a keyAltName to a key identified by the provided _id.\n     *\n     * This method resolves to/returns the *old* key value (prior to adding the new altKeyName).\n     *\n     * @param _id - The id of the document to update.\n     * @param keyAltName - a keyAltName to search for a key\n     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the id.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // adding an keyAltName to a data key\n     * const id = new Binary();  // id is a bson binary subtype 4 object\n     * const keyAltName = 'keyAltName';\n     * const oldKey = await clientEncryption.addKeyAltName(id, keyAltName);\n     * if (!oldKey) {\n     *  // null is returned if there is no matching document with an id matching the supplied id\n     * }\n     * ```\n     */\n    async addKeyAltName(_id, keyAltName) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const value = await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .findOneAndUpdate({ _id }, { $addToSet: { keyAltNames: keyAltName } }, { writeConcern: { w: 'majority' }, returnDocument: 'before' });\n        return value;\n    }\n    /**\n     * Adds a keyAltName to a key identified by the provided _id.\n     *\n     * This method resolves to/returns the *old* key value (prior to removing the new altKeyName).\n     *\n     * If the removed keyAltName is the last keyAltName for that key, the `altKeyNames` property is unset from the document.\n     *\n     * @param _id - The id of the document to update.\n     * @param keyAltName - a keyAltName to search for a key\n     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the id.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // removing a key alt name from a data key\n     * const id = new Binary();  // id is a bson binary subtype 4 object\n     * const keyAltName = 'keyAltName';\n     * const oldKey = await clientEncryption.removeKeyAltName(id, keyAltName);\n     *\n     * if (!oldKey) {\n     *  // null is returned if there is no matching document with an id matching the supplied id\n     * }\n     * ```\n     */\n    async removeKeyAltName(_id, keyAltName) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const pipeline = [\n            {\n                $set: {\n                    keyAltNames: {\n                        $cond: [\n                            {\n                                $eq: ['$keyAltNames', [keyAltName]]\n                            },\n                            '$$REMOVE',\n                            {\n                                $filter: {\n                                    input: '$keyAltNames',\n                                    cond: {\n                                        $ne: ['$$this', keyAltName]\n                                    }\n                                }\n                            }\n                        ]\n                    }\n                }\n            }\n        ];\n        const value = await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .findOneAndUpdate({ _id }, pipeline, {\n            writeConcern: { w: 'majority' },\n            returnDocument: 'before'\n        });\n        return value;\n    }\n    /**\n     * A convenience method for creating an encrypted collection.\n     * This method will create data keys for any encryptedFields that do not have a `keyId` defined\n     * and then create a new collection with the full set of encryptedFields.\n     *\n     * @param db - A Node.js driver Db object with which to create the collection\n     * @param name - The name of the collection to be created\n     * @param options - Options for createDataKey and for createCollection\n     * @returns created collection and generated encryptedFields\n     * @throws MongoCryptCreateDataKeyError - If part way through the process a createDataKey invocation fails, an error will be rejected that has the partial `encryptedFields` that were created.\n     * @throws MongoCryptCreateEncryptedCollectionError - If creating the collection fails, an error will be rejected that has the entire `encryptedFields` that were created.\n     */\n    async createEncryptedCollection(db, name, options) {\n        const { provider, masterKey, createCollectionOptions: { encryptedFields: { ...encryptedFields }, ...createCollectionOptions } } = options;\n        if (Array.isArray(encryptedFields.fields)) {\n            const createDataKeyPromises = encryptedFields.fields.map(async (field) => field == null || typeof field !== 'object' || field.keyId != null\n                ? field\n                : {\n                    ...field,\n                    keyId: await this.createDataKey(provider, { masterKey })\n                });\n            const createDataKeyResolutions = await Promise.allSettled(createDataKeyPromises);\n            encryptedFields.fields = createDataKeyResolutions.map((resolution, index) => resolution.status === 'fulfilled' ? resolution.value : encryptedFields.fields[index]);\n            const rejection = createDataKeyResolutions.find((result) => result.status === 'rejected');\n            if (rejection != null) {\n                throw new errors_1.MongoCryptCreateDataKeyError(encryptedFields, { cause: rejection.reason });\n            }\n        }\n        try {\n            const collection = await db.createCollection(name, {\n                ...createCollectionOptions,\n                encryptedFields\n            });\n            return { collection, encryptedFields };\n        }\n        catch (cause) {\n            throw new errors_1.MongoCryptCreateEncryptedCollectionError(encryptedFields, { cause });\n        }\n    }\n    /**\n     * Explicitly encrypt a provided value. Note that either `options.keyId` or `options.keyAltName` must\n     * be specified. Specifying both `options.keyId` and `options.keyAltName` is considered an error.\n     *\n     * @param value - The value that you wish to serialize. Must be of a type that can be serialized into BSON\n     * @param options -\n     * @returns a Promise that either resolves with the encrypted value, or rejects with an error.\n     *\n     * @example\n     * ```ts\n     * // Encryption with async/await api\n     * async function encryptMyData(value) {\n     *   const keyId = await clientEncryption.createDataKey('local');\n     *   return clientEncryption.encrypt(value, { keyId, algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic' });\n     * }\n     * ```\n     *\n     * @example\n     * ```ts\n     * // Encryption using a keyAltName\n     * async function encryptMyData(value) {\n     *   await clientEncryption.createDataKey('local', { keyAltNames: 'mySpecialKey' });\n     *   return clientEncryption.encrypt(value, { keyAltName: 'mySpecialKey', algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic' });\n     * }\n     * ```\n     */\n    async encrypt(value, options) {\n        return await this._encrypt(value, false, options);\n    }\n    /**\n     * Encrypts a Match Expression or Aggregate Expression to query a range index.\n     *\n     * Only supported when queryType is \"range\" and algorithm is \"Range\".\n     *\n     * @param expression - a BSON document of one of the following forms:\n     *  1. A Match Expression of this form:\n     *      `{$and: [{<field>: {$gt: <value1>}}, {<field>: {$lt: <value2> }}]}`\n     *  2. An Aggregate Expression of this form:\n     *      `{$and: [{$gt: [<fieldpath>, <value1>]}, {$lt: [<fieldpath>, <value2>]}]}`\n     *\n     *    `$gt` may also be `$gte`. `$lt` may also be `$lte`.\n     *\n     * @param options -\n     * @returns Returns a Promise that either resolves with the encrypted value or rejects with an error.\n     */\n    async encryptExpression(expression, options) {\n        return await this._encrypt(expression, true, options);\n    }\n    /**\n     * Explicitly decrypt a provided encrypted value\n     *\n     * @param value - An encrypted value\n     * @returns a Promise that either resolves with the decrypted value, or rejects with an error\n     *\n     * @example\n     * ```ts\n     * // Decrypting value with async/await API\n     * async function decryptMyValue(value) {\n     *   return clientEncryption.decrypt(value);\n     * }\n     * ```\n     */\n    async decrypt(value) {\n        const valueBuffer = (0, bson_1.serialize)({ v: value });\n        const context = this._mongoCrypt.makeExplicitDecryptionContext(valueBuffer);\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions,\n            socketOptions: autoSelectSocketOptions(this._client.options)\n        });\n        const { v } = (0, bson_1.deserialize)(await stateMachine.execute(this, context));\n        return v;\n    }\n    /**\n     * @internal\n     * Ask the user for KMS credentials.\n     *\n     * This returns anything that looks like the kmsProviders original input\n     * option. It can be empty, and any provider specified here will override\n     * the original ones.\n     */\n    async askForKMSCredentials() {\n        return await (0, index_1.refreshKMSCredentials)(this._kmsProviders);\n    }\n    static get libmongocryptVersion() {\n        return ClientEncryption.getMongoCrypt().libmongocryptVersion;\n    }\n    /**\n     * @internal\n     * A helper that perform explicit encryption of values and expressions.\n     * Explicitly encrypt a provided value. Note that either `options.keyId` or `options.keyAltName` must\n     * be specified. Specifying both `options.keyId` and `options.keyAltName` is considered an error.\n     *\n     * @param value - The value that you wish to encrypt. Must be of a type that can be serialized into BSON\n     * @param expressionMode - a boolean that indicates whether or not to encrypt the value as an expression\n     * @param options - options to pass to encrypt\n     * @returns the raw result of the call to stateMachine.execute().  When expressionMode is set to true, the return\n     *          value will be a bson document.  When false, the value will be a BSON Binary.\n     *\n     */\n    async _encrypt(value, expressionMode, options) {\n        const { algorithm, keyId, keyAltName, contentionFactor, queryType, rangeOptions } = options;\n        const contextOptions = {\n            expressionMode,\n            algorithm\n        };\n        if (keyId) {\n            contextOptions.keyId = keyId.buffer;\n        }\n        if (keyAltName) {\n            if (keyId) {\n                throw new errors_1.MongoCryptInvalidArgumentError(`\"options\" cannot contain both \"keyId\" and \"keyAltName\"`);\n            }\n            if (typeof keyAltName !== 'string') {\n                throw new errors_1.MongoCryptInvalidArgumentError(`\"options.keyAltName\" must be of type string, but was of type ${typeof keyAltName}`);\n            }\n            contextOptions.keyAltName = (0, bson_1.serialize)({ keyAltName });\n        }\n        if (typeof contentionFactor === 'number' || typeof contentionFactor === 'bigint') {\n            contextOptions.contentionFactor = contentionFactor;\n        }\n        if (typeof queryType === 'string') {\n            contextOptions.queryType = queryType;\n        }\n        if (typeof rangeOptions === 'object') {\n            contextOptions.rangeOptions = (0, bson_1.serialize)(rangeOptions);\n        }\n        const valueBuffer = (0, bson_1.serialize)({ v: value });\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions,\n            socketOptions: autoSelectSocketOptions(this._client.options)\n        });\n        const context = this._mongoCrypt.makeExplicitEncryptionContext(valueBuffer, contextOptions);\n        const { v } = (0, bson_1.deserialize)(await stateMachine.execute(this, context));\n        return v;\n    }\n}\nexports.ClientEncryption = ClientEncryption;\n/**\n * Get the socket options from the client.\n * @param baseOptions - The mongo client options.\n * @returns ClientEncryptionSocketOptions\n */\nfunction autoSelectSocketOptions(baseOptions) {\n    const options = { autoSelectFamily: true };\n    if ('autoSelectFamily' in baseOptions) {\n        options.autoSelectFamily = baseOptions.autoSelectFamily;\n    }\n    if ('autoSelectFamilyAttemptTimeout' in baseOptions) {\n        options.autoSelectFamilyAttemptTimeout = baseOptions.autoSelectFamilyAttemptTimeout;\n    }\n    return options;\n}\n//# sourceMappingURL=client_encryption.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/client_encryption.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js":
/*!****************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.hmacSha256Hook = exports.hmacSha512Hook = exports.aes256CtrDecryptHook = exports.aes256CtrEncryptHook = exports.aes256CbcDecryptHook = exports.aes256CbcEncryptHook = void 0;\nexports.makeAES256Hook = makeAES256Hook;\nexports.randomHook = randomHook;\nexports.sha256Hook = sha256Hook;\nexports.makeHmacHook = makeHmacHook;\nexports.signRsaSha256Hook = signRsaSha256Hook;\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nfunction makeAES256Hook(method, mode) {\n    return function (key, iv, input, output) {\n        let result;\n        try {\n            const cipher = crypto[method](mode, key, iv);\n            cipher.setAutoPadding(false);\n            result = cipher.update(input);\n            const final = cipher.final();\n            if (final.length > 0) {\n                result = Buffer.concat([result, final]);\n            }\n        }\n        catch (e) {\n            return e;\n        }\n        result.copy(output);\n        return result.length;\n    };\n}\nfunction randomHook(buffer, count) {\n    try {\n        crypto.randomFillSync(buffer, 0, count);\n    }\n    catch (e) {\n        return e;\n    }\n    return count;\n}\nfunction sha256Hook(input, output) {\n    let result;\n    try {\n        result = crypto.createHash('sha256').update(input).digest();\n    }\n    catch (e) {\n        return e;\n    }\n    result.copy(output);\n    return result.length;\n}\nfunction makeHmacHook(algorithm) {\n    return (key, input, output) => {\n        let result;\n        try {\n            result = crypto.createHmac(algorithm, key).update(input).digest();\n        }\n        catch (e) {\n            return e;\n        }\n        result.copy(output);\n        return result.length;\n    };\n}\nfunction signRsaSha256Hook(key, input, output) {\n    let result;\n    try {\n        const signer = crypto.createSign('sha256WithRSAEncryption');\n        const privateKey = Buffer.from(`-----BEGIN PRIVATE KEY-----\\n${key.toString('base64')}\\n-----END PRIVATE KEY-----\\n`);\n        result = signer.update(input).end().sign(privateKey);\n    }\n    catch (e) {\n        return e;\n    }\n    result.copy(output);\n    return result.length;\n}\nexports.aes256CbcEncryptHook = makeAES256Hook('createCipheriv', 'aes-256-cbc');\nexports.aes256CbcDecryptHook = makeAES256Hook('createDecipheriv', 'aes-256-cbc');\nexports.aes256CtrEncryptHook = makeAES256Hook('createCipheriv', 'aes-256-ctr');\nexports.aes256CtrDecryptHook = makeAES256Hook('createDecipheriv', 'aes-256-ctr');\nexports.hmacSha512Hook = makeHmacHook('sha512');\nexports.hmacSha256Hook = makeHmacHook('sha256');\n//# sourceMappingURL=crypto_callbacks.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbGllbnQtc2lkZS1lbmNyeXB0aW9uL2NyeXB0b19jYWxsYmFja3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCLEdBQUcsc0JBQXNCLEdBQUcsNEJBQTRCLEdBQUcsNEJBQTRCLEdBQUcsNEJBQTRCLEdBQUcsNEJBQTRCO0FBQzNLLHNCQUFzQjtBQUN0QixrQkFBa0I7QUFDbEIsa0JBQWtCO0FBQ2xCLG9CQUFvQjtBQUNwQix5QkFBeUI7QUFDekIsZUFBZSxtQkFBTyxDQUFDLHNCQUFRO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1RUFBdUUsdUJBQXVCO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUIsNEJBQTRCO0FBQzVCLDRCQUE0QjtBQUM1Qiw0QkFBNEI7QUFDNUIsc0JBQXNCO0FBQ3RCLHNCQUFzQjtBQUN0QiIsInNvdXJjZXMiOlsiL1VzZXJzL2xpbmt1cy9HaXRodWIvbW9ub3R3by9wYXlsb2FkLXBsdWdpbi1tZXRhL25vZGVfbW9kdWxlcy8ucG5wbS9tb25nb2RiQDYuMTAuMC9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9jcnlwdG9fY2FsbGJhY2tzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5obWFjU2hhMjU2SG9vayA9IGV4cG9ydHMuaG1hY1NoYTUxMkhvb2sgPSBleHBvcnRzLmFlczI1NkN0ckRlY3J5cHRIb29rID0gZXhwb3J0cy5hZXMyNTZDdHJFbmNyeXB0SG9vayA9IGV4cG9ydHMuYWVzMjU2Q2JjRGVjcnlwdEhvb2sgPSBleHBvcnRzLmFlczI1NkNiY0VuY3J5cHRIb29rID0gdm9pZCAwO1xuZXhwb3J0cy5tYWtlQUVTMjU2SG9vayA9IG1ha2VBRVMyNTZIb29rO1xuZXhwb3J0cy5yYW5kb21Ib29rID0gcmFuZG9tSG9vaztcbmV4cG9ydHMuc2hhMjU2SG9vayA9IHNoYTI1Nkhvb2s7XG5leHBvcnRzLm1ha2VIbWFjSG9vayA9IG1ha2VIbWFjSG9vaztcbmV4cG9ydHMuc2lnblJzYVNoYTI1Nkhvb2sgPSBzaWduUnNhU2hhMjU2SG9vaztcbmNvbnN0IGNyeXB0byA9IHJlcXVpcmUoXCJjcnlwdG9cIik7XG5mdW5jdGlvbiBtYWtlQUVTMjU2SG9vayhtZXRob2QsIG1vZGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGtleSwgaXYsIGlucHV0LCBvdXRwdXQpIHtcbiAgICAgICAgbGV0IHJlc3VsdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGNpcGhlciA9IGNyeXB0b1ttZXRob2RdKG1vZGUsIGtleSwgaXYpO1xuICAgICAgICAgICAgY2lwaGVyLnNldEF1dG9QYWRkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGNpcGhlci51cGRhdGUoaW5wdXQpO1xuICAgICAgICAgICAgY29uc3QgZmluYWwgPSBjaXBoZXIuZmluYWwoKTtcbiAgICAgICAgICAgIGlmIChmaW5hbC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gQnVmZmVyLmNvbmNhdChbcmVzdWx0LCBmaW5hbF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQuY29weShvdXRwdXQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0Lmxlbmd0aDtcbiAgICB9O1xufVxuZnVuY3Rpb24gcmFuZG9tSG9vayhidWZmZXIsIGNvdW50KSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY3J5cHRvLnJhbmRvbUZpbGxTeW5jKGJ1ZmZlciwgMCwgY291bnQpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZTtcbiAgICB9XG4gICAgcmV0dXJuIGNvdW50O1xufVxuZnVuY3Rpb24gc2hhMjU2SG9vayhpbnB1dCwgb3V0cHV0KSB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICB0cnkge1xuICAgICAgICByZXN1bHQgPSBjcnlwdG8uY3JlYXRlSGFzaCgnc2hhMjU2JykudXBkYXRlKGlucHV0KS5kaWdlc3QoKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgfVxuICAgIHJlc3VsdC5jb3B5KG91dHB1dCk7XG4gICAgcmV0dXJuIHJlc3VsdC5sZW5ndGg7XG59XG5mdW5jdGlvbiBtYWtlSG1hY0hvb2soYWxnb3JpdGhtKSB7XG4gICAgcmV0dXJuIChrZXksIGlucHV0LCBvdXRwdXQpID0+IHtcbiAgICAgICAgbGV0IHJlc3VsdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGNyeXB0by5jcmVhdGVIbWFjKGFsZ29yaXRobSwga2V5KS51cGRhdGUoaW5wdXQpLmRpZ2VzdCgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQuY29weShvdXRwdXQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0Lmxlbmd0aDtcbiAgICB9O1xufVxuZnVuY3Rpb24gc2lnblJzYVNoYTI1Nkhvb2soa2V5LCBpbnB1dCwgb3V0cHV0KSB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBzaWduZXIgPSBjcnlwdG8uY3JlYXRlU2lnbignc2hhMjU2V2l0aFJTQUVuY3J5cHRpb24nKTtcbiAgICAgICAgY29uc3QgcHJpdmF0ZUtleSA9IEJ1ZmZlci5mcm9tKGAtLS0tLUJFR0lOIFBSSVZBVEUgS0VZLS0tLS1cXG4ke2tleS50b1N0cmluZygnYmFzZTY0Jyl9XFxuLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLVxcbmApO1xuICAgICAgICByZXN1bHQgPSBzaWduZXIudXBkYXRlKGlucHV0KS5lbmQoKS5zaWduKHByaXZhdGVLZXkpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZTtcbiAgICB9XG4gICAgcmVzdWx0LmNvcHkob3V0cHV0KTtcbiAgICByZXR1cm4gcmVzdWx0Lmxlbmd0aDtcbn1cbmV4cG9ydHMuYWVzMjU2Q2JjRW5jcnlwdEhvb2sgPSBtYWtlQUVTMjU2SG9vaygnY3JlYXRlQ2lwaGVyaXYnLCAnYWVzLTI1Ni1jYmMnKTtcbmV4cG9ydHMuYWVzMjU2Q2JjRGVjcnlwdEhvb2sgPSBtYWtlQUVTMjU2SG9vaygnY3JlYXRlRGVjaXBoZXJpdicsICdhZXMtMjU2LWNiYycpO1xuZXhwb3J0cy5hZXMyNTZDdHJFbmNyeXB0SG9vayA9IG1ha2VBRVMyNTZIb29rKCdjcmVhdGVDaXBoZXJpdicsICdhZXMtMjU2LWN0cicpO1xuZXhwb3J0cy5hZXMyNTZDdHJEZWNyeXB0SG9vayA9IG1ha2VBRVMyNTZIb29rKCdjcmVhdGVEZWNpcGhlcml2JywgJ2Flcy0yNTYtY3RyJyk7XG5leHBvcnRzLmhtYWNTaGE1MTJIb29rID0gbWFrZUhtYWNIb29rKCdzaGE1MTInKTtcbmV4cG9ydHMuaG1hY1NoYTI1Nkhvb2sgPSBtYWtlSG1hY0hvb2soJ3NoYTI1NicpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3J5cHRvX2NhbGxiYWNrcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/errors.js":
/*!******************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/errors.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoCryptKMSRequestNetworkTimeoutError = exports.MongoCryptAzureKMSRequestError = exports.MongoCryptCreateEncryptedCollectionError = exports.MongoCryptCreateDataKeyError = exports.MongoCryptInvalidArgumentError = exports.MongoCryptError = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\n/**\n * @public\n * An error indicating that something went wrong specifically with MongoDB Client Encryption\n */\nclass MongoCryptError extends error_1.MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options = {}) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoCryptError';\n    }\n}\nexports.MongoCryptError = MongoCryptError;\n/**\n * @public\n *\n * An error indicating an invalid argument was provided to an encryption API.\n */\nclass MongoCryptInvalidArgumentError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoCryptInvalidArgumentError';\n    }\n}\nexports.MongoCryptInvalidArgumentError = MongoCryptInvalidArgumentError;\n/**\n * @public\n * An error indicating that `ClientEncryption.createEncryptedCollection()` failed to create data keys\n */\nclass MongoCryptCreateDataKeyError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(encryptedFields, { cause }) {\n        super(`Unable to complete creating data keys: ${cause.message}`, { cause });\n        this.encryptedFields = encryptedFields;\n    }\n    get name() {\n        return 'MongoCryptCreateDataKeyError';\n    }\n}\nexports.MongoCryptCreateDataKeyError = MongoCryptCreateDataKeyError;\n/**\n * @public\n * An error indicating that `ClientEncryption.createEncryptedCollection()` failed to create a collection\n */\nclass MongoCryptCreateEncryptedCollectionError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(encryptedFields, { cause }) {\n        super(`Unable to create collection: ${cause.message}`, { cause });\n        this.encryptedFields = encryptedFields;\n    }\n    get name() {\n        return 'MongoCryptCreateEncryptedCollectionError';\n    }\n}\nexports.MongoCryptCreateEncryptedCollectionError = MongoCryptCreateEncryptedCollectionError;\n/**\n * @public\n * An error indicating that mongodb-client-encryption failed to auto-refresh Azure KMS credentials.\n */\nclass MongoCryptAzureKMSRequestError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, body) {\n        super(message);\n        this.body = body;\n    }\n    get name() {\n        return 'MongoCryptAzureKMSRequestError';\n    }\n}\nexports.MongoCryptAzureKMSRequestError = MongoCryptAzureKMSRequestError;\n/** @public */\nclass MongoCryptKMSRequestNetworkTimeoutError extends MongoCryptError {\n    get name() {\n        return 'MongoCryptKMSRequestNetworkTimeoutError';\n    }\n}\nexports.MongoCryptKMSRequestNetworkTimeoutError = MongoCryptKMSRequestNetworkTimeoutError;\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbGllbnQtc2lkZS1lbmNyeXB0aW9uL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwrQ0FBK0MsR0FBRyxzQ0FBc0MsR0FBRyxnREFBZ0QsR0FBRyxvQ0FBb0MsR0FBRyxzQ0FBc0MsR0FBRyx1QkFBdUI7QUFDclAsZ0JBQWdCLG1CQUFPLENBQUMsOEZBQVU7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxPQUFPO0FBQzFDLHdEQUF3RCxjQUFjLEtBQUssT0FBTztBQUNsRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsT0FBTztBQUMxQyw4Q0FBOEMsY0FBYyxLQUFLLE9BQU87QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0M7QUFDL0MiLCJzb3VyY2VzIjpbIi9Vc2Vycy9saW5rdXMvR2l0aHViL21vbm90d28vcGF5bG9hZC1wbHVnaW4tbWV0YS9ub2RlX21vZHVsZXMvLnBucG0vbW9uZ29kYkA2LjEwLjAvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NsaWVudC1zaWRlLWVuY3J5cHRpb24vZXJyb3JzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Nb25nb0NyeXB0S01TUmVxdWVzdE5ldHdvcmtUaW1lb3V0RXJyb3IgPSBleHBvcnRzLk1vbmdvQ3J5cHRBenVyZUtNU1JlcXVlc3RFcnJvciA9IGV4cG9ydHMuTW9uZ29DcnlwdENyZWF0ZUVuY3J5cHRlZENvbGxlY3Rpb25FcnJvciA9IGV4cG9ydHMuTW9uZ29DcnlwdENyZWF0ZURhdGFLZXlFcnJvciA9IGV4cG9ydHMuTW9uZ29DcnlwdEludmFsaWRBcmd1bWVudEVycm9yID0gZXhwb3J0cy5Nb25nb0NyeXB0RXJyb3IgPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuLyoqXG4gKiBAcHVibGljXG4gKiBBbiBlcnJvciBpbmRpY2F0aW5nIHRoYXQgc29tZXRoaW5nIHdlbnQgd3Jvbmcgc3BlY2lmaWNhbGx5IHdpdGggTW9uZ29EQiBDbGllbnQgRW5jcnlwdGlvblxuICovXG5jbGFzcyBNb25nb0NyeXB0RXJyb3IgZXh0ZW5kcyBlcnJvcl8xLk1vbmdvRXJyb3Ige1xuICAgIC8qKlxuICAgICAqICoqRG8gbm90IHVzZSB0aGlzIGNvbnN0cnVjdG9yISoqXG4gICAgICpcbiAgICAgKiBNZWFudCBmb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIFRoaXMgY2xhc3MgaXMgb25seSBtZWFudCB0byBiZSBjb25zdHJ1Y3RlZCB3aXRoaW4gdGhlIGRyaXZlci4gVGhpcyBjb25zdHJ1Y3RvciBpc1xuICAgICAqIG5vdCBzdWJqZWN0IHRvIHNlbWFudGljIHZlcnNpb25pbmcgY29tcGF0aWJpbGl0eSBndWFyYW50ZWVzIGFuZCBtYXkgY2hhbmdlIGF0IGFueSB0aW1lLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqKi9cbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gJ01vbmdvQ3J5cHRFcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5Nb25nb0NyeXB0RXJyb3IgPSBNb25nb0NyeXB0RXJyb3I7XG4vKipcbiAqIEBwdWJsaWNcbiAqXG4gKiBBbiBlcnJvciBpbmRpY2F0aW5nIGFuIGludmFsaWQgYXJndW1lbnQgd2FzIHByb3ZpZGVkIHRvIGFuIGVuY3J5cHRpb24gQVBJLlxuICovXG5jbGFzcyBNb25nb0NyeXB0SW52YWxpZEFyZ3VtZW50RXJyb3IgZXh0ZW5kcyBNb25nb0NyeXB0RXJyb3Ige1xuICAgIC8qKlxuICAgICAqICoqRG8gbm90IHVzZSB0aGlzIGNvbnN0cnVjdG9yISoqXG4gICAgICpcbiAgICAgKiBNZWFudCBmb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIFRoaXMgY2xhc3MgaXMgb25seSBtZWFudCB0byBiZSBjb25zdHJ1Y3RlZCB3aXRoaW4gdGhlIGRyaXZlci4gVGhpcyBjb25zdHJ1Y3RvciBpc1xuICAgICAqIG5vdCBzdWJqZWN0IHRvIHNlbWFudGljIHZlcnNpb25pbmcgY29tcGF0aWJpbGl0eSBndWFyYW50ZWVzIGFuZCBtYXkgY2hhbmdlIGF0IGFueSB0aW1lLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqKi9cbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIH1cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdNb25nb0NyeXB0SW52YWxpZEFyZ3VtZW50RXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuTW9uZ29DcnlwdEludmFsaWRBcmd1bWVudEVycm9yID0gTW9uZ29DcnlwdEludmFsaWRBcmd1bWVudEVycm9yO1xuLyoqXG4gKiBAcHVibGljXG4gKiBBbiBlcnJvciBpbmRpY2F0aW5nIHRoYXQgYENsaWVudEVuY3J5cHRpb24uY3JlYXRlRW5jcnlwdGVkQ29sbGVjdGlvbigpYCBmYWlsZWQgdG8gY3JlYXRlIGRhdGEga2V5c1xuICovXG5jbGFzcyBNb25nb0NyeXB0Q3JlYXRlRGF0YUtleUVycm9yIGV4dGVuZHMgTW9uZ29DcnlwdEVycm9yIHtcbiAgICAvKipcbiAgICAgKiAqKkRvIG5vdCB1c2UgdGhpcyBjb25zdHJ1Y3RvciEqKlxuICAgICAqXG4gICAgICogTWVhbnQgZm9yIGludGVybmFsIHVzZSBvbmx5LlxuICAgICAqXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBUaGlzIGNsYXNzIGlzIG9ubHkgbWVhbnQgdG8gYmUgY29uc3RydWN0ZWQgd2l0aGluIHRoZSBkcml2ZXIuIFRoaXMgY29uc3RydWN0b3IgaXNcbiAgICAgKiBub3Qgc3ViamVjdCB0byBzZW1hbnRpYyB2ZXJzaW9uaW5nIGNvbXBhdGliaWxpdHkgZ3VhcmFudGVlcyBhbmQgbWF5IGNoYW5nZSBhdCBhbnkgdGltZS5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiovXG4gICAgY29uc3RydWN0b3IoZW5jcnlwdGVkRmllbGRzLCB7IGNhdXNlIH0pIHtcbiAgICAgICAgc3VwZXIoYFVuYWJsZSB0byBjb21wbGV0ZSBjcmVhdGluZyBkYXRhIGtleXM6ICR7Y2F1c2UubWVzc2FnZX1gLCB7IGNhdXNlIH0pO1xuICAgICAgICB0aGlzLmVuY3J5cHRlZEZpZWxkcyA9IGVuY3J5cHRlZEZpZWxkcztcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnTW9uZ29DcnlwdENyZWF0ZURhdGFLZXlFcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5Nb25nb0NyeXB0Q3JlYXRlRGF0YUtleUVycm9yID0gTW9uZ29DcnlwdENyZWF0ZURhdGFLZXlFcnJvcjtcbi8qKlxuICogQHB1YmxpY1xuICogQW4gZXJyb3IgaW5kaWNhdGluZyB0aGF0IGBDbGllbnRFbmNyeXB0aW9uLmNyZWF0ZUVuY3J5cHRlZENvbGxlY3Rpb24oKWAgZmFpbGVkIHRvIGNyZWF0ZSBhIGNvbGxlY3Rpb25cbiAqL1xuY2xhc3MgTW9uZ29DcnlwdENyZWF0ZUVuY3J5cHRlZENvbGxlY3Rpb25FcnJvciBleHRlbmRzIE1vbmdvQ3J5cHRFcnJvciB7XG4gICAgLyoqXG4gICAgICogKipEbyBub3QgdXNlIHRoaXMgY29uc3RydWN0b3IhKipcbiAgICAgKlxuICAgICAqIE1lYW50IGZvciBpbnRlcm5hbCB1c2Ugb25seS5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVGhpcyBjbGFzcyBpcyBvbmx5IG1lYW50IHRvIGJlIGNvbnN0cnVjdGVkIHdpdGhpbiB0aGUgZHJpdmVyLiBUaGlzIGNvbnN0cnVjdG9yIGlzXG4gICAgICogbm90IHN1YmplY3QgdG8gc2VtYW50aWMgdmVyc2lvbmluZyBjb21wYXRpYmlsaXR5IGd1YXJhbnRlZXMgYW5kIG1heSBjaGFuZ2UgYXQgYW55IHRpbWUuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICoqL1xuICAgIGNvbnN0cnVjdG9yKGVuY3J5cHRlZEZpZWxkcywgeyBjYXVzZSB9KSB7XG4gICAgICAgIHN1cGVyKGBVbmFibGUgdG8gY3JlYXRlIGNvbGxlY3Rpb246ICR7Y2F1c2UubWVzc2FnZX1gLCB7IGNhdXNlIH0pO1xuICAgICAgICB0aGlzLmVuY3J5cHRlZEZpZWxkcyA9IGVuY3J5cHRlZEZpZWxkcztcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnTW9uZ29DcnlwdENyZWF0ZUVuY3J5cHRlZENvbGxlY3Rpb25FcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5Nb25nb0NyeXB0Q3JlYXRlRW5jcnlwdGVkQ29sbGVjdGlvbkVycm9yID0gTW9uZ29DcnlwdENyZWF0ZUVuY3J5cHRlZENvbGxlY3Rpb25FcnJvcjtcbi8qKlxuICogQHB1YmxpY1xuICogQW4gZXJyb3IgaW5kaWNhdGluZyB0aGF0IG1vbmdvZGItY2xpZW50LWVuY3J5cHRpb24gZmFpbGVkIHRvIGF1dG8tcmVmcmVzaCBBenVyZSBLTVMgY3JlZGVudGlhbHMuXG4gKi9cbmNsYXNzIE1vbmdvQ3J5cHRBenVyZUtNU1JlcXVlc3RFcnJvciBleHRlbmRzIE1vbmdvQ3J5cHRFcnJvciB7XG4gICAgLyoqXG4gICAgICogKipEbyBub3QgdXNlIHRoaXMgY29uc3RydWN0b3IhKipcbiAgICAgKlxuICAgICAqIE1lYW50IGZvciBpbnRlcm5hbCB1c2Ugb25seS5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVGhpcyBjbGFzcyBpcyBvbmx5IG1lYW50IHRvIGJlIGNvbnN0cnVjdGVkIHdpdGhpbiB0aGUgZHJpdmVyLiBUaGlzIGNvbnN0cnVjdG9yIGlzXG4gICAgICogbm90IHN1YmplY3QgdG8gc2VtYW50aWMgdmVyc2lvbmluZyBjb21wYXRpYmlsaXR5IGd1YXJhbnRlZXMgYW5kIG1heSBjaGFuZ2UgYXQgYW55IHRpbWUuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICoqL1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGJvZHkpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuYm9keSA9IGJvZHk7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gJ01vbmdvQ3J5cHRBenVyZUtNU1JlcXVlc3RFcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5Nb25nb0NyeXB0QXp1cmVLTVNSZXF1ZXN0RXJyb3IgPSBNb25nb0NyeXB0QXp1cmVLTVNSZXF1ZXN0RXJyb3I7XG4vKiogQHB1YmxpYyAqL1xuY2xhc3MgTW9uZ29DcnlwdEtNU1JlcXVlc3ROZXR3b3JrVGltZW91dEVycm9yIGV4dGVuZHMgTW9uZ29DcnlwdEVycm9yIHtcbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdNb25nb0NyeXB0S01TUmVxdWVzdE5ldHdvcmtUaW1lb3V0RXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuTW9uZ29DcnlwdEtNU1JlcXVlc3ROZXR3b3JrVGltZW91dEVycm9yID0gTW9uZ29DcnlwdEtNU1JlcXVlc3ROZXR3b3JrVGltZW91dEVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/errors.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/mongocryptd_manager.js":
/*!*******************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/mongocryptd_manager.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongocryptdManager = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\n/**\n * @internal\n * An internal class that handles spawning a mongocryptd.\n */\nclass MongocryptdManager {\n    constructor(extraOptions = {}) {\n        this.spawnPath = '';\n        this.spawnArgs = [];\n        this.uri =\n            typeof extraOptions.mongocryptdURI === 'string' && extraOptions.mongocryptdURI.length > 0\n                ? extraOptions.mongocryptdURI\n                : MongocryptdManager.DEFAULT_MONGOCRYPTD_URI;\n        this.bypassSpawn = !!extraOptions.mongocryptdBypassSpawn;\n        if (Object.hasOwn(extraOptions, 'mongocryptdSpawnPath') && extraOptions.mongocryptdSpawnPath) {\n            this.spawnPath = extraOptions.mongocryptdSpawnPath;\n        }\n        if (Object.hasOwn(extraOptions, 'mongocryptdSpawnArgs') &&\n            Array.isArray(extraOptions.mongocryptdSpawnArgs)) {\n            this.spawnArgs = this.spawnArgs.concat(extraOptions.mongocryptdSpawnArgs);\n        }\n        if (this.spawnArgs\n            .filter(arg => typeof arg === 'string')\n            .every(arg => arg.indexOf('--idleShutdownTimeoutSecs') < 0)) {\n            this.spawnArgs.push('--idleShutdownTimeoutSecs', '60');\n        }\n    }\n    /**\n     * Will check to see if a mongocryptd is up. If it is not up, it will attempt\n     * to spawn a mongocryptd in a detached process, and then wait for it to be up.\n     */\n    async spawn() {\n        const cmdName = this.spawnPath || 'mongocryptd';\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        const { spawn } = __webpack_require__(/*! child_process */ \"child_process\");\n        // Spawned with stdio: ignore and detached: true\n        // to ensure child can outlive parent.\n        this._child = spawn(cmdName, this.spawnArgs, {\n            stdio: 'ignore',\n            detached: true\n        });\n        this._child.on('error', () => {\n            // From the FLE spec:\n            // \"The stdout and stderr of the spawned process MUST not be exposed in the driver\n            // (e.g. redirect to /dev/null). Users can pass the argument --logpath to\n            // extraOptions.mongocryptdSpawnArgs if they need to inspect mongocryptd logs.\n            // If spawning is necessary, the driver MUST spawn mongocryptd whenever server\n            // selection on the MongoClient to mongocryptd fails. If the MongoClient fails to\n            // connect after spawning, the server selection error is propagated to the user.\"\n            // The AutoEncrypter and MongoCryptdManager should work together to spawn\n            // mongocryptd whenever necessary.  Additionally, the `mongocryptd` intentionally\n            // shuts down after 60s and gets respawned when necessary.  We rely on server\n            // selection timeouts when connecting to the `mongocryptd` to inform users that something\n            // has been configured incorrectly.  For those reasons, we suppress stderr from\n            // the `mongocryptd` process and immediately unref the process.\n        });\n        // unref child to remove handle from event loop\n        this._child.unref();\n    }\n    /**\n     * @returns the result of `fn` or rejects with an error.\n     */\n    async withRespawn(fn) {\n        try {\n            const result = await fn();\n            return result;\n        }\n        catch (err) {\n            // If we are not bypassing spawning, then we should retry once on a MongoTimeoutError (server selection error)\n            const shouldSpawn = err instanceof error_1.MongoNetworkTimeoutError && !this.bypassSpawn;\n            if (!shouldSpawn) {\n                throw err;\n            }\n        }\n        await this.spawn();\n        const result = await fn();\n        return result;\n    }\n}\nexports.MongocryptdManager = MongocryptdManager;\nMongocryptdManager.DEFAULT_MONGOCRYPTD_URI = 'mongodb://localhost:27020';\n//# sourceMappingURL=mongocryptd_manager.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbGllbnQtc2lkZS1lbmNyeXB0aW9uL21vbmdvY3J5cHRkX21hbmFnZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCO0FBQzFCLGdCQUFnQixtQkFBTyxDQUFDLDhGQUFVO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFFBQVEsRUFBRSxtQkFBTyxDQUFDLG9DQUFlO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9saW5rdXMvR2l0aHViL21vbm90d28vcGF5bG9hZC1wbHVnaW4tbWV0YS9ub2RlX21vZHVsZXMvLnBucG0vbW9uZ29kYkA2LjEwLjAvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NsaWVudC1zaWRlLWVuY3J5cHRpb24vbW9uZ29jcnlwdGRfbWFuYWdlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTW9uZ29jcnlwdGRNYW5hZ2VyID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbi8qKlxuICogQGludGVybmFsXG4gKiBBbiBpbnRlcm5hbCBjbGFzcyB0aGF0IGhhbmRsZXMgc3Bhd25pbmcgYSBtb25nb2NyeXB0ZC5cbiAqL1xuY2xhc3MgTW9uZ29jcnlwdGRNYW5hZ2VyIHtcbiAgICBjb25zdHJ1Y3RvcihleHRyYU9wdGlvbnMgPSB7fSkge1xuICAgICAgICB0aGlzLnNwYXduUGF0aCA9ICcnO1xuICAgICAgICB0aGlzLnNwYXduQXJncyA9IFtdO1xuICAgICAgICB0aGlzLnVyaSA9XG4gICAgICAgICAgICB0eXBlb2YgZXh0cmFPcHRpb25zLm1vbmdvY3J5cHRkVVJJID09PSAnc3RyaW5nJyAmJiBleHRyYU9wdGlvbnMubW9uZ29jcnlwdGRVUkkubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgID8gZXh0cmFPcHRpb25zLm1vbmdvY3J5cHRkVVJJXG4gICAgICAgICAgICAgICAgOiBNb25nb2NyeXB0ZE1hbmFnZXIuREVGQVVMVF9NT05HT0NSWVBURF9VUkk7XG4gICAgICAgIHRoaXMuYnlwYXNzU3Bhd24gPSAhIWV4dHJhT3B0aW9ucy5tb25nb2NyeXB0ZEJ5cGFzc1NwYXduO1xuICAgICAgICBpZiAoT2JqZWN0Lmhhc093bihleHRyYU9wdGlvbnMsICdtb25nb2NyeXB0ZFNwYXduUGF0aCcpICYmIGV4dHJhT3B0aW9ucy5tb25nb2NyeXB0ZFNwYXduUGF0aCkge1xuICAgICAgICAgICAgdGhpcy5zcGF3blBhdGggPSBleHRyYU9wdGlvbnMubW9uZ29jcnlwdGRTcGF3blBhdGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKE9iamVjdC5oYXNPd24oZXh0cmFPcHRpb25zLCAnbW9uZ29jcnlwdGRTcGF3bkFyZ3MnKSAmJlxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheShleHRyYU9wdGlvbnMubW9uZ29jcnlwdGRTcGF3bkFyZ3MpKSB7XG4gICAgICAgICAgICB0aGlzLnNwYXduQXJncyA9IHRoaXMuc3Bhd25BcmdzLmNvbmNhdChleHRyYU9wdGlvbnMubW9uZ29jcnlwdGRTcGF3bkFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNwYXduQXJnc1xuICAgICAgICAgICAgLmZpbHRlcihhcmcgPT4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycpXG4gICAgICAgICAgICAuZXZlcnkoYXJnID0+IGFyZy5pbmRleE9mKCctLWlkbGVTaHV0ZG93blRpbWVvdXRTZWNzJykgPCAwKSkge1xuICAgICAgICAgICAgdGhpcy5zcGF3bkFyZ3MucHVzaCgnLS1pZGxlU2h1dGRvd25UaW1lb3V0U2VjcycsICc2MCcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdpbGwgY2hlY2sgdG8gc2VlIGlmIGEgbW9uZ29jcnlwdGQgaXMgdXAuIElmIGl0IGlzIG5vdCB1cCwgaXQgd2lsbCBhdHRlbXB0XG4gICAgICogdG8gc3Bhd24gYSBtb25nb2NyeXB0ZCBpbiBhIGRldGFjaGVkIHByb2Nlc3MsIGFuZCB0aGVuIHdhaXQgZm9yIGl0IHRvIGJlIHVwLlxuICAgICAqL1xuICAgIGFzeW5jIHNwYXduKCkge1xuICAgICAgICBjb25zdCBjbWROYW1lID0gdGhpcy5zcGF3blBhdGggfHwgJ21vbmdvY3J5cHRkJztcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZXF1aXJlLWltcG9ydHNcbiAgICAgICAgY29uc3QgeyBzcGF3biB9ID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpO1xuICAgICAgICAvLyBTcGF3bmVkIHdpdGggc3RkaW86IGlnbm9yZSBhbmQgZGV0YWNoZWQ6IHRydWVcbiAgICAgICAgLy8gdG8gZW5zdXJlIGNoaWxkIGNhbiBvdXRsaXZlIHBhcmVudC5cbiAgICAgICAgdGhpcy5fY2hpbGQgPSBzcGF3bihjbWROYW1lLCB0aGlzLnNwYXduQXJncywge1xuICAgICAgICAgICAgc3RkaW86ICdpZ25vcmUnLFxuICAgICAgICAgICAgZGV0YWNoZWQ6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX2NoaWxkLm9uKCdlcnJvcicsICgpID0+IHtcbiAgICAgICAgICAgIC8vIEZyb20gdGhlIEZMRSBzcGVjOlxuICAgICAgICAgICAgLy8gXCJUaGUgc3Rkb3V0IGFuZCBzdGRlcnIgb2YgdGhlIHNwYXduZWQgcHJvY2VzcyBNVVNUIG5vdCBiZSBleHBvc2VkIGluIHRoZSBkcml2ZXJcbiAgICAgICAgICAgIC8vIChlLmcuIHJlZGlyZWN0IHRvIC9kZXYvbnVsbCkuIFVzZXJzIGNhbiBwYXNzIHRoZSBhcmd1bWVudCAtLWxvZ3BhdGggdG9cbiAgICAgICAgICAgIC8vIGV4dHJhT3B0aW9ucy5tb25nb2NyeXB0ZFNwYXduQXJncyBpZiB0aGV5IG5lZWQgdG8gaW5zcGVjdCBtb25nb2NyeXB0ZCBsb2dzLlxuICAgICAgICAgICAgLy8gSWYgc3Bhd25pbmcgaXMgbmVjZXNzYXJ5LCB0aGUgZHJpdmVyIE1VU1Qgc3Bhd24gbW9uZ29jcnlwdGQgd2hlbmV2ZXIgc2VydmVyXG4gICAgICAgICAgICAvLyBzZWxlY3Rpb24gb24gdGhlIE1vbmdvQ2xpZW50IHRvIG1vbmdvY3J5cHRkIGZhaWxzLiBJZiB0aGUgTW9uZ29DbGllbnQgZmFpbHMgdG9cbiAgICAgICAgICAgIC8vIGNvbm5lY3QgYWZ0ZXIgc3Bhd25pbmcsIHRoZSBzZXJ2ZXIgc2VsZWN0aW9uIGVycm9yIGlzIHByb3BhZ2F0ZWQgdG8gdGhlIHVzZXIuXCJcbiAgICAgICAgICAgIC8vIFRoZSBBdXRvRW5jcnlwdGVyIGFuZCBNb25nb0NyeXB0ZE1hbmFnZXIgc2hvdWxkIHdvcmsgdG9nZXRoZXIgdG8gc3Bhd25cbiAgICAgICAgICAgIC8vIG1vbmdvY3J5cHRkIHdoZW5ldmVyIG5lY2Vzc2FyeS4gIEFkZGl0aW9uYWxseSwgdGhlIGBtb25nb2NyeXB0ZGAgaW50ZW50aW9uYWxseVxuICAgICAgICAgICAgLy8gc2h1dHMgZG93biBhZnRlciA2MHMgYW5kIGdldHMgcmVzcGF3bmVkIHdoZW4gbmVjZXNzYXJ5LiAgV2UgcmVseSBvbiBzZXJ2ZXJcbiAgICAgICAgICAgIC8vIHNlbGVjdGlvbiB0aW1lb3V0cyB3aGVuIGNvbm5lY3RpbmcgdG8gdGhlIGBtb25nb2NyeXB0ZGAgdG8gaW5mb3JtIHVzZXJzIHRoYXQgc29tZXRoaW5nXG4gICAgICAgICAgICAvLyBoYXMgYmVlbiBjb25maWd1cmVkIGluY29ycmVjdGx5LiAgRm9yIHRob3NlIHJlYXNvbnMsIHdlIHN1cHByZXNzIHN0ZGVyciBmcm9tXG4gICAgICAgICAgICAvLyB0aGUgYG1vbmdvY3J5cHRkYCBwcm9jZXNzIGFuZCBpbW1lZGlhdGVseSB1bnJlZiB0aGUgcHJvY2Vzcy5cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIHVucmVmIGNoaWxkIHRvIHJlbW92ZSBoYW5kbGUgZnJvbSBldmVudCBsb29wXG4gICAgICAgIHRoaXMuX2NoaWxkLnVucmVmKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZuYCBvciByZWplY3RzIHdpdGggYW4gZXJyb3IuXG4gICAgICovXG4gICAgYXN5bmMgd2l0aFJlc3Bhd24oZm4pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGZuKCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIC8vIElmIHdlIGFyZSBub3QgYnlwYXNzaW5nIHNwYXduaW5nLCB0aGVuIHdlIHNob3VsZCByZXRyeSBvbmNlIG9uIGEgTW9uZ29UaW1lb3V0RXJyb3IgKHNlcnZlciBzZWxlY3Rpb24gZXJyb3IpXG4gICAgICAgICAgICBjb25zdCBzaG91bGRTcGF3biA9IGVyciBpbnN0YW5jZW9mIGVycm9yXzEuTW9uZ29OZXR3b3JrVGltZW91dEVycm9yICYmICF0aGlzLmJ5cGFzc1NwYXduO1xuICAgICAgICAgICAgaWYgKCFzaG91bGRTcGF3bikge1xuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhd2FpdCB0aGlzLnNwYXduKCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGZuKCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuZXhwb3J0cy5Nb25nb2NyeXB0ZE1hbmFnZXIgPSBNb25nb2NyeXB0ZE1hbmFnZXI7XG5Nb25nb2NyeXB0ZE1hbmFnZXIuREVGQVVMVF9NT05HT0NSWVBURF9VUkkgPSAnbW9uZ29kYjovL2xvY2FsaG9zdDoyNzAyMCc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb25nb2NyeXB0ZF9tYW5hZ2VyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/mongocryptd_manager.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/providers/aws.js":
/*!*************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/providers/aws.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.loadAWSCredentials = loadAWSCredentials;\nconst aws_temporary_credentials_1 = __webpack_require__(/*! ../../cmap/auth/aws_temporary_credentials */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/aws_temporary_credentials.js\");\n/**\n * @internal\n */\nasync function loadAWSCredentials(kmsProviders) {\n    const credentialProvider = new aws_temporary_credentials_1.AWSSDKCredentialProvider();\n    // We shouldn't ever receive a response from the AWS SDK that doesn't have a `SecretAccessKey`\n    // or `AccessKeyId`.  However, TS says these fields are optional.  We provide empty strings\n    // and let libmongocrypt error if we're unable to fetch the required keys.\n    const { SecretAccessKey = '', AccessKeyId = '', Token } = await credentialProvider.getCredentials();\n    const aws = {\n        secretAccessKey: SecretAccessKey,\n        accessKeyId: AccessKeyId\n    };\n    // the AWS session token is only required for temporary credentials so only attach it to the\n    // result if it's present in the response from the aws sdk\n    Token != null && (aws.sessionToken = Token);\n    return { ...kmsProviders, aws };\n}\n//# sourceMappingURL=aws.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbGllbnQtc2lkZS1lbmNyeXB0aW9uL3Byb3ZpZGVycy9hd3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCO0FBQzFCLG9DQUFvQyxtQkFBTyxDQUFDLDZKQUEyQztBQUN2RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxnREFBZ0Q7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2xpbmt1cy9HaXRodWIvbW9ub3R3by9wYXlsb2FkLXBsdWdpbi1tZXRhL25vZGVfbW9kdWxlcy8ucG5wbS9tb25nb2RiQDYuMTAuMC9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9wcm92aWRlcnMvYXdzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5sb2FkQVdTQ3JlZGVudGlhbHMgPSBsb2FkQVdTQ3JlZGVudGlhbHM7XG5jb25zdCBhd3NfdGVtcG9yYXJ5X2NyZWRlbnRpYWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vY21hcC9hdXRoL2F3c190ZW1wb3JhcnlfY3JlZGVudGlhbHNcIik7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5hc3luYyBmdW5jdGlvbiBsb2FkQVdTQ3JlZGVudGlhbHMoa21zUHJvdmlkZXJzKSB7XG4gICAgY29uc3QgY3JlZGVudGlhbFByb3ZpZGVyID0gbmV3IGF3c190ZW1wb3JhcnlfY3JlZGVudGlhbHNfMS5BV1NTREtDcmVkZW50aWFsUHJvdmlkZXIoKTtcbiAgICAvLyBXZSBzaG91bGRuJ3QgZXZlciByZWNlaXZlIGEgcmVzcG9uc2UgZnJvbSB0aGUgQVdTIFNESyB0aGF0IGRvZXNuJ3QgaGF2ZSBhIGBTZWNyZXRBY2Nlc3NLZXlgXG4gICAgLy8gb3IgYEFjY2Vzc0tleUlkYC4gIEhvd2V2ZXIsIFRTIHNheXMgdGhlc2UgZmllbGRzIGFyZSBvcHRpb25hbC4gIFdlIHByb3ZpZGUgZW1wdHkgc3RyaW5nc1xuICAgIC8vIGFuZCBsZXQgbGlibW9uZ29jcnlwdCBlcnJvciBpZiB3ZSdyZSB1bmFibGUgdG8gZmV0Y2ggdGhlIHJlcXVpcmVkIGtleXMuXG4gICAgY29uc3QgeyBTZWNyZXRBY2Nlc3NLZXkgPSAnJywgQWNjZXNzS2V5SWQgPSAnJywgVG9rZW4gfSA9IGF3YWl0IGNyZWRlbnRpYWxQcm92aWRlci5nZXRDcmVkZW50aWFscygpO1xuICAgIGNvbnN0IGF3cyA9IHtcbiAgICAgICAgc2VjcmV0QWNjZXNzS2V5OiBTZWNyZXRBY2Nlc3NLZXksXG4gICAgICAgIGFjY2Vzc0tleUlkOiBBY2Nlc3NLZXlJZFxuICAgIH07XG4gICAgLy8gdGhlIEFXUyBzZXNzaW9uIHRva2VuIGlzIG9ubHkgcmVxdWlyZWQgZm9yIHRlbXBvcmFyeSBjcmVkZW50aWFscyBzbyBvbmx5IGF0dGFjaCBpdCB0byB0aGVcbiAgICAvLyByZXN1bHQgaWYgaXQncyBwcmVzZW50IGluIHRoZSByZXNwb25zZSBmcm9tIHRoZSBhd3Mgc2RrXG4gICAgVG9rZW4gIT0gbnVsbCAmJiAoYXdzLnNlc3Npb25Ub2tlbiA9IFRva2VuKTtcbiAgICByZXR1cm4geyAuLi5rbXNQcm92aWRlcnMsIGF3cyB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXdzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/providers/aws.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/providers/azure.js":
/*!***************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/providers/azure.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.tokenCache = exports.AzureCredentialCache = exports.AZURE_BASE_URL = void 0;\nexports.addAzureParams = addAzureParams;\nexports.prepareRequest = prepareRequest;\nexports.fetchAzureKMSToken = fetchAzureKMSToken;\nexports.loadAzureCredentials = loadAzureCredentials;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/errors.js\");\nconst MINIMUM_TOKEN_REFRESH_IN_MILLISECONDS = 6000;\n/** Base URL for getting Azure tokens. */\nexports.AZURE_BASE_URL = 'http://169.254.169.254/metadata/identity/oauth2/token?';\n/**\n * @internal\n */\nclass AzureCredentialCache {\n    constructor() {\n        this.cachedToken = null;\n    }\n    async getToken() {\n        if (this.cachedToken == null || this.needsRefresh(this.cachedToken)) {\n            this.cachedToken = await this._getToken();\n        }\n        return { accessToken: this.cachedToken.accessToken };\n    }\n    needsRefresh(token) {\n        const timeUntilExpirationMS = token.expiresOnTimestamp - Date.now();\n        return timeUntilExpirationMS <= MINIMUM_TOKEN_REFRESH_IN_MILLISECONDS;\n    }\n    /**\n     * exposed for testing\n     */\n    resetCache() {\n        this.cachedToken = null;\n    }\n    /**\n     * exposed for testing\n     */\n    _getToken() {\n        return fetchAzureKMSToken();\n    }\n}\nexports.AzureCredentialCache = AzureCredentialCache;\n/** @internal */\nexports.tokenCache = new AzureCredentialCache();\n/** @internal */\nasync function parseResponse(response) {\n    const { status, body: rawBody } = response;\n    const body = (() => {\n        try {\n            return JSON.parse(rawBody);\n        }\n        catch {\n            throw new errors_1.MongoCryptAzureKMSRequestError('Malformed JSON body in GET request.');\n        }\n    })();\n    if (status !== 200) {\n        throw new errors_1.MongoCryptAzureKMSRequestError('Unable to complete request.', body);\n    }\n    if (!body.access_token) {\n        throw new errors_1.MongoCryptAzureKMSRequestError('Malformed response body - missing field `access_token`.');\n    }\n    if (!body.expires_in) {\n        throw new errors_1.MongoCryptAzureKMSRequestError('Malformed response body - missing field `expires_in`.');\n    }\n    const expiresInMS = Number(body.expires_in) * 1000;\n    if (Number.isNaN(expiresInMS)) {\n        throw new errors_1.MongoCryptAzureKMSRequestError('Malformed response body - unable to parse int from `expires_in` field.');\n    }\n    return {\n        accessToken: body.access_token,\n        expiresOnTimestamp: Date.now() + expiresInMS\n    };\n}\n/**\n * @internal\n * Get the Azure endpoint URL.\n */\nfunction addAzureParams(url, resource, username) {\n    url.searchParams.append('api-version', '2018-02-01');\n    url.searchParams.append('resource', resource);\n    if (username) {\n        url.searchParams.append('client_id', username);\n    }\n    return url;\n}\n/**\n * @internal\n *\n * parses any options provided by prose tests to `fetchAzureKMSToken` and merges them with\n * the default values for headers and the request url.\n */\nfunction prepareRequest(options) {\n    const url = new URL(options.url?.toString() ?? exports.AZURE_BASE_URL);\n    addAzureParams(url, 'https://vault.azure.net');\n    const headers = { ...options.headers, 'Content-Type': 'application/json', Metadata: true };\n    return { headers, url };\n}\n/**\n * @internal\n *\n * `AzureKMSRequestOptions` allows prose tests to modify the http request sent to the idms\n * servers.  This is required to simulate different server conditions.  No options are expected to\n * be set outside of tests.\n *\n * exposed for CSFLE\n * [prose test 18](https://github.com/mongodb/specifications/tree/master/source/client-side-encryption/tests#azure-imds-credentials)\n */\nasync function fetchAzureKMSToken(options = {}) {\n    const { headers, url } = prepareRequest(options);\n    try {\n        const response = await (0, utils_1.get)(url, { headers });\n        return await parseResponse(response);\n    }\n    catch (error) {\n        if (error instanceof error_1.MongoNetworkTimeoutError) {\n            throw new errors_1.MongoCryptAzureKMSRequestError(`[Azure KMS] ${error.message}`);\n        }\n        throw error;\n    }\n}\n/**\n * @internal\n *\n * @throws Will reject with a `MongoCryptError` if the http request fails or the http response is malformed.\n */\nasync function loadAzureCredentials(kmsProviders) {\n    const azure = await exports.tokenCache.getToken();\n    return { ...kmsProviders, azure };\n}\n//# sourceMappingURL=azure.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/providers/azure.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/providers/gcp.js":
/*!*************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/providers/gcp.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.loadGCPCredentials = loadGCPCredentials;\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/deps.js\");\n/** @internal */\nasync function loadGCPCredentials(kmsProviders) {\n    const gcpMetadata = (0, deps_1.getGcpMetadata)();\n    if ('kModuleError' in gcpMetadata) {\n        return kmsProviders;\n    }\n    const { access_token: accessToken } = await gcpMetadata.instance({\n        property: 'service-accounts/default/token'\n    });\n    return { ...kmsProviders, gcp: { accessToken } };\n}\n//# sourceMappingURL=gcp.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbGllbnQtc2lkZS1lbmNyeXB0aW9uL3Byb3ZpZGVycy9nY3AuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCO0FBQzFCLGVBQWUsbUJBQU8sQ0FBQywrRkFBWTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDRCQUE0QjtBQUN4QztBQUNBLEtBQUs7QUFDTCxhQUFhLHdCQUF3QjtBQUNyQztBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbGllbnQtc2lkZS1lbmNyeXB0aW9uL3Byb3ZpZGVycy9nY3AuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvYWRHQ1BDcmVkZW50aWFscyA9IGxvYWRHQ1BDcmVkZW50aWFscztcbmNvbnN0IGRlcHNfMSA9IHJlcXVpcmUoXCIuLi8uLi9kZXBzXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuYXN5bmMgZnVuY3Rpb24gbG9hZEdDUENyZWRlbnRpYWxzKGttc1Byb3ZpZGVycykge1xuICAgIGNvbnN0IGdjcE1ldGFkYXRhID0gKDAsIGRlcHNfMS5nZXRHY3BNZXRhZGF0YSkoKTtcbiAgICBpZiAoJ2tNb2R1bGVFcnJvcicgaW4gZ2NwTWV0YWRhdGEpIHtcbiAgICAgICAgcmV0dXJuIGttc1Byb3ZpZGVycztcbiAgICB9XG4gICAgY29uc3QgeyBhY2Nlc3NfdG9rZW46IGFjY2Vzc1Rva2VuIH0gPSBhd2FpdCBnY3BNZXRhZGF0YS5pbnN0YW5jZSh7XG4gICAgICAgIHByb3BlcnR5OiAnc2VydmljZS1hY2NvdW50cy9kZWZhdWx0L3Rva2VuJ1xuICAgIH0pO1xuICAgIHJldHVybiB7IC4uLmttc1Byb3ZpZGVycywgZ2NwOiB7IGFjY2Vzc1Rva2VuIH0gfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdjcC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/providers/gcp.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/providers/index.js":
/*!***************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/providers/index.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isEmptyCredentials = isEmptyCredentials;\nexports.refreshKMSCredentials = refreshKMSCredentials;\nconst aws_1 = __webpack_require__(/*! ./aws */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/providers/aws.js\");\nconst azure_1 = __webpack_require__(/*! ./azure */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/providers/azure.js\");\nconst gcp_1 = __webpack_require__(/*! ./gcp */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/providers/gcp.js\");\n/**\n * Auto credential fetching should only occur when the provider is defined on the kmsProviders map\n * and the settings are an empty object.\n *\n * This is distinct from a nullish provider key.\n *\n * @internal - exposed for testing purposes only\n */\nfunction isEmptyCredentials(providerName, kmsProviders) {\n    const provider = kmsProviders[providerName];\n    if (provider == null) {\n        return false;\n    }\n    return typeof provider === 'object' && Object.keys(provider).length === 0;\n}\n/**\n * Load cloud provider credentials for the user provided KMS providers.\n * Credentials will only attempt to get loaded if they do not exist\n * and no existing credentials will get overwritten.\n *\n * @internal\n */\nasync function refreshKMSCredentials(kmsProviders) {\n    let finalKMSProviders = kmsProviders;\n    if (isEmptyCredentials('aws', kmsProviders)) {\n        finalKMSProviders = await (0, aws_1.loadAWSCredentials)(finalKMSProviders);\n    }\n    if (isEmptyCredentials('gcp', kmsProviders)) {\n        finalKMSProviders = await (0, gcp_1.loadGCPCredentials)(finalKMSProviders);\n    }\n    if (isEmptyCredentials('azure', kmsProviders)) {\n        finalKMSProviders = await (0, azure_1.loadAzureCredentials)(finalKMSProviders);\n    }\n    return finalKMSProviders;\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbGllbnQtc2lkZS1lbmNyeXB0aW9uL3Byb3ZpZGVycy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEI7QUFDMUIsNkJBQTZCO0FBQzdCLGNBQWMsbUJBQU8sQ0FBQywwSEFBTztBQUM3QixnQkFBZ0IsbUJBQU8sQ0FBQyw4SEFBUztBQUNqQyxjQUFjLG1CQUFPLENBQUMsMEhBQU87QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbGllbnQtc2lkZS1lbmNyeXB0aW9uL3Byb3ZpZGVycy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNFbXB0eUNyZWRlbnRpYWxzID0gaXNFbXB0eUNyZWRlbnRpYWxzO1xuZXhwb3J0cy5yZWZyZXNoS01TQ3JlZGVudGlhbHMgPSByZWZyZXNoS01TQ3JlZGVudGlhbHM7XG5jb25zdCBhd3NfMSA9IHJlcXVpcmUoXCIuL2F3c1wiKTtcbmNvbnN0IGF6dXJlXzEgPSByZXF1aXJlKFwiLi9henVyZVwiKTtcbmNvbnN0IGdjcF8xID0gcmVxdWlyZShcIi4vZ2NwXCIpO1xuLyoqXG4gKiBBdXRvIGNyZWRlbnRpYWwgZmV0Y2hpbmcgc2hvdWxkIG9ubHkgb2NjdXIgd2hlbiB0aGUgcHJvdmlkZXIgaXMgZGVmaW5lZCBvbiB0aGUga21zUHJvdmlkZXJzIG1hcFxuICogYW5kIHRoZSBzZXR0aW5ncyBhcmUgYW4gZW1wdHkgb2JqZWN0LlxuICpcbiAqIFRoaXMgaXMgZGlzdGluY3QgZnJvbSBhIG51bGxpc2ggcHJvdmlkZXIga2V5LlxuICpcbiAqIEBpbnRlcm5hbCAtIGV4cG9zZWQgZm9yIHRlc3RpbmcgcHVycG9zZXMgb25seVxuICovXG5mdW5jdGlvbiBpc0VtcHR5Q3JlZGVudGlhbHMocHJvdmlkZXJOYW1lLCBrbXNQcm92aWRlcnMpIHtcbiAgICBjb25zdCBwcm92aWRlciA9IGttc1Byb3ZpZGVyc1twcm92aWRlck5hbWVdO1xuICAgIGlmIChwcm92aWRlciA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVvZiBwcm92aWRlciA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LmtleXMocHJvdmlkZXIpLmxlbmd0aCA9PT0gMDtcbn1cbi8qKlxuICogTG9hZCBjbG91ZCBwcm92aWRlciBjcmVkZW50aWFscyBmb3IgdGhlIHVzZXIgcHJvdmlkZWQgS01TIHByb3ZpZGVycy5cbiAqIENyZWRlbnRpYWxzIHdpbGwgb25seSBhdHRlbXB0IHRvIGdldCBsb2FkZWQgaWYgdGhleSBkbyBub3QgZXhpc3RcbiAqIGFuZCBubyBleGlzdGluZyBjcmVkZW50aWFscyB3aWxsIGdldCBvdmVyd3JpdHRlbi5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuYXN5bmMgZnVuY3Rpb24gcmVmcmVzaEtNU0NyZWRlbnRpYWxzKGttc1Byb3ZpZGVycykge1xuICAgIGxldCBmaW5hbEtNU1Byb3ZpZGVycyA9IGttc1Byb3ZpZGVycztcbiAgICBpZiAoaXNFbXB0eUNyZWRlbnRpYWxzKCdhd3MnLCBrbXNQcm92aWRlcnMpKSB7XG4gICAgICAgIGZpbmFsS01TUHJvdmlkZXJzID0gYXdhaXQgKDAsIGF3c18xLmxvYWRBV1NDcmVkZW50aWFscykoZmluYWxLTVNQcm92aWRlcnMpO1xuICAgIH1cbiAgICBpZiAoaXNFbXB0eUNyZWRlbnRpYWxzKCdnY3AnLCBrbXNQcm92aWRlcnMpKSB7XG4gICAgICAgIGZpbmFsS01TUHJvdmlkZXJzID0gYXdhaXQgKDAsIGdjcF8xLmxvYWRHQ1BDcmVkZW50aWFscykoZmluYWxLTVNQcm92aWRlcnMpO1xuICAgIH1cbiAgICBpZiAoaXNFbXB0eUNyZWRlbnRpYWxzKCdhenVyZScsIGttc1Byb3ZpZGVycykpIHtcbiAgICAgICAgZmluYWxLTVNQcm92aWRlcnMgPSBhd2FpdCAoMCwgYXp1cmVfMS5sb2FkQXp1cmVDcmVkZW50aWFscykoZmluYWxLTVNQcm92aWRlcnMpO1xuICAgIH1cbiAgICByZXR1cm4gZmluYWxLTVNQcm92aWRlcnM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/providers/index.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/state_machine.js":
/*!*************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/state_machine.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StateMachine = void 0;\nconst fs = __webpack_require__(/*! fs/promises */ \"fs/promises\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\");\nconst deps_1 = __webpack_require__(/*! ../deps */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/deps.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst client_encryption_1 = __webpack_require__(/*! ./client_encryption */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/client_encryption.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/errors.js\");\nlet socks = null;\nfunction loadSocks() {\n    if (socks == null) {\n        const socksImport = (0, deps_1.getSocks)();\n        if ('kModuleError' in socksImport) {\n            throw socksImport.kModuleError;\n        }\n        socks = socksImport;\n    }\n    return socks;\n}\n// libmongocrypt states\nconst MONGOCRYPT_CTX_ERROR = 0;\nconst MONGOCRYPT_CTX_NEED_MONGO_COLLINFO = 1;\nconst MONGOCRYPT_CTX_NEED_MONGO_MARKINGS = 2;\nconst MONGOCRYPT_CTX_NEED_MONGO_KEYS = 3;\nconst MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS = 7;\nconst MONGOCRYPT_CTX_NEED_KMS = 4;\nconst MONGOCRYPT_CTX_READY = 5;\nconst MONGOCRYPT_CTX_DONE = 6;\nconst HTTPS_PORT = 443;\nconst stateToString = new Map([\n    [MONGOCRYPT_CTX_ERROR, 'MONGOCRYPT_CTX_ERROR'],\n    [MONGOCRYPT_CTX_NEED_MONGO_COLLINFO, 'MONGOCRYPT_CTX_NEED_MONGO_COLLINFO'],\n    [MONGOCRYPT_CTX_NEED_MONGO_MARKINGS, 'MONGOCRYPT_CTX_NEED_MONGO_MARKINGS'],\n    [MONGOCRYPT_CTX_NEED_MONGO_KEYS, 'MONGOCRYPT_CTX_NEED_MONGO_KEYS'],\n    [MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS, 'MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS'],\n    [MONGOCRYPT_CTX_NEED_KMS, 'MONGOCRYPT_CTX_NEED_KMS'],\n    [MONGOCRYPT_CTX_READY, 'MONGOCRYPT_CTX_READY'],\n    [MONGOCRYPT_CTX_DONE, 'MONGOCRYPT_CTX_DONE']\n]);\nconst INSECURE_TLS_OPTIONS = [\n    'tlsInsecure',\n    'tlsAllowInvalidCertificates',\n    'tlsAllowInvalidHostnames',\n    // These options are disallowed by the spec, so we explicitly filter them out if provided, even\n    // though the StateMachine does not declare support for these options.\n    'tlsDisableOCSPEndpointCheck',\n    'tlsDisableCertificateRevocationCheck'\n];\n/**\n * Helper function for logging. Enabled by setting the environment flag MONGODB_CRYPT_DEBUG.\n * @param msg - Anything you want to be logged.\n */\nfunction debug(msg) {\n    if (process.env.MONGODB_CRYPT_DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error(msg);\n    }\n}\n/**\n * This is kind of a hack.  For `rewrapManyDataKey`, we have tests that\n * guarantee that when there are no matching keys, `rewrapManyDataKey` returns\n * nothing.  We also have tests for auto encryption that guarantee for `encrypt`\n * we return an error when there are no matching keys.  This error is generated in\n * subsequent iterations of the state machine.\n * Some apis (`encrypt`) throw if there are no filter matches and others (`rewrapManyDataKey`)\n * do not.  We set the result manually here, and let the state machine continue.  `libmongocrypt`\n * will inform us if we need to error by setting the state to `MONGOCRYPT_CTX_ERROR` but\n * otherwise we'll return `{ v: [] }`.\n */\nlet EMPTY_V;\n/**\n * @internal\n * An internal class that executes across a MongoCryptContext until either\n * a finishing state or an error is reached. Do not instantiate directly.\n */\nclass StateMachine {\n    constructor(options, bsonOptions = (0, bson_1.pluckBSONSerializeOptions)(options)) {\n        this.options = options;\n        this.bsonOptions = bsonOptions;\n    }\n    /**\n     * Executes the state machine according to the specification\n     */\n    async execute(executor, context) {\n        const keyVaultNamespace = executor._keyVaultNamespace;\n        const keyVaultClient = executor._keyVaultClient;\n        const metaDataClient = executor._metaDataClient;\n        const mongocryptdClient = executor._mongocryptdClient;\n        const mongocryptdManager = executor._mongocryptdManager;\n        let result = null;\n        while (context.state !== MONGOCRYPT_CTX_DONE && context.state !== MONGOCRYPT_CTX_ERROR) {\n            debug(`[context#${context.id}] ${stateToString.get(context.state) || context.state}`);\n            switch (context.state) {\n                case MONGOCRYPT_CTX_NEED_MONGO_COLLINFO: {\n                    const filter = (0, bson_1.deserialize)(context.nextMongoOperation());\n                    if (!metaDataClient) {\n                        throw new errors_1.MongoCryptError('unreachable state machine state: entered MONGOCRYPT_CTX_NEED_MONGO_COLLINFO but metadata client is undefined');\n                    }\n                    const collInfo = await this.fetchCollectionInfo(metaDataClient, context.ns, filter);\n                    if (collInfo) {\n                        context.addMongoOperationResponse(collInfo);\n                    }\n                    context.finishMongoOperation();\n                    break;\n                }\n                case MONGOCRYPT_CTX_NEED_MONGO_MARKINGS: {\n                    const command = context.nextMongoOperation();\n                    if (!mongocryptdClient) {\n                        throw new errors_1.MongoCryptError('unreachable state machine state: entered MONGOCRYPT_CTX_NEED_MONGO_MARKINGS but mongocryptdClient is undefined');\n                    }\n                    // When we are using the shared library, we don't have a mongocryptd manager.\n                    const markedCommand = mongocryptdManager\n                        ? await mongocryptdManager.withRespawn(this.markCommand.bind(this, mongocryptdClient, context.ns, command))\n                        : await this.markCommand(mongocryptdClient, context.ns, command);\n                    context.addMongoOperationResponse(markedCommand);\n                    context.finishMongoOperation();\n                    break;\n                }\n                case MONGOCRYPT_CTX_NEED_MONGO_KEYS: {\n                    const filter = context.nextMongoOperation();\n                    const keys = await this.fetchKeys(keyVaultClient, keyVaultNamespace, filter);\n                    if (keys.length === 0) {\n                        // See docs on EMPTY_V\n                        result = EMPTY_V ??= (0, bson_1.serialize)({ v: [] });\n                    }\n                    for await (const key of keys) {\n                        context.addMongoOperationResponse((0, bson_1.serialize)(key));\n                    }\n                    context.finishMongoOperation();\n                    break;\n                }\n                case MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS: {\n                    const kmsProviders = await executor.askForKMSCredentials();\n                    context.provideKMSProviders((0, bson_1.serialize)(kmsProviders));\n                    break;\n                }\n                case MONGOCRYPT_CTX_NEED_KMS: {\n                    const requests = Array.from(this.requests(context));\n                    await Promise.all(requests);\n                    context.finishKMSRequests();\n                    break;\n                }\n                case MONGOCRYPT_CTX_READY: {\n                    const finalizedContext = context.finalize();\n                    // @ts-expect-error finalize can change the state, check for error\n                    if (context.state === MONGOCRYPT_CTX_ERROR) {\n                        const message = context.status.message || 'Finalization error';\n                        throw new errors_1.MongoCryptError(message);\n                    }\n                    result = finalizedContext;\n                    break;\n                }\n                default:\n                    throw new errors_1.MongoCryptError(`Unknown state: ${context.state}`);\n            }\n        }\n        if (context.state === MONGOCRYPT_CTX_ERROR || result == null) {\n            const message = context.status.message;\n            if (!message) {\n                debug(`unidentifiable error in MongoCrypt - received an error status from \\`libmongocrypt\\` but received no error message.`);\n            }\n            throw new errors_1.MongoCryptError(message ??\n                'unidentifiable error in MongoCrypt - received an error status from `libmongocrypt` but received no error message.');\n        }\n        return result;\n    }\n    /**\n     * Handles the request to the KMS service. Exposed for testing purposes. Do not directly invoke.\n     * @param kmsContext - A C++ KMS context returned from the bindings\n     * @returns A promise that resolves when the KMS reply has be fully parsed\n     */\n    async kmsRequest(request) {\n        const parsedUrl = request.endpoint.split(':');\n        const port = parsedUrl[1] != null ? Number.parseInt(parsedUrl[1], 10) : HTTPS_PORT;\n        const socketOptions = (0, client_encryption_1.autoSelectSocketOptions)(this.options.socketOptions || {});\n        const options = {\n            host: parsedUrl[0],\n            servername: parsedUrl[0],\n            port,\n            ...socketOptions\n        };\n        const message = request.message;\n        const buffer = new utils_1.BufferPool();\n        const netSocket = new net.Socket();\n        let socket;\n        function destroySockets() {\n            for (const sock of [socket, netSocket]) {\n                if (sock) {\n                    sock.removeAllListeners();\n                    sock.destroy();\n                }\n            }\n        }\n        function ontimeout() {\n            return new errors_1.MongoCryptError('KMS request timed out');\n        }\n        function onerror(cause) {\n            return new errors_1.MongoCryptError('KMS request failed', { cause });\n        }\n        function onclose() {\n            return new errors_1.MongoCryptError('KMS request closed');\n        }\n        const tlsOptions = this.options.tlsOptions;\n        if (tlsOptions) {\n            const kmsProvider = request.kmsProvider;\n            const providerTlsOptions = tlsOptions[kmsProvider];\n            if (providerTlsOptions) {\n                const error = this.validateTlsOptions(kmsProvider, providerTlsOptions);\n                if (error) {\n                    throw error;\n                }\n                try {\n                    await this.setTlsOptions(providerTlsOptions, options);\n                }\n                catch (err) {\n                    throw onerror(err);\n                }\n            }\n        }\n        const { promise: willConnect, reject: rejectOnNetSocketError, resolve: resolveOnNetSocketConnect } = (0, utils_1.promiseWithResolvers)();\n        netSocket\n            .once('timeout', () => rejectOnNetSocketError(ontimeout()))\n            .once('error', err => rejectOnNetSocketError(onerror(err)))\n            .once('close', () => rejectOnNetSocketError(onclose()))\n            .once('connect', () => resolveOnNetSocketConnect());\n        try {\n            if (this.options.proxyOptions && this.options.proxyOptions.proxyHost) {\n                const netSocketOptions = {\n                    host: this.options.proxyOptions.proxyHost,\n                    port: this.options.proxyOptions.proxyPort || 1080,\n                    ...socketOptions\n                };\n                netSocket.connect(netSocketOptions);\n                await willConnect;\n                try {\n                    socks ??= loadSocks();\n                    options.socket = (await socks.SocksClient.createConnection({\n                        existing_socket: netSocket,\n                        command: 'connect',\n                        destination: { host: options.host, port: options.port },\n                        proxy: {\n                            // host and port are ignored because we pass existing_socket\n                            host: 'iLoveJavaScript',\n                            port: 0,\n                            type: 5,\n                            userId: this.options.proxyOptions.proxyUsername,\n                            password: this.options.proxyOptions.proxyPassword\n                        }\n                    })).socket;\n                }\n                catch (err) {\n                    throw onerror(err);\n                }\n            }\n            socket = tls.connect(options, () => {\n                socket.write(message);\n            });\n            const { promise: willResolveKmsRequest, reject: rejectOnTlsSocketError, resolve } = (0, utils_1.promiseWithResolvers)();\n            socket\n                .once('timeout', () => rejectOnTlsSocketError(ontimeout()))\n                .once('error', err => rejectOnTlsSocketError(onerror(err)))\n                .once('close', () => rejectOnTlsSocketError(onclose()))\n                .on('data', data => {\n                buffer.append(data);\n                while (request.bytesNeeded > 0 && buffer.length) {\n                    const bytesNeeded = Math.min(request.bytesNeeded, buffer.length);\n                    request.addResponse(buffer.read(bytesNeeded));\n                }\n                if (request.bytesNeeded <= 0) {\n                    resolve();\n                }\n            });\n            await willResolveKmsRequest;\n        }\n        finally {\n            // There's no need for any more activity on this socket at this point.\n            destroySockets();\n        }\n    }\n    *requests(context) {\n        for (let request = context.nextKMSRequest(); request != null; request = context.nextKMSRequest()) {\n            yield this.kmsRequest(request);\n        }\n    }\n    /**\n     * Validates the provided TLS options are secure.\n     *\n     * @param kmsProvider - The KMS provider name.\n     * @param tlsOptions - The client TLS options for the provider.\n     *\n     * @returns An error if any option is invalid.\n     */\n    validateTlsOptions(kmsProvider, tlsOptions) {\n        const tlsOptionNames = Object.keys(tlsOptions);\n        for (const option of INSECURE_TLS_OPTIONS) {\n            if (tlsOptionNames.includes(option)) {\n                return new errors_1.MongoCryptError(`Insecure TLS options prohibited for ${kmsProvider}: ${option}`);\n            }\n        }\n    }\n    /**\n     * Sets only the valid secure TLS options.\n     *\n     * @param tlsOptions - The client TLS options for the provider.\n     * @param options - The existing connection options.\n     */\n    async setTlsOptions(tlsOptions, options) {\n        if (tlsOptions.tlsCertificateKeyFile) {\n            const cert = await fs.readFile(tlsOptions.tlsCertificateKeyFile);\n            options.cert = options.key = cert;\n        }\n        if (tlsOptions.tlsCAFile) {\n            options.ca = await fs.readFile(tlsOptions.tlsCAFile);\n        }\n        if (tlsOptions.tlsCertificateKeyFilePassword) {\n            options.passphrase = tlsOptions.tlsCertificateKeyFilePassword;\n        }\n    }\n    /**\n     * Fetches collection info for a provided namespace, when libmongocrypt\n     * enters the `MONGOCRYPT_CTX_NEED_MONGO_COLLINFO` state. The result is\n     * used to inform libmongocrypt of the schema associated with this\n     * namespace. Exposed for testing purposes. Do not directly invoke.\n     *\n     * @param client - A MongoClient connected to the topology\n     * @param ns - The namespace to list collections from\n     * @param filter - A filter for the listCollections command\n     * @param callback - Invoked with the info of the requested collection, or with an error\n     */\n    async fetchCollectionInfo(client, ns, filter) {\n        const { db } = utils_1.MongoDBCollectionNamespace.fromString(ns);\n        const collections = await client\n            .db(db)\n            .listCollections(filter, {\n            promoteLongs: false,\n            promoteValues: false\n        })\n            .toArray();\n        const info = collections.length > 0 ? (0, bson_1.serialize)(collections[0]) : null;\n        return info;\n    }\n    /**\n     * Calls to the mongocryptd to provide markings for a command.\n     * Exposed for testing purposes. Do not directly invoke.\n     * @param client - A MongoClient connected to a mongocryptd\n     * @param ns - The namespace (database.collection) the command is being executed on\n     * @param command - The command to execute.\n     * @param callback - Invoked with the serialized and marked bson command, or with an error\n     */\n    async markCommand(client, ns, command) {\n        const options = { promoteLongs: false, promoteValues: false };\n        const { db } = utils_1.MongoDBCollectionNamespace.fromString(ns);\n        const rawCommand = (0, bson_1.deserialize)(command, options);\n        const response = await client.db(db).command(rawCommand, options);\n        return (0, bson_1.serialize)(response, this.bsonOptions);\n    }\n    /**\n     * Requests keys from the keyVault collection on the topology.\n     * Exposed for testing purposes. Do not directly invoke.\n     * @param client - A MongoClient connected to the topology\n     * @param keyVaultNamespace - The namespace (database.collection) of the keyVault Collection\n     * @param filter - The filter for the find query against the keyVault Collection\n     * @param callback - Invoked with the found keys, or with an error\n     */\n    fetchKeys(client, keyVaultNamespace, filter) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(keyVaultNamespace);\n        return client\n            .db(dbName)\n            .collection(collectionName, { readConcern: { level: 'majority' } })\n            .find((0, bson_1.deserialize)(filter))\n            .toArray();\n    }\n}\nexports.StateMachine = StateMachine;\n//# sourceMappingURL=state_machine.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/state_machine.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/auth_provider.js":
/*!************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/auth_provider.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AuthProvider = exports.AuthContext = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\n/**\n * Context used during authentication\n * @internal\n */\nclass AuthContext {\n    constructor(connection, credentials, options) {\n        /** If the context is for reauthentication. */\n        this.reauthenticating = false;\n        this.connection = connection;\n        this.credentials = credentials;\n        this.options = options;\n    }\n}\nexports.AuthContext = AuthContext;\n/**\n * Provider used during authentication.\n * @internal\n */\nclass AuthProvider {\n    /**\n     * Prepare the handshake document before the initial handshake.\n     *\n     * @param handshakeDoc - The document used for the initial handshake on a connection\n     * @param authContext - Context for authentication flow\n     */\n    async prepare(handshakeDoc, _authContext) {\n        return handshakeDoc;\n    }\n    /**\n     * Reauthenticate.\n     * @param context - The shared auth context.\n     */\n    async reauth(context) {\n        if (context.reauthenticating) {\n            throw new error_1.MongoRuntimeError('Reauthentication already in progress.');\n        }\n        try {\n            context.reauthenticating = true;\n            await this.auth(context);\n        }\n        finally {\n            context.reauthenticating = false;\n        }\n    }\n}\nexports.AuthProvider = AuthProvider;\n//# sourceMappingURL=auth_provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvYXV0aF9wcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0IsR0FBRyxtQkFBbUI7QUFDMUMsZ0JBQWdCLG1CQUFPLENBQUMsaUdBQWE7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9saW5rdXMvR2l0aHViL21vbm90d28vcGF5bG9hZC1wbHVnaW4tbWV0YS9ub2RlX21vZHVsZXMvLnBucG0vbW9uZ29kYkA2LjEwLjAvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9hdXRoX3Byb3ZpZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BdXRoUHJvdmlkZXIgPSBleHBvcnRzLkF1dGhDb250ZXh0ID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi9lcnJvclwiKTtcbi8qKlxuICogQ29udGV4dCB1c2VkIGR1cmluZyBhdXRoZW50aWNhdGlvblxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIEF1dGhDb250ZXh0IHtcbiAgICBjb25zdHJ1Y3Rvcihjb25uZWN0aW9uLCBjcmVkZW50aWFscywgb3B0aW9ucykge1xuICAgICAgICAvKiogSWYgdGhlIGNvbnRleHQgaXMgZm9yIHJlYXV0aGVudGljYXRpb24uICovXG4gICAgICAgIHRoaXMucmVhdXRoZW50aWNhdGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNvbm5lY3Rpb24gPSBjb25uZWN0aW9uO1xuICAgICAgICB0aGlzLmNyZWRlbnRpYWxzID0gY3JlZGVudGlhbHM7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxufVxuZXhwb3J0cy5BdXRoQ29udGV4dCA9IEF1dGhDb250ZXh0O1xuLyoqXG4gKiBQcm92aWRlciB1c2VkIGR1cmluZyBhdXRoZW50aWNhdGlvbi5cbiAqIEBpbnRlcm5hbFxuICovXG5jbGFzcyBBdXRoUHJvdmlkZXIge1xuICAgIC8qKlxuICAgICAqIFByZXBhcmUgdGhlIGhhbmRzaGFrZSBkb2N1bWVudCBiZWZvcmUgdGhlIGluaXRpYWwgaGFuZHNoYWtlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGhhbmRzaGFrZURvYyAtIFRoZSBkb2N1bWVudCB1c2VkIGZvciB0aGUgaW5pdGlhbCBoYW5kc2hha2Ugb24gYSBjb25uZWN0aW9uXG4gICAgICogQHBhcmFtIGF1dGhDb250ZXh0IC0gQ29udGV4dCBmb3IgYXV0aGVudGljYXRpb24gZmxvd1xuICAgICAqL1xuICAgIGFzeW5jIHByZXBhcmUoaGFuZHNoYWtlRG9jLCBfYXV0aENvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRzaGFrZURvYztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVhdXRoZW50aWNhdGUuXG4gICAgICogQHBhcmFtIGNvbnRleHQgLSBUaGUgc2hhcmVkIGF1dGggY29udGV4dC5cbiAgICAgKi9cbiAgICBhc3luYyByZWF1dGgoY29udGV4dCkge1xuICAgICAgICBpZiAoY29udGV4dC5yZWF1dGhlbnRpY2F0aW5nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1J1bnRpbWVFcnJvcignUmVhdXRoZW50aWNhdGlvbiBhbHJlYWR5IGluIHByb2dyZXNzLicpO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb250ZXh0LnJlYXV0aGVudGljYXRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5hdXRoKGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgY29udGV4dC5yZWF1dGhlbnRpY2F0aW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkF1dGhQcm92aWRlciA9IEF1dGhQcm92aWRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1dGhfcHJvdmlkZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/auth_provider.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/aws_temporary_credentials.js":
/*!************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/aws_temporary_credentials.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LegacyAWSTemporaryCredentialProvider = exports.AWSSDKCredentialProvider = exports.AWSTemporaryCredentialProvider = void 0;\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst AWS_RELATIVE_URI = 'http://169.254.170.2';\nconst AWS_EC2_URI = 'http://169.254.169.254';\nconst AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\n/**\n * @internal\n *\n * Fetches temporary AWS credentials.\n */\nclass AWSTemporaryCredentialProvider {\n    static get awsSDK() {\n        AWSTemporaryCredentialProvider._awsSDK ??= (0, deps_1.getAwsCredentialProvider)();\n        return AWSTemporaryCredentialProvider._awsSDK;\n    }\n    static get isAWSSDKInstalled() {\n        return !('kModuleError' in AWSTemporaryCredentialProvider.awsSDK);\n    }\n}\nexports.AWSTemporaryCredentialProvider = AWSTemporaryCredentialProvider;\n/** @internal */\nclass AWSSDKCredentialProvider extends AWSTemporaryCredentialProvider {\n    /**\n     * The AWS SDK caches credentials automatically and handles refresh when the credentials have expired.\n     * To ensure this occurs, we need to cache the `provider` returned by the AWS sdk and re-use it when fetching credentials.\n     */\n    get provider() {\n        if ('kModuleError' in AWSTemporaryCredentialProvider.awsSDK) {\n            throw AWSTemporaryCredentialProvider.awsSDK.kModuleError;\n        }\n        if (this._provider) {\n            return this._provider;\n        }\n        let { AWS_STS_REGIONAL_ENDPOINTS = '', AWS_REGION = '' } = process.env;\n        AWS_STS_REGIONAL_ENDPOINTS = AWS_STS_REGIONAL_ENDPOINTS.toLowerCase();\n        AWS_REGION = AWS_REGION.toLowerCase();\n        /** The option setting should work only for users who have explicit settings in their environment, the driver should not encode \"defaults\" */\n        const awsRegionSettingsExist = AWS_REGION.length !== 0 && AWS_STS_REGIONAL_ENDPOINTS.length !== 0;\n        /**\n         * The following regions use the global AWS STS endpoint, sts.amazonaws.com, by default\n         * https://docs.aws.amazon.com/sdkref/latest/guide/feature-sts-regionalized-endpoints.html\n         */\n        const LEGACY_REGIONS = new Set([\n            'ap-northeast-1',\n            'ap-south-1',\n            'ap-southeast-1',\n            'ap-southeast-2',\n            'aws-global',\n            'ca-central-1',\n            'eu-central-1',\n            'eu-north-1',\n            'eu-west-1',\n            'eu-west-2',\n            'eu-west-3',\n            'sa-east-1',\n            'us-east-1',\n            'us-east-2',\n            'us-west-1',\n            'us-west-2'\n        ]);\n        /**\n         * If AWS_STS_REGIONAL_ENDPOINTS is set to regional, users are opting into the new behavior of respecting the region settings\n         *\n         * If AWS_STS_REGIONAL_ENDPOINTS is set to legacy, then \"old\" regions need to keep using the global setting.\n         * Technically the SDK gets this wrong, it reaches out to 'sts.us-east-1.amazonaws.com' when it should be 'sts.amazonaws.com'.\n         * That is not our bug to fix here. We leave that up to the SDK.\n         */\n        const useRegionalSts = AWS_STS_REGIONAL_ENDPOINTS === 'regional' ||\n            (AWS_STS_REGIONAL_ENDPOINTS === 'legacy' && !LEGACY_REGIONS.has(AWS_REGION));\n        this._provider =\n            awsRegionSettingsExist && useRegionalSts\n                ? AWSTemporaryCredentialProvider.awsSDK.fromNodeProviderChain({\n                    clientConfig: { region: AWS_REGION }\n                })\n                : AWSTemporaryCredentialProvider.awsSDK.fromNodeProviderChain();\n        return this._provider;\n    }\n    async getCredentials() {\n        /*\n         * Creates a credential provider that will attempt to find credentials from the\n         * following sources (listed in order of precedence):\n         *\n         * - Environment variables exposed via process.env\n         * - SSO credentials from token cache\n         * - Web identity token credentials\n         * - Shared credentials and config ini files\n         * - The EC2/ECS Instance Metadata Service\n         */\n        try {\n            const creds = await this.provider();\n            return {\n                AccessKeyId: creds.accessKeyId,\n                SecretAccessKey: creds.secretAccessKey,\n                Token: creds.sessionToken,\n                Expiration: creds.expiration\n            };\n        }\n        catch (error) {\n            throw new error_1.MongoAWSError(error.message, { cause: error });\n        }\n    }\n}\nexports.AWSSDKCredentialProvider = AWSSDKCredentialProvider;\n/**\n * @internal\n * Fetches credentials manually (without the AWS SDK), as outlined in the [Obtaining Credentials](https://github.com/mongodb/specifications/blob/master/source/auth/auth.md#obtaining-credentials)\n * section of the Auth spec.\n */\nclass LegacyAWSTemporaryCredentialProvider extends AWSTemporaryCredentialProvider {\n    async getCredentials() {\n        // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n        // is set then drivers MUST assume that it was set by an AWS ECS agent\n        if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n            return await (0, utils_1.request)(`${AWS_RELATIVE_URI}${process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`);\n        }\n        // Otherwise assume we are on an EC2 instance\n        // get a token\n        const token = await (0, utils_1.request)(`${AWS_EC2_URI}/latest/api/token`, {\n            method: 'PUT',\n            json: false,\n            headers: { 'X-aws-ec2-metadata-token-ttl-seconds': 30 }\n        });\n        // get role name\n        const roleName = await (0, utils_1.request)(`${AWS_EC2_URI}/${AWS_EC2_PATH}`, {\n            json: false,\n            headers: { 'X-aws-ec2-metadata-token': token }\n        });\n        // get temp credentials\n        const creds = await (0, utils_1.request)(`${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`, {\n            headers: { 'X-aws-ec2-metadata-token': token }\n        });\n        return creds;\n    }\n}\nexports.LegacyAWSTemporaryCredentialProvider = LegacyAWSTemporaryCredentialProvider;\n//# sourceMappingURL=aws_temporary_credentials.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/aws_temporary_credentials.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/gssapi.js":
/*!*****************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/gssapi.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GSSAPI = exports.GSSAPICanonicalizationValue = void 0;\nexports.performGSSAPICanonicalizeHostName = performGSSAPICanonicalizeHostName;\nexports.resolveCname = resolveCname;\nconst dns = __webpack_require__(/*! dns */ \"dns\");\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\n/** @public */\nexports.GSSAPICanonicalizationValue = Object.freeze({\n    on: true,\n    off: false,\n    none: 'none',\n    forward: 'forward',\n    forwardAndReverse: 'forwardAndReverse'\n});\nasync function externalCommand(connection, command) {\n    const response = await connection.command((0, utils_1.ns)('$external.$cmd'), command);\n    return response;\n}\nlet krb;\nclass GSSAPI extends auth_provider_1.AuthProvider {\n    async auth(authContext) {\n        const { connection, credentials } = authContext;\n        if (credentials == null) {\n            throw new error_1.MongoMissingCredentialsError('Credentials required for GSSAPI authentication');\n        }\n        const { username } = credentials;\n        const client = await makeKerberosClient(authContext);\n        const payload = await client.step('');\n        const saslStartResponse = await externalCommand(connection, saslStart(payload));\n        const negotiatedPayload = await negotiate(client, 10, saslStartResponse.payload);\n        const saslContinueResponse = await externalCommand(connection, saslContinue(negotiatedPayload, saslStartResponse.conversationId));\n        const finalizePayload = await finalize(client, username, saslContinueResponse.payload);\n        await externalCommand(connection, {\n            saslContinue: 1,\n            conversationId: saslContinueResponse.conversationId,\n            payload: finalizePayload\n        });\n    }\n}\nexports.GSSAPI = GSSAPI;\nasync function makeKerberosClient(authContext) {\n    const { hostAddress } = authContext.options;\n    const { credentials } = authContext;\n    if (!hostAddress || typeof hostAddress.host !== 'string' || !credentials) {\n        throw new error_1.MongoInvalidArgumentError('Connection must have host and port and credentials defined.');\n    }\n    loadKrb();\n    if ('kModuleError' in krb) {\n        throw krb['kModuleError'];\n    }\n    const { initializeClient } = krb;\n    const { username, password } = credentials;\n    const mechanismProperties = credentials.mechanismProperties;\n    const serviceName = mechanismProperties.SERVICE_NAME ?? 'mongodb';\n    const host = await performGSSAPICanonicalizeHostName(hostAddress.host, mechanismProperties);\n    const initOptions = {};\n    if (password != null) {\n        // TODO(NODE-5139): These do not match the typescript options in initializeClient\n        Object.assign(initOptions, { user: username, password: password });\n    }\n    const spnHost = mechanismProperties.SERVICE_HOST ?? host;\n    let spn = `${serviceName}${process.platform === 'win32' ? '/' : '@'}${spnHost}`;\n    if ('SERVICE_REALM' in mechanismProperties) {\n        spn = `${spn}@${mechanismProperties.SERVICE_REALM}`;\n    }\n    return await initializeClient(spn, initOptions);\n}\nfunction saslStart(payload) {\n    return {\n        saslStart: 1,\n        mechanism: 'GSSAPI',\n        payload,\n        autoAuthorize: 1\n    };\n}\nfunction saslContinue(payload, conversationId) {\n    return {\n        saslContinue: 1,\n        conversationId,\n        payload\n    };\n}\nasync function negotiate(client, retries, payload) {\n    try {\n        const response = await client.step(payload);\n        return response || '';\n    }\n    catch (error) {\n        if (retries === 0) {\n            // Retries exhausted, raise error\n            throw error;\n        }\n        // Adjust number of retries and call step again\n        return await negotiate(client, retries - 1, payload);\n    }\n}\nasync function finalize(client, user, payload) {\n    // GSS Client Unwrap\n    const response = await client.unwrap(payload);\n    return await client.wrap(response || '', { user });\n}\nasync function performGSSAPICanonicalizeHostName(host, mechanismProperties) {\n    const mode = mechanismProperties.CANONICALIZE_HOST_NAME;\n    if (!mode || mode === exports.GSSAPICanonicalizationValue.none) {\n        return host;\n    }\n    // If forward and reverse or true\n    if (mode === exports.GSSAPICanonicalizationValue.on ||\n        mode === exports.GSSAPICanonicalizationValue.forwardAndReverse) {\n        // Perform the lookup of the ip address.\n        const { address } = await dns.promises.lookup(host);\n        try {\n            // Perform a reverse ptr lookup on the ip address.\n            const results = await dns.promises.resolvePtr(address);\n            // If the ptr did not error but had no results, return the host.\n            return results.length > 0 ? results[0] : host;\n        }\n        catch {\n            // This can error as ptr records may not exist for all ips. In this case\n            // fallback to a cname lookup as dns.lookup() does not return the\n            // cname.\n            return await resolveCname(host);\n        }\n    }\n    else {\n        // The case for forward is just to resolve the cname as dns.lookup()\n        // will not return it.\n        return await resolveCname(host);\n    }\n}\nasync function resolveCname(host) {\n    // Attempt to resolve the host name\n    try {\n        const results = await dns.promises.resolveCname(host);\n        // Get the first resolved host id\n        return results.length > 0 ? results[0] : host;\n    }\n    catch {\n        return host;\n    }\n}\n/**\n * Load the Kerberos library.\n */\nfunction loadKrb() {\n    if (!krb) {\n        krb = (0, deps_1.getKerberos)();\n    }\n}\n//# sourceMappingURL=gssapi.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/gssapi.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongo_credentials.js":
/*!****************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongo_credentials.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoCredentials = exports.DEFAULT_ALLOWED_HOSTS = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst gssapi_1 = __webpack_require__(/*! ./gssapi */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/gssapi.js\");\nconst providers_1 = __webpack_require__(/*! ./providers */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/providers.js\");\n// https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst\nfunction getDefaultAuthMechanism(hello) {\n    if (hello) {\n        // If hello contains saslSupportedMechs, use scram-sha-256\n        // if it is available, else scram-sha-1\n        if (Array.isArray(hello.saslSupportedMechs)) {\n            return hello.saslSupportedMechs.includes(providers_1.AuthMechanism.MONGODB_SCRAM_SHA256)\n                ? providers_1.AuthMechanism.MONGODB_SCRAM_SHA256\n                : providers_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n        }\n    }\n    // Default auth mechanism for 4.0 and higher.\n    return providers_1.AuthMechanism.MONGODB_SCRAM_SHA256;\n}\nconst ALLOWED_ENVIRONMENT_NAMES = [\n    'test',\n    'azure',\n    'gcp'\n];\nconst ALLOWED_HOSTS_ERROR = 'Auth mechanism property ALLOWED_HOSTS must be an array of strings.';\n/** @internal */\nexports.DEFAULT_ALLOWED_HOSTS = [\n    '*.mongodb.net',\n    '*.mongodb-qa.net',\n    '*.mongodb-dev.net',\n    '*.mongodbgov.net',\n    'localhost',\n    '127.0.0.1',\n    '::1'\n];\n/** Error for when the token audience is missing in the environment. */\nconst TOKEN_RESOURCE_MISSING_ERROR = 'TOKEN_RESOURCE must be set in the auth mechanism properties when ENVIRONMENT is azure or gcp.';\n/**\n * A representation of the credentials used by MongoDB\n * @public\n */\nclass MongoCredentials {\n    constructor(options) {\n        this.username = options.username ?? '';\n        this.password = options.password;\n        this.source = options.source;\n        if (!this.source && options.db) {\n            this.source = options.db;\n        }\n        this.mechanism = options.mechanism || providers_1.AuthMechanism.MONGODB_DEFAULT;\n        this.mechanismProperties = options.mechanismProperties || {};\n        if (this.mechanism.match(/MONGODB-AWS/i)) {\n            if (!this.username && process.env.AWS_ACCESS_KEY_ID) {\n                this.username = process.env.AWS_ACCESS_KEY_ID;\n            }\n            if (!this.password && process.env.AWS_SECRET_ACCESS_KEY) {\n                this.password = process.env.AWS_SECRET_ACCESS_KEY;\n            }\n            if (this.mechanismProperties.AWS_SESSION_TOKEN == null &&\n                process.env.AWS_SESSION_TOKEN != null) {\n                this.mechanismProperties = {\n                    ...this.mechanismProperties,\n                    AWS_SESSION_TOKEN: process.env.AWS_SESSION_TOKEN\n                };\n            }\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_OIDC && !this.mechanismProperties.ALLOWED_HOSTS) {\n            this.mechanismProperties = {\n                ...this.mechanismProperties,\n                ALLOWED_HOSTS: exports.DEFAULT_ALLOWED_HOSTS\n            };\n        }\n        Object.freeze(this.mechanismProperties);\n        Object.freeze(this);\n    }\n    /** Determines if two MongoCredentials objects are equivalent */\n    equals(other) {\n        return (this.mechanism === other.mechanism &&\n            this.username === other.username &&\n            this.password === other.password &&\n            this.source === other.source);\n    }\n    /**\n     * If the authentication mechanism is set to \"default\", resolves the authMechanism\n     * based on the server version and server supported sasl mechanisms.\n     *\n     * @param hello - A hello response from the server\n     */\n    resolveAuthMechanism(hello) {\n        // If the mechanism is not \"default\", then it does not need to be resolved\n        if (this.mechanism.match(/DEFAULT/i)) {\n            return new MongoCredentials({\n                username: this.username,\n                password: this.password,\n                source: this.source,\n                mechanism: getDefaultAuthMechanism(hello),\n                mechanismProperties: this.mechanismProperties\n            });\n        }\n        return this;\n    }\n    validate() {\n        if ((this.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI ||\n            this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN ||\n            this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA1 ||\n            this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA256) &&\n            !this.username) {\n            throw new error_1.MongoMissingCredentialsError(`Username required for mechanism '${this.mechanism}'`);\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_OIDC) {\n            if (this.username &&\n                this.mechanismProperties.ENVIRONMENT &&\n                this.mechanismProperties.ENVIRONMENT !== 'azure') {\n                throw new error_1.MongoInvalidArgumentError(`username and ENVIRONMENT '${this.mechanismProperties.ENVIRONMENT}' may not be used together for mechanism '${this.mechanism}'.`);\n            }\n            if (this.username && this.password) {\n                throw new error_1.MongoInvalidArgumentError(`No password is allowed in ENVIRONMENT '${this.mechanismProperties.ENVIRONMENT}' for '${this.mechanism}'.`);\n            }\n            if ((this.mechanismProperties.ENVIRONMENT === 'azure' ||\n                this.mechanismProperties.ENVIRONMENT === 'gcp') &&\n                !this.mechanismProperties.TOKEN_RESOURCE) {\n                throw new error_1.MongoInvalidArgumentError(TOKEN_RESOURCE_MISSING_ERROR);\n            }\n            if (this.mechanismProperties.ENVIRONMENT &&\n                !ALLOWED_ENVIRONMENT_NAMES.includes(this.mechanismProperties.ENVIRONMENT)) {\n                throw new error_1.MongoInvalidArgumentError(`Currently only a ENVIRONMENT in ${ALLOWED_ENVIRONMENT_NAMES.join(',')} is supported for mechanism '${this.mechanism}'.`);\n            }\n            if (!this.mechanismProperties.ENVIRONMENT &&\n                !this.mechanismProperties.OIDC_CALLBACK &&\n                !this.mechanismProperties.OIDC_HUMAN_CALLBACK) {\n                throw new error_1.MongoInvalidArgumentError(`Either a ENVIRONMENT, OIDC_CALLBACK, or OIDC_HUMAN_CALLBACK must be specified for mechanism '${this.mechanism}'.`);\n            }\n            if (this.mechanismProperties.ALLOWED_HOSTS) {\n                const hosts = this.mechanismProperties.ALLOWED_HOSTS;\n                if (!Array.isArray(hosts)) {\n                    throw new error_1.MongoInvalidArgumentError(ALLOWED_HOSTS_ERROR);\n                }\n                for (const host of hosts) {\n                    if (typeof host !== 'string') {\n                        throw new error_1.MongoInvalidArgumentError(ALLOWED_HOSTS_ERROR);\n                    }\n                }\n            }\n        }\n        if (providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(this.mechanism)) {\n            if (this.source != null && this.source !== '$external') {\n                // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n                throw new error_1.MongoAPIError(`Invalid source '${this.source}' for mechanism '${this.mechanism}' specified.`);\n            }\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN && this.source == null) {\n            // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n            throw new error_1.MongoAPIError('PLAIN Authentication Mechanism needs an auth source');\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_X509 && this.password != null) {\n            if (this.password === '') {\n                Reflect.set(this, 'password', undefined);\n                return;\n            }\n            // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n            throw new error_1.MongoAPIError(`Password not allowed for mechanism MONGODB-X509`);\n        }\n        const canonicalization = this.mechanismProperties.CANONICALIZE_HOST_NAME ?? false;\n        if (!Object.values(gssapi_1.GSSAPICanonicalizationValue).includes(canonicalization)) {\n            throw new error_1.MongoAPIError(`Invalid CANONICALIZE_HOST_NAME value: ${canonicalization}`);\n        }\n    }\n    static merge(creds, options) {\n        return new MongoCredentials({\n            username: options.username ?? creds?.username ?? '',\n            password: options.password ?? creds?.password ?? '',\n            mechanism: options.mechanism ?? creds?.mechanism ?? providers_1.AuthMechanism.MONGODB_DEFAULT,\n            mechanismProperties: options.mechanismProperties ?? creds?.mechanismProperties ?? {},\n            source: options.source ?? options.db ?? creds?.source ?? 'admin'\n        });\n    }\n}\nexports.MongoCredentials = MongoCredentials;\n//# sourceMappingURL=mongo_credentials.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongo_credentials.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_aws.js":
/*!**********************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_aws.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoDBAWS = void 0;\nconst BSON = __webpack_require__(/*! ../../bson */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\");\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nconst aws_temporary_credentials_1 = __webpack_require__(/*! ./aws_temporary_credentials */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/aws_temporary_credentials.js\");\nconst mongo_credentials_1 = __webpack_require__(/*! ./mongo_credentials */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongo_credentials.js\");\nconst providers_1 = __webpack_require__(/*! ./providers */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/providers.js\");\nconst ASCII_N = 110;\nconst bsonOptions = {\n    useBigInt64: false,\n    promoteLongs: true,\n    promoteValues: true,\n    promoteBuffers: false,\n    bsonRegExp: false\n};\nclass MongoDBAWS extends auth_provider_1.AuthProvider {\n    constructor() {\n        super();\n        this.credentialFetcher = aws_temporary_credentials_1.AWSTemporaryCredentialProvider.isAWSSDKInstalled\n            ? new aws_temporary_credentials_1.AWSSDKCredentialProvider()\n            : new aws_temporary_credentials_1.LegacyAWSTemporaryCredentialProvider();\n    }\n    async auth(authContext) {\n        const { connection } = authContext;\n        if (!authContext.credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        if ('kModuleError' in deps_1.aws4) {\n            throw deps_1.aws4['kModuleError'];\n        }\n        const { sign } = deps_1.aws4;\n        if ((0, utils_1.maxWireVersion)(connection) < 9) {\n            throw new error_1.MongoCompatibilityError('MONGODB-AWS authentication requires MongoDB version 4.4 or later');\n        }\n        if (!authContext.credentials.username) {\n            authContext.credentials = await makeTempCredentials(authContext.credentials, this.credentialFetcher);\n        }\n        const { credentials } = authContext;\n        const accessKeyId = credentials.username;\n        const secretAccessKey = credentials.password;\n        // Allow the user to specify an AWS session token for authentication with temporary credentials.\n        const sessionToken = credentials.mechanismProperties.AWS_SESSION_TOKEN;\n        // If all three defined, include sessionToken, else include username and pass, else no credentials\n        const awsCredentials = accessKeyId && secretAccessKey && sessionToken\n            ? { accessKeyId, secretAccessKey, sessionToken }\n            : accessKeyId && secretAccessKey\n                ? { accessKeyId, secretAccessKey }\n                : undefined;\n        const db = credentials.source;\n        const nonce = await (0, utils_1.randomBytes)(32);\n        // All messages between MongoDB clients and servers are sent as BSON objects\n        // in the payload field of saslStart and saslContinue.\n        const saslStart = {\n            saslStart: 1,\n            mechanism: 'MONGODB-AWS',\n            payload: BSON.serialize({ r: nonce, p: ASCII_N }, bsonOptions)\n        };\n        const saslStartResponse = await connection.command((0, utils_1.ns)(`${db}.$cmd`), saslStart, undefined);\n        const serverResponse = BSON.deserialize(saslStartResponse.payload.buffer, bsonOptions);\n        const host = serverResponse.h;\n        const serverNonce = serverResponse.s.buffer;\n        if (serverNonce.length !== 64) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError(`Invalid server nonce length ${serverNonce.length}, expected 64`);\n        }\n        if (!utils_1.ByteUtils.equals(serverNonce.subarray(0, nonce.byteLength), nonce)) {\n            // throw because the serverNonce's leading 32 bytes must equal the client nonce's 32 bytes\n            // https://github.com/mongodb/specifications/blob/875446db44aade414011731840831f38a6c668df/source/auth/auth.rst#id11\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError('Server nonce does not begin with client nonce');\n        }\n        if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError(`Server returned an invalid host: \"${host}\"`);\n        }\n        const body = 'Action=GetCallerIdentity&Version=2011-06-15';\n        const options = sign({\n            method: 'POST',\n            host,\n            region: deriveRegion(serverResponse.h),\n            service: 'sts',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Content-Length': body.length,\n                'X-MongoDB-Server-Nonce': utils_1.ByteUtils.toBase64(serverNonce),\n                'X-MongoDB-GS2-CB-Flag': 'n'\n            },\n            path: '/',\n            body\n        }, awsCredentials);\n        const payload = {\n            a: options.headers.Authorization,\n            d: options.headers['X-Amz-Date']\n        };\n        if (sessionToken) {\n            payload.t = sessionToken;\n        }\n        const saslContinue = {\n            saslContinue: 1,\n            conversationId: 1,\n            payload: BSON.serialize(payload, bsonOptions)\n        };\n        await connection.command((0, utils_1.ns)(`${db}.$cmd`), saslContinue, undefined);\n    }\n}\nexports.MongoDBAWS = MongoDBAWS;\nasync function makeTempCredentials(credentials, awsCredentialFetcher) {\n    function makeMongoCredentialsFromAWSTemp(creds) {\n        // The AWS session token (creds.Token) may or may not be set.\n        if (!creds.AccessKeyId || !creds.SecretAccessKey) {\n            throw new error_1.MongoMissingCredentialsError('Could not obtain temporary MONGODB-AWS credentials');\n        }\n        return new mongo_credentials_1.MongoCredentials({\n            username: creds.AccessKeyId,\n            password: creds.SecretAccessKey,\n            source: credentials.source,\n            mechanism: providers_1.AuthMechanism.MONGODB_AWS,\n            mechanismProperties: {\n                AWS_SESSION_TOKEN: creds.Token\n            }\n        });\n    }\n    const temporaryCredentials = await awsCredentialFetcher.getCredentials();\n    return makeMongoCredentialsFromAWSTemp(temporaryCredentials);\n}\nfunction deriveRegion(host) {\n    const parts = host.split('.');\n    if (parts.length === 1 || parts[1] === 'amazonaws') {\n        return 'us-east-1';\n    }\n    return parts[1];\n}\n//# sourceMappingURL=mongodb_aws.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_aws.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoDBOIDC = exports.OIDC_WORKFLOWS = exports.OIDC_VERSION = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nconst azure_machine_workflow_1 = __webpack_require__(/*! ./mongodb_oidc/azure_machine_workflow */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_machine_workflow.js\");\nconst gcp_machine_workflow_1 = __webpack_require__(/*! ./mongodb_oidc/gcp_machine_workflow */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/gcp_machine_workflow.js\");\nconst token_cache_1 = __webpack_require__(/*! ./mongodb_oidc/token_cache */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_cache.js\");\nconst token_machine_workflow_1 = __webpack_require__(/*! ./mongodb_oidc/token_machine_workflow */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_machine_workflow.js\");\n/** Error when credentials are missing. */\nconst MISSING_CREDENTIALS_ERROR = 'AuthContext must provide credentials.';\n/** The current version of OIDC implementation. */\nexports.OIDC_VERSION = 1;\n/** @internal */\nexports.OIDC_WORKFLOWS = new Map();\nexports.OIDC_WORKFLOWS.set('test', () => new token_machine_workflow_1.TokenMachineWorkflow(new token_cache_1.TokenCache()));\nexports.OIDC_WORKFLOWS.set('azure', () => new azure_machine_workflow_1.AzureMachineWorkflow(new token_cache_1.TokenCache()));\nexports.OIDC_WORKFLOWS.set('gcp', () => new gcp_machine_workflow_1.GCPMachineWorkflow(new token_cache_1.TokenCache()));\n/**\n * OIDC auth provider.\n */\nclass MongoDBOIDC extends auth_provider_1.AuthProvider {\n    /**\n     * Instantiate the auth provider.\n     */\n    constructor(workflow) {\n        super();\n        if (!workflow) {\n            throw new error_1.MongoInvalidArgumentError('No workflow provided to the OIDC auth provider.');\n        }\n        this.workflow = workflow;\n    }\n    /**\n     * Authenticate using OIDC\n     */\n    async auth(authContext) {\n        const { connection, reauthenticating, response } = authContext;\n        if (response?.speculativeAuthenticate?.done) {\n            return;\n        }\n        const credentials = getCredentials(authContext);\n        if (reauthenticating) {\n            await this.workflow.reauthenticate(connection, credentials);\n        }\n        else {\n            await this.workflow.execute(connection, credentials, response);\n        }\n    }\n    /**\n     * Add the speculative auth for the initial handshake.\n     */\n    async prepare(handshakeDoc, authContext) {\n        const { connection } = authContext;\n        const credentials = getCredentials(authContext);\n        const result = await this.workflow.speculativeAuth(connection, credentials);\n        return { ...handshakeDoc, ...result };\n    }\n}\nexports.MongoDBOIDC = MongoDBOIDC;\n/**\n * Get credentials from the auth context, throwing if they do not exist.\n */\nfunction getCredentials(authContext) {\n    const { credentials } = authContext;\n    if (!credentials) {\n        throw new error_1.MongoMissingCredentialsError(MISSING_CREDENTIALS_ERROR);\n    }\n    return credentials;\n}\n//# sourceMappingURL=mongodb_oidc.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQixHQUFHLHNCQUFzQixHQUFHLG9CQUFvQjtBQUNuRSxnQkFBZ0IsbUJBQU8sQ0FBQyxpR0FBYTtBQUNyQyx3QkFBd0IsbUJBQU8sQ0FBQyx1SEFBaUI7QUFDakQsaUNBQWlDLG1CQUFPLENBQUMsbUtBQXVDO0FBQ2hGLCtCQUErQixtQkFBTyxDQUFDLCtKQUFxQztBQUM1RSxzQkFBc0IsbUJBQU8sQ0FBQyw2SUFBNEI7QUFDMUQsaUNBQWlDLG1CQUFPLENBQUMsbUtBQXVDO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IseUNBQXlDO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixhQUFhO0FBQzdCO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksY0FBYztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9saW5rdXMvR2l0aHViL21vbm90d28vcGF5bG9hZC1wbHVnaW4tbWV0YS9ub2RlX21vZHVsZXMvLnBucG0vbW9uZ29kYkA2LjEwLjAvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9tb25nb2RiX29pZGMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1vbmdvREJPSURDID0gZXhwb3J0cy5PSURDX1dPUktGTE9XUyA9IGV4cG9ydHMuT0lEQ19WRVJTSU9OID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi9lcnJvclwiKTtcbmNvbnN0IGF1dGhfcHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL2F1dGhfcHJvdmlkZXJcIik7XG5jb25zdCBhenVyZV9tYWNoaW5lX3dvcmtmbG93XzEgPSByZXF1aXJlKFwiLi9tb25nb2RiX29pZGMvYXp1cmVfbWFjaGluZV93b3JrZmxvd1wiKTtcbmNvbnN0IGdjcF9tYWNoaW5lX3dvcmtmbG93XzEgPSByZXF1aXJlKFwiLi9tb25nb2RiX29pZGMvZ2NwX21hY2hpbmVfd29ya2Zsb3dcIik7XG5jb25zdCB0b2tlbl9jYWNoZV8xID0gcmVxdWlyZShcIi4vbW9uZ29kYl9vaWRjL3Rva2VuX2NhY2hlXCIpO1xuY29uc3QgdG9rZW5fbWFjaGluZV93b3JrZmxvd18xID0gcmVxdWlyZShcIi4vbW9uZ29kYl9vaWRjL3Rva2VuX21hY2hpbmVfd29ya2Zsb3dcIik7XG4vKiogRXJyb3Igd2hlbiBjcmVkZW50aWFscyBhcmUgbWlzc2luZy4gKi9cbmNvbnN0IE1JU1NJTkdfQ1JFREVOVElBTFNfRVJST1IgPSAnQXV0aENvbnRleHQgbXVzdCBwcm92aWRlIGNyZWRlbnRpYWxzLic7XG4vKiogVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBPSURDIGltcGxlbWVudGF0aW9uLiAqL1xuZXhwb3J0cy5PSURDX1ZFUlNJT04gPSAxO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0cy5PSURDX1dPUktGTE9XUyA9IG5ldyBNYXAoKTtcbmV4cG9ydHMuT0lEQ19XT1JLRkxPV1Muc2V0KCd0ZXN0JywgKCkgPT4gbmV3IHRva2VuX21hY2hpbmVfd29ya2Zsb3dfMS5Ub2tlbk1hY2hpbmVXb3JrZmxvdyhuZXcgdG9rZW5fY2FjaGVfMS5Ub2tlbkNhY2hlKCkpKTtcbmV4cG9ydHMuT0lEQ19XT1JLRkxPV1Muc2V0KCdhenVyZScsICgpID0+IG5ldyBhenVyZV9tYWNoaW5lX3dvcmtmbG93XzEuQXp1cmVNYWNoaW5lV29ya2Zsb3cobmV3IHRva2VuX2NhY2hlXzEuVG9rZW5DYWNoZSgpKSk7XG5leHBvcnRzLk9JRENfV09SS0ZMT1dTLnNldCgnZ2NwJywgKCkgPT4gbmV3IGdjcF9tYWNoaW5lX3dvcmtmbG93XzEuR0NQTWFjaGluZVdvcmtmbG93KG5ldyB0b2tlbl9jYWNoZV8xLlRva2VuQ2FjaGUoKSkpO1xuLyoqXG4gKiBPSURDIGF1dGggcHJvdmlkZXIuXG4gKi9cbmNsYXNzIE1vbmdvREJPSURDIGV4dGVuZHMgYXV0aF9wcm92aWRlcl8xLkF1dGhQcm92aWRlciB7XG4gICAgLyoqXG4gICAgICogSW5zdGFudGlhdGUgdGhlIGF1dGggcHJvdmlkZXIuXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iod29ya2Zsb3cpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgaWYgKCF3b3JrZmxvdykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcignTm8gd29ya2Zsb3cgcHJvdmlkZWQgdG8gdGhlIE9JREMgYXV0aCBwcm92aWRlci4nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLndvcmtmbG93ID0gd29ya2Zsb3c7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEF1dGhlbnRpY2F0ZSB1c2luZyBPSURDXG4gICAgICovXG4gICAgYXN5bmMgYXV0aChhdXRoQ29udGV4dCkge1xuICAgICAgICBjb25zdCB7IGNvbm5lY3Rpb24sIHJlYXV0aGVudGljYXRpbmcsIHJlc3BvbnNlIH0gPSBhdXRoQ29udGV4dDtcbiAgICAgICAgaWYgKHJlc3BvbnNlPy5zcGVjdWxhdGl2ZUF1dGhlbnRpY2F0ZT8uZG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNyZWRlbnRpYWxzID0gZ2V0Q3JlZGVudGlhbHMoYXV0aENvbnRleHQpO1xuICAgICAgICBpZiAocmVhdXRoZW50aWNhdGluZykge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy53b3JrZmxvdy5yZWF1dGhlbnRpY2F0ZShjb25uZWN0aW9uLCBjcmVkZW50aWFscyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLndvcmtmbG93LmV4ZWN1dGUoY29ubmVjdGlvbiwgY3JlZGVudGlhbHMsIHJlc3BvbnNlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGQgdGhlIHNwZWN1bGF0aXZlIGF1dGggZm9yIHRoZSBpbml0aWFsIGhhbmRzaGFrZS5cbiAgICAgKi9cbiAgICBhc3luYyBwcmVwYXJlKGhhbmRzaGFrZURvYywgYXV0aENvbnRleHQpIHtcbiAgICAgICAgY29uc3QgeyBjb25uZWN0aW9uIH0gPSBhdXRoQ29udGV4dDtcbiAgICAgICAgY29uc3QgY3JlZGVudGlhbHMgPSBnZXRDcmVkZW50aWFscyhhdXRoQ29udGV4dCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMud29ya2Zsb3cuc3BlY3VsYXRpdmVBdXRoKGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzKTtcbiAgICAgICAgcmV0dXJuIHsgLi4uaGFuZHNoYWtlRG9jLCAuLi5yZXN1bHQgfTtcbiAgICB9XG59XG5leHBvcnRzLk1vbmdvREJPSURDID0gTW9uZ29EQk9JREM7XG4vKipcbiAqIEdldCBjcmVkZW50aWFscyBmcm9tIHRoZSBhdXRoIGNvbnRleHQsIHRocm93aW5nIGlmIHRoZXkgZG8gbm90IGV4aXN0LlxuICovXG5mdW5jdGlvbiBnZXRDcmVkZW50aWFscyhhdXRoQ29udGV4dCkge1xuICAgIGNvbnN0IHsgY3JlZGVudGlhbHMgfSA9IGF1dGhDb250ZXh0O1xuICAgIGlmICghY3JlZGVudGlhbHMpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29NaXNzaW5nQ3JlZGVudGlhbHNFcnJvcihNSVNTSU5HX0NSRURFTlRJQUxTX0VSUk9SKTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWRlbnRpYWxzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9uZ29kYl9vaWRjLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/automated_callback_workflow.js":
/*!***************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/automated_callback_workflow.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AutomatedCallbackWorkflow = void 0;\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst timeout_1 = __webpack_require__(/*! ../../../timeout */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/timeout.js\");\nconst mongodb_oidc_1 = __webpack_require__(/*! ../mongodb_oidc */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js\");\nconst callback_workflow_1 = __webpack_require__(/*! ./callback_workflow */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_workflow.js\");\n/**\n * Class implementing behaviour for the non human callback workflow.\n * @internal\n */\nclass AutomatedCallbackWorkflow extends callback_workflow_1.CallbackWorkflow {\n    /**\n     * Instantiate the human callback workflow.\n     */\n    constructor(cache, callback) {\n        super(cache, callback);\n    }\n    /**\n     * Execute the OIDC callback workflow.\n     */\n    async execute(connection, credentials) {\n        // If there is a cached access token, try to authenticate with it. If\n        // authentication fails with an Authentication error (18),\n        // invalidate the access token, fetch a new access token, and try\n        // to authenticate again.\n        // If the server fails for any other reason, do not clear the cache.\n        if (this.cache.hasAccessToken) {\n            const token = this.cache.getAccessToken();\n            try {\n                return await this.finishAuthentication(connection, credentials, token);\n            }\n            catch (error) {\n                if (error instanceof error_1.MongoError &&\n                    error.code === error_1.MONGODB_ERROR_CODES.AuthenticationFailed) {\n                    this.cache.removeAccessToken();\n                    return await this.execute(connection, credentials);\n                }\n                else {\n                    throw error;\n                }\n            }\n        }\n        const response = await this.fetchAccessToken(credentials);\n        this.cache.put(response);\n        connection.accessToken = response.accessToken;\n        await this.finishAuthentication(connection, credentials, response.accessToken);\n    }\n    /**\n     * Fetches the access token using the callback.\n     */\n    async fetchAccessToken(credentials) {\n        const controller = new AbortController();\n        const params = {\n            timeoutContext: controller.signal,\n            version: mongodb_oidc_1.OIDC_VERSION\n        };\n        if (credentials.username) {\n            params.username = credentials.username;\n        }\n        const timeout = timeout_1.Timeout.expires(callback_workflow_1.AUTOMATED_TIMEOUT_MS);\n        try {\n            return await Promise.race([this.executeAndValidateCallback(params), timeout]);\n        }\n        catch (error) {\n            if (timeout_1.TimeoutError.is(error)) {\n                controller.abort();\n                throw new error_1.MongoOIDCError(`OIDC callback timed out after ${callback_workflow_1.AUTOMATED_TIMEOUT_MS}ms.`);\n            }\n            throw error;\n        }\n        finally {\n            timeout.clear();\n        }\n    }\n}\nexports.AutomatedCallbackWorkflow = AutomatedCallbackWorkflow;\n//# sourceMappingURL=automated_callback_workflow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjL2F1dG9tYXRlZF9jYWxsYmFja193b3JrZmxvdy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQ0FBaUM7QUFDakMsZ0JBQWdCLG1CQUFPLENBQUMsb0dBQWdCO0FBQ3hDLGtCQUFrQixtQkFBTyxDQUFDLHdHQUFrQjtBQUM1Qyx1QkFBdUIsbUJBQU8sQ0FBQyxzSEFBaUI7QUFDaEQsNEJBQTRCLG1CQUFPLENBQUMsNElBQXFCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtGQUFrRix5Q0FBeUM7QUFDM0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQyIsInNvdXJjZXMiOlsiL1VzZXJzL2xpbmt1cy9HaXRodWIvbW9ub3R3by9wYXlsb2FkLXBsdWdpbi1tZXRhL25vZGVfbW9kdWxlcy8ucG5wbS9tb25nb2RiQDYuMTAuMC9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9hdXRvbWF0ZWRfY2FsbGJhY2tfd29ya2Zsb3cuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkF1dG9tYXRlZENhbGxiYWNrV29ya2Zsb3cgPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL2Vycm9yXCIpO1xuY29uc3QgdGltZW91dF8xID0gcmVxdWlyZShcIi4uLy4uLy4uL3RpbWVvdXRcIik7XG5jb25zdCBtb25nb2RiX29pZGNfMSA9IHJlcXVpcmUoXCIuLi9tb25nb2RiX29pZGNcIik7XG5jb25zdCBjYWxsYmFja193b3JrZmxvd18xID0gcmVxdWlyZShcIi4vY2FsbGJhY2tfd29ya2Zsb3dcIik7XG4vKipcbiAqIENsYXNzIGltcGxlbWVudGluZyBiZWhhdmlvdXIgZm9yIHRoZSBub24gaHVtYW4gY2FsbGJhY2sgd29ya2Zsb3cuXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgQXV0b21hdGVkQ2FsbGJhY2tXb3JrZmxvdyBleHRlbmRzIGNhbGxiYWNrX3dvcmtmbG93XzEuQ2FsbGJhY2tXb3JrZmxvdyB7XG4gICAgLyoqXG4gICAgICogSW5zdGFudGlhdGUgdGhlIGh1bWFuIGNhbGxiYWNrIHdvcmtmbG93LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNhY2hlLCBjYWxsYmFjaykge1xuICAgICAgICBzdXBlcihjYWNoZSwgY2FsbGJhY2spO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIHRoZSBPSURDIGNhbGxiYWNrIHdvcmtmbG93LlxuICAgICAqL1xuICAgIGFzeW5jIGV4ZWN1dGUoY29ubmVjdGlvbiwgY3JlZGVudGlhbHMpIHtcbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgYSBjYWNoZWQgYWNjZXNzIHRva2VuLCB0cnkgdG8gYXV0aGVudGljYXRlIHdpdGggaXQuIElmXG4gICAgICAgIC8vIGF1dGhlbnRpY2F0aW9uIGZhaWxzIHdpdGggYW4gQXV0aGVudGljYXRpb24gZXJyb3IgKDE4KSxcbiAgICAgICAgLy8gaW52YWxpZGF0ZSB0aGUgYWNjZXNzIHRva2VuLCBmZXRjaCBhIG5ldyBhY2Nlc3MgdG9rZW4sIGFuZCB0cnlcbiAgICAgICAgLy8gdG8gYXV0aGVudGljYXRlIGFnYWluLlxuICAgICAgICAvLyBJZiB0aGUgc2VydmVyIGZhaWxzIGZvciBhbnkgb3RoZXIgcmVhc29uLCBkbyBub3QgY2xlYXIgdGhlIGNhY2hlLlxuICAgICAgICBpZiAodGhpcy5jYWNoZS5oYXNBY2Nlc3NUb2tlbikge1xuICAgICAgICAgICAgY29uc3QgdG9rZW4gPSB0aGlzLmNhY2hlLmdldEFjY2Vzc1Rva2VuKCk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmZpbmlzaEF1dGhlbnRpY2F0aW9uKGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzLCB0b2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBlcnJvcl8xLk1vbmdvRXJyb3IgJiZcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IuY29kZSA9PT0gZXJyb3JfMS5NT05HT0RCX0VSUk9SX0NPREVTLkF1dGhlbnRpY2F0aW9uRmFpbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FjaGUucmVtb3ZlQWNjZXNzVG9rZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZXhlY3V0ZShjb25uZWN0aW9uLCBjcmVkZW50aWFscyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmZldGNoQWNjZXNzVG9rZW4oY3JlZGVudGlhbHMpO1xuICAgICAgICB0aGlzLmNhY2hlLnB1dChyZXNwb25zZSk7XG4gICAgICAgIGNvbm5lY3Rpb24uYWNjZXNzVG9rZW4gPSByZXNwb25zZS5hY2Nlc3NUb2tlbjtcbiAgICAgICAgYXdhaXQgdGhpcy5maW5pc2hBdXRoZW50aWNhdGlvbihjb25uZWN0aW9uLCBjcmVkZW50aWFscywgcmVzcG9uc2UuYWNjZXNzVG9rZW4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIHRoZSBhY2Nlc3MgdG9rZW4gdXNpbmcgdGhlIGNhbGxiYWNrLlxuICAgICAqL1xuICAgIGFzeW5jIGZldGNoQWNjZXNzVG9rZW4oY3JlZGVudGlhbHMpIHtcbiAgICAgICAgY29uc3QgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICAgICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICAgICAgdGltZW91dENvbnRleHQ6IGNvbnRyb2xsZXIuc2lnbmFsLFxuICAgICAgICAgICAgdmVyc2lvbjogbW9uZ29kYl9vaWRjXzEuT0lEQ19WRVJTSU9OXG4gICAgICAgIH07XG4gICAgICAgIGlmIChjcmVkZW50aWFscy51c2VybmFtZSkge1xuICAgICAgICAgICAgcGFyYW1zLnVzZXJuYW1lID0gY3JlZGVudGlhbHMudXNlcm5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGltZW91dCA9IHRpbWVvdXRfMS5UaW1lb3V0LmV4cGlyZXMoY2FsbGJhY2tfd29ya2Zsb3dfMS5BVVRPTUFURURfVElNRU9VVF9NUyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgUHJvbWlzZS5yYWNlKFt0aGlzLmV4ZWN1dGVBbmRWYWxpZGF0ZUNhbGxiYWNrKHBhcmFtcyksIHRpbWVvdXRdKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmICh0aW1lb3V0XzEuVGltZW91dEVycm9yLmlzKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb09JRENFcnJvcihgT0lEQyBjYWxsYmFjayB0aW1lZCBvdXQgYWZ0ZXIgJHtjYWxsYmFja193b3JrZmxvd18xLkFVVE9NQVRFRF9USU1FT1VUX01TfW1zLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aW1lb3V0LmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkF1dG9tYXRlZENhbGxiYWNrV29ya2Zsb3cgPSBBdXRvbWF0ZWRDYWxsYmFja1dvcmtmbG93O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV0b21hdGVkX2NhbGxiYWNrX3dvcmtmbG93LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/automated_callback_workflow.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_machine_workflow.js":
/*!**********************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_machine_workflow.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AzureMachineWorkflow = void 0;\nconst azure_1 = __webpack_require__(/*! ../../../client-side-encryption/providers/azure */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/providers/azure.js\");\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst machine_workflow_1 = __webpack_require__(/*! ./machine_workflow */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/machine_workflow.js\");\n/** Azure request headers. */\nconst AZURE_HEADERS = Object.freeze({ Metadata: 'true', Accept: 'application/json' });\n/** Invalid endpoint result error. */\nconst ENDPOINT_RESULT_ERROR = 'Azure endpoint did not return a value with only access_token and expires_in properties';\n/** Error for when the token audience is missing in the environment. */\nconst TOKEN_RESOURCE_MISSING_ERROR = 'TOKEN_RESOURCE must be set in the auth mechanism properties when ENVIRONMENT is azure.';\n/**\n * Device workflow implementation for Azure.\n *\n * @internal\n */\nclass AzureMachineWorkflow extends machine_workflow_1.MachineWorkflow {\n    /**\n     * Instantiate the machine workflow.\n     */\n    constructor(cache) {\n        super(cache);\n    }\n    /**\n     * Get the token from the environment.\n     */\n    async getToken(credentials) {\n        const tokenAudience = credentials?.mechanismProperties.TOKEN_RESOURCE;\n        const username = credentials?.username;\n        if (!tokenAudience) {\n            throw new error_1.MongoAzureError(TOKEN_RESOURCE_MISSING_ERROR);\n        }\n        const response = await getAzureTokenData(tokenAudience, username);\n        if (!isEndpointResultValid(response)) {\n            throw new error_1.MongoAzureError(ENDPOINT_RESULT_ERROR);\n        }\n        return response;\n    }\n}\nexports.AzureMachineWorkflow = AzureMachineWorkflow;\n/**\n * Hit the Azure endpoint to get the token data.\n */\nasync function getAzureTokenData(tokenAudience, username) {\n    const url = new URL(azure_1.AZURE_BASE_URL);\n    (0, azure_1.addAzureParams)(url, tokenAudience, username);\n    const response = await (0, utils_1.get)(url, {\n        headers: AZURE_HEADERS\n    });\n    if (response.status !== 200) {\n        throw new error_1.MongoAzureError(`Status code ${response.status} returned from the Azure endpoint. Response body: ${response.body}`);\n    }\n    const result = JSON.parse(response.body);\n    return {\n        access_token: result.access_token,\n        expires_in: Number(result.expires_in)\n    };\n}\n/**\n * Determines if a result returned from the endpoint is valid.\n * This means the result is not nullish, contains the access_token required field\n * and the expires_in required field.\n */\nfunction isEndpointResultValid(token) {\n    if (token == null || typeof token !== 'object')\n        return false;\n    return ('access_token' in token &&\n        typeof token.access_token === 'string' &&\n        'expires_in' in token &&\n        typeof token.expires_in === 'number');\n}\n//# sourceMappingURL=azure_machine_workflow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjL2F6dXJlX21hY2hpbmVfd29ya2Zsb3cuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCO0FBQzVCLGdCQUFnQixtQkFBTyxDQUFDLHNLQUFpRDtBQUN6RSxnQkFBZ0IsbUJBQU8sQ0FBQyxvR0FBZ0I7QUFDeEMsZ0JBQWdCLG1CQUFPLENBQUMsb0dBQWdCO0FBQ3hDLDJCQUEyQixtQkFBTyxDQUFDLDBJQUFvQjtBQUN2RDtBQUNBLHNDQUFzQyw4Q0FBOEM7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EseURBQXlELGlCQUFpQixtREFBbUQsY0FBYztBQUMzSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9saW5rdXMvR2l0aHViL21vbm90d28vcGF5bG9hZC1wbHVnaW4tbWV0YS9ub2RlX21vZHVsZXMvLnBucG0vbW9uZ29kYkA2LjEwLjAvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9tb25nb2RiX29pZGMvYXp1cmVfbWFjaGluZV93b3JrZmxvdy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXp1cmVNYWNoaW5lV29ya2Zsb3cgPSB2b2lkIDA7XG5jb25zdCBhenVyZV8xID0gcmVxdWlyZShcIi4uLy4uLy4uL2NsaWVudC1zaWRlLWVuY3J5cHRpb24vcHJvdmlkZXJzL2F6dXJlXCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9lcnJvclwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vdXRpbHNcIik7XG5jb25zdCBtYWNoaW5lX3dvcmtmbG93XzEgPSByZXF1aXJlKFwiLi9tYWNoaW5lX3dvcmtmbG93XCIpO1xuLyoqIEF6dXJlIHJlcXVlc3QgaGVhZGVycy4gKi9cbmNvbnN0IEFaVVJFX0hFQURFUlMgPSBPYmplY3QuZnJlZXplKHsgTWV0YWRhdGE6ICd0cnVlJywgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicgfSk7XG4vKiogSW52YWxpZCBlbmRwb2ludCByZXN1bHQgZXJyb3IuICovXG5jb25zdCBFTkRQT0lOVF9SRVNVTFRfRVJST1IgPSAnQXp1cmUgZW5kcG9pbnQgZGlkIG5vdCByZXR1cm4gYSB2YWx1ZSB3aXRoIG9ubHkgYWNjZXNzX3Rva2VuIGFuZCBleHBpcmVzX2luIHByb3BlcnRpZXMnO1xuLyoqIEVycm9yIGZvciB3aGVuIHRoZSB0b2tlbiBhdWRpZW5jZSBpcyBtaXNzaW5nIGluIHRoZSBlbnZpcm9ubWVudC4gKi9cbmNvbnN0IFRPS0VOX1JFU09VUkNFX01JU1NJTkdfRVJST1IgPSAnVE9LRU5fUkVTT1VSQ0UgbXVzdCBiZSBzZXQgaW4gdGhlIGF1dGggbWVjaGFuaXNtIHByb3BlcnRpZXMgd2hlbiBFTlZJUk9OTUVOVCBpcyBhenVyZS4nO1xuLyoqXG4gKiBEZXZpY2Ugd29ya2Zsb3cgaW1wbGVtZW50YXRpb24gZm9yIEF6dXJlLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5jbGFzcyBBenVyZU1hY2hpbmVXb3JrZmxvdyBleHRlbmRzIG1hY2hpbmVfd29ya2Zsb3dfMS5NYWNoaW5lV29ya2Zsb3cge1xuICAgIC8qKlxuICAgICAqIEluc3RhbnRpYXRlIHRoZSBtYWNoaW5lIHdvcmtmbG93LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNhY2hlKSB7XG4gICAgICAgIHN1cGVyKGNhY2hlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB0b2tlbiBmcm9tIHRoZSBlbnZpcm9ubWVudC5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRUb2tlbihjcmVkZW50aWFscykge1xuICAgICAgICBjb25zdCB0b2tlbkF1ZGllbmNlID0gY3JlZGVudGlhbHM/Lm1lY2hhbmlzbVByb3BlcnRpZXMuVE9LRU5fUkVTT1VSQ0U7XG4gICAgICAgIGNvbnN0IHVzZXJuYW1lID0gY3JlZGVudGlhbHM/LnVzZXJuYW1lO1xuICAgICAgICBpZiAoIXRva2VuQXVkaWVuY2UpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQXp1cmVFcnJvcihUT0tFTl9SRVNPVVJDRV9NSVNTSU5HX0VSUk9SKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGdldEF6dXJlVG9rZW5EYXRhKHRva2VuQXVkaWVuY2UsIHVzZXJuYW1lKTtcbiAgICAgICAgaWYgKCFpc0VuZHBvaW50UmVzdWx0VmFsaWQocmVzcG9uc2UpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0F6dXJlRXJyb3IoRU5EUE9JTlRfUkVTVUxUX0VSUk9SKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfVxufVxuZXhwb3J0cy5BenVyZU1hY2hpbmVXb3JrZmxvdyA9IEF6dXJlTWFjaGluZVdvcmtmbG93O1xuLyoqXG4gKiBIaXQgdGhlIEF6dXJlIGVuZHBvaW50IHRvIGdldCB0aGUgdG9rZW4gZGF0YS5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0QXp1cmVUb2tlbkRhdGEodG9rZW5BdWRpZW5jZSwgdXNlcm5hbWUpIHtcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKGF6dXJlXzEuQVpVUkVfQkFTRV9VUkwpO1xuICAgICgwLCBhenVyZV8xLmFkZEF6dXJlUGFyYW1zKSh1cmwsIHRva2VuQXVkaWVuY2UsIHVzZXJuYW1lKTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0ICgwLCB1dGlsc18xLmdldCkodXJsLCB7XG4gICAgICAgIGhlYWRlcnM6IEFaVVJFX0hFQURFUlNcbiAgICB9KTtcbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29BenVyZUVycm9yKGBTdGF0dXMgY29kZSAke3Jlc3BvbnNlLnN0YXR1c30gcmV0dXJuZWQgZnJvbSB0aGUgQXp1cmUgZW5kcG9pbnQuIFJlc3BvbnNlIGJvZHk6ICR7cmVzcG9uc2UuYm9keX1gKTtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gSlNPTi5wYXJzZShyZXNwb25zZS5ib2R5KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBhY2Nlc3NfdG9rZW46IHJlc3VsdC5hY2Nlc3NfdG9rZW4sXG4gICAgICAgIGV4cGlyZXNfaW46IE51bWJlcihyZXN1bHQuZXhwaXJlc19pbilcbiAgICB9O1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVzdWx0IHJldHVybmVkIGZyb20gdGhlIGVuZHBvaW50IGlzIHZhbGlkLlxuICogVGhpcyBtZWFucyB0aGUgcmVzdWx0IGlzIG5vdCBudWxsaXNoLCBjb250YWlucyB0aGUgYWNjZXNzX3Rva2VuIHJlcXVpcmVkIGZpZWxkXG4gKiBhbmQgdGhlIGV4cGlyZXNfaW4gcmVxdWlyZWQgZmllbGQuXG4gKi9cbmZ1bmN0aW9uIGlzRW5kcG9pbnRSZXN1bHRWYWxpZCh0b2tlbikge1xuICAgIGlmICh0b2tlbiA9PSBudWxsIHx8IHR5cGVvZiB0b2tlbiAhPT0gJ29iamVjdCcpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gKCdhY2Nlc3NfdG9rZW4nIGluIHRva2VuICYmXG4gICAgICAgIHR5cGVvZiB0b2tlbi5hY2Nlc3NfdG9rZW4gPT09ICdzdHJpbmcnICYmXG4gICAgICAgICdleHBpcmVzX2luJyBpbiB0b2tlbiAmJlxuICAgICAgICB0eXBlb2YgdG9rZW4uZXhwaXJlc19pbiA9PT0gJ251bWJlcicpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXp1cmVfbWFjaGluZV93b3JrZmxvdy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_machine_workflow.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_workflow.js":
/*!*****************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_workflow.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CallbackWorkflow = exports.AUTOMATED_TIMEOUT_MS = exports.HUMAN_TIMEOUT_MS = void 0;\nconst promises_1 = __webpack_require__(/*! timers/promises */ \"timers/promises\");\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst command_builders_1 = __webpack_require__(/*! ./command_builders */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/command_builders.js\");\n/** 5 minutes in milliseconds */\nexports.HUMAN_TIMEOUT_MS = 300000;\n/** 1 minute in milliseconds */\nexports.AUTOMATED_TIMEOUT_MS = 60000;\n/** Properties allowed on results of callbacks. */\nconst RESULT_PROPERTIES = ['accessToken', 'expiresInSeconds', 'refreshToken'];\n/** Error message when the callback result is invalid. */\nconst CALLBACK_RESULT_ERROR = 'User provided OIDC callbacks must return a valid object with an accessToken.';\n/** The time to throttle callback calls. */\nconst THROTTLE_MS = 100;\n/**\n * OIDC implementation of a callback based workflow.\n * @internal\n */\nclass CallbackWorkflow {\n    /**\n     * Instantiate the callback workflow.\n     */\n    constructor(cache, callback) {\n        this.cache = cache;\n        this.callback = this.withLock(callback);\n        this.lastExecutionTime = Date.now() - THROTTLE_MS;\n    }\n    /**\n     * Get the document to add for speculative authentication. This also needs\n     * to add a db field from the credentials source.\n     */\n    async speculativeAuth(connection, credentials) {\n        // Check if the Client Cache has an access token.\n        // If it does, cache the access token in the Connection Cache and send a JwtStepRequest\n        // with the cached access token in the speculative authentication SASL payload.\n        if (this.cache.hasAccessToken) {\n            const accessToken = this.cache.getAccessToken();\n            connection.accessToken = accessToken;\n            const document = (0, command_builders_1.finishCommandDocument)(accessToken);\n            document.db = credentials.source;\n            return { speculativeAuthenticate: document };\n        }\n        return {};\n    }\n    /**\n     * Reauthenticate the callback workflow. For this we invalidated the access token\n     * in the cache and run the authentication steps again. No initial handshake needs\n     * to be sent.\n     */\n    async reauthenticate(connection, credentials) {\n        if (this.cache.hasAccessToken) {\n            // Reauthentication implies the token has expired.\n            if (connection.accessToken === this.cache.getAccessToken()) {\n                // If connection's access token is the same as the cache's, remove\n                // the token from the cache and connection.\n                this.cache.removeAccessToken();\n                delete connection.accessToken;\n            }\n            else {\n                // If the connection's access token is different from the cache's, set\n                // the cache's token on the connection and do not remove from the\n                // cache.\n                connection.accessToken = this.cache.getAccessToken();\n            }\n        }\n        await this.execute(connection, credentials);\n    }\n    /**\n     * Starts the callback authentication process. If there is a speculative\n     * authentication document from the initial handshake, then we will use that\n     * value to get the issuer, otherwise we will send the saslStart command.\n     */\n    async startAuthentication(connection, credentials, response) {\n        let result;\n        if (response?.speculativeAuthenticate) {\n            result = response.speculativeAuthenticate;\n        }\n        else {\n            result = await connection.command((0, utils_1.ns)(credentials.source), (0, command_builders_1.startCommandDocument)(credentials), undefined);\n        }\n        return result;\n    }\n    /**\n     * Finishes the callback authentication process.\n     */\n    async finishAuthentication(connection, credentials, token, conversationId) {\n        await connection.command((0, utils_1.ns)(credentials.source), (0, command_builders_1.finishCommandDocument)(token, conversationId), undefined);\n    }\n    /**\n     * Executes the callback and validates the output.\n     */\n    async executeAndValidateCallback(params) {\n        const result = await this.callback(params);\n        // Validate that the result returned by the callback is acceptable. If it is not\n        // we must clear the token result from the cache.\n        if (isCallbackResultInvalid(result)) {\n            throw new error_1.MongoMissingCredentialsError(CALLBACK_RESULT_ERROR);\n        }\n        return result;\n    }\n    /**\n     * Ensure the callback is only executed one at a time and throttles the calls\n     * to every 100ms.\n     */\n    withLock(callback) {\n        let lock = Promise.resolve();\n        return async (params) => {\n            // We do this to ensure that we would never return the result of the\n            // previous lock, only the current callback's value would get returned.\n            await lock;\n            lock = lock\n                .catch(() => null)\n                .then(async () => {\n                const difference = Date.now() - this.lastExecutionTime;\n                if (difference <= THROTTLE_MS) {\n                    await (0, promises_1.setTimeout)(THROTTLE_MS - difference, { signal: params.timeoutContext });\n                }\n                this.lastExecutionTime = Date.now();\n                return await callback(params);\n            });\n            return await lock;\n        };\n    }\n}\nexports.CallbackWorkflow = CallbackWorkflow;\n/**\n * Determines if a result returned from a request or refresh callback\n * function is invalid. This means the result is nullish, doesn't contain\n * the accessToken required field, and does not contain extra fields.\n */\nfunction isCallbackResultInvalid(tokenResult) {\n    if (tokenResult == null || typeof tokenResult !== 'object')\n        return true;\n    if (!('accessToken' in tokenResult))\n        return true;\n    return !Object.getOwnPropertyNames(tokenResult).every(prop => RESULT_PROPERTIES.includes(prop));\n}\n//# sourceMappingURL=callback_workflow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_workflow.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/command_builders.js":
/*!****************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/command_builders.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.finishCommandDocument = finishCommandDocument;\nexports.startCommandDocument = startCommandDocument;\nconst bson_1 = __webpack_require__(/*! ../../../bson */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\");\nconst providers_1 = __webpack_require__(/*! ../providers */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/providers.js\");\n/**\n * Generate the finishing command document for authentication. Will be a\n * saslStart or saslContinue depending on the presence of a conversation id.\n */\nfunction finishCommandDocument(token, conversationId) {\n    if (conversationId != null) {\n        return {\n            saslContinue: 1,\n            conversationId: conversationId,\n            payload: new bson_1.Binary(bson_1.BSON.serialize({ jwt: token }))\n        };\n    }\n    // saslContinue requires a conversationId in the command to be valid so in this\n    // case the server allows \"step two\" to actually be a saslStart with the token\n    // as the jwt since the use of the cached value has no correlating conversating\n    // on the particular connection.\n    return {\n        saslStart: 1,\n        mechanism: providers_1.AuthMechanism.MONGODB_OIDC,\n        payload: new bson_1.Binary(bson_1.BSON.serialize({ jwt: token }))\n    };\n}\n/**\n * Generate the saslStart command document.\n */\nfunction startCommandDocument(credentials) {\n    const payload = {};\n    if (credentials.username) {\n        payload.n = credentials.username;\n    }\n    return {\n        saslStart: 1,\n        autoAuthorize: 1,\n        mechanism: providers_1.AuthMechanism.MONGODB_OIDC,\n        payload: new bson_1.Binary(bson_1.BSON.serialize(payload))\n    };\n}\n//# sourceMappingURL=command_builders.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjL2NvbW1hbmRfYnVpbGRlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNkJBQTZCO0FBQzdCLDRCQUE0QjtBQUM1QixlQUFlLG1CQUFPLENBQUMsa0dBQWU7QUFDdEMsb0JBQW9CLG1CQUFPLENBQUMsZ0hBQWM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQStELFlBQVk7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELFlBQVk7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjL2NvbW1hbmRfYnVpbGRlcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZpbmlzaENvbW1hbmREb2N1bWVudCA9IGZpbmlzaENvbW1hbmREb2N1bWVudDtcbmV4cG9ydHMuc3RhcnRDb21tYW5kRG9jdW1lbnQgPSBzdGFydENvbW1hbmREb2N1bWVudDtcbmNvbnN0IGJzb25fMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ic29uXCIpO1xuY29uc3QgcHJvdmlkZXJzXzEgPSByZXF1aXJlKFwiLi4vcHJvdmlkZXJzXCIpO1xuLyoqXG4gKiBHZW5lcmF0ZSB0aGUgZmluaXNoaW5nIGNvbW1hbmQgZG9jdW1lbnQgZm9yIGF1dGhlbnRpY2F0aW9uLiBXaWxsIGJlIGFcbiAqIHNhc2xTdGFydCBvciBzYXNsQ29udGludWUgZGVwZW5kaW5nIG9uIHRoZSBwcmVzZW5jZSBvZiBhIGNvbnZlcnNhdGlvbiBpZC5cbiAqL1xuZnVuY3Rpb24gZmluaXNoQ29tbWFuZERvY3VtZW50KHRva2VuLCBjb252ZXJzYXRpb25JZCkge1xuICAgIGlmIChjb252ZXJzYXRpb25JZCAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzYXNsQ29udGludWU6IDEsXG4gICAgICAgICAgICBjb252ZXJzYXRpb25JZDogY29udmVyc2F0aW9uSWQsXG4gICAgICAgICAgICBwYXlsb2FkOiBuZXcgYnNvbl8xLkJpbmFyeShic29uXzEuQlNPTi5zZXJpYWxpemUoeyBqd3Q6IHRva2VuIH0pKVxuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBzYXNsQ29udGludWUgcmVxdWlyZXMgYSBjb252ZXJzYXRpb25JZCBpbiB0aGUgY29tbWFuZCB0byBiZSB2YWxpZCBzbyBpbiB0aGlzXG4gICAgLy8gY2FzZSB0aGUgc2VydmVyIGFsbG93cyBcInN0ZXAgdHdvXCIgdG8gYWN0dWFsbHkgYmUgYSBzYXNsU3RhcnQgd2l0aCB0aGUgdG9rZW5cbiAgICAvLyBhcyB0aGUgand0IHNpbmNlIHRoZSB1c2Ugb2YgdGhlIGNhY2hlZCB2YWx1ZSBoYXMgbm8gY29ycmVsYXRpbmcgY29udmVyc2F0aW5nXG4gICAgLy8gb24gdGhlIHBhcnRpY3VsYXIgY29ubmVjdGlvbi5cbiAgICByZXR1cm4ge1xuICAgICAgICBzYXNsU3RhcnQ6IDEsXG4gICAgICAgIG1lY2hhbmlzbTogcHJvdmlkZXJzXzEuQXV0aE1lY2hhbmlzbS5NT05HT0RCX09JREMsXG4gICAgICAgIHBheWxvYWQ6IG5ldyBic29uXzEuQmluYXJ5KGJzb25fMS5CU09OLnNlcmlhbGl6ZSh7IGp3dDogdG9rZW4gfSkpXG4gICAgfTtcbn1cbi8qKlxuICogR2VuZXJhdGUgdGhlIHNhc2xTdGFydCBjb21tYW5kIGRvY3VtZW50LlxuICovXG5mdW5jdGlvbiBzdGFydENvbW1hbmREb2N1bWVudChjcmVkZW50aWFscykge1xuICAgIGNvbnN0IHBheWxvYWQgPSB7fTtcbiAgICBpZiAoY3JlZGVudGlhbHMudXNlcm5hbWUpIHtcbiAgICAgICAgcGF5bG9hZC5uID0gY3JlZGVudGlhbHMudXNlcm5hbWU7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHNhc2xTdGFydDogMSxcbiAgICAgICAgYXV0b0F1dGhvcml6ZTogMSxcbiAgICAgICAgbWVjaGFuaXNtOiBwcm92aWRlcnNfMS5BdXRoTWVjaGFuaXNtLk1PTkdPREJfT0lEQyxcbiAgICAgICAgcGF5bG9hZDogbmV3IGJzb25fMS5CaW5hcnkoYnNvbl8xLkJTT04uc2VyaWFsaXplKHBheWxvYWQpKVxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tYW5kX2J1aWxkZXJzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/command_builders.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/gcp_machine_workflow.js":
/*!********************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/gcp_machine_workflow.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GCPMachineWorkflow = void 0;\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst machine_workflow_1 = __webpack_require__(/*! ./machine_workflow */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/machine_workflow.js\");\n/** GCP base URL. */\nconst GCP_BASE_URL = 'http://metadata/computeMetadata/v1/instance/service-accounts/default/identity';\n/** GCP request headers. */\nconst GCP_HEADERS = Object.freeze({ 'Metadata-Flavor': 'Google' });\n/** Error for when the token audience is missing in the environment. */\nconst TOKEN_RESOURCE_MISSING_ERROR = 'TOKEN_RESOURCE must be set in the auth mechanism properties when ENVIRONMENT is gcp.';\nclass GCPMachineWorkflow extends machine_workflow_1.MachineWorkflow {\n    /**\n     * Instantiate the machine workflow.\n     */\n    constructor(cache) {\n        super(cache);\n    }\n    /**\n     * Get the token from the environment.\n     */\n    async getToken(credentials) {\n        const tokenAudience = credentials?.mechanismProperties.TOKEN_RESOURCE;\n        if (!tokenAudience) {\n            throw new error_1.MongoGCPError(TOKEN_RESOURCE_MISSING_ERROR);\n        }\n        return await getGcpTokenData(tokenAudience);\n    }\n}\nexports.GCPMachineWorkflow = GCPMachineWorkflow;\n/**\n * Hit the GCP endpoint to get the token data.\n */\nasync function getGcpTokenData(tokenAudience) {\n    const url = new URL(GCP_BASE_URL);\n    url.searchParams.append('audience', tokenAudience);\n    const response = await (0, utils_1.get)(url, {\n        headers: GCP_HEADERS\n    });\n    if (response.status !== 200) {\n        throw new error_1.MongoGCPError(`Status code ${response.status} returned from the GCP endpoint. Response body: ${response.body}`);\n    }\n    return { access_token: response.body };\n}\n//# sourceMappingURL=gcp_machine_workflow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjL2djcF9tYWNoaW5lX3dvcmtmbG93LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQjtBQUMxQixnQkFBZ0IsbUJBQU8sQ0FBQyxvR0FBZ0I7QUFDeEMsZ0JBQWdCLG1CQUFPLENBQUMsb0dBQWdCO0FBQ3hDLDJCQUEyQixtQkFBTyxDQUFDLDBJQUFvQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsNkJBQTZCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLHVEQUF1RCxpQkFBaUIsaURBQWlELGNBQWM7QUFDdkk7QUFDQSxhQUFhO0FBQ2I7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2xpbmt1cy9HaXRodWIvbW9ub3R3by9wYXlsb2FkLXBsdWdpbi1tZXRhL25vZGVfbW9kdWxlcy8ucG5wbS9tb25nb2RiQDYuMTAuMC9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9nY3BfbWFjaGluZV93b3JrZmxvdy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuR0NQTWFjaGluZVdvcmtmbG93ID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9lcnJvclwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vdXRpbHNcIik7XG5jb25zdCBtYWNoaW5lX3dvcmtmbG93XzEgPSByZXF1aXJlKFwiLi9tYWNoaW5lX3dvcmtmbG93XCIpO1xuLyoqIEdDUCBiYXNlIFVSTC4gKi9cbmNvbnN0IEdDUF9CQVNFX1VSTCA9ICdodHRwOi8vbWV0YWRhdGEvY29tcHV0ZU1ldGFkYXRhL3YxL2luc3RhbmNlL3NlcnZpY2UtYWNjb3VudHMvZGVmYXVsdC9pZGVudGl0eSc7XG4vKiogR0NQIHJlcXVlc3QgaGVhZGVycy4gKi9cbmNvbnN0IEdDUF9IRUFERVJTID0gT2JqZWN0LmZyZWV6ZSh7ICdNZXRhZGF0YS1GbGF2b3InOiAnR29vZ2xlJyB9KTtcbi8qKiBFcnJvciBmb3Igd2hlbiB0aGUgdG9rZW4gYXVkaWVuY2UgaXMgbWlzc2luZyBpbiB0aGUgZW52aXJvbm1lbnQuICovXG5jb25zdCBUT0tFTl9SRVNPVVJDRV9NSVNTSU5HX0VSUk9SID0gJ1RPS0VOX1JFU09VUkNFIG11c3QgYmUgc2V0IGluIHRoZSBhdXRoIG1lY2hhbmlzbSBwcm9wZXJ0aWVzIHdoZW4gRU5WSVJPTk1FTlQgaXMgZ2NwLic7XG5jbGFzcyBHQ1BNYWNoaW5lV29ya2Zsb3cgZXh0ZW5kcyBtYWNoaW5lX3dvcmtmbG93XzEuTWFjaGluZVdvcmtmbG93IHtcbiAgICAvKipcbiAgICAgKiBJbnN0YW50aWF0ZSB0aGUgbWFjaGluZSB3b3JrZmxvdy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihjYWNoZSkge1xuICAgICAgICBzdXBlcihjYWNoZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgdG9rZW4gZnJvbSB0aGUgZW52aXJvbm1lbnQuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0VG9rZW4oY3JlZGVudGlhbHMpIHtcbiAgICAgICAgY29uc3QgdG9rZW5BdWRpZW5jZSA9IGNyZWRlbnRpYWxzPy5tZWNoYW5pc21Qcm9wZXJ0aWVzLlRPS0VOX1JFU09VUkNFO1xuICAgICAgICBpZiAoIXRva2VuQXVkaWVuY2UpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvR0NQRXJyb3IoVE9LRU5fUkVTT1VSQ0VfTUlTU0lOR19FUlJPUik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGF3YWl0IGdldEdjcFRva2VuRGF0YSh0b2tlbkF1ZGllbmNlKTtcbiAgICB9XG59XG5leHBvcnRzLkdDUE1hY2hpbmVXb3JrZmxvdyA9IEdDUE1hY2hpbmVXb3JrZmxvdztcbi8qKlxuICogSGl0IHRoZSBHQ1AgZW5kcG9pbnQgdG8gZ2V0IHRoZSB0b2tlbiBkYXRhLlxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRHY3BUb2tlbkRhdGEodG9rZW5BdWRpZW5jZSkge1xuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwoR0NQX0JBU0VfVVJMKTtcbiAgICB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZCgnYXVkaWVuY2UnLCB0b2tlbkF1ZGllbmNlKTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0ICgwLCB1dGlsc18xLmdldCkodXJsLCB7XG4gICAgICAgIGhlYWRlcnM6IEdDUF9IRUFERVJTXG4gICAgfSk7XG4gICAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvR0NQRXJyb3IoYFN0YXR1cyBjb2RlICR7cmVzcG9uc2Uuc3RhdHVzfSByZXR1cm5lZCBmcm9tIHRoZSBHQ1AgZW5kcG9pbnQuIFJlc3BvbnNlIGJvZHk6ICR7cmVzcG9uc2UuYm9keX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgYWNjZXNzX3Rva2VuOiByZXNwb25zZS5ib2R5IH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nY3BfbWFjaGluZV93b3JrZmxvdy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/gcp_machine_workflow.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/human_callback_workflow.js":
/*!***********************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/human_callback_workflow.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HumanCallbackWorkflow = void 0;\nconst bson_1 = __webpack_require__(/*! ../../../bson */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst timeout_1 = __webpack_require__(/*! ../../../timeout */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/timeout.js\");\nconst mongodb_oidc_1 = __webpack_require__(/*! ../mongodb_oidc */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js\");\nconst callback_workflow_1 = __webpack_require__(/*! ./callback_workflow */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_workflow.js\");\n/**\n * Class implementing behaviour for the non human callback workflow.\n * @internal\n */\nclass HumanCallbackWorkflow extends callback_workflow_1.CallbackWorkflow {\n    /**\n     * Instantiate the human callback workflow.\n     */\n    constructor(cache, callback) {\n        super(cache, callback);\n    }\n    /**\n     * Execute the OIDC human callback workflow.\n     */\n    async execute(connection, credentials) {\n        // Check if the Client Cache has an access token.\n        // If it does, cache the access token in the Connection Cache and perform a One-Step SASL conversation\n        // using the access token. If the server returns an Authentication error (18),\n        // invalidate the access token token from the Client Cache, clear the Connection Cache,\n        // and restart the authentication flow. Raise any other errors to the user. On success, exit the algorithm.\n        if (this.cache.hasAccessToken) {\n            const token = this.cache.getAccessToken();\n            connection.accessToken = token;\n            try {\n                return await this.finishAuthentication(connection, credentials, token);\n            }\n            catch (error) {\n                if (error instanceof error_1.MongoError &&\n                    error.code === error_1.MONGODB_ERROR_CODES.AuthenticationFailed) {\n                    this.cache.removeAccessToken();\n                    delete connection.accessToken;\n                    return await this.execute(connection, credentials);\n                }\n                else {\n                    throw error;\n                }\n            }\n        }\n        // Check if the Client Cache has a refresh token.\n        // If it does, call the OIDC Human Callback with the cached refresh token and IdpInfo to get a\n        // new access token. Cache the new access token in the Client Cache and Connection Cache.\n        // Perform a One-Step SASL conversation using the new access token. If the the server returns\n        // an Authentication error (18), clear the refresh token, invalidate the access token from the\n        // Client Cache, clear the Connection Cache, and restart the authentication flow. Raise any other\n        // errors to the user. On success, exit the algorithm.\n        if (this.cache.hasRefreshToken) {\n            const refreshToken = this.cache.getRefreshToken();\n            const result = await this.fetchAccessToken(this.cache.getIdpInfo(), credentials, refreshToken);\n            this.cache.put(result);\n            connection.accessToken = result.accessToken;\n            try {\n                return await this.finishAuthentication(connection, credentials, result.accessToken);\n            }\n            catch (error) {\n                if (error instanceof error_1.MongoError &&\n                    error.code === error_1.MONGODB_ERROR_CODES.AuthenticationFailed) {\n                    this.cache.removeRefreshToken();\n                    delete connection.accessToken;\n                    return await this.execute(connection, credentials);\n                }\n                else {\n                    throw error;\n                }\n            }\n        }\n        // Start a new Two-Step SASL conversation.\n        // Run a PrincipalStepRequest to get the IdpInfo.\n        // Call the OIDC Human Callback with the new IdpInfo to get a new access token and optional refresh\n        // token. Drivers MUST NOT pass a cached refresh token to the callback when performing\n        // a new Two-Step conversation. Cache the new IdpInfo and refresh token in the Client Cache and the\n        // new access token in the Client Cache and Connection Cache.\n        // Attempt to authenticate using a JwtStepRequest with the new access token. Raise any errors to the user.\n        const startResponse = await this.startAuthentication(connection, credentials);\n        const conversationId = startResponse.conversationId;\n        const idpInfo = bson_1.BSON.deserialize(startResponse.payload.buffer);\n        const callbackResponse = await this.fetchAccessToken(idpInfo, credentials);\n        this.cache.put(callbackResponse, idpInfo);\n        connection.accessToken = callbackResponse.accessToken;\n        return await this.finishAuthentication(connection, credentials, callbackResponse.accessToken, conversationId);\n    }\n    /**\n     * Fetches an access token using the callback.\n     */\n    async fetchAccessToken(idpInfo, credentials, refreshToken) {\n        const controller = new AbortController();\n        const params = {\n            timeoutContext: controller.signal,\n            version: mongodb_oidc_1.OIDC_VERSION,\n            idpInfo: idpInfo\n        };\n        if (credentials.username) {\n            params.username = credentials.username;\n        }\n        if (refreshToken) {\n            params.refreshToken = refreshToken;\n        }\n        const timeout = timeout_1.Timeout.expires(callback_workflow_1.HUMAN_TIMEOUT_MS);\n        try {\n            return await Promise.race([this.executeAndValidateCallback(params), timeout]);\n        }\n        catch (error) {\n            if (timeout_1.TimeoutError.is(error)) {\n                controller.abort();\n                throw new error_1.MongoOIDCError(`OIDC callback timed out after ${callback_workflow_1.HUMAN_TIMEOUT_MS}ms.`);\n            }\n            throw error;\n        }\n        finally {\n            timeout.clear();\n        }\n    }\n}\nexports.HumanCallbackWorkflow = HumanCallbackWorkflow;\n//# sourceMappingURL=human_callback_workflow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/human_callback_workflow.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/machine_workflow.js":
/*!****************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/machine_workflow.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MachineWorkflow = void 0;\nconst promises_1 = __webpack_require__(/*! timers/promises */ \"timers/promises\");\nconst utils_1 = __webpack_require__(/*! ../../../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst command_builders_1 = __webpack_require__(/*! ./command_builders */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/command_builders.js\");\n/** The time to throttle callback calls. */\nconst THROTTLE_MS = 100;\n/**\n * Common behaviour for OIDC machine workflows.\n * @internal\n */\nclass MachineWorkflow {\n    /**\n     * Instantiate the machine workflow.\n     */\n    constructor(cache) {\n        this.cache = cache;\n        this.callback = this.withLock(this.getToken.bind(this));\n        this.lastExecutionTime = Date.now() - THROTTLE_MS;\n    }\n    /**\n     * Execute the workflow. Gets the token from the subclass implementation.\n     */\n    async execute(connection, credentials) {\n        const token = await this.getTokenFromCacheOrEnv(connection, credentials);\n        const command = (0, command_builders_1.finishCommandDocument)(token);\n        await connection.command((0, utils_1.ns)(credentials.source), command, undefined);\n    }\n    /**\n     * Reauthenticate on a machine workflow just grabs the token again since the server\n     * has said the current access token is invalid or expired.\n     */\n    async reauthenticate(connection, credentials) {\n        if (this.cache.hasAccessToken) {\n            // Reauthentication implies the token has expired.\n            if (connection.accessToken === this.cache.getAccessToken()) {\n                // If connection's access token is the same as the cache's, remove\n                // the token from the cache and connection.\n                this.cache.removeAccessToken();\n                delete connection.accessToken;\n            }\n            else {\n                // If the connection's access token is different from the cache's, set\n                // the cache's token on the connection and do not remove from the\n                // cache.\n                connection.accessToken = this.cache.getAccessToken();\n            }\n        }\n        await this.execute(connection, credentials);\n    }\n    /**\n     * Get the document to add for speculative authentication.\n     */\n    async speculativeAuth(connection, credentials) {\n        // The spec states only cached access tokens can use speculative auth.\n        if (!this.cache.hasAccessToken) {\n            return {};\n        }\n        const token = await this.getTokenFromCacheOrEnv(connection, credentials);\n        const document = (0, command_builders_1.finishCommandDocument)(token);\n        document.db = credentials.source;\n        return { speculativeAuthenticate: document };\n    }\n    /**\n     * Get the token from the cache or environment.\n     */\n    async getTokenFromCacheOrEnv(connection, credentials) {\n        if (this.cache.hasAccessToken) {\n            return this.cache.getAccessToken();\n        }\n        else {\n            const token = await this.callback(credentials);\n            this.cache.put({ accessToken: token.access_token, expiresInSeconds: token.expires_in });\n            // Put the access token on the connection as well.\n            connection.accessToken = token.access_token;\n            return token.access_token;\n        }\n    }\n    /**\n     * Ensure the callback is only executed one at a time, and throttled to\n     * only once per 100ms.\n     */\n    withLock(callback) {\n        let lock = Promise.resolve();\n        return async (credentials) => {\n            // We do this to ensure that we would never return the result of the\n            // previous lock, only the current callback's value would get returned.\n            await lock;\n            lock = lock\n                .catch(() => null)\n                .then(async () => {\n                const difference = Date.now() - this.lastExecutionTime;\n                if (difference <= THROTTLE_MS) {\n                    await (0, promises_1.setTimeout)(THROTTLE_MS - difference);\n                }\n                this.lastExecutionTime = Date.now();\n                return await callback(credentials);\n            });\n            return await lock;\n        };\n    }\n}\nexports.MachineWorkflow = MachineWorkflow;\n//# sourceMappingURL=machine_workflow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjL21hY2hpbmVfd29ya2Zsb3cuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCO0FBQ3ZCLG1CQUFtQixtQkFBTyxDQUFDLHdDQUFpQjtBQUM1QyxnQkFBZ0IsbUJBQU8sQ0FBQyxvR0FBZ0I7QUFDeEMsMkJBQTJCLG1CQUFPLENBQUMsMElBQW9CO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIscUVBQXFFO0FBQ2xHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsiL1VzZXJzL2xpbmt1cy9HaXRodWIvbW9ub3R3by9wYXlsb2FkLXBsdWdpbi1tZXRhL25vZGVfbW9kdWxlcy8ucG5wbS9tb25nb2RiQDYuMTAuMC9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9tYWNoaW5lX3dvcmtmbG93LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NYWNoaW5lV29ya2Zsb3cgPSB2b2lkIDA7XG5jb25zdCBwcm9taXNlc18xID0gcmVxdWlyZShcInRpbWVycy9wcm9taXNlc1wiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vdXRpbHNcIik7XG5jb25zdCBjb21tYW5kX2J1aWxkZXJzXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kX2J1aWxkZXJzXCIpO1xuLyoqIFRoZSB0aW1lIHRvIHRocm90dGxlIGNhbGxiYWNrIGNhbGxzLiAqL1xuY29uc3QgVEhST1RUTEVfTVMgPSAxMDA7XG4vKipcbiAqIENvbW1vbiBiZWhhdmlvdXIgZm9yIE9JREMgbWFjaGluZSB3b3JrZmxvd3MuXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgTWFjaGluZVdvcmtmbG93IHtcbiAgICAvKipcbiAgICAgKiBJbnN0YW50aWF0ZSB0aGUgbWFjaGluZSB3b3JrZmxvdy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihjYWNoZSkge1xuICAgICAgICB0aGlzLmNhY2hlID0gY2FjaGU7XG4gICAgICAgIHRoaXMuY2FsbGJhY2sgPSB0aGlzLndpdGhMb2NrKHRoaXMuZ2V0VG9rZW4uYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMubGFzdEV4ZWN1dGlvblRpbWUgPSBEYXRlLm5vdygpIC0gVEhST1RUTEVfTVM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGUgdGhlIHdvcmtmbG93LiBHZXRzIHRoZSB0b2tlbiBmcm9tIHRoZSBzdWJjbGFzcyBpbXBsZW1lbnRhdGlvbi5cbiAgICAgKi9cbiAgICBhc3luYyBleGVjdXRlKGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzKSB7XG4gICAgICAgIGNvbnN0IHRva2VuID0gYXdhaXQgdGhpcy5nZXRUb2tlbkZyb21DYWNoZU9yRW52KGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzKTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9ICgwLCBjb21tYW5kX2J1aWxkZXJzXzEuZmluaXNoQ29tbWFuZERvY3VtZW50KSh0b2tlbik7XG4gICAgICAgIGF3YWl0IGNvbm5lY3Rpb24uY29tbWFuZCgoMCwgdXRpbHNfMS5ucykoY3JlZGVudGlhbHMuc291cmNlKSwgY29tbWFuZCwgdW5kZWZpbmVkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVhdXRoZW50aWNhdGUgb24gYSBtYWNoaW5lIHdvcmtmbG93IGp1c3QgZ3JhYnMgdGhlIHRva2VuIGFnYWluIHNpbmNlIHRoZSBzZXJ2ZXJcbiAgICAgKiBoYXMgc2FpZCB0aGUgY3VycmVudCBhY2Nlc3MgdG9rZW4gaXMgaW52YWxpZCBvciBleHBpcmVkLlxuICAgICAqL1xuICAgIGFzeW5jIHJlYXV0aGVudGljYXRlKGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzKSB7XG4gICAgICAgIGlmICh0aGlzLmNhY2hlLmhhc0FjY2Vzc1Rva2VuKSB7XG4gICAgICAgICAgICAvLyBSZWF1dGhlbnRpY2F0aW9uIGltcGxpZXMgdGhlIHRva2VuIGhhcyBleHBpcmVkLlxuICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24uYWNjZXNzVG9rZW4gPT09IHRoaXMuY2FjaGUuZ2V0QWNjZXNzVG9rZW4oKSkge1xuICAgICAgICAgICAgICAgIC8vIElmIGNvbm5lY3Rpb24ncyBhY2Nlc3MgdG9rZW4gaXMgdGhlIHNhbWUgYXMgdGhlIGNhY2hlJ3MsIHJlbW92ZVxuICAgICAgICAgICAgICAgIC8vIHRoZSB0b2tlbiBmcm9tIHRoZSBjYWNoZSBhbmQgY29ubmVjdGlvbi5cbiAgICAgICAgICAgICAgICB0aGlzLmNhY2hlLnJlbW92ZUFjY2Vzc1Rva2VuKCk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGNvbm5lY3Rpb24uYWNjZXNzVG9rZW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgY29ubmVjdGlvbidzIGFjY2VzcyB0b2tlbiBpcyBkaWZmZXJlbnQgZnJvbSB0aGUgY2FjaGUncywgc2V0XG4gICAgICAgICAgICAgICAgLy8gdGhlIGNhY2hlJ3MgdG9rZW4gb24gdGhlIGNvbm5lY3Rpb24gYW5kIGRvIG5vdCByZW1vdmUgZnJvbSB0aGVcbiAgICAgICAgICAgICAgICAvLyBjYWNoZS5cbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmFjY2Vzc1Rva2VuID0gdGhpcy5jYWNoZS5nZXRBY2Nlc3NUb2tlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHRoaXMuZXhlY3V0ZShjb25uZWN0aW9uLCBjcmVkZW50aWFscyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgZG9jdW1lbnQgdG8gYWRkIGZvciBzcGVjdWxhdGl2ZSBhdXRoZW50aWNhdGlvbi5cbiAgICAgKi9cbiAgICBhc3luYyBzcGVjdWxhdGl2ZUF1dGgoY29ubmVjdGlvbiwgY3JlZGVudGlhbHMpIHtcbiAgICAgICAgLy8gVGhlIHNwZWMgc3RhdGVzIG9ubHkgY2FjaGVkIGFjY2VzcyB0b2tlbnMgY2FuIHVzZSBzcGVjdWxhdGl2ZSBhdXRoLlxuICAgICAgICBpZiAoIXRoaXMuY2FjaGUuaGFzQWNjZXNzVG9rZW4pIHtcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0b2tlbiA9IGF3YWl0IHRoaXMuZ2V0VG9rZW5Gcm9tQ2FjaGVPckVudihjb25uZWN0aW9uLCBjcmVkZW50aWFscyk7XG4gICAgICAgIGNvbnN0IGRvY3VtZW50ID0gKDAsIGNvbW1hbmRfYnVpbGRlcnNfMS5maW5pc2hDb21tYW5kRG9jdW1lbnQpKHRva2VuKTtcbiAgICAgICAgZG9jdW1lbnQuZGIgPSBjcmVkZW50aWFscy5zb3VyY2U7XG4gICAgICAgIHJldHVybiB7IHNwZWN1bGF0aXZlQXV0aGVudGljYXRlOiBkb2N1bWVudCB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHRva2VuIGZyb20gdGhlIGNhY2hlIG9yIGVudmlyb25tZW50LlxuICAgICAqL1xuICAgIGFzeW5jIGdldFRva2VuRnJvbUNhY2hlT3JFbnYoY29ubmVjdGlvbiwgY3JlZGVudGlhbHMpIHtcbiAgICAgICAgaWYgKHRoaXMuY2FjaGUuaGFzQWNjZXNzVG9rZW4pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhY2hlLmdldEFjY2Vzc1Rva2VuKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB0b2tlbiA9IGF3YWl0IHRoaXMuY2FsbGJhY2soY3JlZGVudGlhbHMpO1xuICAgICAgICAgICAgdGhpcy5jYWNoZS5wdXQoeyBhY2Nlc3NUb2tlbjogdG9rZW4uYWNjZXNzX3Rva2VuLCBleHBpcmVzSW5TZWNvbmRzOiB0b2tlbi5leHBpcmVzX2luIH0pO1xuICAgICAgICAgICAgLy8gUHV0IHRoZSBhY2Nlc3MgdG9rZW4gb24gdGhlIGNvbm5lY3Rpb24gYXMgd2VsbC5cbiAgICAgICAgICAgIGNvbm5lY3Rpb24uYWNjZXNzVG9rZW4gPSB0b2tlbi5hY2Nlc3NfdG9rZW47XG4gICAgICAgICAgICByZXR1cm4gdG9rZW4uYWNjZXNzX3Rva2VuO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVuc3VyZSB0aGUgY2FsbGJhY2sgaXMgb25seSBleGVjdXRlZCBvbmUgYXQgYSB0aW1lLCBhbmQgdGhyb3R0bGVkIHRvXG4gICAgICogb25seSBvbmNlIHBlciAxMDBtcy5cbiAgICAgKi9cbiAgICB3aXRoTG9jayhjYWxsYmFjaykge1xuICAgICAgICBsZXQgbG9jayA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICByZXR1cm4gYXN5bmMgKGNyZWRlbnRpYWxzKSA9PiB7XG4gICAgICAgICAgICAvLyBXZSBkbyB0aGlzIHRvIGVuc3VyZSB0aGF0IHdlIHdvdWxkIG5ldmVyIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZVxuICAgICAgICAgICAgLy8gcHJldmlvdXMgbG9jaywgb25seSB0aGUgY3VycmVudCBjYWxsYmFjaydzIHZhbHVlIHdvdWxkIGdldCByZXR1cm5lZC5cbiAgICAgICAgICAgIGF3YWl0IGxvY2s7XG4gICAgICAgICAgICBsb2NrID0gbG9ja1xuICAgICAgICAgICAgICAgIC5jYXRjaCgoKSA9PiBudWxsKVxuICAgICAgICAgICAgICAgIC50aGVuKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkaWZmZXJlbmNlID0gRGF0ZS5ub3coKSAtIHRoaXMubGFzdEV4ZWN1dGlvblRpbWU7XG4gICAgICAgICAgICAgICAgaWYgKGRpZmZlcmVuY2UgPD0gVEhST1RUTEVfTVMpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgKDAsIHByb21pc2VzXzEuc2V0VGltZW91dCkoVEhST1RUTEVfTVMgLSBkaWZmZXJlbmNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0RXhlY3V0aW9uVGltZSA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGNhbGxiYWNrKGNyZWRlbnRpYWxzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGxvY2s7XG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5NYWNoaW5lV29ya2Zsb3cgPSBNYWNoaW5lV29ya2Zsb3c7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYWNoaW5lX3dvcmtmbG93LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/machine_workflow.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_cache.js":
/*!***********************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_cache.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TokenCache = void 0;\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nclass MongoOIDCError extends error_1.MongoDriverError {\n}\n/** @internal */\nclass TokenCache {\n    get hasAccessToken() {\n        return !!this.accessToken;\n    }\n    get hasRefreshToken() {\n        return !!this.refreshToken;\n    }\n    get hasIdpInfo() {\n        return !!this.idpInfo;\n    }\n    getAccessToken() {\n        if (!this.accessToken) {\n            throw new MongoOIDCError('Attempted to get an access token when none exists.');\n        }\n        return this.accessToken;\n    }\n    getRefreshToken() {\n        if (!this.refreshToken) {\n            throw new MongoOIDCError('Attempted to get a refresh token when none exists.');\n        }\n        return this.refreshToken;\n    }\n    getIdpInfo() {\n        if (!this.idpInfo) {\n            throw new MongoOIDCError('Attempted to get IDP information when none exists.');\n        }\n        return this.idpInfo;\n    }\n    put(response, idpInfo) {\n        this.accessToken = response.accessToken;\n        this.refreshToken = response.refreshToken;\n        this.expiresInSeconds = response.expiresInSeconds;\n        if (idpInfo) {\n            this.idpInfo = idpInfo;\n        }\n    }\n    removeAccessToken() {\n        this.accessToken = undefined;\n    }\n    removeRefreshToken() {\n        this.refreshToken = undefined;\n    }\n}\nexports.TokenCache = TokenCache;\n//# sourceMappingURL=token_cache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjL3Rva2VuX2NhY2hlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQjtBQUNsQixnQkFBZ0IsbUJBQU8sQ0FBQyxvR0FBZ0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9saW5rdXMvR2l0aHViL21vbm90d28vcGF5bG9hZC1wbHVnaW4tbWV0YS9ub2RlX21vZHVsZXMvLnBucG0vbW9uZ29kYkA2LjEwLjAvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9tb25nb2RiX29pZGMvdG9rZW5fY2FjaGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRva2VuQ2FjaGUgPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL2Vycm9yXCIpO1xuY2xhc3MgTW9uZ29PSURDRXJyb3IgZXh0ZW5kcyBlcnJvcl8xLk1vbmdvRHJpdmVyRXJyb3Ige1xufVxuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgVG9rZW5DYWNoZSB7XG4gICAgZ2V0IGhhc0FjY2Vzc1Rva2VuKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLmFjY2Vzc1Rva2VuO1xuICAgIH1cbiAgICBnZXQgaGFzUmVmcmVzaFRva2VuKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLnJlZnJlc2hUb2tlbjtcbiAgICB9XG4gICAgZ2V0IGhhc0lkcEluZm8oKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuaWRwSW5mbztcbiAgICB9XG4gICAgZ2V0QWNjZXNzVG9rZW4oKSB7XG4gICAgICAgIGlmICghdGhpcy5hY2Nlc3NUb2tlbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1vbmdvT0lEQ0Vycm9yKCdBdHRlbXB0ZWQgdG8gZ2V0IGFuIGFjY2VzcyB0b2tlbiB3aGVuIG5vbmUgZXhpc3RzLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmFjY2Vzc1Rva2VuO1xuICAgIH1cbiAgICBnZXRSZWZyZXNoVG9rZW4oKSB7XG4gICAgICAgIGlmICghdGhpcy5yZWZyZXNoVG9rZW4pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBNb25nb09JRENFcnJvcignQXR0ZW1wdGVkIHRvIGdldCBhIHJlZnJlc2ggdG9rZW4gd2hlbiBub25lIGV4aXN0cy4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5yZWZyZXNoVG9rZW47XG4gICAgfVxuICAgIGdldElkcEluZm8oKSB7XG4gICAgICAgIGlmICghdGhpcy5pZHBJbmZvKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTW9uZ29PSURDRXJyb3IoJ0F0dGVtcHRlZCB0byBnZXQgSURQIGluZm9ybWF0aW9uIHdoZW4gbm9uZSBleGlzdHMuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuaWRwSW5mbztcbiAgICB9XG4gICAgcHV0KHJlc3BvbnNlLCBpZHBJbmZvKSB7XG4gICAgICAgIHRoaXMuYWNjZXNzVG9rZW4gPSByZXNwb25zZS5hY2Nlc3NUb2tlbjtcbiAgICAgICAgdGhpcy5yZWZyZXNoVG9rZW4gPSByZXNwb25zZS5yZWZyZXNoVG9rZW47XG4gICAgICAgIHRoaXMuZXhwaXJlc0luU2Vjb25kcyA9IHJlc3BvbnNlLmV4cGlyZXNJblNlY29uZHM7XG4gICAgICAgIGlmIChpZHBJbmZvKSB7XG4gICAgICAgICAgICB0aGlzLmlkcEluZm8gPSBpZHBJbmZvO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlbW92ZUFjY2Vzc1Rva2VuKCkge1xuICAgICAgICB0aGlzLmFjY2Vzc1Rva2VuID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZW1vdmVSZWZyZXNoVG9rZW4oKSB7XG4gICAgICAgIHRoaXMucmVmcmVzaFRva2VuID0gdW5kZWZpbmVkO1xuICAgIH1cbn1cbmV4cG9ydHMuVG9rZW5DYWNoZSA9IFRva2VuQ2FjaGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b2tlbl9jYWNoZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_cache.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_machine_workflow.js":
/*!**********************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_machine_workflow.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TokenMachineWorkflow = void 0;\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst machine_workflow_1 = __webpack_require__(/*! ./machine_workflow */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/machine_workflow.js\");\n/** Error for when the token is missing in the environment. */\nconst TOKEN_MISSING_ERROR = 'OIDC_TOKEN_FILE must be set in the environment.';\n/**\n * Device workflow implementation for AWS.\n *\n * @internal\n */\nclass TokenMachineWorkflow extends machine_workflow_1.MachineWorkflow {\n    /**\n     * Instantiate the machine workflow.\n     */\n    constructor(cache) {\n        super(cache);\n    }\n    /**\n     * Get the token from the environment.\n     */\n    async getToken() {\n        const tokenFile = process.env.OIDC_TOKEN_FILE;\n        if (!tokenFile) {\n            throw new error_1.MongoAWSError(TOKEN_MISSING_ERROR);\n        }\n        const token = await fs.promises.readFile(tokenFile, 'utf8');\n        return { access_token: token };\n    }\n}\nexports.TokenMachineWorkflow = TokenMachineWorkflow;\n//# sourceMappingURL=token_machine_workflow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjL3Rva2VuX21hY2hpbmVfd29ya2Zsb3cuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCO0FBQzVCLFdBQVcsbUJBQU8sQ0FBQyxjQUFJO0FBQ3ZCLGdCQUFnQixtQkFBTyxDQUFDLG9HQUFnQjtBQUN4QywyQkFBMkIsbUJBQU8sQ0FBQywwSUFBb0I7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjL3Rva2VuX21hY2hpbmVfd29ya2Zsb3cuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRva2VuTWFjaGluZVdvcmtmbG93ID0gdm9pZCAwO1xuY29uc3QgZnMgPSByZXF1aXJlKFwiZnNcIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL2Vycm9yXCIpO1xuY29uc3QgbWFjaGluZV93b3JrZmxvd18xID0gcmVxdWlyZShcIi4vbWFjaGluZV93b3JrZmxvd1wiKTtcbi8qKiBFcnJvciBmb3Igd2hlbiB0aGUgdG9rZW4gaXMgbWlzc2luZyBpbiB0aGUgZW52aXJvbm1lbnQuICovXG5jb25zdCBUT0tFTl9NSVNTSU5HX0VSUk9SID0gJ09JRENfVE9LRU5fRklMRSBtdXN0IGJlIHNldCBpbiB0aGUgZW52aXJvbm1lbnQuJztcbi8qKlxuICogRGV2aWNlIHdvcmtmbG93IGltcGxlbWVudGF0aW9uIGZvciBBV1MuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIFRva2VuTWFjaGluZVdvcmtmbG93IGV4dGVuZHMgbWFjaGluZV93b3JrZmxvd18xLk1hY2hpbmVXb3JrZmxvdyB7XG4gICAgLyoqXG4gICAgICogSW5zdGFudGlhdGUgdGhlIG1hY2hpbmUgd29ya2Zsb3cuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY2FjaGUpIHtcbiAgICAgICAgc3VwZXIoY2FjaGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHRva2VuIGZyb20gdGhlIGVudmlyb25tZW50LlxuICAgICAqL1xuICAgIGFzeW5jIGdldFRva2VuKCkge1xuICAgICAgICBjb25zdCB0b2tlbkZpbGUgPSBwcm9jZXNzLmVudi5PSURDX1RPS0VOX0ZJTEU7XG4gICAgICAgIGlmICghdG9rZW5GaWxlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0FXU0Vycm9yKFRPS0VOX01JU1NJTkdfRVJST1IpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRva2VuID0gYXdhaXQgZnMucHJvbWlzZXMucmVhZEZpbGUodG9rZW5GaWxlLCAndXRmOCcpO1xuICAgICAgICByZXR1cm4geyBhY2Nlc3NfdG9rZW46IHRva2VuIH07XG4gICAgfVxufVxuZXhwb3J0cy5Ub2tlbk1hY2hpbmVXb3JrZmxvdyA9IFRva2VuTWFjaGluZVdvcmtmbG93O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9rZW5fbWFjaGluZV93b3JrZmxvdy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_machine_workflow.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/plain.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/plain.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Plain = void 0;\nconst bson_1 = __webpack_require__(/*! ../../bson */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nclass Plain extends auth_provider_1.AuthProvider {\n    async auth(authContext) {\n        const { connection, credentials } = authContext;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        const { username, password } = credentials;\n        const payload = new bson_1.Binary(Buffer.from(`\\x00${username}\\x00${password}`));\n        const command = {\n            saslStart: 1,\n            mechanism: 'PLAIN',\n            payload: payload,\n            autoAuthorize: 1\n        };\n        await connection.command((0, utils_1.ns)('$external.$cmd'), command, undefined);\n    }\n}\nexports.Plain = Plain;\n//# sourceMappingURL=plain.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvcGxhaW4uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYTtBQUNiLGVBQWUsbUJBQU8sQ0FBQywrRkFBWTtBQUNuQyxnQkFBZ0IsbUJBQU8sQ0FBQyxpR0FBYTtBQUNyQyxnQkFBZ0IsbUJBQU8sQ0FBQyxpR0FBYTtBQUNyQyx3QkFBd0IsbUJBQU8sQ0FBQyx1SEFBaUI7QUFDakQ7QUFDQTtBQUNBLGdCQUFnQiwwQkFBMEI7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHFCQUFxQjtBQUNyQyw2REFBNkQsU0FBUyxNQUFNLFNBQVM7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvcGxhaW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBsYWluID0gdm9pZCAwO1xuY29uc3QgYnNvbl8xID0gcmVxdWlyZShcIi4uLy4uL2Jzb25cIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uLy4uL2Vycm9yXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsc1wiKTtcbmNvbnN0IGF1dGhfcHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL2F1dGhfcHJvdmlkZXJcIik7XG5jbGFzcyBQbGFpbiBleHRlbmRzIGF1dGhfcHJvdmlkZXJfMS5BdXRoUHJvdmlkZXIge1xuICAgIGFzeW5jIGF1dGgoYXV0aENvbnRleHQpIHtcbiAgICAgICAgY29uc3QgeyBjb25uZWN0aW9uLCBjcmVkZW50aWFscyB9ID0gYXV0aENvbnRleHQ7XG4gICAgICAgIGlmICghY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvTWlzc2luZ0NyZWRlbnRpYWxzRXJyb3IoJ0F1dGhDb250ZXh0IG11c3QgcHJvdmlkZSBjcmVkZW50aWFscy4nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IHVzZXJuYW1lLCBwYXNzd29yZCB9ID0gY3JlZGVudGlhbHM7XG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSBuZXcgYnNvbl8xLkJpbmFyeShCdWZmZXIuZnJvbShgXFx4MDAke3VzZXJuYW1lfVxceDAwJHtwYXNzd29yZH1gKSk7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSB7XG4gICAgICAgICAgICBzYXNsU3RhcnQ6IDEsXG4gICAgICAgICAgICBtZWNoYW5pc206ICdQTEFJTicsXG4gICAgICAgICAgICBwYXlsb2FkOiBwYXlsb2FkLFxuICAgICAgICAgICAgYXV0b0F1dGhvcml6ZTogMVxuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBjb25uZWN0aW9uLmNvbW1hbmQoKDAsIHV0aWxzXzEubnMpKCckZXh0ZXJuYWwuJGNtZCcpLCBjb21tYW5kLCB1bmRlZmluZWQpO1xuICAgIH1cbn1cbmV4cG9ydHMuUGxhaW4gPSBQbGFpbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBsYWluLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/plain.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/providers.js":
/*!********************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/providers.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AUTH_MECHS_AUTH_SRC_EXTERNAL = exports.AuthMechanism = void 0;\n/** @public */\nexports.AuthMechanism = Object.freeze({\n    MONGODB_AWS: 'MONGODB-AWS',\n    MONGODB_CR: 'MONGODB-CR',\n    MONGODB_DEFAULT: 'DEFAULT',\n    MONGODB_GSSAPI: 'GSSAPI',\n    MONGODB_PLAIN: 'PLAIN',\n    MONGODB_SCRAM_SHA1: 'SCRAM-SHA-1',\n    MONGODB_SCRAM_SHA256: 'SCRAM-SHA-256',\n    MONGODB_X509: 'MONGODB-X509',\n    MONGODB_OIDC: 'MONGODB-OIDC'\n});\n/** @internal */\nexports.AUTH_MECHS_AUTH_SRC_EXTERNAL = new Set([\n    exports.AuthMechanism.MONGODB_GSSAPI,\n    exports.AuthMechanism.MONGODB_AWS,\n    exports.AuthMechanism.MONGODB_OIDC,\n    exports.AuthMechanism.MONGODB_X509\n]);\n//# sourceMappingURL=providers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvcHJvdmlkZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9DQUFvQyxHQUFHLHFCQUFxQjtBQUM1RDtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvcHJvdmlkZXJzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BVVRIX01FQ0hTX0FVVEhfU1JDX0VYVEVSTkFMID0gZXhwb3J0cy5BdXRoTWVjaGFuaXNtID0gdm9pZCAwO1xuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydHMuQXV0aE1lY2hhbmlzbSA9IE9iamVjdC5mcmVlemUoe1xuICAgIE1PTkdPREJfQVdTOiAnTU9OR09EQi1BV1MnLFxuICAgIE1PTkdPREJfQ1I6ICdNT05HT0RCLUNSJyxcbiAgICBNT05HT0RCX0RFRkFVTFQ6ICdERUZBVUxUJyxcbiAgICBNT05HT0RCX0dTU0FQSTogJ0dTU0FQSScsXG4gICAgTU9OR09EQl9QTEFJTjogJ1BMQUlOJyxcbiAgICBNT05HT0RCX1NDUkFNX1NIQTE6ICdTQ1JBTS1TSEEtMScsXG4gICAgTU9OR09EQl9TQ1JBTV9TSEEyNTY6ICdTQ1JBTS1TSEEtMjU2JyxcbiAgICBNT05HT0RCX1g1MDk6ICdNT05HT0RCLVg1MDknLFxuICAgIE1PTkdPREJfT0lEQzogJ01PTkdPREItT0lEQydcbn0pO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0cy5BVVRIX01FQ0hTX0FVVEhfU1JDX0VYVEVSTkFMID0gbmV3IFNldChbXG4gICAgZXhwb3J0cy5BdXRoTWVjaGFuaXNtLk1PTkdPREJfR1NTQVBJLFxuICAgIGV4cG9ydHMuQXV0aE1lY2hhbmlzbS5NT05HT0RCX0FXUyxcbiAgICBleHBvcnRzLkF1dGhNZWNoYW5pc20uTU9OR09EQl9PSURDLFxuICAgIGV4cG9ydHMuQXV0aE1lY2hhbmlzbS5NT05HT0RCX1g1MDlcbl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvdmlkZXJzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/providers.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/scram.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/scram.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ScramSHA256 = exports.ScramSHA1 = void 0;\nconst saslprep_1 = __webpack_require__(/*! @mongodb-js/saslprep */ \"(rsc)/../node_modules/.pnpm/@mongodb-js+saslprep@1.1.9/node_modules/@mongodb-js/saslprep/dist/node.js\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst bson_1 = __webpack_require__(/*! ../../bson */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nconst providers_1 = __webpack_require__(/*! ./providers */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/providers.js\");\nclass ScramSHA extends auth_provider_1.AuthProvider {\n    constructor(cryptoMethod) {\n        super();\n        this.cryptoMethod = cryptoMethod || 'sha1';\n    }\n    async prepare(handshakeDoc, authContext) {\n        const cryptoMethod = this.cryptoMethod;\n        const credentials = authContext.credentials;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        const nonce = await (0, utils_1.randomBytes)(24);\n        // store the nonce for later use\n        authContext.nonce = nonce;\n        const request = {\n            ...handshakeDoc,\n            speculativeAuthenticate: {\n                ...makeFirstMessage(cryptoMethod, credentials, nonce),\n                db: credentials.source\n            }\n        };\n        return request;\n    }\n    async auth(authContext) {\n        const { reauthenticating, response } = authContext;\n        if (response?.speculativeAuthenticate && !reauthenticating) {\n            return await continueScramConversation(this.cryptoMethod, response.speculativeAuthenticate, authContext);\n        }\n        return await executeScram(this.cryptoMethod, authContext);\n    }\n}\nfunction cleanUsername(username) {\n    return username.replace('=', '=3D').replace(',', '=2C');\n}\nfunction clientFirstMessageBare(username, nonce) {\n    // NOTE: This is done b/c Javascript uses UTF-16, but the server is hashing in UTF-8.\n    // Since the username is not sasl-prep-d, we need to do this here.\n    return Buffer.concat([\n        Buffer.from('n=', 'utf8'),\n        Buffer.from(username, 'utf8'),\n        Buffer.from(',r=', 'utf8'),\n        Buffer.from(nonce.toString('base64'), 'utf8')\n    ]);\n}\nfunction makeFirstMessage(cryptoMethod, credentials, nonce) {\n    const username = cleanUsername(credentials.username);\n    const mechanism = cryptoMethod === 'sha1' ? providers_1.AuthMechanism.MONGODB_SCRAM_SHA1 : providers_1.AuthMechanism.MONGODB_SCRAM_SHA256;\n    // NOTE: This is done b/c Javascript uses UTF-16, but the server is hashing in UTF-8.\n    // Since the username is not sasl-prep-d, we need to do this here.\n    return {\n        saslStart: 1,\n        mechanism,\n        payload: new bson_1.Binary(Buffer.concat([Buffer.from('n,,', 'utf8'), clientFirstMessageBare(username, nonce)])),\n        autoAuthorize: 1,\n        options: { skipEmptyExchange: true }\n    };\n}\nasync function executeScram(cryptoMethod, authContext) {\n    const { connection, credentials } = authContext;\n    if (!credentials) {\n        throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n    }\n    if (!authContext.nonce) {\n        throw new error_1.MongoInvalidArgumentError('AuthContext must contain a valid nonce property');\n    }\n    const nonce = authContext.nonce;\n    const db = credentials.source;\n    const saslStartCmd = makeFirstMessage(cryptoMethod, credentials, nonce);\n    const response = await connection.command((0, utils_1.ns)(`${db}.$cmd`), saslStartCmd, undefined);\n    await continueScramConversation(cryptoMethod, response, authContext);\n}\nasync function continueScramConversation(cryptoMethod, response, authContext) {\n    const connection = authContext.connection;\n    const credentials = authContext.credentials;\n    if (!credentials) {\n        throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n    }\n    if (!authContext.nonce) {\n        throw new error_1.MongoInvalidArgumentError('Unable to continue SCRAM without valid nonce');\n    }\n    const nonce = authContext.nonce;\n    const db = credentials.source;\n    const username = cleanUsername(credentials.username);\n    const password = credentials.password;\n    const processedPassword = cryptoMethod === 'sha256' ? (0, saslprep_1.saslprep)(password) : passwordDigest(username, password);\n    const payload = Buffer.isBuffer(response.payload)\n        ? new bson_1.Binary(response.payload)\n        : response.payload;\n    const dict = parsePayload(payload);\n    const iterations = parseInt(dict.i, 10);\n    if (iterations && iterations < 4096) {\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError(`Server returned an invalid iteration count ${iterations}`);\n    }\n    const salt = dict.s;\n    const rnonce = dict.r;\n    if (rnonce.startsWith('nonce')) {\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError(`Server returned an invalid nonce: ${rnonce}`);\n    }\n    // Set up start of proof\n    const withoutProof = `c=biws,r=${rnonce}`;\n    const saltedPassword = HI(processedPassword, Buffer.from(salt, 'base64'), iterations, cryptoMethod);\n    const clientKey = HMAC(cryptoMethod, saltedPassword, 'Client Key');\n    const serverKey = HMAC(cryptoMethod, saltedPassword, 'Server Key');\n    const storedKey = H(cryptoMethod, clientKey);\n    const authMessage = [\n        clientFirstMessageBare(username, nonce),\n        payload.toString('utf8'),\n        withoutProof\n    ].join(',');\n    const clientSignature = HMAC(cryptoMethod, storedKey, authMessage);\n    const clientProof = `p=${xor(clientKey, clientSignature)}`;\n    const clientFinal = [withoutProof, clientProof].join(',');\n    const serverSignature = HMAC(cryptoMethod, serverKey, authMessage);\n    const saslContinueCmd = {\n        saslContinue: 1,\n        conversationId: response.conversationId,\n        payload: new bson_1.Binary(Buffer.from(clientFinal))\n    };\n    const r = await connection.command((0, utils_1.ns)(`${db}.$cmd`), saslContinueCmd, undefined);\n    const parsedResponse = parsePayload(r.payload);\n    if (!compareDigest(Buffer.from(parsedResponse.v, 'base64'), serverSignature)) {\n        throw new error_1.MongoRuntimeError('Server returned an invalid signature');\n    }\n    if (r.done !== false) {\n        // If the server sends r.done === true we can save one RTT\n        return;\n    }\n    const retrySaslContinueCmd = {\n        saslContinue: 1,\n        conversationId: r.conversationId,\n        payload: Buffer.alloc(0)\n    };\n    await connection.command((0, utils_1.ns)(`${db}.$cmd`), retrySaslContinueCmd, undefined);\n}\nfunction parsePayload(payload) {\n    const payloadStr = payload.toString('utf8');\n    const dict = {};\n    const parts = payloadStr.split(',');\n    for (let i = 0; i < parts.length; i++) {\n        const valueParts = (parts[i].match(/^([^=]*)=(.*)$/) ?? []).slice(1);\n        dict[valueParts[0]] = valueParts[1];\n    }\n    return dict;\n}\nfunction passwordDigest(username, password) {\n    if (typeof username !== 'string') {\n        throw new error_1.MongoInvalidArgumentError('Username must be a string');\n    }\n    if (typeof password !== 'string') {\n        throw new error_1.MongoInvalidArgumentError('Password must be a string');\n    }\n    if (password.length === 0) {\n        throw new error_1.MongoInvalidArgumentError('Password cannot be empty');\n    }\n    let md5;\n    try {\n        md5 = crypto.createHash('md5');\n    }\n    catch (err) {\n        if (crypto.getFips()) {\n            // This error is (slightly) more helpful than what comes from OpenSSL directly, e.g.\n            // 'Error: error:060800C8:digital envelope routines:EVP_DigestInit_ex:disabled for FIPS'\n            throw new Error('Auth mechanism SCRAM-SHA-1 is not supported in FIPS mode');\n        }\n        throw err;\n    }\n    md5.update(`${username}:mongo:${password}`, 'utf8');\n    return md5.digest('hex');\n}\n// XOR two buffers\nfunction xor(a, b) {\n    if (!Buffer.isBuffer(a)) {\n        a = Buffer.from(a);\n    }\n    if (!Buffer.isBuffer(b)) {\n        b = Buffer.from(b);\n    }\n    const length = Math.max(a.length, b.length);\n    const res = [];\n    for (let i = 0; i < length; i += 1) {\n        res.push(a[i] ^ b[i]);\n    }\n    return Buffer.from(res).toString('base64');\n}\nfunction H(method, text) {\n    return crypto.createHash(method).update(text).digest();\n}\nfunction HMAC(method, key, text) {\n    return crypto.createHmac(method, key).update(text).digest();\n}\nlet _hiCache = {};\nlet _hiCacheCount = 0;\nfunction _hiCachePurge() {\n    _hiCache = {};\n    _hiCacheCount = 0;\n}\nconst hiLengthMap = {\n    sha256: 32,\n    sha1: 20\n};\nfunction HI(data, salt, iterations, cryptoMethod) {\n    // omit the work if already generated\n    const key = [data, salt.toString('base64'), iterations].join('_');\n    if (_hiCache[key] != null) {\n        return _hiCache[key];\n    }\n    // generate the salt\n    const saltedData = crypto.pbkdf2Sync(data, salt, iterations, hiLengthMap[cryptoMethod], cryptoMethod);\n    // cache a copy to speed up the next lookup, but prevent unbounded cache growth\n    if (_hiCacheCount >= 200) {\n        _hiCachePurge();\n    }\n    _hiCache[key] = saltedData;\n    _hiCacheCount += 1;\n    return saltedData;\n}\nfunction compareDigest(lhs, rhs) {\n    if (lhs.length !== rhs.length) {\n        return false;\n    }\n    if (typeof crypto.timingSafeEqual === 'function') {\n        return crypto.timingSafeEqual(lhs, rhs);\n    }\n    let result = 0;\n    for (let i = 0; i < lhs.length; i++) {\n        result |= lhs[i] ^ rhs[i];\n    }\n    return result === 0;\n}\nclass ScramSHA1 extends ScramSHA {\n    constructor() {\n        super('sha1');\n    }\n}\nexports.ScramSHA1 = ScramSHA1;\nclass ScramSHA256 extends ScramSHA {\n    constructor() {\n        super('sha256');\n    }\n}\nexports.ScramSHA256 = ScramSHA256;\n//# sourceMappingURL=scram.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/scram.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/x509.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/x509.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.X509 = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nclass X509 extends auth_provider_1.AuthProvider {\n    async prepare(handshakeDoc, authContext) {\n        const { credentials } = authContext;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        return { ...handshakeDoc, speculativeAuthenticate: x509AuthenticateCommand(credentials) };\n    }\n    async auth(authContext) {\n        const connection = authContext.connection;\n        const credentials = authContext.credentials;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        const response = authContext.response;\n        if (response?.speculativeAuthenticate) {\n            return;\n        }\n        await connection.command((0, utils_1.ns)('$external.$cmd'), x509AuthenticateCommand(credentials), undefined);\n    }\n}\nexports.X509 = X509;\nfunction x509AuthenticateCommand(credentials) {\n    const command = { authenticate: 1, mechanism: 'MONGODB-X509' };\n    if (credentials.username) {\n        command.user = credentials.username;\n    }\n    return command;\n}\n//# sourceMappingURL=x509.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgveDUwOS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxZQUFZO0FBQ1osZ0JBQWdCLG1CQUFPLENBQUMsaUdBQWE7QUFDckMsZ0JBQWdCLG1CQUFPLENBQUMsaUdBQWE7QUFDckMsd0JBQXdCLG1CQUFPLENBQUMsdUhBQWlCO0FBQ2pEO0FBQ0E7QUFDQSxnQkFBZ0IsY0FBYztBQUM5QjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9saW5rdXMvR2l0aHViL21vbm90d28vcGF5bG9hZC1wbHVnaW4tbWV0YS9ub2RlX21vZHVsZXMvLnBucG0vbW9uZ29kYkA2LjEwLjAvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC94NTA5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5YNTA5ID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi9lcnJvclwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHNcIik7XG5jb25zdCBhdXRoX3Byb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9hdXRoX3Byb3ZpZGVyXCIpO1xuY2xhc3MgWDUwOSBleHRlbmRzIGF1dGhfcHJvdmlkZXJfMS5BdXRoUHJvdmlkZXIge1xuICAgIGFzeW5jIHByZXBhcmUoaGFuZHNoYWtlRG9jLCBhdXRoQ29udGV4dCkge1xuICAgICAgICBjb25zdCB7IGNyZWRlbnRpYWxzIH0gPSBhdXRoQ29udGV4dDtcbiAgICAgICAgaWYgKCFjcmVkZW50aWFscykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29NaXNzaW5nQ3JlZGVudGlhbHNFcnJvcignQXV0aENvbnRleHQgbXVzdCBwcm92aWRlIGNyZWRlbnRpYWxzLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IC4uLmhhbmRzaGFrZURvYywgc3BlY3VsYXRpdmVBdXRoZW50aWNhdGU6IHg1MDlBdXRoZW50aWNhdGVDb21tYW5kKGNyZWRlbnRpYWxzKSB9O1xuICAgIH1cbiAgICBhc3luYyBhdXRoKGF1dGhDb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IGNvbm5lY3Rpb24gPSBhdXRoQ29udGV4dC5jb25uZWN0aW9uO1xuICAgICAgICBjb25zdCBjcmVkZW50aWFscyA9IGF1dGhDb250ZXh0LmNyZWRlbnRpYWxzO1xuICAgICAgICBpZiAoIWNyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb01pc3NpbmdDcmVkZW50aWFsc0Vycm9yKCdBdXRoQ29udGV4dCBtdXN0IHByb3ZpZGUgY3JlZGVudGlhbHMuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhdXRoQ29udGV4dC5yZXNwb25zZTtcbiAgICAgICAgaWYgKHJlc3BvbnNlPy5zcGVjdWxhdGl2ZUF1dGhlbnRpY2F0ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IGNvbm5lY3Rpb24uY29tbWFuZCgoMCwgdXRpbHNfMS5ucykoJyRleHRlcm5hbC4kY21kJyksIHg1MDlBdXRoZW50aWNhdGVDb21tYW5kKGNyZWRlbnRpYWxzKSwgdW5kZWZpbmVkKTtcbiAgICB9XG59XG5leHBvcnRzLlg1MDkgPSBYNTA5O1xuZnVuY3Rpb24geDUwOUF1dGhlbnRpY2F0ZUNvbW1hbmQoY3JlZGVudGlhbHMpIHtcbiAgICBjb25zdCBjb21tYW5kID0geyBhdXRoZW50aWNhdGU6IDEsIG1lY2hhbmlzbTogJ01PTkdPREItWDUwOScgfTtcbiAgICBpZiAoY3JlZGVudGlhbHMudXNlcm5hbWUpIHtcbiAgICAgICAgY29tbWFuZC51c2VyID0gY3JlZGVudGlhbHMudXNlcm5hbWU7XG4gICAgfVxuICAgIHJldHVybiBjb21tYW5kO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9eDUwOS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/x509.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/command_monitoring_events.js":
/*!*******************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/command_monitoring_events.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SENSITIVE_COMMANDS = exports.CommandFailedEvent = exports.CommandSucceededEvent = exports.CommandStartedEvent = void 0;\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/constants.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst commands_1 = __webpack_require__(/*! ./commands */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/commands.js\");\n/**\n * An event indicating the start of a given command\n * @public\n * @category Event\n */\nclass CommandStartedEvent {\n    /**\n     * Create a started event\n     *\n     * @internal\n     * @param pool - the pool that originated the command\n     * @param command - the command\n     */\n    constructor(connection, command, serverConnectionId) {\n        /** @internal */\n        this.name = constants_1.COMMAND_STARTED;\n        const cmd = extractCommand(command);\n        const commandName = extractCommandName(cmd);\n        const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n        // TODO: remove in major revision, this is not spec behavior\n        if (exports.SENSITIVE_COMMANDS.has(commandName)) {\n            this.commandObj = {};\n            this.commandObj[commandName] = true;\n        }\n        this.address = address;\n        this.connectionId = connectionId;\n        this.serviceId = serviceId;\n        this.requestId = command.requestId;\n        this.databaseName = command.databaseName;\n        this.commandName = commandName;\n        this.command = maybeRedact(commandName, cmd, cmd);\n        this.serverConnectionId = serverConnectionId;\n    }\n    /* @internal */\n    get hasServiceId() {\n        return !!this.serviceId;\n    }\n}\nexports.CommandStartedEvent = CommandStartedEvent;\n/**\n * An event indicating the success of a given command\n * @public\n * @category Event\n */\nclass CommandSucceededEvent {\n    /**\n     * Create a succeeded event\n     *\n     * @internal\n     * @param pool - the pool that originated the command\n     * @param command - the command\n     * @param reply - the reply for this command from the server\n     * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n     */\n    constructor(connection, command, reply, started, serverConnectionId) {\n        /** @internal */\n        this.name = constants_1.COMMAND_SUCCEEDED;\n        const cmd = extractCommand(command);\n        const commandName = extractCommandName(cmd);\n        const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n        this.address = address;\n        this.connectionId = connectionId;\n        this.serviceId = serviceId;\n        this.requestId = command.requestId;\n        this.commandName = commandName;\n        this.duration = (0, utils_1.calculateDurationInMs)(started);\n        this.reply = maybeRedact(commandName, cmd, extractReply(command, reply));\n        this.serverConnectionId = serverConnectionId;\n    }\n    /* @internal */\n    get hasServiceId() {\n        return !!this.serviceId;\n    }\n}\nexports.CommandSucceededEvent = CommandSucceededEvent;\n/**\n * An event indicating the failure of a given command\n * @public\n * @category Event\n */\nclass CommandFailedEvent {\n    /**\n     * Create a failure event\n     *\n     * @internal\n     * @param pool - the pool that originated the command\n     * @param command - the command\n     * @param error - the generated error or a server error response\n     * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n     */\n    constructor(connection, command, error, started, serverConnectionId) {\n        /** @internal */\n        this.name = constants_1.COMMAND_FAILED;\n        const cmd = extractCommand(command);\n        const commandName = extractCommandName(cmd);\n        const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n        this.address = address;\n        this.connectionId = connectionId;\n        this.serviceId = serviceId;\n        this.requestId = command.requestId;\n        this.commandName = commandName;\n        this.duration = (0, utils_1.calculateDurationInMs)(started);\n        this.failure = maybeRedact(commandName, cmd, error);\n        this.serverConnectionId = serverConnectionId;\n    }\n    /* @internal */\n    get hasServiceId() {\n        return !!this.serviceId;\n    }\n}\nexports.CommandFailedEvent = CommandFailedEvent;\n/**\n * Commands that we want to redact because of the sensitive nature of their contents\n * @internal\n */\nexports.SENSITIVE_COMMANDS = new Set([\n    'authenticate',\n    'saslStart',\n    'saslContinue',\n    'getnonce',\n    'createUser',\n    'updateUser',\n    'copydbgetnonce',\n    'copydbsaslstart',\n    'copydb'\n]);\nconst HELLO_COMMANDS = new Set(['hello', constants_1.LEGACY_HELLO_COMMAND, constants_1.LEGACY_HELLO_COMMAND_CAMEL_CASE]);\n// helper methods\nconst extractCommandName = (commandDoc) => Object.keys(commandDoc)[0];\nconst namespace = (command) => command.ns;\nconst collectionName = (command) => command.ns.split('.')[1];\nconst maybeRedact = (commandName, commandDoc, result) => exports.SENSITIVE_COMMANDS.has(commandName) ||\n    (HELLO_COMMANDS.has(commandName) && commandDoc.speculativeAuthenticate)\n    ? {}\n    : result;\nconst LEGACY_FIND_QUERY_MAP = {\n    $query: 'filter',\n    $orderby: 'sort',\n    $hint: 'hint',\n    $comment: 'comment',\n    $maxScan: 'maxScan',\n    $max: 'max',\n    $min: 'min',\n    $returnKey: 'returnKey',\n    $showDiskLoc: 'showRecordId',\n    $maxTimeMS: 'maxTimeMS',\n    $snapshot: 'snapshot'\n};\nconst LEGACY_FIND_OPTIONS_MAP = {\n    numberToSkip: 'skip',\n    numberToReturn: 'batchSize',\n    returnFieldSelector: 'projection'\n};\nconst OP_QUERY_KEYS = [\n    'tailable',\n    'oplogReplay',\n    'noCursorTimeout',\n    'awaitData',\n    'partial',\n    'exhaust'\n];\n/** Extract the actual command from the query, possibly up-converting if it's a legacy format */\nfunction extractCommand(command) {\n    if (command instanceof commands_1.OpMsgRequest) {\n        const cmd = (0, utils_1.deepCopy)(command.command);\n        // For OP_MSG with payload type 1 we need to pull the documents\n        // array out of the document sequence for monitoring.\n        if (cmd.ops instanceof commands_1.DocumentSequence) {\n            cmd.ops = cmd.ops.documents;\n        }\n        if (cmd.nsInfo instanceof commands_1.DocumentSequence) {\n            cmd.nsInfo = cmd.nsInfo.documents;\n        }\n        return cmd;\n    }\n    if (command.query?.$query) {\n        let result;\n        if (command.ns === 'admin.$cmd') {\n            // up-convert legacy command\n            result = Object.assign({}, command.query.$query);\n        }\n        else {\n            // up-convert legacy find command\n            result = { find: collectionName(command) };\n            Object.keys(LEGACY_FIND_QUERY_MAP).forEach(key => {\n                if (command.query[key] != null) {\n                    result[LEGACY_FIND_QUERY_MAP[key]] = (0, utils_1.deepCopy)(command.query[key]);\n                }\n            });\n        }\n        Object.keys(LEGACY_FIND_OPTIONS_MAP).forEach(key => {\n            const legacyKey = key;\n            if (command[legacyKey] != null) {\n                result[LEGACY_FIND_OPTIONS_MAP[legacyKey]] = (0, utils_1.deepCopy)(command[legacyKey]);\n            }\n        });\n        OP_QUERY_KEYS.forEach(key => {\n            if (command[key]) {\n                result[key] = command[key];\n            }\n        });\n        if (command.pre32Limit != null) {\n            result.limit = command.pre32Limit;\n        }\n        if (command.query.$explain) {\n            return { explain: result };\n        }\n        return result;\n    }\n    const clonedQuery = {};\n    const clonedCommand = {};\n    if (command.query) {\n        for (const k in command.query) {\n            clonedQuery[k] = (0, utils_1.deepCopy)(command.query[k]);\n        }\n        clonedCommand.query = clonedQuery;\n    }\n    for (const k in command) {\n        if (k === 'query')\n            continue;\n        clonedCommand[k] = (0, utils_1.deepCopy)(command[k]);\n    }\n    return command.query ? clonedQuery : clonedCommand;\n}\nfunction extractReply(command, reply) {\n    if (!reply) {\n        return reply;\n    }\n    if (command instanceof commands_1.OpMsgRequest) {\n        return (0, utils_1.deepCopy)(reply.result ? reply.result : reply);\n    }\n    // is this a legacy find command?\n    if (command.query && command.query.$query != null) {\n        return {\n            ok: 1,\n            cursor: {\n                id: (0, utils_1.deepCopy)(reply.cursorId),\n                ns: namespace(command),\n                firstBatch: (0, utils_1.deepCopy)(reply.documents)\n            }\n        };\n    }\n    return (0, utils_1.deepCopy)(reply.result ? reply.result : reply);\n}\nfunction extractConnectionDetails(connection) {\n    let connectionId;\n    if ('id' in connection) {\n        connectionId = connection.id;\n    }\n    return {\n        address: connection.address,\n        serviceId: connection.serviceId,\n        connectionId\n    };\n}\n//# sourceMappingURL=command_monitoring_events.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/command_monitoring_events.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/commands.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/commands.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OpCompressedRequest = exports.OpMsgResponse = exports.OpMsgRequest = exports.DocumentSequence = exports.OpReply = exports.OpQueryRequest = void 0;\nconst BSON = __webpack_require__(/*! ../bson */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst compression_1 = __webpack_require__(/*! ./wire_protocol/compression */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/compression.js\");\nconst constants_1 = __webpack_require__(/*! ./wire_protocol/constants */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\n// Incrementing request id\nlet _requestId = 0;\n// Query flags\nconst OPTS_TAILABLE_CURSOR = 2;\nconst OPTS_SECONDARY = 4;\nconst OPTS_OPLOG_REPLAY = 8;\nconst OPTS_NO_CURSOR_TIMEOUT = 16;\nconst OPTS_AWAIT_DATA = 32;\nconst OPTS_EXHAUST = 64;\nconst OPTS_PARTIAL = 128;\n// Response flags\nconst CURSOR_NOT_FOUND = 1;\nconst QUERY_FAILURE = 2;\nconst SHARD_CONFIG_STALE = 4;\nconst AWAIT_CAPABLE = 8;\nconst encodeUTF8Into = BSON.BSON.onDemand.ByteUtils.encodeUTF8Into;\n/** @internal */\nclass OpQueryRequest {\n    constructor(databaseName, query, options) {\n        this.databaseName = databaseName;\n        this.query = query;\n        /** moreToCome is an OP_MSG only concept */\n        this.moreToCome = false;\n        // Basic options needed to be passed in\n        // TODO(NODE-3483): Replace with MongoCommandError\n        const ns = `${databaseName}.$cmd`;\n        if (typeof databaseName !== 'string') {\n            throw new error_1.MongoRuntimeError('Database name must be a string for a query');\n        }\n        // TODO(NODE-3483): Replace with MongoCommandError\n        if (query == null)\n            throw new error_1.MongoRuntimeError('A query document must be specified for query');\n        // Validate that we are not passing 0x00 in the collection name\n        if (ns.indexOf('\\x00') !== -1) {\n            // TODO(NODE-3483): Use MongoNamespace static method\n            throw new error_1.MongoRuntimeError('Namespace cannot contain a null character');\n        }\n        // Basic options\n        this.ns = ns;\n        // Additional options\n        this.numberToSkip = options.numberToSkip || 0;\n        this.numberToReturn = options.numberToReturn || 0;\n        this.returnFieldSelector = options.returnFieldSelector || undefined;\n        this.requestId = options.requestId ?? OpQueryRequest.getRequestId();\n        // special case for pre-3.2 find commands, delete ASAP\n        this.pre32Limit = options.pre32Limit;\n        // Serialization option\n        this.serializeFunctions =\n            typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n        this.ignoreUndefined =\n            typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n        this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n        this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n        this.batchSize = this.numberToReturn;\n        // Flags\n        this.tailable = false;\n        this.secondaryOk = typeof options.secondaryOk === 'boolean' ? options.secondaryOk : false;\n        this.oplogReplay = false;\n        this.noCursorTimeout = false;\n        this.awaitData = false;\n        this.exhaust = false;\n        this.partial = false;\n    }\n    /** Assign next request Id. */\n    incRequestId() {\n        this.requestId = _requestId++;\n    }\n    /** Peek next request Id. */\n    nextRequestId() {\n        return _requestId + 1;\n    }\n    /** Increment then return next request Id. */\n    static getRequestId() {\n        return ++_requestId;\n    }\n    // Uses a single allocated buffer for the process, avoiding multiple memory allocations\n    toBin() {\n        const buffers = [];\n        let projection = null;\n        // Set up the flags\n        let flags = 0;\n        if (this.tailable) {\n            flags |= OPTS_TAILABLE_CURSOR;\n        }\n        if (this.secondaryOk) {\n            flags |= OPTS_SECONDARY;\n        }\n        if (this.oplogReplay) {\n            flags |= OPTS_OPLOG_REPLAY;\n        }\n        if (this.noCursorTimeout) {\n            flags |= OPTS_NO_CURSOR_TIMEOUT;\n        }\n        if (this.awaitData) {\n            flags |= OPTS_AWAIT_DATA;\n        }\n        if (this.exhaust) {\n            flags |= OPTS_EXHAUST;\n        }\n        if (this.partial) {\n            flags |= OPTS_PARTIAL;\n        }\n        // If batchSize is different to this.numberToReturn\n        if (this.batchSize !== this.numberToReturn)\n            this.numberToReturn = this.batchSize;\n        // Allocate write protocol header buffer\n        const header = Buffer.alloc(4 * 4 + // Header\n            4 + // Flags\n            Buffer.byteLength(this.ns) +\n            1 + // namespace\n            4 + // numberToSkip\n            4 // numberToReturn\n        );\n        // Add header to buffers\n        buffers.push(header);\n        // Serialize the query\n        const query = BSON.serialize(this.query, {\n            checkKeys: this.checkKeys,\n            serializeFunctions: this.serializeFunctions,\n            ignoreUndefined: this.ignoreUndefined\n        });\n        // Add query document\n        buffers.push(query);\n        if (this.returnFieldSelector && Object.keys(this.returnFieldSelector).length > 0) {\n            // Serialize the projection document\n            projection = BSON.serialize(this.returnFieldSelector, {\n                checkKeys: this.checkKeys,\n                serializeFunctions: this.serializeFunctions,\n                ignoreUndefined: this.ignoreUndefined\n            });\n            // Add projection document\n            buffers.push(projection);\n        }\n        // Total message size\n        const totalLength = header.length + query.length + (projection ? projection.length : 0);\n        // Set up the index\n        let index = 4;\n        // Write total document length\n        header[3] = (totalLength >> 24) & 0xff;\n        header[2] = (totalLength >> 16) & 0xff;\n        header[1] = (totalLength >> 8) & 0xff;\n        header[0] = totalLength & 0xff;\n        // Write header information requestId\n        header[index + 3] = (this.requestId >> 24) & 0xff;\n        header[index + 2] = (this.requestId >> 16) & 0xff;\n        header[index + 1] = (this.requestId >> 8) & 0xff;\n        header[index] = this.requestId & 0xff;\n        index = index + 4;\n        // Write header information responseTo\n        header[index + 3] = (0 >> 24) & 0xff;\n        header[index + 2] = (0 >> 16) & 0xff;\n        header[index + 1] = (0 >> 8) & 0xff;\n        header[index] = 0 & 0xff;\n        index = index + 4;\n        // Write header information OP_QUERY\n        header[index + 3] = (constants_1.OP_QUERY >> 24) & 0xff;\n        header[index + 2] = (constants_1.OP_QUERY >> 16) & 0xff;\n        header[index + 1] = (constants_1.OP_QUERY >> 8) & 0xff;\n        header[index] = constants_1.OP_QUERY & 0xff;\n        index = index + 4;\n        // Write header information flags\n        header[index + 3] = (flags >> 24) & 0xff;\n        header[index + 2] = (flags >> 16) & 0xff;\n        header[index + 1] = (flags >> 8) & 0xff;\n        header[index] = flags & 0xff;\n        index = index + 4;\n        // Write collection name\n        index = index + header.write(this.ns, index, 'utf8') + 1;\n        header[index - 1] = 0;\n        // Write header information flags numberToSkip\n        header[index + 3] = (this.numberToSkip >> 24) & 0xff;\n        header[index + 2] = (this.numberToSkip >> 16) & 0xff;\n        header[index + 1] = (this.numberToSkip >> 8) & 0xff;\n        header[index] = this.numberToSkip & 0xff;\n        index = index + 4;\n        // Write header information flags numberToReturn\n        header[index + 3] = (this.numberToReturn >> 24) & 0xff;\n        header[index + 2] = (this.numberToReturn >> 16) & 0xff;\n        header[index + 1] = (this.numberToReturn >> 8) & 0xff;\n        header[index] = this.numberToReturn & 0xff;\n        index = index + 4;\n        // Return the buffers\n        return buffers;\n    }\n}\nexports.OpQueryRequest = OpQueryRequest;\n/** @internal */\nclass OpReply {\n    constructor(message, msgHeader, msgBody, opts) {\n        this.index = 0;\n        this.sections = [];\n        /** moreToCome is an OP_MSG only concept */\n        this.moreToCome = false;\n        this.parsed = false;\n        this.raw = message;\n        this.data = msgBody;\n        this.opts = opts ?? {\n            useBigInt64: false,\n            promoteLongs: true,\n            promoteValues: true,\n            promoteBuffers: false,\n            bsonRegExp: false\n        };\n        // Read the message header\n        this.length = msgHeader.length;\n        this.requestId = msgHeader.requestId;\n        this.responseTo = msgHeader.responseTo;\n        this.opCode = msgHeader.opCode;\n        this.fromCompressed = msgHeader.fromCompressed;\n        // Flag values\n        this.useBigInt64 = typeof this.opts.useBigInt64 === 'boolean' ? this.opts.useBigInt64 : false;\n        this.promoteLongs = typeof this.opts.promoteLongs === 'boolean' ? this.opts.promoteLongs : true;\n        this.promoteValues =\n            typeof this.opts.promoteValues === 'boolean' ? this.opts.promoteValues : true;\n        this.promoteBuffers =\n            typeof this.opts.promoteBuffers === 'boolean' ? this.opts.promoteBuffers : false;\n        this.bsonRegExp = typeof this.opts.bsonRegExp === 'boolean' ? this.opts.bsonRegExp : false;\n    }\n    isParsed() {\n        return this.parsed;\n    }\n    parse() {\n        // Don't parse again if not needed\n        if (this.parsed)\n            return this.sections[0];\n        // Position within OP_REPLY at which documents start\n        // (See https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#wire-op-reply)\n        this.index = 20;\n        // Read the message body\n        this.responseFlags = this.data.readInt32LE(0);\n        this.cursorId = new BSON.Long(this.data.readInt32LE(4), this.data.readInt32LE(8));\n        this.startingFrom = this.data.readInt32LE(12);\n        this.numberReturned = this.data.readInt32LE(16);\n        if (this.numberReturned < 0 || this.numberReturned > 2 ** 32 - 1) {\n            throw new RangeError(`OP_REPLY numberReturned is an invalid array length ${this.numberReturned}`);\n        }\n        this.cursorNotFound = (this.responseFlags & CURSOR_NOT_FOUND) !== 0;\n        this.queryFailure = (this.responseFlags & QUERY_FAILURE) !== 0;\n        this.shardConfigStale = (this.responseFlags & SHARD_CONFIG_STALE) !== 0;\n        this.awaitCapable = (this.responseFlags & AWAIT_CAPABLE) !== 0;\n        // Parse Body\n        for (let i = 0; i < this.numberReturned; i++) {\n            const bsonSize = this.data[this.index] |\n                (this.data[this.index + 1] << 8) |\n                (this.data[this.index + 2] << 16) |\n                (this.data[this.index + 3] << 24);\n            const section = this.data.subarray(this.index, this.index + bsonSize);\n            this.sections.push(section);\n            // Adjust the index\n            this.index = this.index + bsonSize;\n        }\n        // Set parsed\n        this.parsed = true;\n        return this.sections[0];\n    }\n}\nexports.OpReply = OpReply;\n// Msg Flags\nconst OPTS_CHECKSUM_PRESENT = 1;\nconst OPTS_MORE_TO_COME = 2;\nconst OPTS_EXHAUST_ALLOWED = 1 << 16;\n/** @internal */\nclass DocumentSequence {\n    /**\n     * Create a new document sequence for the provided field.\n     * @param field - The field it will replace.\n     */\n    constructor(field, documents) {\n        this.field = field;\n        this.documents = [];\n        this.chunks = [];\n        this.serializedDocumentsLength = 0;\n        // Document sequences starts with type 1 at the first byte.\n        // Field strings must always be UTF-8.\n        const buffer = Buffer.allocUnsafe(1 + 4 + this.field.length + 1);\n        buffer[0] = 1;\n        // Third part is the field name at offset 5 with trailing null byte.\n        encodeUTF8Into(buffer, `${this.field}\\0`, 5);\n        this.chunks.push(buffer);\n        this.header = buffer;\n        if (documents) {\n            for (const doc of documents) {\n                this.push(doc, BSON.serialize(doc));\n            }\n        }\n    }\n    /**\n     * Push a document to the document sequence. Will serialize the document\n     * as well and return the current serialized length of all documents.\n     * @param document - The document to add.\n     * @param buffer - The serialized document in raw BSON.\n     * @returns The new total document sequence length.\n     */\n    push(document, buffer) {\n        this.serializedDocumentsLength += buffer.length;\n        // Push the document.\n        this.documents.push(document);\n        // Push the document raw bson.\n        this.chunks.push(buffer);\n        // Write the new length.\n        this.header?.writeInt32LE(4 + this.field.length + 1 + this.serializedDocumentsLength, 1);\n        return this.serializedDocumentsLength + this.header.length;\n    }\n    /**\n     * Get the fully serialized bytes for the document sequence section.\n     * @returns The section bytes.\n     */\n    toBin() {\n        return Buffer.concat(this.chunks);\n    }\n}\nexports.DocumentSequence = DocumentSequence;\n/** @internal */\nclass OpMsgRequest {\n    constructor(databaseName, command, options) {\n        this.databaseName = databaseName;\n        this.command = command;\n        this.options = options;\n        // Basic options needed to be passed in\n        if (command == null)\n            throw new error_1.MongoInvalidArgumentError('Query document must be specified for query');\n        // Basic options\n        this.command.$db = databaseName;\n        // Ensure empty options\n        this.options = options ?? {};\n        // Additional options\n        this.requestId = options.requestId ? options.requestId : OpMsgRequest.getRequestId();\n        // Serialization option\n        this.serializeFunctions =\n            typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n        this.ignoreUndefined =\n            typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n        this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n        this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n        // flags\n        this.checksumPresent = false;\n        this.moreToCome = options.moreToCome ?? command.writeConcern?.w === 0;\n        this.exhaustAllowed =\n            typeof options.exhaustAllowed === 'boolean' ? options.exhaustAllowed : false;\n    }\n    toBin() {\n        const buffers = [];\n        let flags = 0;\n        if (this.checksumPresent) {\n            flags |= OPTS_CHECKSUM_PRESENT;\n        }\n        if (this.moreToCome) {\n            flags |= OPTS_MORE_TO_COME;\n        }\n        if (this.exhaustAllowed) {\n            flags |= OPTS_EXHAUST_ALLOWED;\n        }\n        const header = Buffer.alloc(4 * 4 + // Header\n            4 // Flags\n        );\n        buffers.push(header);\n        let totalLength = header.length;\n        const command = this.command;\n        totalLength += this.makeSections(buffers, command);\n        header.writeInt32LE(totalLength, 0); // messageLength\n        header.writeInt32LE(this.requestId, 4); // requestID\n        header.writeInt32LE(0, 8); // responseTo\n        header.writeInt32LE(constants_1.OP_MSG, 12); // opCode\n        header.writeUInt32LE(flags, 16); // flags\n        return buffers;\n    }\n    /**\n     * Add the sections to the OP_MSG request's buffers and returns the length.\n     */\n    makeSections(buffers, document) {\n        const sequencesBuffer = this.extractDocumentSequences(document);\n        const payloadTypeBuffer = Buffer.allocUnsafe(1);\n        payloadTypeBuffer[0] = 0;\n        const documentBuffer = this.serializeBson(document);\n        // First section, type 0\n        buffers.push(payloadTypeBuffer);\n        buffers.push(documentBuffer);\n        // Subsequent sections, type 1\n        buffers.push(sequencesBuffer);\n        return payloadTypeBuffer.length + documentBuffer.length + sequencesBuffer.length;\n    }\n    /**\n     * Extracts the document sequences from the command document and returns\n     * a buffer to be added as multiple sections after the initial type 0\n     * section in the message.\n     */\n    extractDocumentSequences(document) {\n        // Pull out any field in the command document that's value is a document sequence.\n        const chunks = [];\n        for (const [key, value] of Object.entries(document)) {\n            if (value instanceof DocumentSequence) {\n                chunks.push(value.toBin());\n                // Why are we removing the field from the command? This is because it needs to be\n                // removed in the OP_MSG request first section, and DocumentSequence is not a\n                // BSON type and is specific to the MongoDB wire protocol so there's nothing\n                // our BSON serializer can do about this. Since DocumentSequence is not exposed\n                // in the public API and only used internally, we are never mutating an original\n                // command provided by the user, just our own, and it's cheaper to delete from\n                // our own command than copying it.\n                delete document[key];\n            }\n        }\n        if (chunks.length > 0) {\n            return Buffer.concat(chunks);\n        }\n        // If we have no document sequences we return an empty buffer for nothing to add\n        // to the payload.\n        return Buffer.alloc(0);\n    }\n    serializeBson(document) {\n        return BSON.serialize(document, {\n            checkKeys: this.checkKeys,\n            serializeFunctions: this.serializeFunctions,\n            ignoreUndefined: this.ignoreUndefined\n        });\n    }\n    static getRequestId() {\n        _requestId = (_requestId + 1) & 0x7fffffff;\n        return _requestId;\n    }\n}\nexports.OpMsgRequest = OpMsgRequest;\n/** @internal */\nclass OpMsgResponse {\n    constructor(message, msgHeader, msgBody, opts) {\n        this.index = 0;\n        this.sections = [];\n        this.parsed = false;\n        this.raw = message;\n        this.data = msgBody;\n        this.opts = opts ?? {\n            useBigInt64: false,\n            promoteLongs: true,\n            promoteValues: true,\n            promoteBuffers: false,\n            bsonRegExp: false\n        };\n        // Read the message header\n        this.length = msgHeader.length;\n        this.requestId = msgHeader.requestId;\n        this.responseTo = msgHeader.responseTo;\n        this.opCode = msgHeader.opCode;\n        this.fromCompressed = msgHeader.fromCompressed;\n        // Read response flags\n        this.responseFlags = msgBody.readInt32LE(0);\n        this.checksumPresent = (this.responseFlags & OPTS_CHECKSUM_PRESENT) !== 0;\n        this.moreToCome = (this.responseFlags & OPTS_MORE_TO_COME) !== 0;\n        this.exhaustAllowed = (this.responseFlags & OPTS_EXHAUST_ALLOWED) !== 0;\n        this.useBigInt64 = typeof this.opts.useBigInt64 === 'boolean' ? this.opts.useBigInt64 : false;\n        this.promoteLongs = typeof this.opts.promoteLongs === 'boolean' ? this.opts.promoteLongs : true;\n        this.promoteValues =\n            typeof this.opts.promoteValues === 'boolean' ? this.opts.promoteValues : true;\n        this.promoteBuffers =\n            typeof this.opts.promoteBuffers === 'boolean' ? this.opts.promoteBuffers : false;\n        this.bsonRegExp = typeof this.opts.bsonRegExp === 'boolean' ? this.opts.bsonRegExp : false;\n    }\n    isParsed() {\n        return this.parsed;\n    }\n    parse() {\n        // Don't parse again if not needed\n        if (this.parsed)\n            return this.sections[0];\n        this.index = 4;\n        while (this.index < this.data.length) {\n            const payloadType = this.data.readUInt8(this.index++);\n            if (payloadType === 0) {\n                const bsonSize = this.data.readUInt32LE(this.index);\n                const bin = this.data.subarray(this.index, this.index + bsonSize);\n                this.sections.push(bin);\n                this.index += bsonSize;\n            }\n            else if (payloadType === 1) {\n                // It was decided that no driver makes use of payload type 1\n                // TODO(NODE-3483): Replace with MongoDeprecationError\n                throw new error_1.MongoRuntimeError('OP_MSG Payload Type 1 detected unsupported protocol');\n            }\n        }\n        this.parsed = true;\n        return this.sections[0];\n    }\n}\nexports.OpMsgResponse = OpMsgResponse;\nconst MESSAGE_HEADER_SIZE = 16;\nconst COMPRESSION_DETAILS_SIZE = 9; // originalOpcode + uncompressedSize, compressorID\n/**\n * @internal\n *\n * An OP_COMPRESSED request wraps either an OP_QUERY or OP_MSG message.\n */\nclass OpCompressedRequest {\n    constructor(command, options) {\n        this.command = command;\n        this.options = options;\n    }\n    // Return whether a command contains an uncompressible command term\n    // Will return true if command contains no uncompressible command terms\n    static canCompress(command) {\n        const commandDoc = command instanceof OpMsgRequest ? command.command : command.query;\n        const commandName = Object.keys(commandDoc)[0];\n        return !compression_1.uncompressibleCommands.has(commandName);\n    }\n    async toBin() {\n        const concatenatedOriginalCommandBuffer = Buffer.concat(this.command.toBin());\n        // otherwise, compress the message\n        const messageToBeCompressed = concatenatedOriginalCommandBuffer.slice(MESSAGE_HEADER_SIZE);\n        // Extract information needed for OP_COMPRESSED from the uncompressed message\n        const originalCommandOpCode = concatenatedOriginalCommandBuffer.readInt32LE(12);\n        // Compress the message body\n        const compressedMessage = await (0, compression_1.compress)(this.options, messageToBeCompressed);\n        // Create the msgHeader of OP_COMPRESSED\n        const msgHeader = Buffer.alloc(MESSAGE_HEADER_SIZE);\n        msgHeader.writeInt32LE(MESSAGE_HEADER_SIZE + COMPRESSION_DETAILS_SIZE + compressedMessage.length, 0); // messageLength\n        msgHeader.writeInt32LE(this.command.requestId, 4); // requestID\n        msgHeader.writeInt32LE(0, 8); // responseTo (zero)\n        msgHeader.writeInt32LE(constants_1.OP_COMPRESSED, 12); // opCode\n        // Create the compression details of OP_COMPRESSED\n        const compressionDetails = Buffer.alloc(COMPRESSION_DETAILS_SIZE);\n        compressionDetails.writeInt32LE(originalCommandOpCode, 0); // originalOpcode\n        compressionDetails.writeInt32LE(messageToBeCompressed.length, 4); // Size of the uncompressed compressedMessage, excluding the MsgHeader\n        compressionDetails.writeUInt8(compression_1.Compressor[this.options.agreedCompressor], 8); // compressorID\n        return [msgHeader, compressionDetails, compressedMessage];\n    }\n}\nexports.OpCompressedRequest = OpCompressedRequest;\n//# sourceMappingURL=commands.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/commands.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/connect.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/connect.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LEGAL_TCP_SOCKET_OPTIONS = exports.LEGAL_TLS_SOCKET_OPTIONS = void 0;\nexports.connect = connect;\nexports.makeConnection = makeConnection;\nexports.performInitialHandshake = performInitialHandshake;\nexports.prepareHandshakeDocument = prepareHandshakeDocument;\nexports.makeSocket = makeSocket;\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/constants.js\");\nconst deps_1 = __webpack_require__(/*! ../deps */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth/auth_provider */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nconst providers_1 = __webpack_require__(/*! ./auth/providers */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/providers.js\");\nconst connection_1 = __webpack_require__(/*! ./connection */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/connection.js\");\nconst constants_2 = __webpack_require__(/*! ./wire_protocol/constants */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\nasync function connect(options) {\n    let connection = null;\n    try {\n        const socket = await makeSocket(options);\n        connection = makeConnection(options, socket);\n        await performInitialHandshake(connection, options);\n        return connection;\n    }\n    catch (error) {\n        connection?.destroy();\n        throw error;\n    }\n}\nfunction makeConnection(options, socket) {\n    let ConnectionType = options.connectionType ?? connection_1.Connection;\n    if (options.autoEncrypter) {\n        ConnectionType = connection_1.CryptoConnection;\n    }\n    return new ConnectionType(socket, options);\n}\nfunction checkSupportedServer(hello, options) {\n    const maxWireVersion = Number(hello.maxWireVersion);\n    const minWireVersion = Number(hello.minWireVersion);\n    const serverVersionHighEnough = !Number.isNaN(maxWireVersion) && maxWireVersion >= constants_2.MIN_SUPPORTED_WIRE_VERSION;\n    const serverVersionLowEnough = !Number.isNaN(minWireVersion) && minWireVersion <= constants_2.MAX_SUPPORTED_WIRE_VERSION;\n    if (serverVersionHighEnough) {\n        if (serverVersionLowEnough) {\n            return null;\n        }\n        const message = `Server at ${options.hostAddress} reports minimum wire version ${JSON.stringify(hello.minWireVersion)}, but this version of the Node.js Driver requires at most ${constants_2.MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${constants_2.MAX_SUPPORTED_SERVER_VERSION})`;\n        return new error_1.MongoCompatibilityError(message);\n    }\n    const message = `Server at ${options.hostAddress} reports maximum wire version ${JSON.stringify(hello.maxWireVersion) ?? 0}, but this version of the Node.js Driver requires at least ${constants_2.MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${constants_2.MIN_SUPPORTED_SERVER_VERSION})`;\n    return new error_1.MongoCompatibilityError(message);\n}\nasync function performInitialHandshake(conn, options) {\n    const credentials = options.credentials;\n    if (credentials) {\n        if (!(credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT) &&\n            !options.authProviders.getOrCreateProvider(credentials.mechanism, credentials.mechanismProperties)) {\n            throw new error_1.MongoInvalidArgumentError(`AuthMechanism '${credentials.mechanism}' not supported`);\n        }\n    }\n    const authContext = new auth_provider_1.AuthContext(conn, credentials, options);\n    conn.authContext = authContext;\n    const handshakeDoc = await prepareHandshakeDocument(authContext);\n    // @ts-expect-error: TODO(NODE-5141): The options need to be filtered properly, Connection options differ from Command options\n    const handshakeOptions = { ...options, raw: false };\n    if (typeof options.connectTimeoutMS === 'number') {\n        // The handshake technically is a monitoring check, so its socket timeout should be connectTimeoutMS\n        handshakeOptions.socketTimeoutMS = options.connectTimeoutMS;\n    }\n    const start = new Date().getTime();\n    const response = await conn.command((0, utils_1.ns)('admin.$cmd'), handshakeDoc, handshakeOptions);\n    if (!('isWritablePrimary' in response)) {\n        // Provide hello-style response document.\n        response.isWritablePrimary = response[constants_1.LEGACY_HELLO_COMMAND];\n    }\n    if (response.helloOk) {\n        conn.helloOk = true;\n    }\n    const supportedServerErr = checkSupportedServer(response, options);\n    if (supportedServerErr) {\n        throw supportedServerErr;\n    }\n    if (options.loadBalanced) {\n        if (!response.serviceId) {\n            throw new error_1.MongoCompatibilityError('Driver attempted to initialize in load balancing mode, ' +\n                'but the server does not support this mode.');\n        }\n    }\n    // NOTE: This is metadata attached to the connection while porting away from\n    //       handshake being done in the `Server` class. Likely, it should be\n    //       relocated, or at very least restructured.\n    conn.hello = response;\n    conn.lastHelloMS = new Date().getTime() - start;\n    if (!response.arbiterOnly && credentials) {\n        // store the response on auth context\n        authContext.response = response;\n        const resolvedCredentials = credentials.resolveAuthMechanism(response);\n        const provider = options.authProviders.getOrCreateProvider(resolvedCredentials.mechanism, resolvedCredentials.mechanismProperties);\n        if (!provider) {\n            throw new error_1.MongoInvalidArgumentError(`No AuthProvider for ${resolvedCredentials.mechanism} defined.`);\n        }\n        try {\n            await provider.auth(authContext);\n        }\n        catch (error) {\n            if (error instanceof error_1.MongoError) {\n                error.addErrorLabel(error_1.MongoErrorLabel.HandshakeError);\n                if ((0, error_1.needsRetryableWriteLabel)(error, response.maxWireVersion, conn.description.type)) {\n                    error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n                }\n            }\n            throw error;\n        }\n    }\n    // Connection establishment is socket creation (tcp handshake, tls handshake, MongoDB handshake (saslStart, saslContinue))\n    // Once connection is established, command logging can log events (if enabled)\n    conn.established = true;\n}\n/**\n * @internal\n *\n * This function is only exposed for testing purposes.\n */\nasync function prepareHandshakeDocument(authContext) {\n    const options = authContext.options;\n    const compressors = options.compressors ? options.compressors : [];\n    const { serverApi } = authContext.connection;\n    const clientMetadata = await options.extendedMetadata;\n    const handshakeDoc = {\n        [serverApi?.version || options.loadBalanced === true ? 'hello' : constants_1.LEGACY_HELLO_COMMAND]: 1,\n        helloOk: true,\n        client: clientMetadata,\n        compression: compressors\n    };\n    if (options.loadBalanced === true) {\n        handshakeDoc.loadBalanced = true;\n    }\n    const credentials = authContext.credentials;\n    if (credentials) {\n        if (credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT && credentials.username) {\n            handshakeDoc.saslSupportedMechs = `${credentials.source}.${credentials.username}`;\n            const provider = authContext.options.authProviders.getOrCreateProvider(providers_1.AuthMechanism.MONGODB_SCRAM_SHA256, credentials.mechanismProperties);\n            if (!provider) {\n                // This auth mechanism is always present.\n                throw new error_1.MongoInvalidArgumentError(`No AuthProvider for ${providers_1.AuthMechanism.MONGODB_SCRAM_SHA256} defined.`);\n            }\n            return await provider.prepare(handshakeDoc, authContext);\n        }\n        const provider = authContext.options.authProviders.getOrCreateProvider(credentials.mechanism, credentials.mechanismProperties);\n        if (!provider) {\n            throw new error_1.MongoInvalidArgumentError(`No AuthProvider for ${credentials.mechanism} defined.`);\n        }\n        return await provider.prepare(handshakeDoc, authContext);\n    }\n    return handshakeDoc;\n}\n/** @public */\nexports.LEGAL_TLS_SOCKET_OPTIONS = [\n    'allowPartialTrustChain',\n    'ALPNProtocols',\n    'ca',\n    'cert',\n    'checkServerIdentity',\n    'ciphers',\n    'crl',\n    'ecdhCurve',\n    'key',\n    'minDHSize',\n    'passphrase',\n    'pfx',\n    'rejectUnauthorized',\n    'secureContext',\n    'secureProtocol',\n    'servername',\n    'session'\n];\n/** @public */\nexports.LEGAL_TCP_SOCKET_OPTIONS = [\n    'autoSelectFamily',\n    'autoSelectFamilyAttemptTimeout',\n    'family',\n    'hints',\n    'localAddress',\n    'localPort',\n    'lookup'\n];\nfunction parseConnectOptions(options) {\n    const hostAddress = options.hostAddress;\n    if (!hostAddress)\n        throw new error_1.MongoInvalidArgumentError('Option \"hostAddress\" is required');\n    const result = {};\n    for (const name of exports.LEGAL_TCP_SOCKET_OPTIONS) {\n        if (options[name] != null) {\n            result[name] = options[name];\n        }\n    }\n    if (typeof hostAddress.socketPath === 'string') {\n        result.path = hostAddress.socketPath;\n        return result;\n    }\n    else if (typeof hostAddress.host === 'string') {\n        result.host = hostAddress.host;\n        result.port = hostAddress.port;\n        return result;\n    }\n    else {\n        // This should never happen since we set up HostAddresses\n        // But if we don't throw here the socket could hang until timeout\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError(`Unexpected HostAddress ${JSON.stringify(hostAddress)}`);\n    }\n}\nfunction parseSslOptions(options) {\n    const result = parseConnectOptions(options);\n    // Merge in valid SSL options\n    for (const name of exports.LEGAL_TLS_SOCKET_OPTIONS) {\n        if (options[name] != null) {\n            result[name] = options[name];\n        }\n    }\n    if (options.existingSocket) {\n        result.socket = options.existingSocket;\n    }\n    // Set default sni servername to be the same as host\n    if (result.servername == null && result.host && !net.isIP(result.host)) {\n        result.servername = result.host;\n    }\n    return result;\n}\nasync function makeSocket(options) {\n    const useTLS = options.tls ?? false;\n    const noDelay = options.noDelay ?? true;\n    const connectTimeoutMS = options.connectTimeoutMS ?? 30000;\n    const existingSocket = options.existingSocket;\n    let socket;\n    if (options.proxyHost != null) {\n        // Currently, only Socks5 is supported.\n        return await makeSocks5Connection({\n            ...options,\n            connectTimeoutMS // Should always be present for Socks5\n        });\n    }\n    if (useTLS) {\n        const tlsSocket = tls.connect(parseSslOptions(options));\n        if (typeof tlsSocket.disableRenegotiation === 'function') {\n            tlsSocket.disableRenegotiation();\n        }\n        socket = tlsSocket;\n    }\n    else if (existingSocket) {\n        // In the TLS case, parseSslOptions() sets options.socket to existingSocket,\n        // so we only need to handle the non-TLS case here (where existingSocket\n        // gives us all we need out of the box).\n        socket = existingSocket;\n    }\n    else {\n        socket = net.createConnection(parseConnectOptions(options));\n    }\n    socket.setKeepAlive(true, 300000);\n    socket.setTimeout(connectTimeoutMS);\n    socket.setNoDelay(noDelay);\n    let cancellationHandler = null;\n    const { promise: connectedSocket, resolve, reject } = (0, utils_1.promiseWithResolvers)();\n    if (existingSocket) {\n        resolve(socket);\n    }\n    else {\n        const connectEvent = useTLS ? 'secureConnect' : 'connect';\n        socket\n            .once(connectEvent, () => resolve(socket))\n            .once('error', error => reject(connectionFailureError('error', error)))\n            .once('timeout', () => reject(connectionFailureError('timeout')))\n            .once('close', () => reject(connectionFailureError('close')));\n        if (options.cancellationToken != null) {\n            cancellationHandler = () => reject(connectionFailureError('cancel'));\n            options.cancellationToken.once('cancel', cancellationHandler);\n        }\n    }\n    try {\n        socket = await connectedSocket;\n        return socket;\n    }\n    catch (error) {\n        socket.destroy();\n        throw error;\n    }\n    finally {\n        socket.setTimeout(0);\n        socket.removeAllListeners();\n        if (cancellationHandler != null) {\n            options.cancellationToken?.removeListener('cancel', cancellationHandler);\n        }\n    }\n}\nlet socks = null;\nfunction loadSocks() {\n    if (socks == null) {\n        const socksImport = (0, deps_1.getSocks)();\n        if ('kModuleError' in socksImport) {\n            throw socksImport.kModuleError;\n        }\n        socks = socksImport;\n    }\n    return socks;\n}\nasync function makeSocks5Connection(options) {\n    const hostAddress = utils_1.HostAddress.fromHostPort(options.proxyHost ?? '', // proxyHost is guaranteed to set here\n    options.proxyPort ?? 1080);\n    // First, connect to the proxy server itself:\n    const rawSocket = await makeSocket({\n        ...options,\n        hostAddress,\n        tls: false,\n        proxyHost: undefined\n    });\n    const destination = parseConnectOptions(options);\n    if (typeof destination.host !== 'string' || typeof destination.port !== 'number') {\n        throw new error_1.MongoInvalidArgumentError('Can only make Socks5 connections to TCP hosts');\n    }\n    socks ??= loadSocks();\n    try {\n        // Then, establish the Socks5 proxy connection:\n        const { socket } = await socks.SocksClient.createConnection({\n            existing_socket: rawSocket,\n            timeout: options.connectTimeoutMS,\n            command: 'connect',\n            destination: {\n                host: destination.host,\n                port: destination.port\n            },\n            proxy: {\n                // host and port are ignored because we pass existing_socket\n                host: 'iLoveJavaScript',\n                port: 0,\n                type: 5,\n                userId: options.proxyUsername || undefined,\n                password: options.proxyPassword || undefined\n            }\n        });\n        // Finally, now treat the resulting duplex stream as the\n        // socket over which we send and receive wire protocol messages:\n        return await makeSocket({\n            ...options,\n            existingSocket: socket,\n            proxyHost: undefined\n        });\n    }\n    catch (error) {\n        throw connectionFailureError('error', error);\n    }\n}\nfunction connectionFailureError(type, cause) {\n    switch (type) {\n        case 'error':\n            return new error_1.MongoNetworkError(error_1.MongoError.buildErrorMessage(cause), { cause });\n        case 'timeout':\n            return new error_1.MongoNetworkTimeoutError('connection timed out');\n        case 'close':\n            return new error_1.MongoNetworkError('connection closed');\n        case 'cancel':\n            return new error_1.MongoNetworkError('connection establishment was cancelled');\n        default:\n            return new error_1.MongoNetworkError('unknown network error');\n    }\n}\n//# sourceMappingURL=connect.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/connect.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/connection.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/connection.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CryptoConnection = exports.SizedMessageTransform = exports.Connection = void 0;\nexports.hasSessionSupport = hasSessionSupport;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst mongo_logger_1 = __webpack_require__(/*! ../mongo_logger */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_logger.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_types.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_preference.js\");\nconst common_1 = __webpack_require__(/*! ../sdam/common */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/common.js\");\nconst sessions_1 = __webpack_require__(/*! ../sessions */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sessions.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst command_monitoring_events_1 = __webpack_require__(/*! ./command_monitoring_events */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/command_monitoring_events.js\");\nconst commands_1 = __webpack_require__(/*! ./commands */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/commands.js\");\nconst stream_description_1 = __webpack_require__(/*! ./stream_description */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/stream_description.js\");\nconst compression_1 = __webpack_require__(/*! ./wire_protocol/compression */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/compression.js\");\nconst on_data_1 = __webpack_require__(/*! ./wire_protocol/on_data */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/on_data.js\");\nconst responses_1 = __webpack_require__(/*! ./wire_protocol/responses */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/responses.js\");\nconst shared_1 = __webpack_require__(/*! ./wire_protocol/shared */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/shared.js\");\n/** @internal */\nfunction hasSessionSupport(conn) {\n    const description = conn.description;\n    return description.logicalSessionTimeoutMinutes != null;\n}\nfunction streamIdentifier(stream, options) {\n    if (options.proxyHost) {\n        // If proxy options are specified, the properties of `stream` itself\n        // will not accurately reflect what endpoint this is connected to.\n        return options.hostAddress.toString();\n    }\n    const { remoteAddress, remotePort } = stream;\n    if (typeof remoteAddress === 'string' && typeof remotePort === 'number') {\n        return utils_1.HostAddress.fromHostPort(remoteAddress, remotePort).toString();\n    }\n    return (0, utils_1.uuidV4)().toString('hex');\n}\n/** @internal */\nclass Connection extends mongo_types_1.TypedEventEmitter {\n    constructor(stream, options) {\n        super();\n        this.lastHelloMS = -1;\n        this.helloOk = false;\n        this.delayedTimeoutId = null;\n        /** Indicates that the connection (including underlying TCP socket) has been closed. */\n        this.closed = false;\n        this.clusterTime = null;\n        this.error = null;\n        this.dataEvents = null;\n        this.socket = stream;\n        this.id = options.id;\n        this.address = streamIdentifier(stream, options);\n        this.socketTimeoutMS = options.socketTimeoutMS ?? 0;\n        this.monitorCommands = options.monitorCommands;\n        this.serverApi = options.serverApi;\n        this.mongoLogger = options.mongoLogger;\n        this.established = false;\n        this.description = new stream_description_1.StreamDescription(this.address, options);\n        this.generation = options.generation;\n        this.lastUseTime = (0, utils_1.now)();\n        this.messageStream = this.socket\n            .on('error', this.onError.bind(this))\n            .pipe(new SizedMessageTransform({ connection: this }))\n            .on('error', this.onError.bind(this));\n        this.socket.on('close', this.onClose.bind(this));\n        this.socket.on('timeout', this.onTimeout.bind(this));\n        this.messageStream.pause();\n    }\n    get hello() {\n        return this.description.hello;\n    }\n    // the `connect` method stores the result of the handshake hello on the connection\n    set hello(response) {\n        this.description.receiveResponse(response);\n        Object.freeze(this.description);\n    }\n    get serviceId() {\n        return this.hello?.serviceId;\n    }\n    get loadBalanced() {\n        return this.description.loadBalanced;\n    }\n    get idleTime() {\n        return (0, utils_1.calculateDurationInMs)(this.lastUseTime);\n    }\n    get hasSessionSupport() {\n        return this.description.logicalSessionTimeoutMinutes != null;\n    }\n    get supportsOpMsg() {\n        return (this.description != null &&\n            (0, utils_1.maxWireVersion)(this) >= 6 &&\n            !this.description.__nodejs_mock_server__);\n    }\n    get shouldEmitAndLogCommand() {\n        return ((this.monitorCommands ||\n            (this.established &&\n                !this.authContext?.reauthenticating &&\n                this.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.COMMAND, mongo_logger_1.SeverityLevel.DEBUG))) ??\n            false);\n    }\n    markAvailable() {\n        this.lastUseTime = (0, utils_1.now)();\n    }\n    onError(error) {\n        this.cleanup(error);\n    }\n    onClose() {\n        const message = `connection ${this.id} to ${this.address} closed`;\n        this.cleanup(new error_1.MongoNetworkError(message));\n    }\n    onTimeout() {\n        this.delayedTimeoutId = (0, timers_1.setTimeout)(() => {\n            const message = `connection ${this.id} to ${this.address} timed out`;\n            const beforeHandshake = this.hello == null;\n            this.cleanup(new error_1.MongoNetworkTimeoutError(message, { beforeHandshake }));\n        }, 1).unref(); // No need for this timer to hold the event loop open\n    }\n    destroy() {\n        if (this.closed) {\n            return;\n        }\n        // load balanced mode requires that these listeners remain on the connection\n        // after cleanup on timeouts, errors or close so we remove them before calling\n        // cleanup.\n        this.removeAllListeners(Connection.PINNED);\n        this.removeAllListeners(Connection.UNPINNED);\n        const message = `connection ${this.id} to ${this.address} closed`;\n        this.cleanup(new error_1.MongoNetworkError(message));\n    }\n    /**\n     * A method that cleans up the connection.  When `force` is true, this method\n     * forcibly destroys the socket.\n     *\n     * If an error is provided, any in-flight operations will be closed with the error.\n     *\n     * This method does nothing if the connection is already closed.\n     */\n    cleanup(error) {\n        if (this.closed) {\n            return;\n        }\n        this.socket.destroy();\n        this.error = error;\n        this.dataEvents?.throw(error).then(undefined, utils_1.squashError);\n        this.closed = true;\n        this.emit(Connection.CLOSE);\n    }\n    prepareCommand(db, command, options) {\n        let cmd = { ...command };\n        const readPreference = (0, shared_1.getReadPreference)(options);\n        const session = options?.session;\n        let clusterTime = this.clusterTime;\n        if (this.serverApi) {\n            const { version, strict, deprecationErrors } = this.serverApi;\n            cmd.apiVersion = version;\n            if (strict != null)\n                cmd.apiStrict = strict;\n            if (deprecationErrors != null)\n                cmd.apiDeprecationErrors = deprecationErrors;\n        }\n        if (this.hasSessionSupport && session) {\n            if (session.clusterTime &&\n                clusterTime &&\n                session.clusterTime.clusterTime.greaterThan(clusterTime.clusterTime)) {\n                clusterTime = session.clusterTime;\n            }\n            const sessionError = (0, sessions_1.applySession)(session, cmd, options);\n            if (sessionError)\n                throw sessionError;\n        }\n        else if (session?.explicit) {\n            throw new error_1.MongoCompatibilityError('Current topology does not support sessions');\n        }\n        // if we have a known cluster time, gossip it\n        if (clusterTime) {\n            cmd.$clusterTime = clusterTime;\n        }\n        // For standalone, drivers MUST NOT set $readPreference.\n        if (this.description.type !== common_1.ServerType.Standalone) {\n            if (!(0, shared_1.isSharded)(this) &&\n                !this.description.loadBalanced &&\n                this.supportsOpMsg &&\n                options.directConnection === true &&\n                readPreference?.mode === 'primary') {\n                // For mongos and load balancers with 'primary' mode, drivers MUST NOT set $readPreference.\n                // For all other types with a direct connection, if the read preference is 'primary'\n                // (driver sets 'primary' as default if no read preference is configured),\n                // the $readPreference MUST be set to 'primaryPreferred'\n                // to ensure that any server type can handle the request.\n                cmd.$readPreference = read_preference_1.ReadPreference.primaryPreferred.toJSON();\n            }\n            else if ((0, shared_1.isSharded)(this) && !this.supportsOpMsg && readPreference?.mode !== 'primary') {\n                // When sending a read operation via OP_QUERY and the $readPreference modifier,\n                // the query MUST be provided using the $query modifier.\n                cmd = {\n                    $query: cmd,\n                    $readPreference: readPreference.toJSON()\n                };\n            }\n            else if (readPreference?.mode !== 'primary') {\n                // For mode 'primary', drivers MUST NOT set $readPreference.\n                // For all other read preference modes (i.e. 'secondary', 'primaryPreferred', ...),\n                // drivers MUST set $readPreference\n                cmd.$readPreference = readPreference.toJSON();\n            }\n        }\n        const commandOptions = {\n            numberToSkip: 0,\n            numberToReturn: -1,\n            checkKeys: false,\n            // This value is not overridable\n            secondaryOk: readPreference.secondaryOk(),\n            ...options\n        };\n        const message = this.supportsOpMsg\n            ? new commands_1.OpMsgRequest(db, cmd, commandOptions)\n            : new commands_1.OpQueryRequest(db, cmd, commandOptions);\n        return message;\n    }\n    async *sendWire(message, options, responseType) {\n        this.throwIfAborted();\n        if (typeof options.socketTimeoutMS === 'number') {\n            this.socket.setTimeout(options.socketTimeoutMS);\n        }\n        else if (this.socketTimeoutMS !== 0) {\n            this.socket.setTimeout(this.socketTimeoutMS);\n        }\n        try {\n            await this.writeCommand(message, {\n                agreedCompressor: this.description.compressor ?? 'none',\n                zlibCompressionLevel: this.description.zlibCompressionLevel\n            });\n            if (options.noResponse || message.moreToCome) {\n                yield responses_1.MongoDBResponse.empty;\n                return;\n            }\n            this.throwIfAborted();\n            for await (const response of this.readMany()) {\n                this.socket.setTimeout(0);\n                const bson = response.parse();\n                const document = (responseType ?? responses_1.MongoDBResponse).make(bson);\n                yield document;\n                this.throwIfAborted();\n                if (typeof options.socketTimeoutMS === 'number') {\n                    this.socket.setTimeout(options.socketTimeoutMS);\n                }\n                else if (this.socketTimeoutMS !== 0) {\n                    this.socket.setTimeout(this.socketTimeoutMS);\n                }\n            }\n        }\n        finally {\n            this.socket.setTimeout(0);\n        }\n    }\n    async *sendCommand(ns, command, options, responseType) {\n        const message = this.prepareCommand(ns.db, command, options);\n        let started = 0;\n        if (this.shouldEmitAndLogCommand) {\n            started = (0, utils_1.now)();\n            this.emitAndLogCommand(this.monitorCommands, Connection.COMMAND_STARTED, message.databaseName, this.established, new command_monitoring_events_1.CommandStartedEvent(this, message, this.description.serverConnectionId));\n        }\n        // If `documentsReturnedIn` not set or raw is not enabled, use input bson options\n        // Otherwise, support raw flag. Raw only works for cursors that hardcode firstBatch/nextBatch fields\n        const bsonOptions = options.documentsReturnedIn == null || !options.raw\n            ? options\n            : {\n                ...options,\n                raw: false,\n                fieldsAsRaw: { [options.documentsReturnedIn]: true }\n            };\n        /** MongoDBResponse instance or subclass */\n        let document = undefined;\n        /** Cached result of a toObject call */\n        let object = undefined;\n        try {\n            this.throwIfAborted();\n            for await (document of this.sendWire(message, options, responseType)) {\n                object = undefined;\n                if (options.session != null) {\n                    (0, sessions_1.updateSessionFromResponse)(options.session, document);\n                }\n                if (document.$clusterTime) {\n                    this.clusterTime = document.$clusterTime;\n                    this.emit(Connection.CLUSTER_TIME_RECEIVED, document.$clusterTime);\n                }\n                if (document.ok === 0) {\n                    throw new error_1.MongoServerError((object ??= document.toObject(bsonOptions)));\n                }\n                if (this.shouldEmitAndLogCommand) {\n                    this.emitAndLogCommand(this.monitorCommands, Connection.COMMAND_SUCCEEDED, message.databaseName, this.established, new command_monitoring_events_1.CommandSucceededEvent(this, message, options.noResponse\n                        ? undefined\n                        : message.moreToCome\n                            ? { ok: 1 }\n                            : (object ??= document.toObject(bsonOptions)), started, this.description.serverConnectionId));\n                }\n                if (responseType == null) {\n                    yield (object ??= document.toObject(bsonOptions));\n                }\n                else {\n                    yield document;\n                }\n                this.throwIfAborted();\n            }\n        }\n        catch (error) {\n            if (this.shouldEmitAndLogCommand) {\n                this.emitAndLogCommand(this.monitorCommands, Connection.COMMAND_FAILED, message.databaseName, this.established, new command_monitoring_events_1.CommandFailedEvent(this, message, error, started, this.description.serverConnectionId));\n            }\n            throw error;\n        }\n    }\n    async command(ns, command, options = {}, responseType) {\n        this.throwIfAborted();\n        for await (const document of this.sendCommand(ns, command, options, responseType)) {\n            return document;\n        }\n        throw new error_1.MongoUnexpectedServerResponseError('Unable to get response from server');\n    }\n    exhaustCommand(ns, command, options, replyListener) {\n        const exhaustLoop = async () => {\n            this.throwIfAborted();\n            for await (const reply of this.sendCommand(ns, command, options)) {\n                replyListener(undefined, reply);\n                this.throwIfAborted();\n            }\n            throw new error_1.MongoUnexpectedServerResponseError('Server ended moreToCome unexpectedly');\n        };\n        exhaustLoop().then(undefined, replyListener);\n    }\n    throwIfAborted() {\n        if (this.error)\n            throw this.error;\n    }\n    /**\n     * @internal\n     *\n     * Writes an OP_MSG or OP_QUERY request to the socket, optionally compressing the command. This method\n     * waits until the socket's buffer has emptied (the Nodejs socket `drain` event has fired).\n     */\n    async writeCommand(command, options) {\n        const finalCommand = options.agreedCompressor === 'none' || !commands_1.OpCompressedRequest.canCompress(command)\n            ? command\n            : new commands_1.OpCompressedRequest(command, {\n                agreedCompressor: options.agreedCompressor ?? 'none',\n                zlibCompressionLevel: options.zlibCompressionLevel ?? 0\n            });\n        const buffer = Buffer.concat(await finalCommand.toBin());\n        if (this.socket.write(buffer))\n            return;\n        return await (0, utils_1.once)(this.socket, 'drain');\n    }\n    /**\n     * @internal\n     *\n     * Returns an async generator that yields full wire protocol messages from the underlying socket.  This function\n     * yields messages until `moreToCome` is false or not present in a response, or the caller cancels the request\n     * by calling `return` on the generator.\n     *\n     * Note that `for-await` loops call `return` automatically when the loop is exited.\n     */\n    async *readMany() {\n        try {\n            this.dataEvents = (0, on_data_1.onData)(this.messageStream);\n            this.messageStream.resume();\n            for await (const message of this.dataEvents) {\n                const response = await (0, compression_1.decompressResponse)(message);\n                yield response;\n                if (!response.moreToCome) {\n                    return;\n                }\n            }\n        }\n        finally {\n            this.dataEvents = null;\n            this.messageStream.pause();\n            this.throwIfAborted();\n        }\n    }\n}\nexports.Connection = Connection;\n/** @event */\nConnection.COMMAND_STARTED = constants_1.COMMAND_STARTED;\n/** @event */\nConnection.COMMAND_SUCCEEDED = constants_1.COMMAND_SUCCEEDED;\n/** @event */\nConnection.COMMAND_FAILED = constants_1.COMMAND_FAILED;\n/** @event */\nConnection.CLUSTER_TIME_RECEIVED = constants_1.CLUSTER_TIME_RECEIVED;\n/** @event */\nConnection.CLOSE = constants_1.CLOSE;\n/** @event */\nConnection.PINNED = constants_1.PINNED;\n/** @event */\nConnection.UNPINNED = constants_1.UNPINNED;\n/** @internal */\nclass SizedMessageTransform extends stream_1.Transform {\n    constructor({ connection }) {\n        super({ objectMode: false });\n        this.bufferPool = new utils_1.BufferPool();\n        this.connection = connection;\n    }\n    _transform(chunk, encoding, callback) {\n        if (this.connection.delayedTimeoutId != null) {\n            (0, timers_1.clearTimeout)(this.connection.delayedTimeoutId);\n            this.connection.delayedTimeoutId = null;\n        }\n        this.bufferPool.append(chunk);\n        const sizeOfMessage = this.bufferPool.getInt32();\n        if (sizeOfMessage == null) {\n            return callback();\n        }\n        if (sizeOfMessage < 0) {\n            return callback(new error_1.MongoParseError(`Invalid message size: ${sizeOfMessage}, too small`));\n        }\n        if (sizeOfMessage > this.bufferPool.length) {\n            return callback();\n        }\n        const message = this.bufferPool.read(sizeOfMessage);\n        return callback(null, message);\n    }\n}\nexports.SizedMessageTransform = SizedMessageTransform;\n/** @internal */\nclass CryptoConnection extends Connection {\n    constructor(stream, options) {\n        super(stream, options);\n        this.autoEncrypter = options.autoEncrypter;\n    }\n    async command(ns, cmd, options, responseType) {\n        const { autoEncrypter } = this;\n        if (!autoEncrypter) {\n            // TODO(NODE-6065): throw a MongoRuntimeError in Node V7\n            // @ts-expect-error No cause provided because there is no underlying error.\n            throw new error_1.MongoMissingDependencyError('No AutoEncrypter available for encryption', {\n                dependencyName: 'n/a'\n            });\n        }\n        const serverWireVersion = (0, utils_1.maxWireVersion)(this);\n        if (serverWireVersion === 0) {\n            // This means the initial handshake hasn't happened yet\n            return await super.command(ns, cmd, options, responseType);\n        }\n        if (serverWireVersion < 8) {\n            throw new error_1.MongoCompatibilityError('Auto-encryption requires a minimum MongoDB version of 4.2');\n        }\n        // Save sort or indexKeys based on the command being run\n        // the encrypt API serializes our JS objects to BSON to pass to the native code layer\n        // and then deserializes the encrypted result, the protocol level components\n        // of the command (ex. sort) are then converted to JS objects potentially losing\n        // import key order information. These fields are never encrypted so we can save the values\n        // from before the encryption and replace them after encryption has been performed\n        const sort = cmd.find || cmd.findAndModify ? cmd.sort : null;\n        const indexKeys = cmd.createIndexes\n            ? cmd.indexes.map((index) => index.key)\n            : null;\n        const encrypted = await autoEncrypter.encrypt(ns.toString(), cmd, options);\n        // Replace the saved values\n        if (sort != null && (cmd.find || cmd.findAndModify)) {\n            encrypted.sort = sort;\n        }\n        if (indexKeys != null && cmd.createIndexes) {\n            for (const [offset, index] of indexKeys.entries()) {\n                // @ts-expect-error `encrypted` is a generic \"command\", but we've narrowed for only `createIndexes` commands here\n                encrypted.indexes[offset].key = index;\n            }\n        }\n        const encryptedResponse = await super.command(ns, encrypted, options, \n        // Eventually we want to require `responseType` which means we would satisfy `T` as the return type.\n        // In the meantime, we want encryptedResponse to always be _at least_ a MongoDBResponse if not a more specific subclass\n        // So that we can ensure we have access to the on-demand APIs for decorate response\n        responseType ?? responses_1.MongoDBResponse);\n        const result = await autoEncrypter.decrypt(encryptedResponse.toBytes(), options);\n        const decryptedResponse = responseType?.make(result) ?? (0, bson_1.deserialize)(result, options);\n        if (autoEncrypter[constants_1.kDecorateResult]) {\n            if (responseType == null) {\n                (0, utils_1.decorateDecryptionResult)(decryptedResponse, encryptedResponse.toObject(), true);\n            }\n            else if (decryptedResponse instanceof responses_1.CursorResponse) {\n                decryptedResponse.encryptedResponse = encryptedResponse;\n            }\n        }\n        return decryptedResponse;\n    }\n}\nexports.CryptoConnection = CryptoConnection;\n//# sourceMappingURL=connection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/connection.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/connection_pool.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/connection_pool.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ConnectionPool = exports.PoolState = void 0;\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_types.js\");\nconst timeout_1 = __webpack_require__(/*! ../timeout */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/timeout.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst connect_1 = __webpack_require__(/*! ./connect */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/connect.js\");\nconst connection_1 = __webpack_require__(/*! ./connection */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/connection.js\");\nconst connection_pool_events_1 = __webpack_require__(/*! ./connection_pool_events */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/connection_pool_events.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/errors.js\");\nconst metrics_1 = __webpack_require__(/*! ./metrics */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/metrics.js\");\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kConnections = Symbol('connections');\n/** @internal */\nconst kPending = Symbol('pending');\n/** @internal */\nconst kCheckedOut = Symbol('checkedOut');\n/** @internal */\nconst kMinPoolSizeTimer = Symbol('minPoolSizeTimer');\n/** @internal */\nconst kGeneration = Symbol('generation');\n/** @internal */\nconst kServiceGenerations = Symbol('serviceGenerations');\n/** @internal */\nconst kConnectionCounter = Symbol('connectionCounter');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kMetrics = Symbol('metrics');\n/** @internal */\nconst kProcessingWaitQueue = Symbol('processingWaitQueue');\n/** @internal */\nconst kPoolState = Symbol('poolState');\n/** @internal */\nexports.PoolState = Object.freeze({\n    paused: 'paused',\n    ready: 'ready',\n    closed: 'closed'\n});\n/**\n * A pool of connections which dynamically resizes, and emit events related to pool activity\n * @internal\n */\nclass ConnectionPool extends mongo_types_1.TypedEventEmitter {\n    constructor(server, options) {\n        super();\n        this.options = Object.freeze({\n            connectionType: connection_1.Connection,\n            ...options,\n            maxPoolSize: options.maxPoolSize ?? 100,\n            minPoolSize: options.minPoolSize ?? 0,\n            maxConnecting: options.maxConnecting ?? 2,\n            maxIdleTimeMS: options.maxIdleTimeMS ?? 0,\n            waitQueueTimeoutMS: options.waitQueueTimeoutMS ?? 0,\n            minPoolSizeCheckFrequencyMS: options.minPoolSizeCheckFrequencyMS ?? 100,\n            autoEncrypter: options.autoEncrypter\n        });\n        if (this.options.minPoolSize > this.options.maxPoolSize) {\n            throw new error_1.MongoInvalidArgumentError('Connection pool minimum size must not be greater than maximum pool size');\n        }\n        this[kPoolState] = exports.PoolState.paused;\n        this[kServer] = server;\n        this[kConnections] = new utils_1.List();\n        this[kPending] = 0;\n        this[kCheckedOut] = new Set();\n        this[kMinPoolSizeTimer] = undefined;\n        this[kGeneration] = 0;\n        this[kServiceGenerations] = new Map();\n        this[kConnectionCounter] = (0, utils_1.makeCounter)(1);\n        this[kCancellationToken] = new mongo_types_1.CancellationToken();\n        this[kCancellationToken].setMaxListeners(Infinity);\n        this[kWaitQueue] = new utils_1.List();\n        this[kMetrics] = new metrics_1.ConnectionPoolMetrics();\n        this[kProcessingWaitQueue] = false;\n        this.mongoLogger = this[kServer].topology.client?.mongoLogger;\n        this.component = 'connection';\n        process.nextTick(() => {\n            this.emitAndLog(ConnectionPool.CONNECTION_POOL_CREATED, new connection_pool_events_1.ConnectionPoolCreatedEvent(this));\n        });\n    }\n    /** The address of the endpoint the pool is connected to */\n    get address() {\n        return this.options.hostAddress.toString();\n    }\n    /**\n     * Check if the pool has been closed\n     *\n     * TODO(NODE-3263): We can remove this property once shell no longer needs it\n     */\n    get closed() {\n        return this[kPoolState] === exports.PoolState.closed;\n    }\n    /** An integer representing the SDAM generation of the pool */\n    get generation() {\n        return this[kGeneration];\n    }\n    /** An integer expressing how many total connections (available + pending + in use) the pool currently has */\n    get totalConnectionCount() {\n        return (this.availableConnectionCount + this.pendingConnectionCount + this.currentCheckedOutCount);\n    }\n    /** An integer expressing how many connections are currently available in the pool. */\n    get availableConnectionCount() {\n        return this[kConnections].length;\n    }\n    get pendingConnectionCount() {\n        return this[kPending];\n    }\n    get currentCheckedOutCount() {\n        return this[kCheckedOut].size;\n    }\n    get waitQueueSize() {\n        return this[kWaitQueue].length;\n    }\n    get loadBalanced() {\n        return this.options.loadBalanced;\n    }\n    get serviceGenerations() {\n        return this[kServiceGenerations];\n    }\n    get serverError() {\n        return this[kServer].description.error;\n    }\n    /**\n     * This is exposed ONLY for use in mongosh, to enable\n     * killing all connections if a user quits the shell with\n     * operations in progress.\n     *\n     * This property may be removed as a part of NODE-3263.\n     */\n    get checkedOutConnections() {\n        return this[kCheckedOut];\n    }\n    /**\n     * Get the metrics information for the pool when a wait queue timeout occurs.\n     */\n    waitQueueErrorMetrics() {\n        return this[kMetrics].info(this.options.maxPoolSize);\n    }\n    /**\n     * Set the pool state to \"ready\"\n     */\n    ready() {\n        if (this[kPoolState] !== exports.PoolState.paused) {\n            return;\n        }\n        this[kPoolState] = exports.PoolState.ready;\n        this.emitAndLog(ConnectionPool.CONNECTION_POOL_READY, new connection_pool_events_1.ConnectionPoolReadyEvent(this));\n        (0, timers_1.clearTimeout)(this[kMinPoolSizeTimer]);\n        this.ensureMinPoolSize();\n    }\n    /**\n     * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it\n     * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or\n     * explicitly destroyed by the new owner.\n     */\n    async checkOut() {\n        const checkoutTime = (0, utils_1.now)();\n        this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_STARTED, new connection_pool_events_1.ConnectionCheckOutStartedEvent(this));\n        const waitQueueTimeoutMS = this.options.waitQueueTimeoutMS;\n        const { promise, resolve, reject } = (0, utils_1.promiseWithResolvers)();\n        const timeout = timeout_1.Timeout.expires(waitQueueTimeoutMS);\n        const waitQueueMember = {\n            resolve,\n            reject,\n            timeout,\n            checkoutTime\n        };\n        this[kWaitQueue].push(waitQueueMember);\n        process.nextTick(() => this.processWaitQueue());\n        try {\n            return await Promise.race([promise, waitQueueMember.timeout]);\n        }\n        catch (error) {\n            if (timeout_1.TimeoutError.is(error)) {\n                waitQueueMember[kCancelled] = true;\n                waitQueueMember.timeout.clear();\n                this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'timeout', waitQueueMember.checkoutTime));\n                const timeoutError = new errors_1.WaitQueueTimeoutError(this.loadBalanced\n                    ? this.waitQueueErrorMetrics()\n                    : 'Timed out while checking out a connection from connection pool', this.address);\n                throw timeoutError;\n            }\n            throw error;\n        }\n    }\n    /**\n     * Check a connection into the pool.\n     *\n     * @param connection - The connection to check in\n     */\n    checkIn(connection) {\n        if (!this[kCheckedOut].has(connection)) {\n            return;\n        }\n        const poolClosed = this.closed;\n        const stale = this.connectionIsStale(connection);\n        const willDestroy = !!(poolClosed || stale || connection.closed);\n        if (!willDestroy) {\n            connection.markAvailable();\n            this[kConnections].unshift(connection);\n        }\n        this[kCheckedOut].delete(connection);\n        this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_IN, new connection_pool_events_1.ConnectionCheckedInEvent(this, connection));\n        if (willDestroy) {\n            const reason = connection.closed ? 'error' : poolClosed ? 'poolClosed' : 'stale';\n            this.destroyConnection(connection, reason);\n        }\n        process.nextTick(() => this.processWaitQueue());\n    }\n    /**\n     * Clear the pool\n     *\n     * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a\n     * previous generation will eventually be pruned during subsequent checkouts.\n     */\n    clear(options = {}) {\n        if (this.closed) {\n            return;\n        }\n        // handle load balanced case\n        if (this.loadBalanced) {\n            const { serviceId } = options;\n            if (!serviceId) {\n                throw new error_1.MongoRuntimeError('ConnectionPool.clear() called in load balanced mode with no serviceId.');\n            }\n            const sid = serviceId.toHexString();\n            const generation = this.serviceGenerations.get(sid);\n            // Only need to worry if the generation exists, since it should\n            // always be there but typescript needs the check.\n            if (generation == null) {\n                throw new error_1.MongoRuntimeError('Service generations are required in load balancer mode.');\n            }\n            else {\n                // Increment the generation for the service id.\n                this.serviceGenerations.set(sid, generation + 1);\n            }\n            this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLEARED, new connection_pool_events_1.ConnectionPoolClearedEvent(this, { serviceId }));\n            return;\n        }\n        // handle non load-balanced case\n        const interruptInUseConnections = options.interruptInUseConnections ?? false;\n        const oldGeneration = this[kGeneration];\n        this[kGeneration] += 1;\n        const alreadyPaused = this[kPoolState] === exports.PoolState.paused;\n        this[kPoolState] = exports.PoolState.paused;\n        this.clearMinPoolSizeTimer();\n        if (!alreadyPaused) {\n            this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLEARED, new connection_pool_events_1.ConnectionPoolClearedEvent(this, {\n                interruptInUseConnections\n            }));\n        }\n        if (interruptInUseConnections) {\n            process.nextTick(() => this.interruptInUseConnections(oldGeneration));\n        }\n        this.processWaitQueue();\n    }\n    /**\n     * Closes all stale in-use connections in the pool with a resumable PoolClearedOnNetworkError.\n     *\n     * Only connections where `connection.generation <= minGeneration` are killed.\n     */\n    interruptInUseConnections(minGeneration) {\n        for (const connection of this[kCheckedOut]) {\n            if (connection.generation <= minGeneration) {\n                connection.onError(new errors_1.PoolClearedOnNetworkError(this));\n                this.checkIn(connection);\n            }\n        }\n    }\n    /** Close the pool */\n    close() {\n        if (this.closed) {\n            return;\n        }\n        // immediately cancel any in-flight connections\n        this[kCancellationToken].emit('cancel');\n        // end the connection counter\n        if (typeof this[kConnectionCounter].return === 'function') {\n            this[kConnectionCounter].return(undefined);\n        }\n        this[kPoolState] = exports.PoolState.closed;\n        this.clearMinPoolSizeTimer();\n        this.processWaitQueue();\n        for (const conn of this[kConnections]) {\n            this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, conn, 'poolClosed'));\n            conn.destroy();\n        }\n        this[kConnections].clear();\n        this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLOSED, new connection_pool_events_1.ConnectionPoolClosedEvent(this));\n    }\n    /**\n     * @internal\n     * Reauthenticate a connection\n     */\n    async reauthenticate(connection) {\n        const authContext = connection.authContext;\n        if (!authContext) {\n            throw new error_1.MongoRuntimeError('No auth context found on connection.');\n        }\n        const credentials = authContext.credentials;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('Connection is missing credentials when asked to reauthenticate');\n        }\n        const resolvedCredentials = credentials.resolveAuthMechanism(connection.hello);\n        const provider = this[kServer].topology.client.s.authProviders.getOrCreateProvider(resolvedCredentials.mechanism, resolvedCredentials.mechanismProperties);\n        if (!provider) {\n            throw new error_1.MongoMissingCredentialsError(`Reauthenticate failed due to no auth provider for ${credentials.mechanism}`);\n        }\n        await provider.reauth(authContext);\n        return;\n    }\n    /** Clear the min pool size timer */\n    clearMinPoolSizeTimer() {\n        const minPoolSizeTimer = this[kMinPoolSizeTimer];\n        if (minPoolSizeTimer) {\n            (0, timers_1.clearTimeout)(minPoolSizeTimer);\n        }\n    }\n    destroyConnection(connection, reason) {\n        this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, connection, reason));\n        // destroy the connection\n        connection.destroy();\n    }\n    connectionIsStale(connection) {\n        const serviceId = connection.serviceId;\n        if (this.loadBalanced && serviceId) {\n            const sid = serviceId.toHexString();\n            const generation = this.serviceGenerations.get(sid);\n            return connection.generation !== generation;\n        }\n        return connection.generation !== this[kGeneration];\n    }\n    connectionIsIdle(connection) {\n        return !!(this.options.maxIdleTimeMS && connection.idleTime > this.options.maxIdleTimeMS);\n    }\n    /**\n     * Destroys a connection if the connection is perished.\n     *\n     * @returns `true` if the connection was destroyed, `false` otherwise.\n     */\n    destroyConnectionIfPerished(connection) {\n        const isStale = this.connectionIsStale(connection);\n        const isIdle = this.connectionIsIdle(connection);\n        if (!isStale && !isIdle && !connection.closed) {\n            return false;\n        }\n        const reason = connection.closed ? 'error' : isStale ? 'stale' : 'idle';\n        this.destroyConnection(connection, reason);\n        return true;\n    }\n    createConnection(callback) {\n        const connectOptions = {\n            ...this.options,\n            id: this[kConnectionCounter].next().value,\n            generation: this[kGeneration],\n            cancellationToken: this[kCancellationToken],\n            mongoLogger: this.mongoLogger,\n            authProviders: this[kServer].topology.client.s.authProviders\n        };\n        this[kPending]++;\n        // This is our version of a \"virtual\" no-I/O connection as the spec requires\n        const connectionCreatedTime = (0, utils_1.now)();\n        this.emitAndLog(ConnectionPool.CONNECTION_CREATED, new connection_pool_events_1.ConnectionCreatedEvent(this, { id: connectOptions.id }));\n        (0, connect_1.connect)(connectOptions).then(connection => {\n            // The pool might have closed since we started trying to create a connection\n            if (this[kPoolState] !== exports.PoolState.ready) {\n                this[kPending]--;\n                connection.destroy();\n                callback(this.closed ? new errors_1.PoolClosedError(this) : new errors_1.PoolClearedError(this));\n                return;\n            }\n            // forward all events from the connection to the pool\n            for (const event of [...constants_1.APM_EVENTS, connection_1.Connection.CLUSTER_TIME_RECEIVED]) {\n                connection.on(event, (e) => this.emit(event, e));\n            }\n            if (this.loadBalanced) {\n                connection.on(connection_1.Connection.PINNED, pinType => this[kMetrics].markPinned(pinType));\n                connection.on(connection_1.Connection.UNPINNED, pinType => this[kMetrics].markUnpinned(pinType));\n                const serviceId = connection.serviceId;\n                if (serviceId) {\n                    let generation;\n                    const sid = serviceId.toHexString();\n                    if ((generation = this.serviceGenerations.get(sid))) {\n                        connection.generation = generation;\n                    }\n                    else {\n                        this.serviceGenerations.set(sid, 0);\n                        connection.generation = 0;\n                    }\n                }\n            }\n            connection.markAvailable();\n            this.emitAndLog(ConnectionPool.CONNECTION_READY, new connection_pool_events_1.ConnectionReadyEvent(this, connection, connectionCreatedTime));\n            this[kPending]--;\n            callback(undefined, connection);\n        }, error => {\n            this[kPending]--;\n            this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, { id: connectOptions.id, serviceId: undefined }, 'error', \n            // TODO(NODE-5192): Remove this cast\n            error));\n            if (error instanceof error_1.MongoNetworkError || error instanceof error_1.MongoServerError) {\n                error.connectionGeneration = connectOptions.generation;\n            }\n            callback(error ?? new error_1.MongoRuntimeError('Connection creation failed without error'));\n        });\n    }\n    ensureMinPoolSize() {\n        const minPoolSize = this.options.minPoolSize;\n        if (this[kPoolState] !== exports.PoolState.ready || minPoolSize === 0) {\n            return;\n        }\n        this[kConnections].prune(connection => this.destroyConnectionIfPerished(connection));\n        if (this.totalConnectionCount < minPoolSize &&\n            this.pendingConnectionCount < this.options.maxConnecting) {\n            // NOTE: ensureMinPoolSize should not try to get all the pending\n            // connection permits because that potentially delays the availability of\n            // the connection to a checkout request\n            this.createConnection((err, connection) => {\n                if (err) {\n                    this[kServer].handleError(err);\n                }\n                if (!err && connection) {\n                    this[kConnections].push(connection);\n                    process.nextTick(() => this.processWaitQueue());\n                }\n                if (this[kPoolState] === exports.PoolState.ready) {\n                    (0, timers_1.clearTimeout)(this[kMinPoolSizeTimer]);\n                    this[kMinPoolSizeTimer] = (0, timers_1.setTimeout)(() => this.ensureMinPoolSize(), this.options.minPoolSizeCheckFrequencyMS);\n                }\n            });\n        }\n        else {\n            (0, timers_1.clearTimeout)(this[kMinPoolSizeTimer]);\n            this[kMinPoolSizeTimer] = (0, timers_1.setTimeout)(() => this.ensureMinPoolSize(), this.options.minPoolSizeCheckFrequencyMS);\n        }\n    }\n    processWaitQueue() {\n        if (this[kProcessingWaitQueue]) {\n            return;\n        }\n        this[kProcessingWaitQueue] = true;\n        while (this.waitQueueSize) {\n            const waitQueueMember = this[kWaitQueue].first();\n            if (!waitQueueMember) {\n                this[kWaitQueue].shift();\n                continue;\n            }\n            if (waitQueueMember[kCancelled]) {\n                this[kWaitQueue].shift();\n                continue;\n            }\n            if (this[kPoolState] !== exports.PoolState.ready) {\n                const reason = this.closed ? 'poolClosed' : 'connectionError';\n                const error = this.closed ? new errors_1.PoolClosedError(this) : new errors_1.PoolClearedError(this);\n                this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, reason, waitQueueMember.checkoutTime, error));\n                waitQueueMember.timeout.clear();\n                this[kWaitQueue].shift();\n                waitQueueMember.reject(error);\n                continue;\n            }\n            if (!this.availableConnectionCount) {\n                break;\n            }\n            const connection = this[kConnections].shift();\n            if (!connection) {\n                break;\n            }\n            if (!this.destroyConnectionIfPerished(connection)) {\n                this[kCheckedOut].add(connection);\n                this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection, waitQueueMember.checkoutTime));\n                waitQueueMember.timeout.clear();\n                this[kWaitQueue].shift();\n                waitQueueMember.resolve(connection);\n            }\n        }\n        const { maxPoolSize, maxConnecting } = this.options;\n        while (this.waitQueueSize > 0 &&\n            this.pendingConnectionCount < maxConnecting &&\n            (maxPoolSize === 0 || this.totalConnectionCount < maxPoolSize)) {\n            const waitQueueMember = this[kWaitQueue].shift();\n            if (!waitQueueMember || waitQueueMember[kCancelled]) {\n                continue;\n            }\n            this.createConnection((err, connection) => {\n                if (waitQueueMember[kCancelled]) {\n                    if (!err && connection) {\n                        this[kConnections].push(connection);\n                    }\n                }\n                else {\n                    if (err) {\n                        this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, \n                        // TODO(NODE-5192): Remove this cast\n                        new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'connectionError', waitQueueMember.checkoutTime, err));\n                        waitQueueMember.reject(err);\n                    }\n                    else if (connection) {\n                        this[kCheckedOut].add(connection);\n                        this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection, waitQueueMember.checkoutTime));\n                        waitQueueMember.resolve(connection);\n                    }\n                    waitQueueMember.timeout.clear();\n                }\n                process.nextTick(() => this.processWaitQueue());\n            });\n        }\n        this[kProcessingWaitQueue] = false;\n    }\n}\nexports.ConnectionPool = ConnectionPool;\n/**\n * Emitted when the connection pool is created.\n * @event\n */\nConnectionPool.CONNECTION_POOL_CREATED = constants_1.CONNECTION_POOL_CREATED;\n/**\n * Emitted once when the connection pool is closed\n * @event\n */\nConnectionPool.CONNECTION_POOL_CLOSED = constants_1.CONNECTION_POOL_CLOSED;\n/**\n * Emitted each time the connection pool is cleared and it's generation incremented\n * @event\n */\nConnectionPool.CONNECTION_POOL_CLEARED = constants_1.CONNECTION_POOL_CLEARED;\n/**\n * Emitted each time the connection pool is marked ready\n * @event\n */\nConnectionPool.CONNECTION_POOL_READY = constants_1.CONNECTION_POOL_READY;\n/**\n * Emitted when a connection is created.\n * @event\n */\nConnectionPool.CONNECTION_CREATED = constants_1.CONNECTION_CREATED;\n/**\n * Emitted when a connection becomes established, and is ready to use\n * @event\n */\nConnectionPool.CONNECTION_READY = constants_1.CONNECTION_READY;\n/**\n * Emitted when a connection is closed\n * @event\n */\nConnectionPool.CONNECTION_CLOSED = constants_1.CONNECTION_CLOSED;\n/**\n * Emitted when an attempt to check out a connection begins\n * @event\n */\nConnectionPool.CONNECTION_CHECK_OUT_STARTED = constants_1.CONNECTION_CHECK_OUT_STARTED;\n/**\n * Emitted when an attempt to check out a connection fails\n * @event\n */\nConnectionPool.CONNECTION_CHECK_OUT_FAILED = constants_1.CONNECTION_CHECK_OUT_FAILED;\n/**\n * Emitted each time a connection is successfully checked out of the connection pool\n * @event\n */\nConnectionPool.CONNECTION_CHECKED_OUT = constants_1.CONNECTION_CHECKED_OUT;\n/**\n * Emitted each time a connection is successfully checked into the connection pool\n * @event\n */\nConnectionPool.CONNECTION_CHECKED_IN = constants_1.CONNECTION_CHECKED_IN;\n//# sourceMappingURL=connection_pool.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/connection_pool.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/connection_pool_events.js":
/*!****************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/connection_pool_events.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ConnectionPoolClearedEvent = exports.ConnectionCheckedInEvent = exports.ConnectionCheckedOutEvent = exports.ConnectionCheckOutFailedEvent = exports.ConnectionCheckOutStartedEvent = exports.ConnectionClosedEvent = exports.ConnectionReadyEvent = exports.ConnectionCreatedEvent = exports.ConnectionPoolClosedEvent = exports.ConnectionPoolReadyEvent = exports.ConnectionPoolCreatedEvent = exports.ConnectionPoolMonitoringEvent = void 0;\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/constants.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\n/**\n * The base export class for all monitoring events published from the connection pool\n * @public\n * @category Event\n */\nclass ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        this.time = new Date();\n        this.address = pool.address;\n    }\n}\nexports.ConnectionPoolMonitoringEvent = ConnectionPoolMonitoringEvent;\n/**\n * An event published when a connection pool is created\n * @public\n * @category Event\n */\nclass ConnectionPoolCreatedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_POOL_CREATED;\n        const { maxConnecting, maxPoolSize, minPoolSize, maxIdleTimeMS, waitQueueTimeoutMS } = pool.options;\n        this.options = { maxConnecting, maxPoolSize, minPoolSize, maxIdleTimeMS, waitQueueTimeoutMS };\n    }\n}\nexports.ConnectionPoolCreatedEvent = ConnectionPoolCreatedEvent;\n/**\n * An event published when a connection pool is ready\n * @public\n * @category Event\n */\nclass ConnectionPoolReadyEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_POOL_READY;\n    }\n}\nexports.ConnectionPoolReadyEvent = ConnectionPoolReadyEvent;\n/**\n * An event published when a connection pool is closed\n * @public\n * @category Event\n */\nclass ConnectionPoolClosedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_POOL_CLOSED;\n    }\n}\nexports.ConnectionPoolClosedEvent = ConnectionPoolClosedEvent;\n/**\n * An event published when a connection pool creates a new connection\n * @public\n * @category Event\n */\nclass ConnectionCreatedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CREATED;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionCreatedEvent = ConnectionCreatedEvent;\n/**\n * An event published when a connection is ready for use\n * @public\n * @category Event\n */\nclass ConnectionReadyEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection, connectionCreatedEventTime) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_READY;\n        this.durationMS = (0, utils_1.now)() - connectionCreatedEventTime;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionReadyEvent = ConnectionReadyEvent;\n/**\n * An event published when a connection is closed\n * @public\n * @category Event\n */\nclass ConnectionClosedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection, reason, error) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CLOSED;\n        this.connectionId = connection.id;\n        this.reason = reason;\n        this.serviceId = connection.serviceId;\n        this.error = error ?? null;\n    }\n}\nexports.ConnectionClosedEvent = ConnectionClosedEvent;\n/**\n * An event published when a request to check a connection out begins\n * @public\n * @category Event\n */\nclass ConnectionCheckOutStartedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CHECK_OUT_STARTED;\n    }\n}\nexports.ConnectionCheckOutStartedEvent = ConnectionCheckOutStartedEvent;\n/**\n * An event published when a request to check a connection out fails\n * @public\n * @category Event\n */\nclass ConnectionCheckOutFailedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, reason, checkoutTime, error) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CHECK_OUT_FAILED;\n        this.durationMS = (0, utils_1.now)() - checkoutTime;\n        this.reason = reason;\n        this.error = error;\n    }\n}\nexports.ConnectionCheckOutFailedEvent = ConnectionCheckOutFailedEvent;\n/**\n * An event published when a connection is checked out of the connection pool\n * @public\n * @category Event\n */\nclass ConnectionCheckedOutEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection, checkoutTime) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CHECKED_OUT;\n        this.durationMS = (0, utils_1.now)() - checkoutTime;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionCheckedOutEvent = ConnectionCheckedOutEvent;\n/**\n * An event published when a connection is checked into the connection pool\n * @public\n * @category Event\n */\nclass ConnectionCheckedInEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CHECKED_IN;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionCheckedInEvent = ConnectionCheckedInEvent;\n/**\n * An event published when a connection pool is cleared\n * @public\n * @category Event\n */\nclass ConnectionPoolClearedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, options = {}) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_POOL_CLEARED;\n        this.serviceId = options.serviceId;\n        this.interruptInUseConnections = options.interruptInUseConnections;\n    }\n}\nexports.ConnectionPoolClearedEvent = ConnectionPoolClearedEvent;\n//# sourceMappingURL=connection_pool_events.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/connection_pool_events.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/errors.js":
/*!************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/errors.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WaitQueueTimeoutError = exports.PoolClearedOnNetworkError = exports.PoolClearedError = exports.PoolClosedError = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\n/**\n * An error indicating a connection pool is closed\n * @category Error\n */\nclass PoolClosedError extends error_1.MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(pool) {\n        super('Attempted to check out a connection from closed connection pool');\n        this.address = pool.address;\n    }\n    get name() {\n        return 'MongoPoolClosedError';\n    }\n}\nexports.PoolClosedError = PoolClosedError;\n/**\n * An error indicating a connection pool is currently paused\n * @category Error\n */\nclass PoolClearedError extends error_1.MongoNetworkError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(pool, message) {\n        const errorMessage = message\n            ? message\n            : `Connection pool for ${pool.address} was cleared because another operation failed with: \"${pool.serverError?.message}\"`;\n        super(errorMessage, pool.serverError ? { cause: pool.serverError } : undefined);\n        this.address = pool.address;\n        this.addErrorLabel(error_1.MongoErrorLabel.PoolRequstedRetry);\n    }\n    get name() {\n        return 'MongoPoolClearedError';\n    }\n}\nexports.PoolClearedError = PoolClearedError;\n/**\n * An error indicating that a connection pool has been cleared after the monitor for that server timed out.\n * @category Error\n */\nclass PoolClearedOnNetworkError extends PoolClearedError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(pool) {\n        super(pool, `Connection to ${pool.address} interrupted due to server monitor timeout`);\n    }\n    get name() {\n        return 'PoolClearedOnNetworkError';\n    }\n}\nexports.PoolClearedOnNetworkError = PoolClearedOnNetworkError;\n/**\n * An error thrown when a request to check out a connection times out\n * @category Error\n */\nclass WaitQueueTimeoutError extends error_1.MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, address) {\n        super(message);\n        this.address = address;\n    }\n    get name() {\n        return 'MongoWaitQueueTimeoutError';\n    }\n}\nexports.WaitQueueTimeoutError = WaitQueueTimeoutError;\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw2QkFBNkIsR0FBRyxpQ0FBaUMsR0FBRyx3QkFBd0IsR0FBRyx1QkFBdUI7QUFDdEgsZ0JBQWdCLG1CQUFPLENBQUMsOEZBQVU7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLGNBQWMsc0RBQXNELDBCQUEwQjtBQUNuSSxpREFBaUQsMEJBQTBCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsY0FBYztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsiL1VzZXJzL2xpbmt1cy9HaXRodWIvbW9ub3R3by9wYXlsb2FkLXBsdWdpbi1tZXRhL25vZGVfbW9kdWxlcy8ucG5wbS9tb25nb2RiQDYuMTAuMC9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9lcnJvcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLldhaXRRdWV1ZVRpbWVvdXRFcnJvciA9IGV4cG9ydHMuUG9vbENsZWFyZWRPbk5ldHdvcmtFcnJvciA9IGV4cG9ydHMuUG9vbENsZWFyZWRFcnJvciA9IGV4cG9ydHMuUG9vbENsb3NlZEVycm9yID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbi8qKlxuICogQW4gZXJyb3IgaW5kaWNhdGluZyBhIGNvbm5lY3Rpb24gcG9vbCBpcyBjbG9zZWRcbiAqIEBjYXRlZ29yeSBFcnJvclxuICovXG5jbGFzcyBQb29sQ2xvc2VkRXJyb3IgZXh0ZW5kcyBlcnJvcl8xLk1vbmdvRHJpdmVyRXJyb3Ige1xuICAgIC8qKlxuICAgICAqICoqRG8gbm90IHVzZSB0aGlzIGNvbnN0cnVjdG9yISoqXG4gICAgICpcbiAgICAgKiBNZWFudCBmb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIFRoaXMgY2xhc3MgaXMgb25seSBtZWFudCB0byBiZSBjb25zdHJ1Y3RlZCB3aXRoaW4gdGhlIGRyaXZlci4gVGhpcyBjb25zdHJ1Y3RvciBpc1xuICAgICAqIG5vdCBzdWJqZWN0IHRvIHNlbWFudGljIHZlcnNpb25pbmcgY29tcGF0aWJpbGl0eSBndWFyYW50ZWVzIGFuZCBtYXkgY2hhbmdlIGF0IGFueSB0aW1lLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqKi9cbiAgICBjb25zdHJ1Y3Rvcihwb29sKSB7XG4gICAgICAgIHN1cGVyKCdBdHRlbXB0ZWQgdG8gY2hlY2sgb3V0IGEgY29ubmVjdGlvbiBmcm9tIGNsb3NlZCBjb25uZWN0aW9uIHBvb2wnKTtcbiAgICAgICAgdGhpcy5hZGRyZXNzID0gcG9vbC5hZGRyZXNzO1xuICAgIH1cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdNb25nb1Bvb2xDbG9zZWRFcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5Qb29sQ2xvc2VkRXJyb3IgPSBQb29sQ2xvc2VkRXJyb3I7XG4vKipcbiAqIEFuIGVycm9yIGluZGljYXRpbmcgYSBjb25uZWN0aW9uIHBvb2wgaXMgY3VycmVudGx5IHBhdXNlZFxuICogQGNhdGVnb3J5IEVycm9yXG4gKi9cbmNsYXNzIFBvb2xDbGVhcmVkRXJyb3IgZXh0ZW5kcyBlcnJvcl8xLk1vbmdvTmV0d29ya0Vycm9yIHtcbiAgICAvKipcbiAgICAgKiAqKkRvIG5vdCB1c2UgdGhpcyBjb25zdHJ1Y3RvciEqKlxuICAgICAqXG4gICAgICogTWVhbnQgZm9yIGludGVybmFsIHVzZSBvbmx5LlxuICAgICAqXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBUaGlzIGNsYXNzIGlzIG9ubHkgbWVhbnQgdG8gYmUgY29uc3RydWN0ZWQgd2l0aGluIHRoZSBkcml2ZXIuIFRoaXMgY29uc3RydWN0b3IgaXNcbiAgICAgKiBub3Qgc3ViamVjdCB0byBzZW1hbnRpYyB2ZXJzaW9uaW5nIGNvbXBhdGliaWxpdHkgZ3VhcmFudGVlcyBhbmQgbWF5IGNoYW5nZSBhdCBhbnkgdGltZS5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiovXG4gICAgY29uc3RydWN0b3IocG9vbCwgbWVzc2FnZSkge1xuICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBtZXNzYWdlXG4gICAgICAgICAgICA/IG1lc3NhZ2VcbiAgICAgICAgICAgIDogYENvbm5lY3Rpb24gcG9vbCBmb3IgJHtwb29sLmFkZHJlc3N9IHdhcyBjbGVhcmVkIGJlY2F1c2UgYW5vdGhlciBvcGVyYXRpb24gZmFpbGVkIHdpdGg6IFwiJHtwb29sLnNlcnZlckVycm9yPy5tZXNzYWdlfVwiYDtcbiAgICAgICAgc3VwZXIoZXJyb3JNZXNzYWdlLCBwb29sLnNlcnZlckVycm9yID8geyBjYXVzZTogcG9vbC5zZXJ2ZXJFcnJvciB9IDogdW5kZWZpbmVkKTtcbiAgICAgICAgdGhpcy5hZGRyZXNzID0gcG9vbC5hZGRyZXNzO1xuICAgICAgICB0aGlzLmFkZEVycm9yTGFiZWwoZXJyb3JfMS5Nb25nb0Vycm9yTGFiZWwuUG9vbFJlcXVzdGVkUmV0cnkpO1xuICAgIH1cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdNb25nb1Bvb2xDbGVhcmVkRXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuUG9vbENsZWFyZWRFcnJvciA9IFBvb2xDbGVhcmVkRXJyb3I7XG4vKipcbiAqIEFuIGVycm9yIGluZGljYXRpbmcgdGhhdCBhIGNvbm5lY3Rpb24gcG9vbCBoYXMgYmVlbiBjbGVhcmVkIGFmdGVyIHRoZSBtb25pdG9yIGZvciB0aGF0IHNlcnZlciB0aW1lZCBvdXQuXG4gKiBAY2F0ZWdvcnkgRXJyb3JcbiAqL1xuY2xhc3MgUG9vbENsZWFyZWRPbk5ldHdvcmtFcnJvciBleHRlbmRzIFBvb2xDbGVhcmVkRXJyb3Ige1xuICAgIC8qKlxuICAgICAqICoqRG8gbm90IHVzZSB0aGlzIGNvbnN0cnVjdG9yISoqXG4gICAgICpcbiAgICAgKiBNZWFudCBmb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIFRoaXMgY2xhc3MgaXMgb25seSBtZWFudCB0byBiZSBjb25zdHJ1Y3RlZCB3aXRoaW4gdGhlIGRyaXZlci4gVGhpcyBjb25zdHJ1Y3RvciBpc1xuICAgICAqIG5vdCBzdWJqZWN0IHRvIHNlbWFudGljIHZlcnNpb25pbmcgY29tcGF0aWJpbGl0eSBndWFyYW50ZWVzIGFuZCBtYXkgY2hhbmdlIGF0IGFueSB0aW1lLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqKi9cbiAgICBjb25zdHJ1Y3Rvcihwb29sKSB7XG4gICAgICAgIHN1cGVyKHBvb2wsIGBDb25uZWN0aW9uIHRvICR7cG9vbC5hZGRyZXNzfSBpbnRlcnJ1cHRlZCBkdWUgdG8gc2VydmVyIG1vbml0b3IgdGltZW91dGApO1xuICAgIH1cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdQb29sQ2xlYXJlZE9uTmV0d29ya0Vycm9yJztcbiAgICB9XG59XG5leHBvcnRzLlBvb2xDbGVhcmVkT25OZXR3b3JrRXJyb3IgPSBQb29sQ2xlYXJlZE9uTmV0d29ya0Vycm9yO1xuLyoqXG4gKiBBbiBlcnJvciB0aHJvd24gd2hlbiBhIHJlcXVlc3QgdG8gY2hlY2sgb3V0IGEgY29ubmVjdGlvbiB0aW1lcyBvdXRcbiAqIEBjYXRlZ29yeSBFcnJvclxuICovXG5jbGFzcyBXYWl0UXVldWVUaW1lb3V0RXJyb3IgZXh0ZW5kcyBlcnJvcl8xLk1vbmdvRHJpdmVyRXJyb3Ige1xuICAgIC8qKlxuICAgICAqICoqRG8gbm90IHVzZSB0aGlzIGNvbnN0cnVjdG9yISoqXG4gICAgICpcbiAgICAgKiBNZWFudCBmb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIFRoaXMgY2xhc3MgaXMgb25seSBtZWFudCB0byBiZSBjb25zdHJ1Y3RlZCB3aXRoaW4gdGhlIGRyaXZlci4gVGhpcyBjb25zdHJ1Y3RvciBpc1xuICAgICAqIG5vdCBzdWJqZWN0IHRvIHNlbWFudGljIHZlcnNpb25pbmcgY29tcGF0aWJpbGl0eSBndWFyYW50ZWVzIGFuZCBtYXkgY2hhbmdlIGF0IGFueSB0aW1lLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqKi9cbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBhZGRyZXNzKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLmFkZHJlc3MgPSBhZGRyZXNzO1xuICAgIH1cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdNb25nb1dhaXRRdWV1ZVRpbWVvdXRFcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5XYWl0UXVldWVUaW1lb3V0RXJyb3IgPSBXYWl0UXVldWVUaW1lb3V0RXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvcnMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/errors.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/handshake/client_metadata.js":
/*!*******************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/handshake/client_metadata.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LimitedSizeDocument = void 0;\nexports.makeClientMetadata = makeClientMetadata;\nexports.addContainerMetadata = addContainerMetadata;\nexports.getFAASEnv = getFAASEnv;\nconst os = __webpack_require__(/*! os */ \"os\");\nconst process = __webpack_require__(/*! process */ \"process\");\nconst bson_1 = __webpack_require__(/*! ../../bson */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\n// eslint-disable-next-line @typescript-eslint/no-require-imports\nconst NODE_DRIVER_VERSION = (__webpack_require__(/*! ../../../package.json */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/package.json\").version);\n/** @internal */\nclass LimitedSizeDocument {\n    constructor(maxSize) {\n        this.maxSize = maxSize;\n        this.document = new Map();\n        /** BSON overhead: Int32 + Null byte */\n        this.documentSize = 5;\n    }\n    /** Only adds key/value if the bsonByteLength is less than MAX_SIZE */\n    ifItFitsItSits(key, value) {\n        // The BSON byteLength of the new element is the same as serializing it to its own document\n        // subtracting the document size int32 and the null terminator.\n        const newElementSize = bson_1.BSON.serialize(new Map().set(key, value)).byteLength - 5;\n        if (newElementSize + this.documentSize > this.maxSize) {\n            return false;\n        }\n        this.documentSize += newElementSize;\n        this.document.set(key, value);\n        return true;\n    }\n    toObject() {\n        return bson_1.BSON.deserialize(bson_1.BSON.serialize(this.document), {\n            promoteLongs: false,\n            promoteBuffers: false,\n            promoteValues: false,\n            useBigInt64: false\n        });\n    }\n}\nexports.LimitedSizeDocument = LimitedSizeDocument;\n/**\n * From the specs:\n * Implementors SHOULD cumulatively update fields in the following order until the document is under the size limit:\n * 1. Omit fields from `env` except `env.name`.\n * 2. Omit fields from `os` except `os.type`.\n * 3. Omit the `env` document entirely.\n * 4. Truncate `platform`. -- special we do not truncate this field\n */\nfunction makeClientMetadata(options) {\n    const metadataDocument = new LimitedSizeDocument(512);\n    const { appName = '' } = options;\n    // Add app name first, it must be sent\n    if (appName.length > 0) {\n        const name = Buffer.byteLength(appName, 'utf8') <= 128\n            ? options.appName\n            : Buffer.from(appName, 'utf8').subarray(0, 128).toString('utf8');\n        metadataDocument.ifItFitsItSits('application', { name });\n    }\n    const { name = '', version = '', platform = '' } = options.driverInfo;\n    const driverInfo = {\n        name: name.length > 0 ? `nodejs|${name}` : 'nodejs',\n        version: version.length > 0 ? `${NODE_DRIVER_VERSION}|${version}` : NODE_DRIVER_VERSION\n    };\n    if (!metadataDocument.ifItFitsItSits('driver', driverInfo)) {\n        throw new error_1.MongoInvalidArgumentError('Unable to include driverInfo name and version, metadata cannot exceed 512 bytes');\n    }\n    let runtimeInfo = getRuntimeInfo();\n    if (platform.length > 0) {\n        runtimeInfo = `${runtimeInfo}|${platform}`;\n    }\n    if (!metadataDocument.ifItFitsItSits('platform', runtimeInfo)) {\n        throw new error_1.MongoInvalidArgumentError('Unable to include driverInfo platform, metadata cannot exceed 512 bytes');\n    }\n    // Note: order matters, os.type is last so it will be removed last if we're at maxSize\n    const osInfo = new Map()\n        .set('name', process.platform)\n        .set('architecture', process.arch)\n        .set('version', os.release())\n        .set('type', os.type());\n    if (!metadataDocument.ifItFitsItSits('os', osInfo)) {\n        for (const key of osInfo.keys()) {\n            osInfo.delete(key);\n            if (osInfo.size === 0)\n                break;\n            if (metadataDocument.ifItFitsItSits('os', osInfo))\n                break;\n        }\n    }\n    const faasEnv = getFAASEnv();\n    if (faasEnv != null) {\n        if (!metadataDocument.ifItFitsItSits('env', faasEnv)) {\n            for (const key of faasEnv.keys()) {\n                faasEnv.delete(key);\n                if (faasEnv.size === 0)\n                    break;\n                if (metadataDocument.ifItFitsItSits('env', faasEnv))\n                    break;\n            }\n        }\n    }\n    return metadataDocument.toObject();\n}\nlet dockerPromise;\n/** @internal */\nasync function getContainerMetadata() {\n    const containerMetadata = {};\n    dockerPromise ??= (0, utils_1.fileIsAccessible)('/.dockerenv');\n    const isDocker = await dockerPromise;\n    const { KUBERNETES_SERVICE_HOST = '' } = process.env;\n    const isKubernetes = KUBERNETES_SERVICE_HOST.length > 0 ? true : false;\n    if (isDocker)\n        containerMetadata.runtime = 'docker';\n    if (isKubernetes)\n        containerMetadata.orchestrator = 'kubernetes';\n    return containerMetadata;\n}\n/**\n * @internal\n * Re-add each metadata value.\n * Attempt to add new env container metadata, but keep old data if it does not fit.\n */\nasync function addContainerMetadata(originalMetadata) {\n    const containerMetadata = await getContainerMetadata();\n    if (Object.keys(containerMetadata).length === 0)\n        return originalMetadata;\n    const extendedMetadata = new LimitedSizeDocument(512);\n    const extendedEnvMetadata = { ...originalMetadata?.env, container: containerMetadata };\n    for (const [key, val] of Object.entries(originalMetadata)) {\n        if (key !== 'env') {\n            extendedMetadata.ifItFitsItSits(key, val);\n        }\n        else {\n            if (!extendedMetadata.ifItFitsItSits('env', extendedEnvMetadata)) {\n                // add in old data if newer / extended metadata does not fit\n                extendedMetadata.ifItFitsItSits('env', val);\n            }\n        }\n    }\n    if (!('env' in originalMetadata)) {\n        extendedMetadata.ifItFitsItSits('env', extendedEnvMetadata);\n    }\n    return extendedMetadata.toObject();\n}\n/**\n * Collects FaaS metadata.\n * - `name` MUST be the last key in the Map returned.\n */\nfunction getFAASEnv() {\n    const { AWS_EXECUTION_ENV = '', AWS_LAMBDA_RUNTIME_API = '', FUNCTIONS_WORKER_RUNTIME = '', K_SERVICE = '', FUNCTION_NAME = '', VERCEL = '', AWS_LAMBDA_FUNCTION_MEMORY_SIZE = '', AWS_REGION = '', FUNCTION_MEMORY_MB = '', FUNCTION_REGION = '', FUNCTION_TIMEOUT_SEC = '', VERCEL_REGION = '' } = process.env;\n    const isAWSFaaS = AWS_EXECUTION_ENV.startsWith('AWS_Lambda_') || AWS_LAMBDA_RUNTIME_API.length > 0;\n    const isAzureFaaS = FUNCTIONS_WORKER_RUNTIME.length > 0;\n    const isGCPFaaS = K_SERVICE.length > 0 || FUNCTION_NAME.length > 0;\n    const isVercelFaaS = VERCEL.length > 0;\n    // Note: order matters, name must always be the last key\n    const faasEnv = new Map();\n    // When isVercelFaaS is true so is isAWSFaaS; Vercel inherits the AWS env\n    if (isVercelFaaS && !(isAzureFaaS || isGCPFaaS)) {\n        if (VERCEL_REGION.length > 0) {\n            faasEnv.set('region', VERCEL_REGION);\n        }\n        faasEnv.set('name', 'vercel');\n        return faasEnv;\n    }\n    if (isAWSFaaS && !(isAzureFaaS || isGCPFaaS || isVercelFaaS)) {\n        if (AWS_REGION.length > 0) {\n            faasEnv.set('region', AWS_REGION);\n        }\n        if (AWS_LAMBDA_FUNCTION_MEMORY_SIZE.length > 0 &&\n            Number.isInteger(+AWS_LAMBDA_FUNCTION_MEMORY_SIZE)) {\n            faasEnv.set('memory_mb', new bson_1.Int32(AWS_LAMBDA_FUNCTION_MEMORY_SIZE));\n        }\n        faasEnv.set('name', 'aws.lambda');\n        return faasEnv;\n    }\n    if (isAzureFaaS && !(isGCPFaaS || isAWSFaaS || isVercelFaaS)) {\n        faasEnv.set('name', 'azure.func');\n        return faasEnv;\n    }\n    if (isGCPFaaS && !(isAzureFaaS || isAWSFaaS || isVercelFaaS)) {\n        if (FUNCTION_REGION.length > 0) {\n            faasEnv.set('region', FUNCTION_REGION);\n        }\n        if (FUNCTION_MEMORY_MB.length > 0 && Number.isInteger(+FUNCTION_MEMORY_MB)) {\n            faasEnv.set('memory_mb', new bson_1.Int32(FUNCTION_MEMORY_MB));\n        }\n        if (FUNCTION_TIMEOUT_SEC.length > 0 && Number.isInteger(+FUNCTION_TIMEOUT_SEC)) {\n            faasEnv.set('timeout_sec', new bson_1.Int32(FUNCTION_TIMEOUT_SEC));\n        }\n        faasEnv.set('name', 'gcp.func');\n        return faasEnv;\n    }\n    return null;\n}\n/**\n * @internal\n * Get current JavaScript runtime platform\n *\n * NOTE: The version information fetching is intentionally written defensively\n * to avoid having a released driver version that becomes incompatible\n * with a future change to these global objects.\n */\nfunction getRuntimeInfo() {\n    if ('Deno' in globalThis) {\n        const version = typeof Deno?.version?.deno === 'string' ? Deno?.version?.deno : '0.0.0-unknown';\n        return `Deno v${version}, ${os.endianness()}`;\n    }\n    if ('Bun' in globalThis) {\n        const version = typeof Bun?.version === 'string' ? Bun?.version : '0.0.0-unknown';\n        return `Bun v${version}, ${os.endianness()}`;\n    }\n    return `Node.js ${process.version}, ${os.endianness()}`;\n}\n//# sourceMappingURL=client_metadata.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/handshake/client_metadata.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/metrics.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/metrics.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ConnectionPoolMetrics = void 0;\n/** @internal */\nclass ConnectionPoolMetrics {\n    constructor() {\n        this.txnConnections = 0;\n        this.cursorConnections = 0;\n        this.otherConnections = 0;\n    }\n    /**\n     * Mark a connection as pinned for a specific operation.\n     */\n    markPinned(pinType) {\n        if (pinType === ConnectionPoolMetrics.TXN) {\n            this.txnConnections += 1;\n        }\n        else if (pinType === ConnectionPoolMetrics.CURSOR) {\n            this.cursorConnections += 1;\n        }\n        else {\n            this.otherConnections += 1;\n        }\n    }\n    /**\n     * Unmark a connection as pinned for an operation.\n     */\n    markUnpinned(pinType) {\n        if (pinType === ConnectionPoolMetrics.TXN) {\n            this.txnConnections -= 1;\n        }\n        else if (pinType === ConnectionPoolMetrics.CURSOR) {\n            this.cursorConnections -= 1;\n        }\n        else {\n            this.otherConnections -= 1;\n        }\n    }\n    /**\n     * Return information about the cmap metrics as a string.\n     */\n    info(maxPoolSize) {\n        return ('Timed out while checking out a connection from connection pool: ' +\n            `maxPoolSize: ${maxPoolSize}, ` +\n            `connections in use by cursors: ${this.cursorConnections}, ` +\n            `connections in use by transactions: ${this.txnConnections}, ` +\n            `connections in use by other operations: ${this.otherConnections}`);\n    }\n    /**\n     * Reset the metrics to the initial values.\n     */\n    reset() {\n        this.txnConnections = 0;\n        this.cursorConnections = 0;\n        this.otherConnections = 0;\n    }\n}\nexports.ConnectionPoolMetrics = ConnectionPoolMetrics;\nConnectionPoolMetrics.TXN = 'txn';\nConnectionPoolMetrics.CURSOR = 'cursor';\nConnectionPoolMetrics.OTHER = 'other';\n//# sourceMappingURL=metrics.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL21ldHJpY3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLFlBQVk7QUFDeEMsOENBQThDLHVCQUF1QjtBQUNyRSxtREFBbUQsb0JBQW9CO0FBQ3ZFLHVEQUF1RCxzQkFBc0I7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9saW5rdXMvR2l0aHViL21vbm90d28vcGF5bG9hZC1wbHVnaW4tbWV0YS9ub2RlX21vZHVsZXMvLnBucG0vbW9uZ29kYkA2LjEwLjAvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvbWV0cmljcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ29ubmVjdGlvblBvb2xNZXRyaWNzID0gdm9pZCAwO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgQ29ubmVjdGlvblBvb2xNZXRyaWNzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy50eG5Db25uZWN0aW9ucyA9IDA7XG4gICAgICAgIHRoaXMuY3Vyc29yQ29ubmVjdGlvbnMgPSAwO1xuICAgICAgICB0aGlzLm90aGVyQ29ubmVjdGlvbnMgPSAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXJrIGEgY29ubmVjdGlvbiBhcyBwaW5uZWQgZm9yIGEgc3BlY2lmaWMgb3BlcmF0aW9uLlxuICAgICAqL1xuICAgIG1hcmtQaW5uZWQocGluVHlwZSkge1xuICAgICAgICBpZiAocGluVHlwZSA9PT0gQ29ubmVjdGlvblBvb2xNZXRyaWNzLlRYTikge1xuICAgICAgICAgICAgdGhpcy50eG5Db25uZWN0aW9ucyArPSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBpblR5cGUgPT09IENvbm5lY3Rpb25Qb29sTWV0cmljcy5DVVJTT1IpIHtcbiAgICAgICAgICAgIHRoaXMuY3Vyc29yQ29ubmVjdGlvbnMgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub3RoZXJDb25uZWN0aW9ucyArPSAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVubWFyayBhIGNvbm5lY3Rpb24gYXMgcGlubmVkIGZvciBhbiBvcGVyYXRpb24uXG4gICAgICovXG4gICAgbWFya1VucGlubmVkKHBpblR5cGUpIHtcbiAgICAgICAgaWYgKHBpblR5cGUgPT09IENvbm5lY3Rpb25Qb29sTWV0cmljcy5UWE4pIHtcbiAgICAgICAgICAgIHRoaXMudHhuQ29ubmVjdGlvbnMgLT0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwaW5UeXBlID09PSBDb25uZWN0aW9uUG9vbE1ldHJpY3MuQ1VSU09SKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnNvckNvbm5lY3Rpb25zIC09IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm90aGVyQ29ubmVjdGlvbnMgLT0gMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNtYXAgbWV0cmljcyBhcyBhIHN0cmluZy5cbiAgICAgKi9cbiAgICBpbmZvKG1heFBvb2xTaXplKSB7XG4gICAgICAgIHJldHVybiAoJ1RpbWVkIG91dCB3aGlsZSBjaGVja2luZyBvdXQgYSBjb25uZWN0aW9uIGZyb20gY29ubmVjdGlvbiBwb29sOiAnICtcbiAgICAgICAgICAgIGBtYXhQb29sU2l6ZTogJHttYXhQb29sU2l6ZX0sIGAgK1xuICAgICAgICAgICAgYGNvbm5lY3Rpb25zIGluIHVzZSBieSBjdXJzb3JzOiAke3RoaXMuY3Vyc29yQ29ubmVjdGlvbnN9LCBgICtcbiAgICAgICAgICAgIGBjb25uZWN0aW9ucyBpbiB1c2UgYnkgdHJhbnNhY3Rpb25zOiAke3RoaXMudHhuQ29ubmVjdGlvbnN9LCBgICtcbiAgICAgICAgICAgIGBjb25uZWN0aW9ucyBpbiB1c2UgYnkgb3RoZXIgb3BlcmF0aW9uczogJHt0aGlzLm90aGVyQ29ubmVjdGlvbnN9YCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc2V0IHRoZSBtZXRyaWNzIHRvIHRoZSBpbml0aWFsIHZhbHVlcy5cbiAgICAgKi9cbiAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy50eG5Db25uZWN0aW9ucyA9IDA7XG4gICAgICAgIHRoaXMuY3Vyc29yQ29ubmVjdGlvbnMgPSAwO1xuICAgICAgICB0aGlzLm90aGVyQ29ubmVjdGlvbnMgPSAwO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29ubmVjdGlvblBvb2xNZXRyaWNzID0gQ29ubmVjdGlvblBvb2xNZXRyaWNzO1xuQ29ubmVjdGlvblBvb2xNZXRyaWNzLlRYTiA9ICd0eG4nO1xuQ29ubmVjdGlvblBvb2xNZXRyaWNzLkNVUlNPUiA9ICdjdXJzb3InO1xuQ29ubmVjdGlvblBvb2xNZXRyaWNzLk9USEVSID0gJ290aGVyJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1ldHJpY3MuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/metrics.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/stream_description.js":
/*!************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/stream_description.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StreamDescription = void 0;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\");\nconst common_1 = __webpack_require__(/*! ../sdam/common */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/common.js\");\nconst server_description_1 = __webpack_require__(/*! ../sdam/server_description */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/server_description.js\");\nconst RESPONSE_FIELDS = [\n    'minWireVersion',\n    'maxWireVersion',\n    'maxBsonObjectSize',\n    'maxMessageSizeBytes',\n    'maxWriteBatchSize',\n    'logicalSessionTimeoutMinutes'\n];\n/** @public */\nclass StreamDescription {\n    constructor(address, options) {\n        this.hello = null;\n        this.address = address;\n        this.type = common_1.ServerType.Unknown;\n        this.minWireVersion = undefined;\n        this.maxWireVersion = undefined;\n        this.maxBsonObjectSize = 16777216;\n        this.maxMessageSizeBytes = 48000000;\n        this.maxWriteBatchSize = 100000;\n        this.logicalSessionTimeoutMinutes = options?.logicalSessionTimeoutMinutes;\n        this.loadBalanced = !!options?.loadBalanced;\n        this.compressors =\n            options && options.compressors && Array.isArray(options.compressors)\n                ? options.compressors\n                : [];\n        this.serverConnectionId = null;\n    }\n    receiveResponse(response) {\n        if (response == null) {\n            return;\n        }\n        this.hello = response;\n        this.type = (0, server_description_1.parseServerType)(response);\n        if ('connectionId' in response) {\n            this.serverConnectionId = this.parseServerConnectionID(response.connectionId);\n        }\n        else {\n            this.serverConnectionId = null;\n        }\n        for (const field of RESPONSE_FIELDS) {\n            if (response[field] != null) {\n                this[field] = response[field];\n            }\n            // testing case\n            if ('__nodejs_mock_server__' in response) {\n                this.__nodejs_mock_server__ = response['__nodejs_mock_server__'];\n            }\n        }\n        if (response.compression) {\n            this.compressor = this.compressors.filter(c => response.compression?.includes(c))[0];\n        }\n    }\n    /* @internal */\n    parseServerConnectionID(serverConnectionId) {\n        // Connection ids are always integral, so it's safe to coerce doubles as well as\n        // any integral type.\n        return bson_1.Long.isLong(serverConnectionId)\n            ? serverConnectionId.toBigInt()\n            : // @ts-expect-error: Doubles are coercible to number\n                BigInt(serverConnectionId);\n    }\n}\nexports.StreamDescription = StreamDescription;\n//# sourceMappingURL=stream_description.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL3N0cmVhbV9kZXNjcmlwdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUI7QUFDekIsZUFBZSxtQkFBTyxDQUFDLDRGQUFTO0FBQ2hDLGlCQUFpQixtQkFBTyxDQUFDLDBHQUFnQjtBQUN6Qyw2QkFBNkIsbUJBQU8sQ0FBQyxrSUFBNEI7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QiIsInNvdXJjZXMiOlsiL1VzZXJzL2xpbmt1cy9HaXRodWIvbW9ub3R3by9wYXlsb2FkLXBsdWdpbi1tZXRhL25vZGVfbW9kdWxlcy8ucG5wbS9tb25nb2RiQDYuMTAuMC9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9zdHJlYW1fZGVzY3JpcHRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlN0cmVhbURlc2NyaXB0aW9uID0gdm9pZCAwO1xuY29uc3QgYnNvbl8xID0gcmVxdWlyZShcIi4uL2Jzb25cIik7XG5jb25zdCBjb21tb25fMSA9IHJlcXVpcmUoXCIuLi9zZGFtL2NvbW1vblwiKTtcbmNvbnN0IHNlcnZlcl9kZXNjcmlwdGlvbl8xID0gcmVxdWlyZShcIi4uL3NkYW0vc2VydmVyX2Rlc2NyaXB0aW9uXCIpO1xuY29uc3QgUkVTUE9OU0VfRklFTERTID0gW1xuICAgICdtaW5XaXJlVmVyc2lvbicsXG4gICAgJ21heFdpcmVWZXJzaW9uJyxcbiAgICAnbWF4QnNvbk9iamVjdFNpemUnLFxuICAgICdtYXhNZXNzYWdlU2l6ZUJ5dGVzJyxcbiAgICAnbWF4V3JpdGVCYXRjaFNpemUnLFxuICAgICdsb2dpY2FsU2Vzc2lvblRpbWVvdXRNaW51dGVzJ1xuXTtcbi8qKiBAcHVibGljICovXG5jbGFzcyBTdHJlYW1EZXNjcmlwdGlvbiB7XG4gICAgY29uc3RydWN0b3IoYWRkcmVzcywgb3B0aW9ucykge1xuICAgICAgICB0aGlzLmhlbGxvID0gbnVsbDtcbiAgICAgICAgdGhpcy5hZGRyZXNzID0gYWRkcmVzcztcbiAgICAgICAgdGhpcy50eXBlID0gY29tbW9uXzEuU2VydmVyVHlwZS5Vbmtub3duO1xuICAgICAgICB0aGlzLm1pbldpcmVWZXJzaW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm1heFdpcmVWZXJzaW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm1heEJzb25PYmplY3RTaXplID0gMTY3NzcyMTY7XG4gICAgICAgIHRoaXMubWF4TWVzc2FnZVNpemVCeXRlcyA9IDQ4MDAwMDAwO1xuICAgICAgICB0aGlzLm1heFdyaXRlQmF0Y2hTaXplID0gMTAwMDAwO1xuICAgICAgICB0aGlzLmxvZ2ljYWxTZXNzaW9uVGltZW91dE1pbnV0ZXMgPSBvcHRpb25zPy5sb2dpY2FsU2Vzc2lvblRpbWVvdXRNaW51dGVzO1xuICAgICAgICB0aGlzLmxvYWRCYWxhbmNlZCA9ICEhb3B0aW9ucz8ubG9hZEJhbGFuY2VkO1xuICAgICAgICB0aGlzLmNvbXByZXNzb3JzID1cbiAgICAgICAgICAgIG9wdGlvbnMgJiYgb3B0aW9ucy5jb21wcmVzc29ycyAmJiBBcnJheS5pc0FycmF5KG9wdGlvbnMuY29tcHJlc3NvcnMpXG4gICAgICAgICAgICAgICAgPyBvcHRpb25zLmNvbXByZXNzb3JzXG4gICAgICAgICAgICAgICAgOiBbXTtcbiAgICAgICAgdGhpcy5zZXJ2ZXJDb25uZWN0aW9uSWQgPSBudWxsO1xuICAgIH1cbiAgICByZWNlaXZlUmVzcG9uc2UocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhlbGxvID0gcmVzcG9uc2U7XG4gICAgICAgIHRoaXMudHlwZSA9ICgwLCBzZXJ2ZXJfZGVzY3JpcHRpb25fMS5wYXJzZVNlcnZlclR5cGUpKHJlc3BvbnNlKTtcbiAgICAgICAgaWYgKCdjb25uZWN0aW9uSWQnIGluIHJlc3BvbnNlKSB7XG4gICAgICAgICAgICB0aGlzLnNlcnZlckNvbm5lY3Rpb25JZCA9IHRoaXMucGFyc2VTZXJ2ZXJDb25uZWN0aW9uSUQocmVzcG9uc2UuY29ubmVjdGlvbklkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2VydmVyQ29ubmVjdGlvbklkID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIFJFU1BPTlNFX0ZJRUxEUykge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlW2ZpZWxkXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpc1tmaWVsZF0gPSByZXNwb25zZVtmaWVsZF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0ZXN0aW5nIGNhc2VcbiAgICAgICAgICAgIGlmICgnX19ub2RlanNfbW9ja19zZXJ2ZXJfXycgaW4gcmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9fbm9kZWpzX21vY2tfc2VydmVyX18gPSByZXNwb25zZVsnX19ub2RlanNfbW9ja19zZXJ2ZXJfXyddO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChyZXNwb25zZS5jb21wcmVzc2lvbikge1xuICAgICAgICAgICAgdGhpcy5jb21wcmVzc29yID0gdGhpcy5jb21wcmVzc29ycy5maWx0ZXIoYyA9PiByZXNwb25zZS5jb21wcmVzc2lvbj8uaW5jbHVkZXMoYykpWzBdO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qIEBpbnRlcm5hbCAqL1xuICAgIHBhcnNlU2VydmVyQ29ubmVjdGlvbklEKHNlcnZlckNvbm5lY3Rpb25JZCkge1xuICAgICAgICAvLyBDb25uZWN0aW9uIGlkcyBhcmUgYWx3YXlzIGludGVncmFsLCBzbyBpdCdzIHNhZmUgdG8gY29lcmNlIGRvdWJsZXMgYXMgd2VsbCBhc1xuICAgICAgICAvLyBhbnkgaW50ZWdyYWwgdHlwZS5cbiAgICAgICAgcmV0dXJuIGJzb25fMS5Mb25nLmlzTG9uZyhzZXJ2ZXJDb25uZWN0aW9uSWQpXG4gICAgICAgICAgICA/IHNlcnZlckNvbm5lY3Rpb25JZC50b0JpZ0ludCgpXG4gICAgICAgICAgICA6IC8vIEB0cy1leHBlY3QtZXJyb3I6IERvdWJsZXMgYXJlIGNvZXJjaWJsZSB0byBudW1iZXJcbiAgICAgICAgICAgICAgICBCaWdJbnQoc2VydmVyQ29ubmVjdGlvbklkKTtcbiAgICB9XG59XG5leHBvcnRzLlN0cmVhbURlc2NyaXB0aW9uID0gU3RyZWFtRGVzY3JpcHRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHJlYW1fZGVzY3JpcHRpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/stream_description.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/compression.js":
/*!*******************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/compression.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.uncompressibleCommands = exports.Compressor = void 0;\nexports.compress = compress;\nexports.decompress = decompress;\nexports.compressCommand = compressCommand;\nexports.decompressResponse = decompressResponse;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst constants_1 = __webpack_require__(/*! ../../constants */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/constants.js\");\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst commands_1 = __webpack_require__(/*! ../commands */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/commands.js\");\nconst constants_2 = __webpack_require__(/*! ./constants */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\n/** @public */\nexports.Compressor = Object.freeze({\n    none: 0,\n    snappy: 1,\n    zlib: 2,\n    zstd: 3\n});\nexports.uncompressibleCommands = new Set([\n    constants_1.LEGACY_HELLO_COMMAND,\n    'saslStart',\n    'saslContinue',\n    'getnonce',\n    'authenticate',\n    'createUser',\n    'updateUser',\n    'copydbSaslStart',\n    'copydbgetnonce',\n    'copydb'\n]);\nconst ZSTD_COMPRESSION_LEVEL = 3;\nconst zlibInflate = (0, util_1.promisify)(zlib.inflate.bind(zlib));\nconst zlibDeflate = (0, util_1.promisify)(zlib.deflate.bind(zlib));\nlet zstd;\nlet Snappy = null;\nfunction loadSnappy() {\n    if (Snappy == null) {\n        const snappyImport = (0, deps_1.getSnappy)();\n        if ('kModuleError' in snappyImport) {\n            throw snappyImport.kModuleError;\n        }\n        Snappy = snappyImport;\n    }\n    return Snappy;\n}\n// Facilitate compressing a message using an agreed compressor\nasync function compress(options, dataToBeCompressed) {\n    const zlibOptions = {};\n    switch (options.agreedCompressor) {\n        case 'snappy': {\n            Snappy ??= loadSnappy();\n            return await Snappy.compress(dataToBeCompressed);\n        }\n        case 'zstd': {\n            loadZstd();\n            if ('kModuleError' in zstd) {\n                throw zstd['kModuleError'];\n            }\n            return await zstd.compress(dataToBeCompressed, ZSTD_COMPRESSION_LEVEL);\n        }\n        case 'zlib': {\n            if (options.zlibCompressionLevel) {\n                zlibOptions.level = options.zlibCompressionLevel;\n            }\n            return await zlibDeflate(dataToBeCompressed, zlibOptions);\n        }\n        default: {\n            throw new error_1.MongoInvalidArgumentError(`Unknown compressor ${options.agreedCompressor} failed to compress`);\n        }\n    }\n}\n// Decompress a message using the given compressor\nasync function decompress(compressorID, compressedData) {\n    if (compressorID !== exports.Compressor.snappy &&\n        compressorID !== exports.Compressor.zstd &&\n        compressorID !== exports.Compressor.zlib &&\n        compressorID !== exports.Compressor.none) {\n        throw new error_1.MongoDecompressionError(`Server sent message compressed using an unsupported compressor. (Received compressor ID ${compressorID})`);\n    }\n    switch (compressorID) {\n        case exports.Compressor.snappy: {\n            Snappy ??= loadSnappy();\n            return await Snappy.uncompress(compressedData, { asBuffer: true });\n        }\n        case exports.Compressor.zstd: {\n            loadZstd();\n            if ('kModuleError' in zstd) {\n                throw zstd['kModuleError'];\n            }\n            return await zstd.decompress(compressedData);\n        }\n        case exports.Compressor.zlib: {\n            return await zlibInflate(compressedData);\n        }\n        default: {\n            return compressedData;\n        }\n    }\n}\n/**\n * Load ZStandard if it is not already set.\n */\nfunction loadZstd() {\n    if (!zstd) {\n        zstd = (0, deps_1.getZstdLibrary)();\n    }\n}\nconst MESSAGE_HEADER_SIZE = 16;\n/**\n * @internal\n *\n * Compresses an OP_MSG or OP_QUERY message, if compression is configured.  This method\n * also serializes the command to BSON.\n */\nasync function compressCommand(command, description) {\n    const finalCommand = description.agreedCompressor === 'none' || !commands_1.OpCompressedRequest.canCompress(command)\n        ? command\n        : new commands_1.OpCompressedRequest(command, {\n            agreedCompressor: description.agreedCompressor ?? 'none',\n            zlibCompressionLevel: description.zlibCompressionLevel ?? 0\n        });\n    const data = await finalCommand.toBin();\n    return Buffer.concat(data);\n}\n/**\n * @internal\n *\n * Decompresses an OP_MSG or OP_QUERY response from the server, if compression is configured.\n *\n * This method does not parse the response's BSON.\n */\nasync function decompressResponse(message) {\n    const messageHeader = {\n        length: message.readInt32LE(0),\n        requestId: message.readInt32LE(4),\n        responseTo: message.readInt32LE(8),\n        opCode: message.readInt32LE(12)\n    };\n    if (messageHeader.opCode !== constants_2.OP_COMPRESSED) {\n        const ResponseType = messageHeader.opCode === constants_2.OP_MSG ? commands_1.OpMsgResponse : commands_1.OpReply;\n        const messageBody = message.subarray(MESSAGE_HEADER_SIZE);\n        return new ResponseType(message, messageHeader, messageBody);\n    }\n    const header = {\n        ...messageHeader,\n        fromCompressed: true,\n        opCode: message.readInt32LE(MESSAGE_HEADER_SIZE),\n        length: message.readInt32LE(MESSAGE_HEADER_SIZE + 4)\n    };\n    const compressorID = message[MESSAGE_HEADER_SIZE + 8];\n    const compressedBuffer = message.slice(MESSAGE_HEADER_SIZE + 9);\n    // recalculate based on wrapped opcode\n    const ResponseType = header.opCode === constants_2.OP_MSG ? commands_1.OpMsgResponse : commands_1.OpReply;\n    const messageBody = await decompress(compressorID, compressedBuffer);\n    if (messageBody.length !== header.length) {\n        throw new error_1.MongoDecompressionError('Message body and message header must be the same length');\n    }\n    return new ResponseType(message, header, messageBody);\n}\n//# sourceMappingURL=compression.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/compression.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/constants.js":
/*!*****************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/constants.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OP_MSG = exports.OP_COMPRESSED = exports.OP_DELETE = exports.OP_QUERY = exports.OP_INSERT = exports.OP_UPDATE = exports.OP_REPLY = exports.MIN_SUPPORTED_QE_SERVER_VERSION = exports.MIN_SUPPORTED_QE_WIRE_VERSION = exports.MAX_SUPPORTED_WIRE_VERSION = exports.MIN_SUPPORTED_WIRE_VERSION = exports.MAX_SUPPORTED_SERVER_VERSION = exports.MIN_SUPPORTED_SERVER_VERSION = void 0;\nexports.MIN_SUPPORTED_SERVER_VERSION = '4.0';\nexports.MAX_SUPPORTED_SERVER_VERSION = '8.0';\nexports.MIN_SUPPORTED_WIRE_VERSION = 7;\nexports.MAX_SUPPORTED_WIRE_VERSION = 25;\nexports.MIN_SUPPORTED_QE_WIRE_VERSION = 21;\nexports.MIN_SUPPORTED_QE_SERVER_VERSION = '7.0';\nexports.OP_REPLY = 1;\nexports.OP_UPDATE = 2001;\nexports.OP_INSERT = 2002;\nexports.OP_QUERY = 2004;\nexports.OP_DELETE = 2006;\nexports.OP_COMPRESSED = 2012;\nexports.OP_MSG = 2013;\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL3dpcmVfcHJvdG9jb2wvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGNBQWMsR0FBRyxxQkFBcUIsR0FBRyxpQkFBaUIsR0FBRyxnQkFBZ0IsR0FBRyxpQkFBaUIsR0FBRyxpQkFBaUIsR0FBRyxnQkFBZ0IsR0FBRyx1Q0FBdUMsR0FBRyxxQ0FBcUMsR0FBRyxrQ0FBa0MsR0FBRyxrQ0FBa0MsR0FBRyxvQ0FBb0MsR0FBRyxvQ0FBb0M7QUFDbFgsb0NBQW9DO0FBQ3BDLG9DQUFvQztBQUNwQyxrQ0FBa0M7QUFDbEMsa0NBQWtDO0FBQ2xDLHFDQUFxQztBQUNyQyx1Q0FBdUM7QUFDdkMsZ0JBQWdCO0FBQ2hCLGlCQUFpQjtBQUNqQixpQkFBaUI7QUFDakIsZ0JBQWdCO0FBQ2hCLGlCQUFpQjtBQUNqQixxQkFBcUI7QUFDckIsY0FBYztBQUNkIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL3dpcmVfcHJvdG9jb2wvY29uc3RhbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PUF9NU0cgPSBleHBvcnRzLk9QX0NPTVBSRVNTRUQgPSBleHBvcnRzLk9QX0RFTEVURSA9IGV4cG9ydHMuT1BfUVVFUlkgPSBleHBvcnRzLk9QX0lOU0VSVCA9IGV4cG9ydHMuT1BfVVBEQVRFID0gZXhwb3J0cy5PUF9SRVBMWSA9IGV4cG9ydHMuTUlOX1NVUFBPUlRFRF9RRV9TRVJWRVJfVkVSU0lPTiA9IGV4cG9ydHMuTUlOX1NVUFBPUlRFRF9RRV9XSVJFX1ZFUlNJT04gPSBleHBvcnRzLk1BWF9TVVBQT1JURURfV0lSRV9WRVJTSU9OID0gZXhwb3J0cy5NSU5fU1VQUE9SVEVEX1dJUkVfVkVSU0lPTiA9IGV4cG9ydHMuTUFYX1NVUFBPUlRFRF9TRVJWRVJfVkVSU0lPTiA9IGV4cG9ydHMuTUlOX1NVUFBPUlRFRF9TRVJWRVJfVkVSU0lPTiA9IHZvaWQgMDtcbmV4cG9ydHMuTUlOX1NVUFBPUlRFRF9TRVJWRVJfVkVSU0lPTiA9ICc0LjAnO1xuZXhwb3J0cy5NQVhfU1VQUE9SVEVEX1NFUlZFUl9WRVJTSU9OID0gJzguMCc7XG5leHBvcnRzLk1JTl9TVVBQT1JURURfV0lSRV9WRVJTSU9OID0gNztcbmV4cG9ydHMuTUFYX1NVUFBPUlRFRF9XSVJFX1ZFUlNJT04gPSAyNTtcbmV4cG9ydHMuTUlOX1NVUFBPUlRFRF9RRV9XSVJFX1ZFUlNJT04gPSAyMTtcbmV4cG9ydHMuTUlOX1NVUFBPUlRFRF9RRV9TRVJWRVJfVkVSU0lPTiA9ICc3LjAnO1xuZXhwb3J0cy5PUF9SRVBMWSA9IDE7XG5leHBvcnRzLk9QX1VQREFURSA9IDIwMDE7XG5leHBvcnRzLk9QX0lOU0VSVCA9IDIwMDI7XG5leHBvcnRzLk9QX1FVRVJZID0gMjAwNDtcbmV4cG9ydHMuT1BfREVMRVRFID0gMjAwNjtcbmV4cG9ydHMuT1BfQ09NUFJFU1NFRCA9IDIwMTI7XG5leHBvcnRzLk9QX01TRyA9IDIwMTM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/constants.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/on_data.js":
/*!***************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/on_data.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.onData = onData;\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\n/**\n * onData is adapted from Node.js' events.on helper\n * https://nodejs.org/api/events.html#eventsonemitter-eventname-options\n *\n * Returns an AsyncIterator that iterates each 'data' event emitted from emitter.\n * It will reject upon an error event.\n */\nfunction onData(emitter) {\n    // Setup pending events and pending promise lists\n    /**\n     * When the caller has not yet called .next(), we store the\n     * value from the event in this list. Next time they call .next()\n     * we pull the first value out of this list and resolve a promise with it.\n     */\n    const unconsumedEvents = new utils_1.List();\n    /**\n     * When there has not yet been an event, a new promise will be created\n     * and implicitly stored in this list. When an event occurs we take the first\n     * promise in this list and resolve it.\n     */\n    const unconsumedPromises = new utils_1.List();\n    /**\n     * Stored an error created by an error event.\n     * This error will turn into a rejection for the subsequent .next() call\n     */\n    let error = null;\n    /** Set to true only after event listeners have been removed. */\n    let finished = false;\n    const iterator = {\n        next() {\n            // First, we consume all unread events\n            const value = unconsumedEvents.shift();\n            if (value != null) {\n                return Promise.resolve({ value, done: false });\n            }\n            // Then we error, if an error happened\n            // This happens one time if at all, because after 'error'\n            // we stop listening\n            if (error != null) {\n                const p = Promise.reject(error);\n                // Only the first element errors\n                error = null;\n                return p;\n            }\n            // If the iterator is finished, resolve to done\n            if (finished)\n                return closeHandler();\n            // Wait until an event happens\n            const { promise, resolve, reject } = (0, utils_1.promiseWithResolvers)();\n            unconsumedPromises.push({ resolve, reject });\n            return promise;\n        },\n        return() {\n            return closeHandler();\n        },\n        throw(err) {\n            errorHandler(err);\n            return Promise.resolve({ value: undefined, done: true });\n        },\n        [Symbol.asyncIterator]() {\n            return this;\n        }\n    };\n    // Adding event handlers\n    emitter.on('data', eventHandler);\n    emitter.on('error', errorHandler);\n    return iterator;\n    function eventHandler(value) {\n        const promise = unconsumedPromises.shift();\n        if (promise != null)\n            promise.resolve({ value, done: false });\n        else\n            unconsumedEvents.push(value);\n    }\n    function errorHandler(err) {\n        const promise = unconsumedPromises.shift();\n        if (promise != null)\n            promise.reject(err);\n        else\n            error = err;\n        void closeHandler();\n    }\n    function closeHandler() {\n        // Adding event handlers\n        emitter.off('data', eventHandler);\n        emitter.off('error', errorHandler);\n        finished = true;\n        const doneResult = { value: undefined, done: finished };\n        for (const promise of unconsumedPromises) {\n            promise.resolve(doneResult);\n        }\n        return Promise.resolve(doneResult);\n    }\n}\n//# sourceMappingURL=on_data.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL3dpcmVfcHJvdG9jb2wvb25fZGF0YS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxjQUFjO0FBQ2QsZ0JBQWdCLG1CQUFPLENBQUMsaUdBQWE7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLG9CQUFvQjtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDJCQUEyQjtBQUMvQyxzQ0FBc0MsaUJBQWlCO0FBQ3ZEO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLHFDQUFxQyw4QkFBOEI7QUFDbkUsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsb0JBQW9CO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL3dpcmVfcHJvdG9jb2wvb25fZGF0YS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMub25EYXRhID0gb25EYXRhO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsc1wiKTtcbi8qKlxuICogb25EYXRhIGlzIGFkYXB0ZWQgZnJvbSBOb2RlLmpzJyBldmVudHMub24gaGVscGVyXG4gKiBodHRwczovL25vZGVqcy5vcmcvYXBpL2V2ZW50cy5odG1sI2V2ZW50c29uZW1pdHRlci1ldmVudG5hbWUtb3B0aW9uc1xuICpcbiAqIFJldHVybnMgYW4gQXN5bmNJdGVyYXRvciB0aGF0IGl0ZXJhdGVzIGVhY2ggJ2RhdGEnIGV2ZW50IGVtaXR0ZWQgZnJvbSBlbWl0dGVyLlxuICogSXQgd2lsbCByZWplY3QgdXBvbiBhbiBlcnJvciBldmVudC5cbiAqL1xuZnVuY3Rpb24gb25EYXRhKGVtaXR0ZXIpIHtcbiAgICAvLyBTZXR1cCBwZW5kaW5nIGV2ZW50cyBhbmQgcGVuZGluZyBwcm9taXNlIGxpc3RzXG4gICAgLyoqXG4gICAgICogV2hlbiB0aGUgY2FsbGVyIGhhcyBub3QgeWV0IGNhbGxlZCAubmV4dCgpLCB3ZSBzdG9yZSB0aGVcbiAgICAgKiB2YWx1ZSBmcm9tIHRoZSBldmVudCBpbiB0aGlzIGxpc3QuIE5leHQgdGltZSB0aGV5IGNhbGwgLm5leHQoKVxuICAgICAqIHdlIHB1bGwgdGhlIGZpcnN0IHZhbHVlIG91dCBvZiB0aGlzIGxpc3QgYW5kIHJlc29sdmUgYSBwcm9taXNlIHdpdGggaXQuXG4gICAgICovXG4gICAgY29uc3QgdW5jb25zdW1lZEV2ZW50cyA9IG5ldyB1dGlsc18xLkxpc3QoKTtcbiAgICAvKipcbiAgICAgKiBXaGVuIHRoZXJlIGhhcyBub3QgeWV0IGJlZW4gYW4gZXZlbnQsIGEgbmV3IHByb21pc2Ugd2lsbCBiZSBjcmVhdGVkXG4gICAgICogYW5kIGltcGxpY2l0bHkgc3RvcmVkIGluIHRoaXMgbGlzdC4gV2hlbiBhbiBldmVudCBvY2N1cnMgd2UgdGFrZSB0aGUgZmlyc3RcbiAgICAgKiBwcm9taXNlIGluIHRoaXMgbGlzdCBhbmQgcmVzb2x2ZSBpdC5cbiAgICAgKi9cbiAgICBjb25zdCB1bmNvbnN1bWVkUHJvbWlzZXMgPSBuZXcgdXRpbHNfMS5MaXN0KCk7XG4gICAgLyoqXG4gICAgICogU3RvcmVkIGFuIGVycm9yIGNyZWF0ZWQgYnkgYW4gZXJyb3IgZXZlbnQuXG4gICAgICogVGhpcyBlcnJvciB3aWxsIHR1cm4gaW50byBhIHJlamVjdGlvbiBmb3IgdGhlIHN1YnNlcXVlbnQgLm5leHQoKSBjYWxsXG4gICAgICovXG4gICAgbGV0IGVycm9yID0gbnVsbDtcbiAgICAvKiogU2V0IHRvIHRydWUgb25seSBhZnRlciBldmVudCBsaXN0ZW5lcnMgaGF2ZSBiZWVuIHJlbW92ZWQuICovXG4gICAgbGV0IGZpbmlzaGVkID0gZmFsc2U7XG4gICAgY29uc3QgaXRlcmF0b3IgPSB7XG4gICAgICAgIG5leHQoKSB7XG4gICAgICAgICAgICAvLyBGaXJzdCwgd2UgY29uc3VtZSBhbGwgdW5yZWFkIGV2ZW50c1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB1bmNvbnN1bWVkRXZlbnRzLnNoaWZ0KCk7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyB2YWx1ZSwgZG9uZTogZmFsc2UgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBUaGVuIHdlIGVycm9yLCBpZiBhbiBlcnJvciBoYXBwZW5lZFxuICAgICAgICAgICAgLy8gVGhpcyBoYXBwZW5zIG9uZSB0aW1lIGlmIGF0IGFsbCwgYmVjYXVzZSBhZnRlciAnZXJyb3InXG4gICAgICAgICAgICAvLyB3ZSBzdG9wIGxpc3RlbmluZ1xuICAgICAgICAgICAgaWYgKGVycm9yICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwID0gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIC8vIE9ubHkgdGhlIGZpcnN0IGVsZW1lbnQgZXJyb3JzXG4gICAgICAgICAgICAgICAgZXJyb3IgPSBudWxsO1xuICAgICAgICAgICAgICAgIHJldHVybiBwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgdGhlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCByZXNvbHZlIHRvIGRvbmVcbiAgICAgICAgICAgIGlmIChmaW5pc2hlZClcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xvc2VIYW5kbGVyKCk7XG4gICAgICAgICAgICAvLyBXYWl0IHVudGlsIGFuIGV2ZW50IGhhcHBlbnNcbiAgICAgICAgICAgIGNvbnN0IHsgcHJvbWlzZSwgcmVzb2x2ZSwgcmVqZWN0IH0gPSAoMCwgdXRpbHNfMS5wcm9taXNlV2l0aFJlc29sdmVycykoKTtcbiAgICAgICAgICAgIHVuY29uc3VtZWRQcm9taXNlcy5wdXNoKHsgcmVzb2x2ZSwgcmVqZWN0IH0pO1xuICAgICAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICAgIH0sXG4gICAgICAgIHJldHVybigpIHtcbiAgICAgICAgICAgIHJldHVybiBjbG9zZUhhbmRsZXIoKTtcbiAgICAgICAgfSxcbiAgICAgICAgdGhyb3coZXJyKSB7XG4gICAgICAgICAgICBlcnJvckhhbmRsZXIoZXJyKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH0pO1xuICAgICAgICB9LFxuICAgICAgICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIEFkZGluZyBldmVudCBoYW5kbGVyc1xuICAgIGVtaXR0ZXIub24oJ2RhdGEnLCBldmVudEhhbmRsZXIpO1xuICAgIGVtaXR0ZXIub24oJ2Vycm9yJywgZXJyb3JIYW5kbGVyKTtcbiAgICByZXR1cm4gaXRlcmF0b3I7XG4gICAgZnVuY3Rpb24gZXZlbnRIYW5kbGVyKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB1bmNvbnN1bWVkUHJvbWlzZXMuc2hpZnQoKTtcbiAgICAgICAgaWYgKHByb21pc2UgIT0gbnVsbClcbiAgICAgICAgICAgIHByb21pc2UucmVzb2x2ZSh7IHZhbHVlLCBkb25lOiBmYWxzZSB9KTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdW5jb25zdW1lZEV2ZW50cy5wdXNoKHZhbHVlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZXJyb3JIYW5kbGVyKGVycikge1xuICAgICAgICBjb25zdCBwcm9taXNlID0gdW5jb25zdW1lZFByb21pc2VzLnNoaWZ0KCk7XG4gICAgICAgIGlmIChwcm9taXNlICE9IG51bGwpXG4gICAgICAgICAgICBwcm9taXNlLnJlamVjdChlcnIpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBlcnJvciA9IGVycjtcbiAgICAgICAgdm9pZCBjbG9zZUhhbmRsZXIoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY2xvc2VIYW5kbGVyKCkge1xuICAgICAgICAvLyBBZGRpbmcgZXZlbnQgaGFuZGxlcnNcbiAgICAgICAgZW1pdHRlci5vZmYoJ2RhdGEnLCBldmVudEhhbmRsZXIpO1xuICAgICAgICBlbWl0dGVyLm9mZignZXJyb3InLCBlcnJvckhhbmRsZXIpO1xuICAgICAgICBmaW5pc2hlZCA9IHRydWU7XG4gICAgICAgIGNvbnN0IGRvbmVSZXN1bHQgPSB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IGZpbmlzaGVkIH07XG4gICAgICAgIGZvciAoY29uc3QgcHJvbWlzZSBvZiB1bmNvbnN1bWVkUHJvbWlzZXMpIHtcbiAgICAgICAgICAgIHByb21pc2UucmVzb2x2ZShkb25lUmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGRvbmVSZXN1bHQpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9uX2RhdGEuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/on_data.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/on_demand/document.js":
/*!**************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/on_demand/document.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OnDemandDocument = void 0;\nconst bson_1 = __webpack_require__(/*! ../../../bson */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\");\n/** @internal */\nclass OnDemandDocument {\n    constructor(\n    /** BSON bytes, this document begins at offset */\n    bson, \n    /** The start of the document */\n    offset = 0, \n    /** If this is an embedded document, indicates if this was a BSON array */\n    isArray = false, \n    /** If elements was already calculated */\n    elements) {\n        this.bson = bson;\n        this.offset = offset;\n        this.isArray = isArray;\n        /**\n         * Maps JS strings to elements and jsValues for speeding up subsequent lookups.\n         * - If `false` then name does not exist in the BSON document\n         * - If `CachedBSONElement` instance name exists\n         * - If `cache[name].value == null` jsValue has not yet been parsed\n         *   - Null/Undefined values do not get cached because they are zero-length values.\n         */\n        this.cache = Object.create(null);\n        /** Caches the index of elements that have been named */\n        this.indexFound = Object.create(null);\n        this.elements = elements ?? (0, bson_1.parseToElementsToArray)(this.bson, offset);\n    }\n    /** Only supports basic latin strings */\n    isElementName(name, element) {\n        const nameLength = element[2 /* BSONElementOffset.nameLength */];\n        const nameOffset = element[1 /* BSONElementOffset.nameOffset */];\n        if (name.length !== nameLength)\n            return false;\n        const nameEnd = nameOffset + nameLength;\n        for (let byteIndex = nameOffset, charIndex = 0; charIndex < name.length && byteIndex < nameEnd; charIndex++, byteIndex++) {\n            if (this.bson[byteIndex] !== name.charCodeAt(charIndex))\n                return false;\n        }\n        return true;\n    }\n    /**\n     * Seeks into the elements array for an element matching the given name.\n     *\n     * @remarks\n     * Caching:\n     * - Caches the existence of a property making subsequent look ups for non-existent properties return immediately\n     * - Caches names mapped to elements to avoid reiterating the array and comparing the name again\n     * - Caches the index at which an element has been found to prevent rechecking against elements already determined to belong to another name\n     *\n     * @param name - a basic latin string name of a BSON element\n     * @returns\n     */\n    getElement(name) {\n        const cachedElement = this.cache[name];\n        if (cachedElement === false)\n            return null;\n        if (cachedElement != null) {\n            return cachedElement;\n        }\n        if (typeof name === 'number') {\n            if (this.isArray) {\n                if (name < this.elements.length) {\n                    const element = this.elements[name];\n                    const cachedElement = { element, value: undefined };\n                    this.cache[name] = cachedElement;\n                    this.indexFound[name] = true;\n                    return cachedElement;\n                }\n                else {\n                    return null;\n                }\n            }\n            else {\n                return null;\n            }\n        }\n        for (let index = 0; index < this.elements.length; index++) {\n            const element = this.elements[index];\n            // skip this element if it has already been associated with a name\n            if (!(index in this.indexFound) && this.isElementName(name, element)) {\n                const cachedElement = { element, value: undefined };\n                this.cache[name] = cachedElement;\n                this.indexFound[index] = true;\n                return cachedElement;\n            }\n        }\n        this.cache[name] = false;\n        return null;\n    }\n    toJSValue(element, as) {\n        const type = element[0 /* BSONElementOffset.type */];\n        const offset = element[3 /* BSONElementOffset.offset */];\n        const length = element[4 /* BSONElementOffset.length */];\n        if (as !== type) {\n            return null;\n        }\n        switch (as) {\n            case bson_1.BSONType.null:\n            case bson_1.BSONType.undefined:\n                return null;\n            case bson_1.BSONType.double:\n                return (0, bson_1.getFloat64LE)(this.bson, offset);\n            case bson_1.BSONType.int:\n                return (0, bson_1.getInt32LE)(this.bson, offset);\n            case bson_1.BSONType.long:\n                return (0, bson_1.getBigInt64LE)(this.bson, offset);\n            case bson_1.BSONType.bool:\n                return Boolean(this.bson[offset]);\n            case bson_1.BSONType.objectId:\n                return new bson_1.ObjectId(this.bson.subarray(offset, offset + 12));\n            case bson_1.BSONType.timestamp:\n                return new bson_1.Timestamp((0, bson_1.getBigInt64LE)(this.bson, offset));\n            case bson_1.BSONType.string:\n                return (0, bson_1.toUTF8)(this.bson, offset + 4, offset + length - 1, false);\n            case bson_1.BSONType.binData: {\n                const totalBinarySize = (0, bson_1.getInt32LE)(this.bson, offset);\n                const subType = this.bson[offset + 4];\n                if (subType === 2) {\n                    const subType2BinarySize = (0, bson_1.getInt32LE)(this.bson, offset + 1 + 4);\n                    if (subType2BinarySize < 0)\n                        throw new bson_1.BSONError('Negative binary type element size found for subtype 0x02');\n                    if (subType2BinarySize > totalBinarySize - 4)\n                        throw new bson_1.BSONError('Binary type with subtype 0x02 contains too long binary size');\n                    if (subType2BinarySize < totalBinarySize - 4)\n                        throw new bson_1.BSONError('Binary type with subtype 0x02 contains too short binary size');\n                    return new bson_1.Binary(this.bson.subarray(offset + 1 + 4 + 4, offset + 1 + 4 + 4 + subType2BinarySize), 2);\n                }\n                return new bson_1.Binary(this.bson.subarray(offset + 1 + 4, offset + 1 + 4 + totalBinarySize), subType);\n            }\n            case bson_1.BSONType.date:\n                // Pretend this is correct.\n                return new Date(Number((0, bson_1.getBigInt64LE)(this.bson, offset)));\n            case bson_1.BSONType.object:\n                return new OnDemandDocument(this.bson, offset);\n            case bson_1.BSONType.array:\n                return new OnDemandDocument(this.bson, offset, true);\n            default:\n                throw new bson_1.BSONError(`Unsupported BSON type: ${as}`);\n        }\n    }\n    /**\n     * Returns the number of elements in this BSON document\n     */\n    size() {\n        return this.elements.length;\n    }\n    /**\n     * Checks for the existence of an element by name.\n     *\n     * @remarks\n     * Uses `getElement` with the expectation that will populate caches such that a `has` call\n     * followed by a `getElement` call will not repeat the cost paid by the first look up.\n     *\n     * @param name - element name\n     */\n    has(name) {\n        const cachedElement = this.cache[name];\n        if (cachedElement === false)\n            return false;\n        if (cachedElement != null)\n            return true;\n        return this.getElement(name) != null;\n    }\n    get(name, as, required) {\n        const element = this.getElement(name);\n        if (element == null) {\n            if (required === true) {\n                throw new bson_1.BSONError(`BSON element \"${name}\" is missing`);\n            }\n            else {\n                return null;\n            }\n        }\n        if (element.value == null) {\n            const value = this.toJSValue(element.element, as);\n            if (value == null) {\n                if (required === true) {\n                    throw new bson_1.BSONError(`BSON element \"${name}\" is missing`);\n                }\n                else {\n                    return null;\n                }\n            }\n            // It is important to never store null\n            element.value = value;\n        }\n        return element.value;\n    }\n    getNumber(name, required) {\n        const maybeBool = this.get(name, bson_1.BSONType.bool);\n        const bool = maybeBool == null ? null : maybeBool ? 1 : 0;\n        const maybeLong = this.get(name, bson_1.BSONType.long);\n        const long = maybeLong == null ? null : Number(maybeLong);\n        const result = bool ?? long ?? this.get(name, bson_1.BSONType.int) ?? this.get(name, bson_1.BSONType.double);\n        if (required === true && result == null) {\n            throw new bson_1.BSONError(`BSON element \"${name}\" is missing`);\n        }\n        return result;\n    }\n    /**\n     * Deserialize this object, DOES NOT cache result so avoid multiple invocations\n     * @param options - BSON deserialization options\n     */\n    toObject(options) {\n        return (0, bson_1.deserialize)(this.bson, {\n            ...options,\n            index: this.offset,\n            allowObjectSmallerThanBufferSize: true\n        });\n    }\n    /** Returns this document's bytes only */\n    toBytes() {\n        const size = (0, bson_1.getInt32LE)(this.bson, this.offset);\n        return this.bson.subarray(this.offset, this.offset + size);\n    }\n}\nexports.OnDemandDocument = OnDemandDocument;\n//# sourceMappingURL=document.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/on_demand/document.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/responses.js":
/*!*****************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/responses.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ClientBulkWriteCursorResponse = exports.ExplainedCursorResponse = exports.CursorResponse = exports.MongoDBResponse = void 0;\nexports.isErrorResponse = isErrorResponse;\nconst bson_1 = __webpack_require__(/*! ../../bson */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst document_1 = __webpack_require__(/*! ./on_demand/document */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/on_demand/document.js\");\n/**\n * Accepts a BSON payload and checks for na \"ok: 0\" element.\n * This utility is intended to prevent calling response class constructors\n * that expect the result to be a success and demand certain properties to exist.\n *\n * For example, a cursor response always expects a cursor embedded document.\n * In order to write the class such that the properties reflect that assertion (non-null)\n * we cannot invoke the subclass constructor if the BSON represents an error.\n *\n * @param bytes - BSON document returned from the server\n */\nfunction isErrorResponse(bson, elements) {\n    for (let eIdx = 0; eIdx < elements.length; eIdx++) {\n        const element = elements[eIdx];\n        if (element[2 /* BSONElementOffset.nameLength */] === 2) {\n            const nameOffset = element[1 /* BSONElementOffset.nameOffset */];\n            // 111 == \"o\", 107 == \"k\"\n            if (bson[nameOffset] === 111 && bson[nameOffset + 1] === 107) {\n                const valueOffset = element[3 /* BSONElementOffset.offset */];\n                const valueLength = element[4 /* BSONElementOffset.length */];\n                // If any byte in the length of the ok number (works for any type) is non zero,\n                // then it is considered \"ok: 1\"\n                for (let i = valueOffset; i < valueOffset + valueLength; i++) {\n                    if (bson[i] !== 0x00)\n                        return false;\n                }\n                return true;\n            }\n        }\n    }\n    return true;\n}\n/** @internal */\nclass MongoDBResponse extends document_1.OnDemandDocument {\n    get(name, as, required) {\n        try {\n            return super.get(name, as, required);\n        }\n        catch (cause) {\n            throw new error_1.MongoUnexpectedServerResponseError(cause.message, { cause });\n        }\n    }\n    static is(value) {\n        return value instanceof MongoDBResponse;\n    }\n    static make(bson) {\n        const elements = (0, bson_1.parseToElementsToArray)(bson, 0);\n        const isError = isErrorResponse(bson, elements);\n        return isError\n            ? new MongoDBResponse(bson, 0, false, elements)\n            : new this(bson, 0, false, elements);\n    }\n    /**\n     * Drivers can safely assume that the `recoveryToken` field is always a BSON document but drivers MUST NOT modify the\n     * contents of the document.\n     */\n    get recoveryToken() {\n        return (this.get('recoveryToken', bson_1.BSONType.object)?.toObject({\n            promoteValues: false,\n            promoteLongs: false,\n            promoteBuffers: false,\n            validation: { utf8: true }\n        }) ?? null);\n    }\n    /**\n     * The server creates a cursor in response to a snapshot find/aggregate command and reports atClusterTime within the cursor field in the response.\n     * For the distinct command the server adds a top-level atClusterTime field to the response.\n     * The atClusterTime field represents the timestamp of the read and is guaranteed to be majority committed.\n     */\n    get atClusterTime() {\n        return (this.get('cursor', bson_1.BSONType.object)?.get('atClusterTime', bson_1.BSONType.timestamp) ??\n            this.get('atClusterTime', bson_1.BSONType.timestamp));\n    }\n    get operationTime() {\n        return this.get('operationTime', bson_1.BSONType.timestamp);\n    }\n    /** Normalizes whatever BSON value is \"ok\" to a JS number 1 or 0. */\n    get ok() {\n        return this.getNumber('ok') ? 1 : 0;\n    }\n    get $err() {\n        return this.get('$err', bson_1.BSONType.string);\n    }\n    get errmsg() {\n        return this.get('errmsg', bson_1.BSONType.string);\n    }\n    get code() {\n        return this.getNumber('code');\n    }\n    get $clusterTime() {\n        if (!('clusterTime' in this)) {\n            const clusterTimeDoc = this.get('$clusterTime', bson_1.BSONType.object);\n            if (clusterTimeDoc == null) {\n                this.clusterTime = null;\n                return null;\n            }\n            const clusterTime = clusterTimeDoc.get('clusterTime', bson_1.BSONType.timestamp, true);\n            const signature = clusterTimeDoc.get('signature', bson_1.BSONType.object)?.toObject();\n            // @ts-expect-error: `signature` is incorrectly typed. It is public API.\n            this.clusterTime = { clusterTime, signature };\n        }\n        return this.clusterTime ?? null;\n    }\n    toObject(options) {\n        const exactBSONOptions = {\n            ...(0, bson_1.pluckBSONSerializeOptions)(options ?? {}),\n            validation: (0, bson_1.parseUtf8ValidationOption)(options)\n        };\n        return super.toObject(exactBSONOptions);\n    }\n}\nexports.MongoDBResponse = MongoDBResponse;\n// {ok:1}\nMongoDBResponse.empty = new MongoDBResponse(new Uint8Array([13, 0, 0, 0, 16, 111, 107, 0, 1, 0, 0, 0, 0]));\n/** @internal */\nclass CursorResponse extends MongoDBResponse {\n    constructor() {\n        super(...arguments);\n        this._batch = null;\n        this.iterated = 0;\n        this._encryptedBatch = null;\n    }\n    static is(value) {\n        return value instanceof CursorResponse || value === CursorResponse.emptyGetMore;\n    }\n    get cursor() {\n        return this.get('cursor', bson_1.BSONType.object, true);\n    }\n    get id() {\n        try {\n            return bson_1.Long.fromBigInt(this.cursor.get('id', bson_1.BSONType.long, true));\n        }\n        catch (cause) {\n            throw new error_1.MongoUnexpectedServerResponseError(cause.message, { cause });\n        }\n    }\n    get ns() {\n        const namespace = this.cursor.get('ns', bson_1.BSONType.string);\n        if (namespace != null)\n            return (0, utils_1.ns)(namespace);\n        return null;\n    }\n    get length() {\n        return Math.max(this.batchSize - this.iterated, 0);\n    }\n    get encryptedBatch() {\n        if (this.encryptedResponse == null)\n            return null;\n        if (this._encryptedBatch != null)\n            return this._encryptedBatch;\n        const cursor = this.encryptedResponse?.get('cursor', bson_1.BSONType.object);\n        if (cursor?.has('firstBatch'))\n            this._encryptedBatch = cursor.get('firstBatch', bson_1.BSONType.array, true);\n        else if (cursor?.has('nextBatch'))\n            this._encryptedBatch = cursor.get('nextBatch', bson_1.BSONType.array, true);\n        else\n            throw new error_1.MongoUnexpectedServerResponseError('Cursor document did not contain a batch');\n        return this._encryptedBatch;\n    }\n    get batch() {\n        if (this._batch != null)\n            return this._batch;\n        const cursor = this.cursor;\n        if (cursor.has('firstBatch'))\n            this._batch = cursor.get('firstBatch', bson_1.BSONType.array, true);\n        else if (cursor.has('nextBatch'))\n            this._batch = cursor.get('nextBatch', bson_1.BSONType.array, true);\n        else\n            throw new error_1.MongoUnexpectedServerResponseError('Cursor document did not contain a batch');\n        return this._batch;\n    }\n    get batchSize() {\n        return this.batch?.size();\n    }\n    get postBatchResumeToken() {\n        return (this.cursor.get('postBatchResumeToken', bson_1.BSONType.object)?.toObject({\n            promoteValues: false,\n            promoteLongs: false,\n            promoteBuffers: false,\n            validation: { utf8: true }\n        }) ?? null);\n    }\n    shift(options) {\n        if (this.iterated >= this.batchSize) {\n            return null;\n        }\n        const result = this.batch.get(this.iterated, bson_1.BSONType.object, true) ?? null;\n        const encryptedResult = this.encryptedBatch?.get(this.iterated, bson_1.BSONType.object, true) ?? null;\n        this.iterated += 1;\n        if (options?.raw) {\n            return result.toBytes();\n        }\n        else {\n            const object = result.toObject(options);\n            if (encryptedResult) {\n                (0, utils_1.decorateDecryptionResult)(object, encryptedResult.toObject(options), true);\n            }\n            return object;\n        }\n    }\n    clear() {\n        this.iterated = this.batchSize;\n    }\n}\nexports.CursorResponse = CursorResponse;\n/**\n * This supports a feature of the FindCursor.\n * It is an optimization to avoid an extra getMore when the limit has been reached\n */\nCursorResponse.emptyGetMore = {\n    id: new bson_1.Long(0),\n    length: 0,\n    shift: () => null\n};\n/**\n * Explain responses have nothing to do with cursor responses\n * This class serves to temporarily avoid refactoring how cursors handle\n * explain responses which is to detect that the response is not cursor-like and return the explain\n * result as the \"first and only\" document in the \"batch\" and end the \"cursor\"\n */\nclass ExplainedCursorResponse extends CursorResponse {\n    constructor() {\n        super(...arguments);\n        this.isExplain = true;\n        this._length = 1;\n    }\n    get id() {\n        return bson_1.Long.fromBigInt(0n);\n    }\n    get batchSize() {\n        return 0;\n    }\n    get ns() {\n        return null;\n    }\n    get length() {\n        return this._length;\n    }\n    shift(options) {\n        if (this._length === 0)\n            return null;\n        this._length -= 1;\n        return this.toObject(options);\n    }\n}\nexports.ExplainedCursorResponse = ExplainedCursorResponse;\n/**\n * Client bulk writes have some extra metadata at the top level that needs to be\n * included in the result returned to the user.\n */\nclass ClientBulkWriteCursorResponse extends CursorResponse {\n    get insertedCount() {\n        return this.get('nInserted', bson_1.BSONType.int, true);\n    }\n    get upsertedCount() {\n        return this.get('nUpserted', bson_1.BSONType.int, true);\n    }\n    get matchedCount() {\n        return this.get('nMatched', bson_1.BSONType.int, true);\n    }\n    get modifiedCount() {\n        return this.get('nModified', bson_1.BSONType.int, true);\n    }\n    get deletedCount() {\n        return this.get('nDeleted', bson_1.BSONType.int, true);\n    }\n    get writeConcernError() {\n        return this.get('writeConcernError', bson_1.BSONType.object, false);\n    }\n}\nexports.ClientBulkWriteCursorResponse = ClientBulkWriteCursorResponse;\n//# sourceMappingURL=responses.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL3dpcmVfcHJvdG9jb2wvcmVzcG9uc2VzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFDQUFxQyxHQUFHLCtCQUErQixHQUFHLHNCQUFzQixHQUFHLHVCQUF1QjtBQUMxSCx1QkFBdUI7QUFDdkIsZUFBZSxtQkFBTyxDQUFDLCtGQUFZO0FBQ25DLGdCQUFnQixtQkFBTyxDQUFDLGlHQUFhO0FBQ3JDLGdCQUFnQixtQkFBTyxDQUFDLGlHQUFhO0FBQ3JDLG1CQUFtQixtQkFBTyxDQUFDLDBJQUFzQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsd0JBQXdCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQywrQkFBK0I7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRkFBa0YsT0FBTztBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUIsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkIsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRkFBa0YsT0FBTztBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUIsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL3dpcmVfcHJvdG9jb2wvcmVzcG9uc2VzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DbGllbnRCdWxrV3JpdGVDdXJzb3JSZXNwb25zZSA9IGV4cG9ydHMuRXhwbGFpbmVkQ3Vyc29yUmVzcG9uc2UgPSBleHBvcnRzLkN1cnNvclJlc3BvbnNlID0gZXhwb3J0cy5Nb25nb0RCUmVzcG9uc2UgPSB2b2lkIDA7XG5leHBvcnRzLmlzRXJyb3JSZXNwb25zZSA9IGlzRXJyb3JSZXNwb25zZTtcbmNvbnN0IGJzb25fMSA9IHJlcXVpcmUoXCIuLi8uLi9ic29uXCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi9lcnJvclwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHNcIik7XG5jb25zdCBkb2N1bWVudF8xID0gcmVxdWlyZShcIi4vb25fZGVtYW5kL2RvY3VtZW50XCIpO1xuLyoqXG4gKiBBY2NlcHRzIGEgQlNPTiBwYXlsb2FkIGFuZCBjaGVja3MgZm9yIG5hIFwib2s6IDBcIiBlbGVtZW50LlxuICogVGhpcyB1dGlsaXR5IGlzIGludGVuZGVkIHRvIHByZXZlbnQgY2FsbGluZyByZXNwb25zZSBjbGFzcyBjb25zdHJ1Y3RvcnNcbiAqIHRoYXQgZXhwZWN0IHRoZSByZXN1bHQgdG8gYmUgYSBzdWNjZXNzIGFuZCBkZW1hbmQgY2VydGFpbiBwcm9wZXJ0aWVzIHRvIGV4aXN0LlxuICpcbiAqIEZvciBleGFtcGxlLCBhIGN1cnNvciByZXNwb25zZSBhbHdheXMgZXhwZWN0cyBhIGN1cnNvciBlbWJlZGRlZCBkb2N1bWVudC5cbiAqIEluIG9yZGVyIHRvIHdyaXRlIHRoZSBjbGFzcyBzdWNoIHRoYXQgdGhlIHByb3BlcnRpZXMgcmVmbGVjdCB0aGF0IGFzc2VydGlvbiAobm9uLW51bGwpXG4gKiB3ZSBjYW5ub3QgaW52b2tlIHRoZSBzdWJjbGFzcyBjb25zdHJ1Y3RvciBpZiB0aGUgQlNPTiByZXByZXNlbnRzIGFuIGVycm9yLlxuICpcbiAqIEBwYXJhbSBieXRlcyAtIEJTT04gZG9jdW1lbnQgcmV0dXJuZWQgZnJvbSB0aGUgc2VydmVyXG4gKi9cbmZ1bmN0aW9uIGlzRXJyb3JSZXNwb25zZShic29uLCBlbGVtZW50cykge1xuICAgIGZvciAobGV0IGVJZHggPSAwOyBlSWR4IDwgZWxlbWVudHMubGVuZ3RoOyBlSWR4KyspIHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGVsZW1lbnRzW2VJZHhdO1xuICAgICAgICBpZiAoZWxlbWVudFsyIC8qIEJTT05FbGVtZW50T2Zmc2V0Lm5hbWVMZW5ndGggKi9dID09PSAyKSB7XG4gICAgICAgICAgICBjb25zdCBuYW1lT2Zmc2V0ID0gZWxlbWVudFsxIC8qIEJTT05FbGVtZW50T2Zmc2V0Lm5hbWVPZmZzZXQgKi9dO1xuICAgICAgICAgICAgLy8gMTExID09IFwib1wiLCAxMDcgPT0gXCJrXCJcbiAgICAgICAgICAgIGlmIChic29uW25hbWVPZmZzZXRdID09PSAxMTEgJiYgYnNvbltuYW1lT2Zmc2V0ICsgMV0gPT09IDEwNykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlT2Zmc2V0ID0gZWxlbWVudFszIC8qIEJTT05FbGVtZW50T2Zmc2V0Lm9mZnNldCAqL107XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWVMZW5ndGggPSBlbGVtZW50WzQgLyogQlNPTkVsZW1lbnRPZmZzZXQubGVuZ3RoICovXTtcbiAgICAgICAgICAgICAgICAvLyBJZiBhbnkgYnl0ZSBpbiB0aGUgbGVuZ3RoIG9mIHRoZSBvayBudW1iZXIgKHdvcmtzIGZvciBhbnkgdHlwZSkgaXMgbm9uIHplcm8sXG4gICAgICAgICAgICAgICAgLy8gdGhlbiBpdCBpcyBjb25zaWRlcmVkIFwib2s6IDFcIlxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSB2YWx1ZU9mZnNldDsgaSA8IHZhbHVlT2Zmc2V0ICsgdmFsdWVMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYnNvbltpXSAhPT0gMHgwMClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG4vKiogQGludGVybmFsICovXG5jbGFzcyBNb25nb0RCUmVzcG9uc2UgZXh0ZW5kcyBkb2N1bWVudF8xLk9uRGVtYW5kRG9jdW1lbnQge1xuICAgIGdldChuYW1lLCBhcywgcmVxdWlyZWQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBzdXBlci5nZXQobmFtZSwgYXMsIHJlcXVpcmVkKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoY2F1c2UpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvVW5leHBlY3RlZFNlcnZlclJlc3BvbnNlRXJyb3IoY2F1c2UubWVzc2FnZSwgeyBjYXVzZSB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgaXModmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgTW9uZ29EQlJlc3BvbnNlO1xuICAgIH1cbiAgICBzdGF0aWMgbWFrZShic29uKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gKDAsIGJzb25fMS5wYXJzZVRvRWxlbWVudHNUb0FycmF5KShic29uLCAwKTtcbiAgICAgICAgY29uc3QgaXNFcnJvciA9IGlzRXJyb3JSZXNwb25zZShic29uLCBlbGVtZW50cyk7XG4gICAgICAgIHJldHVybiBpc0Vycm9yXG4gICAgICAgICAgICA/IG5ldyBNb25nb0RCUmVzcG9uc2UoYnNvbiwgMCwgZmFsc2UsIGVsZW1lbnRzKVxuICAgICAgICAgICAgOiBuZXcgdGhpcyhic29uLCAwLCBmYWxzZSwgZWxlbWVudHMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEcml2ZXJzIGNhbiBzYWZlbHkgYXNzdW1lIHRoYXQgdGhlIGByZWNvdmVyeVRva2VuYCBmaWVsZCBpcyBhbHdheXMgYSBCU09OIGRvY3VtZW50IGJ1dCBkcml2ZXJzIE1VU1QgTk9UIG1vZGlmeSB0aGVcbiAgICAgKiBjb250ZW50cyBvZiB0aGUgZG9jdW1lbnQuXG4gICAgICovXG4gICAgZ2V0IHJlY292ZXJ5VG9rZW4oKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5nZXQoJ3JlY292ZXJ5VG9rZW4nLCBic29uXzEuQlNPTlR5cGUub2JqZWN0KT8udG9PYmplY3Qoe1xuICAgICAgICAgICAgcHJvbW90ZVZhbHVlczogZmFsc2UsXG4gICAgICAgICAgICBwcm9tb3RlTG9uZ3M6IGZhbHNlLFxuICAgICAgICAgICAgcHJvbW90ZUJ1ZmZlcnM6IGZhbHNlLFxuICAgICAgICAgICAgdmFsaWRhdGlvbjogeyB1dGY4OiB0cnVlIH1cbiAgICAgICAgfSkgPz8gbnVsbCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBzZXJ2ZXIgY3JlYXRlcyBhIGN1cnNvciBpbiByZXNwb25zZSB0byBhIHNuYXBzaG90IGZpbmQvYWdncmVnYXRlIGNvbW1hbmQgYW5kIHJlcG9ydHMgYXRDbHVzdGVyVGltZSB3aXRoaW4gdGhlIGN1cnNvciBmaWVsZCBpbiB0aGUgcmVzcG9uc2UuXG4gICAgICogRm9yIHRoZSBkaXN0aW5jdCBjb21tYW5kIHRoZSBzZXJ2ZXIgYWRkcyBhIHRvcC1sZXZlbCBhdENsdXN0ZXJUaW1lIGZpZWxkIHRvIHRoZSByZXNwb25zZS5cbiAgICAgKiBUaGUgYXRDbHVzdGVyVGltZSBmaWVsZCByZXByZXNlbnRzIHRoZSB0aW1lc3RhbXAgb2YgdGhlIHJlYWQgYW5kIGlzIGd1YXJhbnRlZWQgdG8gYmUgbWFqb3JpdHkgY29tbWl0dGVkLlxuICAgICAqL1xuICAgIGdldCBhdENsdXN0ZXJUaW1lKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuZ2V0KCdjdXJzb3InLCBic29uXzEuQlNPTlR5cGUub2JqZWN0KT8uZ2V0KCdhdENsdXN0ZXJUaW1lJywgYnNvbl8xLkJTT05UeXBlLnRpbWVzdGFtcCkgPz9cbiAgICAgICAgICAgIHRoaXMuZ2V0KCdhdENsdXN0ZXJUaW1lJywgYnNvbl8xLkJTT05UeXBlLnRpbWVzdGFtcCkpO1xuICAgIH1cbiAgICBnZXQgb3BlcmF0aW9uVGltZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KCdvcGVyYXRpb25UaW1lJywgYnNvbl8xLkJTT05UeXBlLnRpbWVzdGFtcCk7XG4gICAgfVxuICAgIC8qKiBOb3JtYWxpemVzIHdoYXRldmVyIEJTT04gdmFsdWUgaXMgXCJva1wiIHRvIGEgSlMgbnVtYmVyIDEgb3IgMC4gKi9cbiAgICBnZXQgb2soKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE51bWJlcignb2snKSA/IDEgOiAwO1xuICAgIH1cbiAgICBnZXQgJGVycigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KCckZXJyJywgYnNvbl8xLkJTT05UeXBlLnN0cmluZyk7XG4gICAgfVxuICAgIGdldCBlcnJtc2coKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldCgnZXJybXNnJywgYnNvbl8xLkJTT05UeXBlLnN0cmluZyk7XG4gICAgfVxuICAgIGdldCBjb2RlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXROdW1iZXIoJ2NvZGUnKTtcbiAgICB9XG4gICAgZ2V0ICRjbHVzdGVyVGltZSgpIHtcbiAgICAgICAgaWYgKCEoJ2NsdXN0ZXJUaW1lJyBpbiB0aGlzKSkge1xuICAgICAgICAgICAgY29uc3QgY2x1c3RlclRpbWVEb2MgPSB0aGlzLmdldCgnJGNsdXN0ZXJUaW1lJywgYnNvbl8xLkJTT05UeXBlLm9iamVjdCk7XG4gICAgICAgICAgICBpZiAoY2x1c3RlclRpbWVEb2MgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2x1c3RlclRpbWUgPSBudWxsO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY2x1c3RlclRpbWUgPSBjbHVzdGVyVGltZURvYy5nZXQoJ2NsdXN0ZXJUaW1lJywgYnNvbl8xLkJTT05UeXBlLnRpbWVzdGFtcCwgdHJ1ZSk7XG4gICAgICAgICAgICBjb25zdCBzaWduYXR1cmUgPSBjbHVzdGVyVGltZURvYy5nZXQoJ3NpZ25hdHVyZScsIGJzb25fMS5CU09OVHlwZS5vYmplY3QpPy50b09iamVjdCgpO1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogYHNpZ25hdHVyZWAgaXMgaW5jb3JyZWN0bHkgdHlwZWQuIEl0IGlzIHB1YmxpYyBBUEkuXG4gICAgICAgICAgICB0aGlzLmNsdXN0ZXJUaW1lID0geyBjbHVzdGVyVGltZSwgc2lnbmF0dXJlIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuY2x1c3RlclRpbWUgPz8gbnVsbDtcbiAgICB9XG4gICAgdG9PYmplY3Qob3B0aW9ucykge1xuICAgICAgICBjb25zdCBleGFjdEJTT05PcHRpb25zID0ge1xuICAgICAgICAgICAgLi4uKDAsIGJzb25fMS5wbHVja0JTT05TZXJpYWxpemVPcHRpb25zKShvcHRpb25zID8/IHt9KSxcbiAgICAgICAgICAgIHZhbGlkYXRpb246ICgwLCBic29uXzEucGFyc2VVdGY4VmFsaWRhdGlvbk9wdGlvbikob3B0aW9ucylcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHN1cGVyLnRvT2JqZWN0KGV4YWN0QlNPTk9wdGlvbnMpO1xuICAgIH1cbn1cbmV4cG9ydHMuTW9uZ29EQlJlc3BvbnNlID0gTW9uZ29EQlJlc3BvbnNlO1xuLy8ge29rOjF9XG5Nb25nb0RCUmVzcG9uc2UuZW1wdHkgPSBuZXcgTW9uZ29EQlJlc3BvbnNlKG5ldyBVaW50OEFycmF5KFsxMywgMCwgMCwgMCwgMTYsIDExMSwgMTA3LCAwLCAxLCAwLCAwLCAwLCAwXSkpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgQ3Vyc29yUmVzcG9uc2UgZXh0ZW5kcyBNb25nb0RCUmVzcG9uc2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLl9iYXRjaCA9IG51bGw7XG4gICAgICAgIHRoaXMuaXRlcmF0ZWQgPSAwO1xuICAgICAgICB0aGlzLl9lbmNyeXB0ZWRCYXRjaCA9IG51bGw7XG4gICAgfVxuICAgIHN0YXRpYyBpcyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBDdXJzb3JSZXNwb25zZSB8fCB2YWx1ZSA9PT0gQ3Vyc29yUmVzcG9uc2UuZW1wdHlHZXRNb3JlO1xuICAgIH1cbiAgICBnZXQgY3Vyc29yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQoJ2N1cnNvcicsIGJzb25fMS5CU09OVHlwZS5vYmplY3QsIHRydWUpO1xuICAgIH1cbiAgICBnZXQgaWQoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYnNvbl8xLkxvbmcuZnJvbUJpZ0ludCh0aGlzLmN1cnNvci5nZXQoJ2lkJywgYnNvbl8xLkJTT05UeXBlLmxvbmcsIHRydWUpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoY2F1c2UpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvVW5leHBlY3RlZFNlcnZlclJlc3BvbnNlRXJyb3IoY2F1c2UubWVzc2FnZSwgeyBjYXVzZSB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgbnMoKSB7XG4gICAgICAgIGNvbnN0IG5hbWVzcGFjZSA9IHRoaXMuY3Vyc29yLmdldCgnbnMnLCBic29uXzEuQlNPTlR5cGUuc3RyaW5nKTtcbiAgICAgICAgaWYgKG5hbWVzcGFjZSAhPSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuICgwLCB1dGlsc18xLm5zKShuYW1lc3BhY2UpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZ2V0IGxlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KHRoaXMuYmF0Y2hTaXplIC0gdGhpcy5pdGVyYXRlZCwgMCk7XG4gICAgfVxuICAgIGdldCBlbmNyeXB0ZWRCYXRjaCgpIHtcbiAgICAgICAgaWYgKHRoaXMuZW5jcnlwdGVkUmVzcG9uc2UgPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBpZiAodGhpcy5fZW5jcnlwdGVkQmF0Y2ggIT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9lbmNyeXB0ZWRCYXRjaDtcbiAgICAgICAgY29uc3QgY3Vyc29yID0gdGhpcy5lbmNyeXB0ZWRSZXNwb25zZT8uZ2V0KCdjdXJzb3InLCBic29uXzEuQlNPTlR5cGUub2JqZWN0KTtcbiAgICAgICAgaWYgKGN1cnNvcj8uaGFzKCdmaXJzdEJhdGNoJykpXG4gICAgICAgICAgICB0aGlzLl9lbmNyeXB0ZWRCYXRjaCA9IGN1cnNvci5nZXQoJ2ZpcnN0QmF0Y2gnLCBic29uXzEuQlNPTlR5cGUuYXJyYXksIHRydWUpO1xuICAgICAgICBlbHNlIGlmIChjdXJzb3I/LmhhcygnbmV4dEJhdGNoJykpXG4gICAgICAgICAgICB0aGlzLl9lbmNyeXB0ZWRCYXRjaCA9IGN1cnNvci5nZXQoJ25leHRCYXRjaCcsIGJzb25fMS5CU09OVHlwZS5hcnJheSwgdHJ1ZSk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvVW5leHBlY3RlZFNlcnZlclJlc3BvbnNlRXJyb3IoJ0N1cnNvciBkb2N1bWVudCBkaWQgbm90IGNvbnRhaW4gYSBiYXRjaCcpO1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5jcnlwdGVkQmF0Y2g7XG4gICAgfVxuICAgIGdldCBiYXRjaCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2JhdGNoICE9IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYmF0Y2g7XG4gICAgICAgIGNvbnN0IGN1cnNvciA9IHRoaXMuY3Vyc29yO1xuICAgICAgICBpZiAoY3Vyc29yLmhhcygnZmlyc3RCYXRjaCcpKVxuICAgICAgICAgICAgdGhpcy5fYmF0Y2ggPSBjdXJzb3IuZ2V0KCdmaXJzdEJhdGNoJywgYnNvbl8xLkJTT05UeXBlLmFycmF5LCB0cnVlKTtcbiAgICAgICAgZWxzZSBpZiAoY3Vyc29yLmhhcygnbmV4dEJhdGNoJykpXG4gICAgICAgICAgICB0aGlzLl9iYXRjaCA9IGN1cnNvci5nZXQoJ25leHRCYXRjaCcsIGJzb25fMS5CU09OVHlwZS5hcnJheSwgdHJ1ZSk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvVW5leHBlY3RlZFNlcnZlclJlc3BvbnNlRXJyb3IoJ0N1cnNvciBkb2N1bWVudCBkaWQgbm90IGNvbnRhaW4gYSBiYXRjaCcpO1xuICAgICAgICByZXR1cm4gdGhpcy5fYmF0Y2g7XG4gICAgfVxuICAgIGdldCBiYXRjaFNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhdGNoPy5zaXplKCk7XG4gICAgfVxuICAgIGdldCBwb3N0QmF0Y2hSZXN1bWVUb2tlbigpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmN1cnNvci5nZXQoJ3Bvc3RCYXRjaFJlc3VtZVRva2VuJywgYnNvbl8xLkJTT05UeXBlLm9iamVjdCk/LnRvT2JqZWN0KHtcbiAgICAgICAgICAgIHByb21vdGVWYWx1ZXM6IGZhbHNlLFxuICAgICAgICAgICAgcHJvbW90ZUxvbmdzOiBmYWxzZSxcbiAgICAgICAgICAgIHByb21vdGVCdWZmZXJzOiBmYWxzZSxcbiAgICAgICAgICAgIHZhbGlkYXRpb246IHsgdXRmODogdHJ1ZSB9XG4gICAgICAgIH0pID8/IG51bGwpO1xuICAgIH1cbiAgICBzaGlmdChvcHRpb25zKSB7XG4gICAgICAgIGlmICh0aGlzLml0ZXJhdGVkID49IHRoaXMuYmF0Y2hTaXplKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmJhdGNoLmdldCh0aGlzLml0ZXJhdGVkLCBic29uXzEuQlNPTlR5cGUub2JqZWN0LCB0cnVlKSA/PyBudWxsO1xuICAgICAgICBjb25zdCBlbmNyeXB0ZWRSZXN1bHQgPSB0aGlzLmVuY3J5cHRlZEJhdGNoPy5nZXQodGhpcy5pdGVyYXRlZCwgYnNvbl8xLkJTT05UeXBlLm9iamVjdCwgdHJ1ZSkgPz8gbnVsbDtcbiAgICAgICAgdGhpcy5pdGVyYXRlZCArPSAxO1xuICAgICAgICBpZiAob3B0aW9ucz8ucmF3KSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LnRvQnl0ZXMoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG9iamVjdCA9IHJlc3VsdC50b09iamVjdChvcHRpb25zKTtcbiAgICAgICAgICAgIGlmIChlbmNyeXB0ZWRSZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAoMCwgdXRpbHNfMS5kZWNvcmF0ZURlY3J5cHRpb25SZXN1bHQpKG9iamVjdCwgZW5jcnlwdGVkUmVzdWx0LnRvT2JqZWN0KG9wdGlvbnMpLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuaXRlcmF0ZWQgPSB0aGlzLmJhdGNoU2l6ZTtcbiAgICB9XG59XG5leHBvcnRzLkN1cnNvclJlc3BvbnNlID0gQ3Vyc29yUmVzcG9uc2U7XG4vKipcbiAqIFRoaXMgc3VwcG9ydHMgYSBmZWF0dXJlIG9mIHRoZSBGaW5kQ3Vyc29yLlxuICogSXQgaXMgYW4gb3B0aW1pemF0aW9uIHRvIGF2b2lkIGFuIGV4dHJhIGdldE1vcmUgd2hlbiB0aGUgbGltaXQgaGFzIGJlZW4gcmVhY2hlZFxuICovXG5DdXJzb3JSZXNwb25zZS5lbXB0eUdldE1vcmUgPSB7XG4gICAgaWQ6IG5ldyBic29uXzEuTG9uZygwKSxcbiAgICBsZW5ndGg6IDAsXG4gICAgc2hpZnQ6ICgpID0+IG51bGxcbn07XG4vKipcbiAqIEV4cGxhaW4gcmVzcG9uc2VzIGhhdmUgbm90aGluZyB0byBkbyB3aXRoIGN1cnNvciByZXNwb25zZXNcbiAqIFRoaXMgY2xhc3Mgc2VydmVzIHRvIHRlbXBvcmFyaWx5IGF2b2lkIHJlZmFjdG9yaW5nIGhvdyBjdXJzb3JzIGhhbmRsZVxuICogZXhwbGFpbiByZXNwb25zZXMgd2hpY2ggaXMgdG8gZGV0ZWN0IHRoYXQgdGhlIHJlc3BvbnNlIGlzIG5vdCBjdXJzb3ItbGlrZSBhbmQgcmV0dXJuIHRoZSBleHBsYWluXG4gKiByZXN1bHQgYXMgdGhlIFwiZmlyc3QgYW5kIG9ubHlcIiBkb2N1bWVudCBpbiB0aGUgXCJiYXRjaFwiIGFuZCBlbmQgdGhlIFwiY3Vyc29yXCJcbiAqL1xuY2xhc3MgRXhwbGFpbmVkQ3Vyc29yUmVzcG9uc2UgZXh0ZW5kcyBDdXJzb3JSZXNwb25zZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuaXNFeHBsYWluID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fbGVuZ3RoID0gMTtcbiAgICB9XG4gICAgZ2V0IGlkKCkge1xuICAgICAgICByZXR1cm4gYnNvbl8xLkxvbmcuZnJvbUJpZ0ludCgwbik7XG4gICAgfVxuICAgIGdldCBiYXRjaFNpemUoKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBnZXQgbnMoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBnZXQgbGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGVuZ3RoO1xuICAgIH1cbiAgICBzaGlmdChvcHRpb25zKSB7XG4gICAgICAgIGlmICh0aGlzLl9sZW5ndGggPT09IDApXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgdGhpcy5fbGVuZ3RoIC09IDE7XG4gICAgICAgIHJldHVybiB0aGlzLnRvT2JqZWN0KG9wdGlvbnMpO1xuICAgIH1cbn1cbmV4cG9ydHMuRXhwbGFpbmVkQ3Vyc29yUmVzcG9uc2UgPSBFeHBsYWluZWRDdXJzb3JSZXNwb25zZTtcbi8qKlxuICogQ2xpZW50IGJ1bGsgd3JpdGVzIGhhdmUgc29tZSBleHRyYSBtZXRhZGF0YSBhdCB0aGUgdG9wIGxldmVsIHRoYXQgbmVlZHMgdG8gYmVcbiAqIGluY2x1ZGVkIGluIHRoZSByZXN1bHQgcmV0dXJuZWQgdG8gdGhlIHVzZXIuXG4gKi9cbmNsYXNzIENsaWVudEJ1bGtXcml0ZUN1cnNvclJlc3BvbnNlIGV4dGVuZHMgQ3Vyc29yUmVzcG9uc2Uge1xuICAgIGdldCBpbnNlcnRlZENvdW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQoJ25JbnNlcnRlZCcsIGJzb25fMS5CU09OVHlwZS5pbnQsIHRydWUpO1xuICAgIH1cbiAgICBnZXQgdXBzZXJ0ZWRDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KCduVXBzZXJ0ZWQnLCBic29uXzEuQlNPTlR5cGUuaW50LCB0cnVlKTtcbiAgICB9XG4gICAgZ2V0IG1hdGNoZWRDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KCduTWF0Y2hlZCcsIGJzb25fMS5CU09OVHlwZS5pbnQsIHRydWUpO1xuICAgIH1cbiAgICBnZXQgbW9kaWZpZWRDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KCduTW9kaWZpZWQnLCBic29uXzEuQlNPTlR5cGUuaW50LCB0cnVlKTtcbiAgICB9XG4gICAgZ2V0IGRlbGV0ZWRDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KCduRGVsZXRlZCcsIGJzb25fMS5CU09OVHlwZS5pbnQsIHRydWUpO1xuICAgIH1cbiAgICBnZXQgd3JpdGVDb25jZXJuRXJyb3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldCgnd3JpdGVDb25jZXJuRXJyb3InLCBic29uXzEuQlNPTlR5cGUub2JqZWN0LCBmYWxzZSk7XG4gICAgfVxufVxuZXhwb3J0cy5DbGllbnRCdWxrV3JpdGVDdXJzb3JSZXNwb25zZSA9IENsaWVudEJ1bGtXcml0ZUN1cnNvclJlc3BvbnNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzcG9uc2VzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/responses.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/shared.js":
/*!**************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/shared.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getReadPreference = getReadPreference;\nexports.isSharded = isSharded;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../../read_preference */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_preference.js\");\nconst common_1 = __webpack_require__(/*! ../../sdam/common */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/common.js\");\nconst topology_description_1 = __webpack_require__(/*! ../../sdam/topology_description */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/topology_description.js\");\nfunction getReadPreference(options) {\n    // Default to command version of the readPreference.\n    let readPreference = options?.readPreference ?? read_preference_1.ReadPreference.primary;\n    if (typeof readPreference === 'string') {\n        readPreference = read_preference_1.ReadPreference.fromString(readPreference);\n    }\n    if (!(readPreference instanceof read_preference_1.ReadPreference)) {\n        throw new error_1.MongoInvalidArgumentError('Option \"readPreference\" must be a ReadPreference instance');\n    }\n    return readPreference;\n}\nfunction isSharded(topologyOrServer) {\n    if (topologyOrServer == null) {\n        return false;\n    }\n    if (topologyOrServer.description && topologyOrServer.description.type === common_1.ServerType.Mongos) {\n        return true;\n    }\n    // NOTE: This is incredibly inefficient, and should be removed once command construction\n    // happens based on `Server` not `Topology`.\n    if (topologyOrServer.description && topologyOrServer.description instanceof topology_description_1.TopologyDescription) {\n        const servers = Array.from(topologyOrServer.description.servers.values());\n        return servers.some((server) => server.type === common_1.ServerType.Mongos);\n    }\n    return false;\n}\n//# sourceMappingURL=shared.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL3dpcmVfcHJvdG9jb2wvc2hhcmVkLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6QixpQkFBaUI7QUFDakIsZ0JBQWdCLG1CQUFPLENBQUMsaUdBQWE7QUFDckMsMEJBQTBCLG1CQUFPLENBQUMscUhBQXVCO0FBQ3pELGlCQUFpQixtQkFBTyxDQUFDLDZHQUFtQjtBQUM1QywrQkFBK0IsbUJBQU8sQ0FBQyx5SUFBaUM7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL3dpcmVfcHJvdG9jb2wvc2hhcmVkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRSZWFkUHJlZmVyZW5jZSA9IGdldFJlYWRQcmVmZXJlbmNlO1xuZXhwb3J0cy5pc1NoYXJkZWQgPSBpc1NoYXJkZWQ7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uLy4uL2Vycm9yXCIpO1xuY29uc3QgcmVhZF9wcmVmZXJlbmNlXzEgPSByZXF1aXJlKFwiLi4vLi4vcmVhZF9wcmVmZXJlbmNlXCIpO1xuY29uc3QgY29tbW9uXzEgPSByZXF1aXJlKFwiLi4vLi4vc2RhbS9jb21tb25cIik7XG5jb25zdCB0b3BvbG9neV9kZXNjcmlwdGlvbl8xID0gcmVxdWlyZShcIi4uLy4uL3NkYW0vdG9wb2xvZ3lfZGVzY3JpcHRpb25cIik7XG5mdW5jdGlvbiBnZXRSZWFkUHJlZmVyZW5jZShvcHRpb25zKSB7XG4gICAgLy8gRGVmYXVsdCB0byBjb21tYW5kIHZlcnNpb24gb2YgdGhlIHJlYWRQcmVmZXJlbmNlLlxuICAgIGxldCByZWFkUHJlZmVyZW5jZSA9IG9wdGlvbnM/LnJlYWRQcmVmZXJlbmNlID8/IHJlYWRfcHJlZmVyZW5jZV8xLlJlYWRQcmVmZXJlbmNlLnByaW1hcnk7XG4gICAgaWYgKHR5cGVvZiByZWFkUHJlZmVyZW5jZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmVhZFByZWZlcmVuY2UgPSByZWFkX3ByZWZlcmVuY2VfMS5SZWFkUHJlZmVyZW5jZS5mcm9tU3RyaW5nKHJlYWRQcmVmZXJlbmNlKTtcbiAgICB9XG4gICAgaWYgKCEocmVhZFByZWZlcmVuY2UgaW5zdGFuY2VvZiByZWFkX3ByZWZlcmVuY2VfMS5SZWFkUHJlZmVyZW5jZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcignT3B0aW9uIFwicmVhZFByZWZlcmVuY2VcIiBtdXN0IGJlIGEgUmVhZFByZWZlcmVuY2UgaW5zdGFuY2UnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlYWRQcmVmZXJlbmNlO1xufVxuZnVuY3Rpb24gaXNTaGFyZGVkKHRvcG9sb2d5T3JTZXJ2ZXIpIHtcbiAgICBpZiAodG9wb2xvZ3lPclNlcnZlciA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHRvcG9sb2d5T3JTZXJ2ZXIuZGVzY3JpcHRpb24gJiYgdG9wb2xvZ3lPclNlcnZlci5kZXNjcmlwdGlvbi50eXBlID09PSBjb21tb25fMS5TZXJ2ZXJUeXBlLk1vbmdvcykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gTk9URTogVGhpcyBpcyBpbmNyZWRpYmx5IGluZWZmaWNpZW50LCBhbmQgc2hvdWxkIGJlIHJlbW92ZWQgb25jZSBjb21tYW5kIGNvbnN0cnVjdGlvblxuICAgIC8vIGhhcHBlbnMgYmFzZWQgb24gYFNlcnZlcmAgbm90IGBUb3BvbG9neWAuXG4gICAgaWYgKHRvcG9sb2d5T3JTZXJ2ZXIuZGVzY3JpcHRpb24gJiYgdG9wb2xvZ3lPclNlcnZlci5kZXNjcmlwdGlvbiBpbnN0YW5jZW9mIHRvcG9sb2d5X2Rlc2NyaXB0aW9uXzEuVG9wb2xvZ3lEZXNjcmlwdGlvbikge1xuICAgICAgICBjb25zdCBzZXJ2ZXJzID0gQXJyYXkuZnJvbSh0b3BvbG9neU9yU2VydmVyLmRlc2NyaXB0aW9uLnNlcnZlcnMudmFsdWVzKCkpO1xuICAgICAgICByZXR1cm4gc2VydmVycy5zb21lKChzZXJ2ZXIpID0+IHNlcnZlci50eXBlID09PSBjb21tb25fMS5TZXJ2ZXJUeXBlLk1vbmdvcyk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYXJlZC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/shared.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/collection.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/collection.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Collection = void 0;\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\");\nconst ordered_1 = __webpack_require__(/*! ./bulk/ordered */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bulk/ordered.js\");\nconst unordered_1 = __webpack_require__(/*! ./bulk/unordered */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bulk/unordered.js\");\nconst change_stream_1 = __webpack_require__(/*! ./change_stream */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/change_stream.js\");\nconst aggregation_cursor_1 = __webpack_require__(/*! ./cursor/aggregation_cursor */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/aggregation_cursor.js\");\nconst find_cursor_1 = __webpack_require__(/*! ./cursor/find_cursor */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/find_cursor.js\");\nconst list_indexes_cursor_1 = __webpack_require__(/*! ./cursor/list_indexes_cursor */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/list_indexes_cursor.js\");\nconst list_search_indexes_cursor_1 = __webpack_require__(/*! ./cursor/list_search_indexes_cursor */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/list_search_indexes_cursor.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst bulk_write_1 = __webpack_require__(/*! ./operations/bulk_write */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/bulk_write.js\");\nconst count_1 = __webpack_require__(/*! ./operations/count */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/count.js\");\nconst delete_1 = __webpack_require__(/*! ./operations/delete */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/delete.js\");\nconst distinct_1 = __webpack_require__(/*! ./operations/distinct */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/distinct.js\");\nconst drop_1 = __webpack_require__(/*! ./operations/drop */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/drop.js\");\nconst estimated_document_count_1 = __webpack_require__(/*! ./operations/estimated_document_count */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/estimated_document_count.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/execute_operation.js\");\nconst find_and_modify_1 = __webpack_require__(/*! ./operations/find_and_modify */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/find_and_modify.js\");\nconst indexes_1 = __webpack_require__(/*! ./operations/indexes */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/indexes.js\");\nconst insert_1 = __webpack_require__(/*! ./operations/insert */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/insert.js\");\nconst is_capped_1 = __webpack_require__(/*! ./operations/is_capped */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/is_capped.js\");\nconst options_operation_1 = __webpack_require__(/*! ./operations/options_operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/options_operation.js\");\nconst rename_1 = __webpack_require__(/*! ./operations/rename */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/rename.js\");\nconst create_1 = __webpack_require__(/*! ./operations/search_indexes/create */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/search_indexes/create.js\");\nconst drop_2 = __webpack_require__(/*! ./operations/search_indexes/drop */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/search_indexes/drop.js\");\nconst update_1 = __webpack_require__(/*! ./operations/search_indexes/update */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/search_indexes/update.js\");\nconst update_2 = __webpack_require__(/*! ./operations/update */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/update.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_preference.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/write_concern.js\");\n/**\n * The **Collection** class is an internal class that embodies a MongoDB collection\n * allowing for insert/find/update/delete and other command operation on that MongoDB collection.\n *\n * **COLLECTION Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const pets = client.db().collection<Pet>('pets');\n *\n * const petCursor = pets.find();\n *\n * for await (const pet of petCursor) {\n *   console.log(`${pet.name} is a ${pet.kind}!`);\n * }\n * ```\n */\nclass Collection {\n    /**\n     * Create a new Collection instance\n     * @internal\n     */\n    constructor(db, name, options) {\n        // Internal state\n        this.s = {\n            db,\n            options,\n            namespace: new utils_1.MongoDBCollectionNamespace(db.databaseName, name),\n            pkFactory: db.options?.pkFactory ?? utils_1.DEFAULT_PK_FACTORY,\n            readPreference: read_preference_1.ReadPreference.fromOptions(options),\n            bsonOptions: (0, bson_1.resolveBSONOptions)(options, db),\n            readConcern: read_concern_1.ReadConcern.fromOptions(options),\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options)\n        };\n        this.client = db.client;\n    }\n    /**\n     * The name of the database this collection belongs to\n     */\n    get dbName() {\n        return this.s.namespace.db;\n    }\n    /**\n     * The name of this collection\n     */\n    get collectionName() {\n        return this.s.namespace.collection;\n    }\n    /**\n     * The namespace of this collection, in the format `${this.dbName}.${this.collectionName}`\n     */\n    get namespace() {\n        return this.fullNamespace.toString();\n    }\n    /**\n     *  @internal\n     *\n     * The `MongoDBNamespace` for the collection.\n     */\n    get fullNamespace() {\n        return this.s.namespace;\n    }\n    /**\n     * The current readConcern of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */\n    get readConcern() {\n        if (this.s.readConcern == null) {\n            return this.s.db.readConcern;\n        }\n        return this.s.readConcern;\n    }\n    /**\n     * The current readPreference of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */\n    get readPreference() {\n        if (this.s.readPreference == null) {\n            return this.s.db.readPreference;\n        }\n        return this.s.readPreference;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    /**\n     * The current writeConcern of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */\n    get writeConcern() {\n        if (this.s.writeConcern == null) {\n            return this.s.db.writeConcern;\n        }\n        return this.s.writeConcern;\n    }\n    /** The current index hint for the collection */\n    get hint() {\n        return this.s.collectionHint;\n    }\n    set hint(v) {\n        this.s.collectionHint = (0, utils_1.normalizeHintField)(v);\n    }\n    /**\n     * Inserts a single document into MongoDB. If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param doc - The document to insert\n     * @param options - Optional settings for the command\n     */\n    async insertOne(doc, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new insert_1.InsertOneOperation(this, doc, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Inserts an array of documents into MongoDB. If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param docs - The documents to insert\n     * @param options - Optional settings for the command\n     */\n    async insertMany(docs, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new insert_1.InsertManyOperation(this, docs, (0, utils_1.resolveOptions)(this, options ?? { ordered: true })));\n    }\n    /**\n     * Perform a bulkWrite operation without a fluent API\n     *\n     * Legal operation types are\n     * - `insertOne`\n     * - `replaceOne`\n     * - `updateOne`\n     * - `updateMany`\n     * - `deleteOne`\n     * - `deleteMany`\n     *\n     * If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param operations - Bulk operations to perform\n     * @param options - Optional settings for the command\n     * @throws MongoDriverError if operations is not an array\n     */\n    async bulkWrite(operations, options) {\n        if (!Array.isArray(operations)) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"operations\" must be an array of documents');\n        }\n        return await (0, execute_operation_1.executeOperation)(this.client, new bulk_write_1.BulkWriteOperation(this, operations, (0, utils_1.resolveOptions)(this, options ?? { ordered: true })));\n    }\n    /**\n     * Update a single document in a collection\n     *\n     * The value of `update` can be either:\n     * - UpdateFilter<TSchema> - A document that contains update operator expressions,\n     * - Document[] - an aggregation pipeline.\n     *\n     * @param filter - The filter used to select the document to update\n     * @param update - The modifications to apply\n     * @param options - Optional settings for the command\n     */\n    async updateOne(filter, update, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new update_2.UpdateOneOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Replace a document in a collection with another document\n     *\n     * @param filter - The filter used to select the document to replace\n     * @param replacement - The Document that replaces the matching document\n     * @param options - Optional settings for the command\n     */\n    async replaceOne(filter, replacement, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new update_2.ReplaceOneOperation(this, filter, replacement, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Update multiple documents in a collection\n     *\n     * The value of `update` can be either:\n     * - UpdateFilter<TSchema> - A document that contains update operator expressions,\n     * - Document[] - an aggregation pipeline.\n     *\n     * @param filter - The filter used to select the document to update\n     * @param update - The modifications to apply\n     * @param options - Optional settings for the command\n     */\n    async updateMany(filter, update, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new update_2.UpdateManyOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Delete a document from a collection\n     *\n     * @param filter - The filter used to select the document to remove\n     * @param options - Optional settings for the command\n     */\n    async deleteOne(filter = {}, options = {}) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new delete_1.DeleteOneOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Delete multiple documents from a collection\n     *\n     * @param filter - The filter used to select the documents to remove\n     * @param options - Optional settings for the command\n     */\n    async deleteMany(filter = {}, options = {}) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new delete_1.DeleteManyOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Rename the collection.\n     *\n     * @remarks\n     * This operation does not inherit options from the Db or MongoClient.\n     *\n     * @param newName - New name of of the collection.\n     * @param options - Optional settings for the command\n     */\n    async rename(newName, options) {\n        // Intentionally, we do not inherit options from parent for this operation.\n        return await (0, execute_operation_1.executeOperation)(this.client, new rename_1.RenameOperation(this, newName, {\n            ...options,\n            readPreference: read_preference_1.ReadPreference.PRIMARY\n        }));\n    }\n    /**\n     * Drop the collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    async drop(options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropCollectionOperation(this.s.db, this.collectionName, options));\n    }\n    async findOne(filter = {}, options = {}) {\n        const cursor = this.find(filter, options).limit(-1).batchSize(1);\n        const res = await cursor.next();\n        await cursor.close();\n        return res;\n    }\n    find(filter = {}, options = {}) {\n        return new find_cursor_1.FindCursor(this.client, this.s.namespace, filter, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Returns the options of the collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    async options(options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new options_operation_1.OptionsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Returns if the collection is a capped collection\n     *\n     * @param options - Optional settings for the command\n     */\n    async isCapped(options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new is_capped_1.IsCappedOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param indexSpec - The field name or index specification to create an index for\n     * @param options - Optional settings for the command\n     *\n     * @example\n     * ```ts\n     * const collection = client.db('foo').collection('bar');\n     *\n     * await collection.createIndex({ a: 1, b: -1 });\n     *\n     * // Alternate syntax for { c: 1, d: -1 } that ensures order of indexes\n     * await collection.createIndex([ [c, 1], [d, -1] ]);\n     *\n     * // Equivalent to { e: 1 }\n     * await collection.createIndex('e');\n     *\n     * // Equivalent to { f: 1, g: 1 }\n     * await collection.createIndex(['f', 'g'])\n     *\n     * // Equivalent to { h: 1, i: -1 }\n     * await collection.createIndex([ { h: 1 }, { i: -1 } ]);\n     *\n     * // Equivalent to { j: 1, k: -1, l: 2d }\n     * await collection.createIndex(['j', ['k', -1], { l: '2d' }])\n     * ```\n     */\n    async createIndex(indexSpec, options) {\n        const indexes = await (0, execute_operation_1.executeOperation)(this.client, indexes_1.CreateIndexesOperation.fromIndexSpecification(this, this.collectionName, indexSpec, (0, utils_1.resolveOptions)(this, options)));\n        return indexes[0];\n    }\n    /**\n     * Creates multiple indexes in the collection, this method is only supported for\n     * MongoDB 2.6 or higher. Earlier version of MongoDB will throw a command not supported\n     * error.\n     *\n     * **Note**: Unlike {@link Collection#createIndex| createIndex}, this function takes in raw index specifications.\n     * Index specifications are defined {@link https://www.mongodb.com/docs/manual/reference/command/createIndexes/| here}.\n     *\n     * @param indexSpecs - An array of index specifications to be created\n     * @param options - Optional settings for the command\n     *\n     * @example\n     * ```ts\n     * const collection = client.db('foo').collection('bar');\n     * await collection.createIndexes([\n     *   // Simple index on field fizz\n     *   {\n     *     key: { fizz: 1 },\n     *   }\n     *   // wildcard index\n     *   {\n     *     key: { '$**': 1 }\n     *   },\n     *   // named index on darmok and jalad\n     *   {\n     *     key: { darmok: 1, jalad: -1 }\n     *     name: 'tanagra'\n     *   }\n     * ]);\n     * ```\n     */\n    async createIndexes(indexSpecs, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, indexes_1.CreateIndexesOperation.fromIndexDescriptionArray(this, this.collectionName, indexSpecs, (0, utils_1.resolveOptions)(this, { ...options, maxTimeMS: undefined })));\n    }\n    /**\n     * Drops an index from this collection.\n     *\n     * @param indexName - Name of the index to drop.\n     * @param options - Optional settings for the command\n     */\n    async dropIndex(indexName, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new indexes_1.DropIndexOperation(this, indexName, {\n            ...(0, utils_1.resolveOptions)(this, options),\n            readPreference: read_preference_1.ReadPreference.primary\n        }));\n    }\n    /**\n     * Drops all indexes from this collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    async dropIndexes(options) {\n        try {\n            await (0, execute_operation_1.executeOperation)(this.client, new indexes_1.DropIndexOperation(this, '*', (0, utils_1.resolveOptions)(this, options)));\n            return true;\n        }\n        catch {\n            return false;\n        }\n    }\n    /**\n     * Get the list of all indexes information for the collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    listIndexes(options) {\n        return new list_indexes_cursor_1.ListIndexesCursor(this, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Checks if one or more indexes exist on the collection, fails on first non-existing index\n     *\n     * @param indexes - One or more index names to check.\n     * @param options - Optional settings for the command\n     */\n    async indexExists(indexes, options) {\n        const indexNames = Array.isArray(indexes) ? indexes : [indexes];\n        const allIndexes = new Set(await this.listIndexes(options)\n            .map(({ name }) => name)\n            .toArray());\n        return indexNames.every(name => allIndexes.has(name));\n    }\n    async indexInformation(options) {\n        return await this.indexes({\n            ...options,\n            full: options?.full ?? false\n        });\n    }\n    /**\n     * Gets an estimate of the count of documents in a collection using collection metadata.\n     * This will always run a count command on all server versions.\n     *\n     * due to an oversight in versions 5.0.0-5.0.8 of MongoDB, the count command,\n     * which estimatedDocumentCount uses in its implementation, was not included in v1 of\n     * the Stable API, and so users of the Stable API with estimatedDocumentCount are\n     * recommended to upgrade their server version to 5.0.9+ or set apiStrict: false to avoid\n     * encountering errors.\n     *\n     * @see {@link https://www.mongodb.com/docs/manual/reference/command/count/#behavior|Count: Behavior}\n     * @param options - Optional settings for the command\n     */\n    async estimatedDocumentCount(options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new estimated_document_count_1.EstimatedDocumentCountOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Gets the number of documents matching the filter.\n     * For a fast count of the total documents in a collection see {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n     * **Note**: When migrating from {@link Collection#count| count} to {@link Collection#countDocuments| countDocuments}\n     * the following query operators must be replaced:\n     *\n     * | Operator | Replacement |\n     * | -------- | ----------- |\n     * | `$where`   | [`$expr`][1] |\n     * | `$near`    | [`$geoWithin`][2] with [`$center`][3] |\n     * | `$nearSphere` | [`$geoWithin`][2] with [`$centerSphere`][4] |\n     *\n     * [1]: https://www.mongodb.com/docs/manual/reference/operator/query/expr/\n     * [2]: https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/\n     * [3]: https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center\n     * [4]: https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n     *\n     * @param filter - The filter for the count\n     * @param options - Optional settings for the command\n     *\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/expr/\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n     */\n    async countDocuments(filter = {}, options = {}) {\n        const pipeline = [];\n        pipeline.push({ $match: filter });\n        if (typeof options.skip === 'number') {\n            pipeline.push({ $skip: options.skip });\n        }\n        if (typeof options.limit === 'number') {\n            pipeline.push({ $limit: options.limit });\n        }\n        pipeline.push({ $group: { _id: 1, n: { $sum: 1 } } });\n        const cursor = this.aggregate(pipeline, options);\n        const doc = await cursor.next();\n        await cursor.close();\n        return doc?.n ?? 0;\n    }\n    async distinct(key, filter = {}, options = {}) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new distinct_1.DistinctOperation(this, key, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async indexes(options) {\n        const indexes = await this.listIndexes(options).toArray();\n        const full = options?.full ?? true;\n        if (full) {\n            return indexes;\n        }\n        const object = Object.fromEntries(indexes.map(({ name, key }) => [name, Object.entries(key)]));\n        return object;\n    }\n    async findOneAndDelete(filter, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new find_and_modify_1.FindOneAndDeleteOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async findOneAndReplace(filter, replacement, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new find_and_modify_1.FindOneAndReplaceOperation(this, filter, replacement, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async findOneAndUpdate(filter, update, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new find_and_modify_1.FindOneAndUpdateOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Execute an aggregation framework pipeline against the collection, needs MongoDB \\>= 2.2\n     *\n     * @param pipeline - An array of aggregation pipelines to execute\n     * @param options - Optional settings for the command\n     */\n    aggregate(pipeline = [], options) {\n        if (!Array.isArray(pipeline)) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"pipeline\" must be an array of aggregation stages');\n        }\n        return new aggregation_cursor_1.AggregationCursor(this.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this collection.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to override the schema that may be defined for this specific collection\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     * @example\n     * By just providing the first argument I can type the change to be `ChangeStreamDocument<{ _id: number }>`\n     * ```ts\n     * collection.watch<{ _id: number }>()\n     *   .on('change', change => console.log(change._id.toFixed(4)));\n     * ```\n     *\n     * @example\n     * Passing a second argument provides a way to reflect the type changes caused by an advanced pipeline.\n     * Here, we are using a pipeline to have MongoDB filter for insert changes only and add a comment.\n     * No need start from scratch on the ChangeStreamInsertDocument type!\n     * By using an intersection we can save time and ensure defaults remain the same type!\n     * ```ts\n     * collection\n     *   .watch<Schema, ChangeStreamInsertDocument<Schema> & { comment: string }>([\n     *     { $addFields: { comment: 'big changes' } },\n     *     { $match: { operationType: 'insert' } }\n     *   ])\n     *   .on('change', change => {\n     *     change.comment.startsWith('big');\n     *     change.operationType === 'insert';\n     *     // No need to narrow in code because the generics did that for us!\n     *     expectType<Schema>(change.fullDocument);\n     *   });\n     * ```\n     *\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TLocal - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */\n    watch(pipeline = [], options = {}) {\n        // Allow optionally not specifying a pipeline\n        if (!Array.isArray(pipeline)) {\n            options = pipeline;\n            pipeline = [];\n        }\n        return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Initiate an Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     *\n     * @throws MongoNotConnectedError\n     * @remarks\n     * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implementation.\n     * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n     */\n    initializeUnorderedBulkOp(options) {\n        return new unordered_1.UnorderedBulkOperation(this, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Initiate an In order bulk write operation. Operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n     *\n     * @throws MongoNotConnectedError\n     * @remarks\n     * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implementation.\n     * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n     */\n    initializeOrderedBulkOp(options) {\n        return new ordered_1.OrderedBulkOperation(this, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * An estimated count of matching documents in the db to a filter.\n     *\n     * **NOTE:** This method has been deprecated, since it does not provide an accurate count of the documents\n     * in a collection. To obtain an accurate count of documents in the collection, use {@link Collection#countDocuments| countDocuments}.\n     * To obtain an estimated count of all documents in the collection, use {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n     *\n     * @deprecated use {@link Collection#countDocuments| countDocuments} or {@link Collection#estimatedDocumentCount| estimatedDocumentCount} instead\n     *\n     * @param filter - The filter for the count.\n     * @param options - Optional settings for the command\n     */\n    async count(filter = {}, options = {}) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new count_1.CountOperation(this.fullNamespace, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    listSearchIndexes(indexNameOrOptions, options) {\n        options =\n            typeof indexNameOrOptions === 'object' ? indexNameOrOptions : options == null ? {} : options;\n        const indexName = indexNameOrOptions == null\n            ? null\n            : typeof indexNameOrOptions === 'object'\n                ? null\n                : indexNameOrOptions;\n        return new list_search_indexes_cursor_1.ListSearchIndexesCursor(this, indexName, options);\n    }\n    /**\n     * Creates a single search index for the collection.\n     *\n     * @param description - The index description for the new search index.\n     * @returns A promise that resolves to the name of the new search index.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     */\n    async createSearchIndex(description) {\n        const [index] = await this.createSearchIndexes([description]);\n        return index;\n    }\n    /**\n     * Creates multiple search indexes for the current collection.\n     *\n     * @param descriptions - An array of `SearchIndexDescription`s for the new search indexes.\n     * @returns A promise that resolves to an array of the newly created search index names.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     * @returns\n     */\n    async createSearchIndexes(descriptions) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new create_1.CreateSearchIndexesOperation(this, descriptions));\n    }\n    /**\n     * Deletes a search index by index name.\n     *\n     * @param name - The name of the search index to be deleted.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     */\n    async dropSearchIndex(name) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new drop_2.DropSearchIndexOperation(this, name));\n    }\n    /**\n     * Updates a search index by replacing the existing index definition with the provided definition.\n     *\n     * @param name - The name of the search index to update.\n     * @param definition - The new search index definition.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     */\n    async updateSearchIndex(name, definition) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new update_1.UpdateSearchIndexOperation(this, name, definition));\n    }\n}\nexports.Collection = Collection;\n//# sourceMappingURL=collection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/collection.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/connection_string.js":
/*!******************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/connection_string.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FEATURE_FLAGS = exports.DEFAULT_OPTIONS = exports.OPTIONS = void 0;\nexports.resolveSRVRecord = resolveSRVRecord;\nexports.parseOptions = parseOptions;\nconst dns = __webpack_require__(/*! dns */ \"dns\");\nconst mongodb_connection_string_url_1 = __webpack_require__(/*! mongodb-connection-string-url */ \"(rsc)/../node_modules/.pnpm/mongodb-connection-string-url@3.0.1/node_modules/mongodb-connection-string-url/lib/index.js\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst mongo_credentials_1 = __webpack_require__(/*! ./cmap/auth/mongo_credentials */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongo_credentials.js\");\nconst providers_1 = __webpack_require__(/*! ./cmap/auth/providers */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/providers.js\");\nconst client_metadata_1 = __webpack_require__(/*! ./cmap/handshake/client_metadata */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/handshake/client_metadata.js\");\nconst compression_1 = __webpack_require__(/*! ./cmap/wire_protocol/compression */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/compression.js\");\nconst encrypter_1 = __webpack_require__(/*! ./encrypter */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/encrypter.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst mongo_client_1 = __webpack_require__(/*! ./mongo_client */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_client.js\");\nconst mongo_logger_1 = __webpack_require__(/*! ./mongo_logger */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_logger.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_preference.js\");\nconst monitor_1 = __webpack_require__(/*! ./sdam/monitor */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/monitor.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/write_concern.js\");\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR = 'loadBalanced option not supported when directConnection is provided';\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\nasync function resolveSRVRecord(options) {\n    if (typeof options.srvHost !== 'string') {\n        throw new error_1.MongoAPIError('Option \"srvHost\" must not be empty');\n    }\n    // Asynchronously start TXT resolution so that we do not have to wait until\n    // the SRV record is resolved before starting a second DNS query.\n    const lookupAddress = options.srvHost;\n    const txtResolutionPromise = dns.promises.resolveTxt(lookupAddress);\n    txtResolutionPromise.then(undefined, utils_1.squashError); // rejections will be handled later\n    // Resolve the SRV record and use the result as the list of hosts to connect to.\n    const addresses = await dns.promises.resolveSrv(`_${options.srvServiceName}._tcp.${lookupAddress}`);\n    if (addresses.length === 0) {\n        throw new error_1.MongoAPIError('No addresses found at host');\n    }\n    for (const { name } of addresses) {\n        (0, utils_1.checkParentDomainMatch)(name, lookupAddress);\n    }\n    const hostAddresses = addresses.map(r => utils_1.HostAddress.fromString(`${r.name}:${r.port ?? 27017}`));\n    validateLoadBalancedOptions(hostAddresses, options, true);\n    // Use the result of resolving the TXT record and add options from there if they exist.\n    let record;\n    try {\n        record = await txtResolutionPromise;\n    }\n    catch (error) {\n        if (error.code !== 'ENODATA' && error.code !== 'ENOTFOUND') {\n            throw error;\n        }\n        return hostAddresses;\n    }\n    if (record.length > 1) {\n        throw new error_1.MongoParseError('Multiple text records not allowed');\n    }\n    const txtRecordOptions = new url_1.URLSearchParams(record[0].join(''));\n    const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n    if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n        throw new error_1.MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`);\n    }\n    if (VALID_TXT_RECORDS.some(option => txtRecordOptions.get(option) === '')) {\n        throw new error_1.MongoParseError('Cannot have empty URI params in DNS TXT Record');\n    }\n    const source = txtRecordOptions.get('authSource') ?? undefined;\n    const replicaSet = txtRecordOptions.get('replicaSet') ?? undefined;\n    const loadBalanced = txtRecordOptions.get('loadBalanced') ?? undefined;\n    if (!options.userSpecifiedAuthSource &&\n        source &&\n        options.credentials &&\n        !providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)) {\n        options.credentials = mongo_credentials_1.MongoCredentials.merge(options.credentials, { source });\n    }\n    if (!options.userSpecifiedReplicaSet && replicaSet) {\n        options.replicaSet = replicaSet;\n    }\n    if (loadBalanced === 'true') {\n        options.loadBalanced = true;\n    }\n    if (options.replicaSet && options.srvMaxHosts > 0) {\n        throw new error_1.MongoParseError('Cannot combine replicaSet option with srvMaxHosts');\n    }\n    validateLoadBalancedOptions(hostAddresses, options, true);\n    return hostAddresses;\n}\n/**\n * Checks if TLS options are valid\n *\n * @param allOptions - All options provided by user or included in default options map\n * @throws MongoAPIError if TLS options are invalid\n */\nfunction checkTLSOptions(allOptions) {\n    if (!allOptions)\n        return;\n    const check = (a, b) => {\n        if (allOptions.has(a) && allOptions.has(b)) {\n            throw new error_1.MongoAPIError(`The '${a}' option cannot be used with the '${b}' option`);\n        }\n    };\n    check('tlsInsecure', 'tlsAllowInvalidCertificates');\n    check('tlsInsecure', 'tlsAllowInvalidHostnames');\n    check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n    check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n    check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n    check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n    check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\nfunction getBoolean(name, value) {\n    if (typeof value === 'boolean')\n        return value;\n    switch (value) {\n        case 'true':\n            return true;\n        case 'false':\n            return false;\n        default:\n            throw new error_1.MongoParseError(`${name} must be either \"true\" or \"false\"`);\n    }\n}\nfunction getIntFromOptions(name, value) {\n    const parsedInt = (0, utils_1.parseInteger)(value);\n    if (parsedInt != null) {\n        return parsedInt;\n    }\n    throw new error_1.MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\nfunction getUIntFromOptions(name, value) {\n    const parsedValue = getIntFromOptions(name, value);\n    if (parsedValue < 0) {\n        throw new error_1.MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n    }\n    return parsedValue;\n}\nfunction* entriesFromString(value) {\n    if (value === '') {\n        return;\n    }\n    const keyValuePairs = value.split(',');\n    for (const keyValue of keyValuePairs) {\n        const [key, value] = keyValue.split(/:(.*)/);\n        if (value == null) {\n            throw new error_1.MongoParseError('Cannot have undefined values in key value pairs');\n        }\n        yield [key, value];\n    }\n}\nclass CaseInsensitiveMap extends Map {\n    constructor(entries = []) {\n        super(entries.map(([k, v]) => [k.toLowerCase(), v]));\n    }\n    has(k) {\n        return super.has(k.toLowerCase());\n    }\n    get(k) {\n        return super.get(k.toLowerCase());\n    }\n    set(k, v) {\n        return super.set(k.toLowerCase(), v);\n    }\n    delete(k) {\n        return super.delete(k.toLowerCase());\n    }\n}\nfunction parseOptions(uri, mongoClient = undefined, options = {}) {\n    if (mongoClient != null && !(mongoClient instanceof mongo_client_1.MongoClient)) {\n        options = mongoClient;\n        mongoClient = undefined;\n    }\n    // validate BSONOptions\n    if (options.useBigInt64 && typeof options.promoteLongs === 'boolean' && !options.promoteLongs) {\n        throw new error_1.MongoAPIError('Must request either bigint or Long for int64 deserialization');\n    }\n    if (options.useBigInt64 && typeof options.promoteValues === 'boolean' && !options.promoteValues) {\n        throw new error_1.MongoAPIError('Must request either bigint or Long for int64 deserialization');\n    }\n    const url = new mongodb_connection_string_url_1.default(uri);\n    const { hosts, isSRV } = url;\n    const mongoOptions = Object.create(null);\n    // Feature flags\n    for (const flag of Object.getOwnPropertySymbols(options)) {\n        if (exports.FEATURE_FLAGS.has(flag)) {\n            mongoOptions[flag] = options[flag];\n        }\n    }\n    mongoOptions.hosts = isSRV ? [] : hosts.map(utils_1.HostAddress.fromString);\n    const urlOptions = new CaseInsensitiveMap();\n    if (url.pathname !== '/' && url.pathname !== '') {\n        const dbName = decodeURIComponent(url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname);\n        if (dbName) {\n            urlOptions.set('dbName', [dbName]);\n        }\n    }\n    if (url.username !== '') {\n        const auth = {\n            username: decodeURIComponent(url.username)\n        };\n        if (typeof url.password === 'string') {\n            auth.password = decodeURIComponent(url.password);\n        }\n        urlOptions.set('auth', [auth]);\n    }\n    for (const key of url.searchParams.keys()) {\n        const values = url.searchParams.getAll(key);\n        const isReadPreferenceTags = /readPreferenceTags/i.test(key);\n        if (!isReadPreferenceTags && values.length > 1) {\n            throw new error_1.MongoInvalidArgumentError(`URI option \"${key}\" cannot appear more than once in the connection string`);\n        }\n        if (!isReadPreferenceTags && values.includes('')) {\n            throw new error_1.MongoAPIError(`URI option \"${key}\" cannot be specified with no value`);\n        }\n        if (!urlOptions.has(key)) {\n            urlOptions.set(key, values);\n        }\n    }\n    const objectOptions = new CaseInsensitiveMap(Object.entries(options).filter(([, v]) => v != null));\n    // Validate options that can only be provided by one of uri or object\n    if (urlOptions.has('serverApi')) {\n        throw new error_1.MongoParseError('URI cannot contain `serverApi`, it can only be passed to the client');\n    }\n    const uriMechanismProperties = urlOptions.get('authMechanismProperties');\n    if (uriMechanismProperties) {\n        for (const property of uriMechanismProperties) {\n            if (/(^|,)ALLOWED_HOSTS:/.test(property)) {\n                throw new error_1.MongoParseError('Auth mechanism property ALLOWED_HOSTS is not allowed in the connection string.');\n            }\n        }\n    }\n    if (objectOptions.has('loadBalanced')) {\n        throw new error_1.MongoParseError('loadBalanced is only a valid option in the URI');\n    }\n    // All option collection\n    const allProvidedOptions = new CaseInsensitiveMap();\n    const allProvidedKeys = new Set([...urlOptions.keys(), ...objectOptions.keys()]);\n    for (const key of allProvidedKeys) {\n        const values = [];\n        const objectOptionValue = objectOptions.get(key);\n        if (objectOptionValue != null) {\n            values.push(objectOptionValue);\n        }\n        const urlValues = urlOptions.get(key) ?? [];\n        values.push(...urlValues);\n        allProvidedOptions.set(key, values);\n    }\n    if (allProvidedOptions.has('tls') || allProvidedOptions.has('ssl')) {\n        const tlsAndSslOpts = (allProvidedOptions.get('tls') || [])\n            .concat(allProvidedOptions.get('ssl') || [])\n            .map(getBoolean.bind(null, 'tls/ssl'));\n        if (new Set(tlsAndSslOpts).size !== 1) {\n            throw new error_1.MongoParseError('All values of tls/ssl must be the same.');\n        }\n    }\n    checkTLSOptions(allProvidedOptions);\n    const unsupportedOptions = (0, utils_1.setDifference)(allProvidedKeys, Array.from(Object.keys(exports.OPTIONS)).map(s => s.toLowerCase()));\n    if (unsupportedOptions.size !== 0) {\n        const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n        const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n        throw new error_1.MongoParseError(`${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`);\n    }\n    // Option parsing and setting\n    for (const [key, descriptor] of Object.entries(exports.OPTIONS)) {\n        const values = allProvidedOptions.get(key);\n        if (!values || values.length === 0) {\n            if (exports.DEFAULT_OPTIONS.has(key)) {\n                setOption(mongoOptions, key, descriptor, [exports.DEFAULT_OPTIONS.get(key)]);\n            }\n        }\n        else {\n            const { deprecated } = descriptor;\n            if (deprecated) {\n                const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n                (0, utils_1.emitWarning)(`${key} is a deprecated option${deprecatedMsg}`);\n            }\n            setOption(mongoOptions, key, descriptor, values);\n        }\n    }\n    if (mongoOptions.credentials) {\n        const isGssapi = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI;\n        const isX509 = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_X509;\n        const isAws = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_AWS;\n        const isOidc = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_OIDC;\n        if ((isGssapi || isX509) &&\n            allProvidedOptions.has('authSource') &&\n            mongoOptions.credentials.source !== '$external') {\n            // If authSource was explicitly given and its incorrect, we error\n            throw new error_1.MongoParseError(`authMechanism ${mongoOptions.credentials.mechanism} requires an authSource of '$external'`);\n        }\n        if (!(isGssapi || isX509 || isAws || isOidc) &&\n            mongoOptions.dbName &&\n            !allProvidedOptions.has('authSource')) {\n            // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n            // and there was no specific authSource given\n            mongoOptions.credentials = mongo_credentials_1.MongoCredentials.merge(mongoOptions.credentials, {\n                source: mongoOptions.dbName\n            });\n        }\n        if (isAws && mongoOptions.credentials.username && !mongoOptions.credentials.password) {\n            throw new error_1.MongoMissingCredentialsError(`When using ${mongoOptions.credentials.mechanism} password must be set when a username is specified`);\n        }\n        mongoOptions.credentials.validate();\n        // Check if the only auth related option provided was authSource, if so we can remove credentials\n        if (mongoOptions.credentials.password === '' &&\n            mongoOptions.credentials.username === '' &&\n            mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT &&\n            Object.keys(mongoOptions.credentials.mechanismProperties).length === 0) {\n            delete mongoOptions.credentials;\n        }\n    }\n    if (!mongoOptions.dbName) {\n        // dbName default is applied here because of the credential validation above\n        mongoOptions.dbName = 'test';\n    }\n    validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n    if (mongoClient && mongoOptions.autoEncryption) {\n        encrypter_1.Encrypter.checkForMongoCrypt();\n        mongoOptions.encrypter = new encrypter_1.Encrypter(mongoClient, uri, options);\n        mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n    }\n    // Potential SRV Overrides and SRV connection string validations\n    mongoOptions.userSpecifiedAuthSource =\n        objectOptions.has('authSource') || urlOptions.has('authSource');\n    mongoOptions.userSpecifiedReplicaSet =\n        objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n    if (isSRV) {\n        // SRV Record is resolved upon connecting\n        mongoOptions.srvHost = hosts[0];\n        if (mongoOptions.directConnection) {\n            throw new error_1.MongoAPIError('SRV URI does not support directConnection');\n        }\n        if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === 'string') {\n            throw new error_1.MongoParseError('Cannot use srvMaxHosts option with replicaSet');\n        }\n        // SRV turns on TLS by default, but users can override and turn it off\n        const noUserSpecifiedTLS = !objectOptions.has('tls') && !urlOptions.has('tls');\n        const noUserSpecifiedSSL = !objectOptions.has('ssl') && !urlOptions.has('ssl');\n        if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n            mongoOptions.tls = true;\n        }\n    }\n    else {\n        const userSpecifiedSrvOptions = urlOptions.has('srvMaxHosts') ||\n            objectOptions.has('srvMaxHosts') ||\n            urlOptions.has('srvServiceName') ||\n            objectOptions.has('srvServiceName');\n        if (userSpecifiedSrvOptions) {\n            throw new error_1.MongoParseError('Cannot use srvMaxHosts or srvServiceName with a non-srv connection string');\n        }\n    }\n    if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\n        throw new error_1.MongoParseError('directConnection option requires exactly one host');\n    }\n    if (!mongoOptions.proxyHost &&\n        (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)) {\n        throw new error_1.MongoParseError('Must specify proxyHost if other proxy options are passed');\n    }\n    if ((mongoOptions.proxyUsername && !mongoOptions.proxyPassword) ||\n        (!mongoOptions.proxyUsername && mongoOptions.proxyPassword)) {\n        throw new error_1.MongoParseError('Can only specify both of proxy username/password or neither');\n    }\n    const proxyOptions = ['proxyHost', 'proxyPort', 'proxyUsername', 'proxyPassword'].map(key => urlOptions.get(key) ?? []);\n    if (proxyOptions.some(options => options.length > 1)) {\n        throw new error_1.MongoParseError('Proxy options cannot be specified multiple times in the connection string');\n    }\n    const loggerFeatureFlag = Symbol.for('@@mdb.enableMongoLogger');\n    mongoOptions[loggerFeatureFlag] = mongoOptions[loggerFeatureFlag] ?? false;\n    let loggerEnvOptions = {};\n    let loggerClientOptions = {};\n    if (mongoOptions[loggerFeatureFlag]) {\n        loggerEnvOptions = {\n            MONGODB_LOG_COMMAND: process.env.MONGODB_LOG_COMMAND,\n            MONGODB_LOG_TOPOLOGY: process.env.MONGODB_LOG_TOPOLOGY,\n            MONGODB_LOG_SERVER_SELECTION: process.env.MONGODB_LOG_SERVER_SELECTION,\n            MONGODB_LOG_CONNECTION: process.env.MONGODB_LOG_CONNECTION,\n            MONGODB_LOG_CLIENT: process.env.MONGODB_LOG_CLIENT,\n            MONGODB_LOG_ALL: process.env.MONGODB_LOG_ALL,\n            MONGODB_LOG_MAX_DOCUMENT_LENGTH: process.env.MONGODB_LOG_MAX_DOCUMENT_LENGTH,\n            MONGODB_LOG_PATH: process.env.MONGODB_LOG_PATH,\n            ...mongoOptions[Symbol.for('@@mdb.internalLoggerConfig')]\n        };\n        loggerClientOptions = {\n            mongodbLogPath: mongoOptions.mongodbLogPath,\n            mongodbLogComponentSeverities: mongoOptions.mongodbLogComponentSeverities,\n            mongodbLogMaxDocumentLength: mongoOptions.mongodbLogMaxDocumentLength\n        };\n    }\n    mongoOptions.mongoLoggerOptions = mongo_logger_1.MongoLogger.resolveOptions(loggerEnvOptions, loggerClientOptions);\n    mongoOptions.metadata = (0, client_metadata_1.makeClientMetadata)(mongoOptions);\n    mongoOptions.extendedMetadata = (0, client_metadata_1.addContainerMetadata)(mongoOptions.metadata).then(undefined, utils_1.squashError); // rejections will be handled later\n    return mongoOptions;\n}\n/**\n * #### Throws if LB mode is true:\n * - hosts contains more than one host\n * - there is a replicaSet name set\n * - directConnection is set\n * - if srvMaxHosts is used when an srv connection string is passed in\n *\n * @throws MongoParseError\n */\nfunction validateLoadBalancedOptions(hosts, mongoOptions, isSrv) {\n    if (mongoOptions.loadBalanced) {\n        if (hosts.length > 1) {\n            throw new error_1.MongoParseError(LB_SINGLE_HOST_ERROR);\n        }\n        if (mongoOptions.replicaSet) {\n            throw new error_1.MongoParseError(LB_REPLICA_SET_ERROR);\n        }\n        if (mongoOptions.directConnection) {\n            throw new error_1.MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n        }\n        if (isSrv && mongoOptions.srvMaxHosts > 0) {\n            throw new error_1.MongoParseError('Cannot limit srv hosts with loadBalanced enabled');\n        }\n    }\n    return;\n}\nfunction setOption(mongoOptions, key, descriptor, values) {\n    const { target, type, transform } = descriptor;\n    const name = target ?? key;\n    switch (type) {\n        case 'boolean':\n            mongoOptions[name] = getBoolean(name, values[0]);\n            break;\n        case 'int':\n            mongoOptions[name] = getIntFromOptions(name, values[0]);\n            break;\n        case 'uint':\n            mongoOptions[name] = getUIntFromOptions(name, values[0]);\n            break;\n        case 'string':\n            if (values[0] == null) {\n                break;\n            }\n            mongoOptions[name] = String(values[0]);\n            break;\n        case 'record':\n            if (!(0, utils_1.isRecord)(values[0])) {\n                throw new error_1.MongoParseError(`${name} must be an object`);\n            }\n            mongoOptions[name] = values[0];\n            break;\n        case 'any':\n            mongoOptions[name] = values[0];\n            break;\n        default: {\n            if (!transform) {\n                throw new error_1.MongoParseError('Descriptors missing a type must define a transform');\n            }\n            const transformValue = transform({ name, options: mongoOptions, values });\n            mongoOptions[name] = transformValue;\n            break;\n        }\n    }\n}\nexports.OPTIONS = {\n    appName: {\n        type: 'string'\n    },\n    auth: {\n        target: 'credentials',\n        transform({ name, options, values: [value] }) {\n            if (!(0, utils_1.isRecord)(value, ['username', 'password'])) {\n                throw new error_1.MongoParseError(`${name} must be an object with 'username' and 'password' properties`);\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                username: value.username,\n                password: value.password\n            });\n        }\n    },\n    authMechanism: {\n        target: 'credentials',\n        transform({ options, values: [value] }) {\n            const mechanisms = Object.values(providers_1.AuthMechanism);\n            const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw `\\b${value}\\b`, 'i')));\n            if (!mechanism) {\n                throw new error_1.MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n            }\n            let source = options.credentials?.source;\n            if (mechanism === providers_1.AuthMechanism.MONGODB_PLAIN ||\n                providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)) {\n                // some mechanisms have '$external' as the Auth Source\n                source = '$external';\n            }\n            let password = options.credentials?.password;\n            if (mechanism === providers_1.AuthMechanism.MONGODB_X509 && password === '') {\n                password = undefined;\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                mechanism,\n                source,\n                password\n            });\n        }\n    },\n    // Note that if the authMechanismProperties contain a TOKEN_RESOURCE that has a\n    // comma in it, it MUST be supplied as a MongoClient option instead of in the\n    // connection string.\n    authMechanismProperties: {\n        target: 'credentials',\n        transform({ options, values }) {\n            // We can have a combination of options passed in the URI and options passed\n            // as an object to the MongoClient. So we must transform the string options\n            // as well as merge them together with a potentially provided object.\n            let mechanismProperties = Object.create(null);\n            for (const optionValue of values) {\n                if (typeof optionValue === 'string') {\n                    for (const [key, value] of entriesFromString(optionValue)) {\n                        try {\n                            mechanismProperties[key] = getBoolean(key, value);\n                        }\n                        catch {\n                            mechanismProperties[key] = value;\n                        }\n                    }\n                }\n                else {\n                    if (!(0, utils_1.isRecord)(optionValue)) {\n                        throw new error_1.MongoParseError('AuthMechanismProperties must be an object');\n                    }\n                    mechanismProperties = { ...optionValue };\n                }\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                mechanismProperties\n            });\n        }\n    },\n    authSource: {\n        target: 'credentials',\n        transform({ options, values: [value] }) {\n            const source = String(value);\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, { source });\n        }\n    },\n    autoEncryption: {\n        type: 'record'\n    },\n    autoSelectFamily: {\n        type: 'boolean',\n        default: true\n    },\n    autoSelectFamilyAttemptTimeout: {\n        type: 'uint'\n    },\n    bsonRegExp: {\n        type: 'boolean'\n    },\n    serverApi: {\n        target: 'serverApi',\n        transform({ values: [version] }) {\n            const serverApiToValidate = typeof version === 'string' ? { version } : version;\n            const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n            if (!versionToValidate) {\n                throw new error_1.MongoParseError(`Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n            }\n            if (!Object.values(mongo_client_1.ServerApiVersion).some(v => v === versionToValidate)) {\n                throw new error_1.MongoParseError(`Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n            }\n            return serverApiToValidate;\n        }\n    },\n    checkKeys: {\n        type: 'boolean'\n    },\n    compressors: {\n        default: 'none',\n        target: 'compressors',\n        transform({ values }) {\n            const compressionList = new Set();\n            for (const compVal of values) {\n                const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n                if (!Array.isArray(compValArray)) {\n                    throw new error_1.MongoInvalidArgumentError('compressors must be an array or a comma-delimited list of strings');\n                }\n                for (const c of compValArray) {\n                    if (Object.keys(compression_1.Compressor).includes(String(c))) {\n                        compressionList.add(String(c));\n                    }\n                    else {\n                        throw new error_1.MongoInvalidArgumentError(`${c} is not a valid compression mechanism. Must be one of: ${Object.keys(compression_1.Compressor)}.`);\n                    }\n                }\n            }\n            return [...compressionList];\n        }\n    },\n    connectTimeoutMS: {\n        default: 30000,\n        type: 'uint'\n    },\n    dbName: {\n        type: 'string'\n    },\n    directConnection: {\n        default: false,\n        type: 'boolean'\n    },\n    driverInfo: {\n        default: {},\n        type: 'record'\n    },\n    enableUtf8Validation: { type: 'boolean', default: true },\n    family: {\n        transform({ name, values: [value] }) {\n            const transformValue = getIntFromOptions(name, value);\n            if (transformValue === 4 || transformValue === 6) {\n                return transformValue;\n            }\n            throw new error_1.MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n        }\n    },\n    fieldsAsRaw: {\n        type: 'record'\n    },\n    forceServerObjectId: {\n        default: false,\n        type: 'boolean'\n    },\n    fsync: {\n        deprecated: 'Please use journal instead',\n        target: 'writeConcern',\n        transform({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    fsync: getBoolean(name, value)\n                }\n            });\n            if (!wc)\n                throw new error_1.MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n            return wc;\n        }\n    },\n    heartbeatFrequencyMS: {\n        default: 10000,\n        type: 'uint'\n    },\n    ignoreUndefined: {\n        type: 'boolean'\n    },\n    j: {\n        deprecated: 'Please use journal instead',\n        target: 'writeConcern',\n        transform({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    journal: getBoolean(name, value)\n                }\n            });\n            if (!wc)\n                throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n            return wc;\n        }\n    },\n    journal: {\n        target: 'writeConcern',\n        transform({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    journal: getBoolean(name, value)\n                }\n            });\n            if (!wc)\n                throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n            return wc;\n        }\n    },\n    loadBalanced: {\n        default: false,\n        type: 'boolean'\n    },\n    localThresholdMS: {\n        default: 15,\n        type: 'uint'\n    },\n    maxConnecting: {\n        default: 2,\n        transform({ name, values: [value] }) {\n            const maxConnecting = getUIntFromOptions(name, value);\n            if (maxConnecting === 0) {\n                throw new error_1.MongoInvalidArgumentError('maxConnecting must be > 0 if specified');\n            }\n            return maxConnecting;\n        }\n    },\n    maxIdleTimeMS: {\n        default: 0,\n        type: 'uint'\n    },\n    maxPoolSize: {\n        default: 100,\n        type: 'uint'\n    },\n    maxStalenessSeconds: {\n        target: 'readPreference',\n        transform({ name, options, values: [value] }) {\n            const maxStalenessSeconds = getUIntFromOptions(name, value);\n            if (options.readPreference) {\n                return read_preference_1.ReadPreference.fromOptions({\n                    readPreference: { ...options.readPreference, maxStalenessSeconds }\n                });\n            }\n            else {\n                return new read_preference_1.ReadPreference('secondary', undefined, { maxStalenessSeconds });\n            }\n        }\n    },\n    minInternalBufferSize: {\n        type: 'uint'\n    },\n    minPoolSize: {\n        default: 0,\n        type: 'uint'\n    },\n    minHeartbeatFrequencyMS: {\n        default: 500,\n        type: 'uint'\n    },\n    monitorCommands: {\n        default: false,\n        type: 'boolean'\n    },\n    name: {\n        target: 'driverInfo',\n        transform({ values: [value], options }) {\n            return { ...options.driverInfo, name: String(value) };\n        }\n    },\n    noDelay: {\n        default: true,\n        type: 'boolean'\n    },\n    pkFactory: {\n        default: utils_1.DEFAULT_PK_FACTORY,\n        transform({ values: [value] }) {\n            if ((0, utils_1.isRecord)(value, ['createPk']) && typeof value.createPk === 'function') {\n                return value;\n            }\n            throw new error_1.MongoParseError(`Option pkFactory must be an object with a createPk function, got ${value}`);\n        }\n    },\n    promoteBuffers: {\n        type: 'boolean'\n    },\n    promoteLongs: {\n        type: 'boolean'\n    },\n    promoteValues: {\n        type: 'boolean'\n    },\n    useBigInt64: {\n        type: 'boolean'\n    },\n    proxyHost: {\n        type: 'string'\n    },\n    proxyPassword: {\n        type: 'string'\n    },\n    proxyPort: {\n        type: 'uint'\n    },\n    proxyUsername: {\n        type: 'string'\n    },\n    raw: {\n        default: false,\n        type: 'boolean'\n    },\n    readConcern: {\n        transform({ values: [value], options }) {\n            if (value instanceof read_concern_1.ReadConcern || (0, utils_1.isRecord)(value, ['level'])) {\n                return read_concern_1.ReadConcern.fromOptions({ ...options.readConcern, ...value });\n            }\n            throw new error_1.MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n        }\n    },\n    readConcernLevel: {\n        target: 'readConcern',\n        transform({ values: [level], options }) {\n            return read_concern_1.ReadConcern.fromOptions({\n                ...options.readConcern,\n                level: level\n            });\n        }\n    },\n    readPreference: {\n        default: read_preference_1.ReadPreference.primary,\n        transform({ values: [value], options }) {\n            if (value instanceof read_preference_1.ReadPreference) {\n                return read_preference_1.ReadPreference.fromOptions({\n                    readPreference: { ...options.readPreference, ...value },\n                    ...value\n                });\n            }\n            if ((0, utils_1.isRecord)(value, ['mode'])) {\n                const rp = read_preference_1.ReadPreference.fromOptions({\n                    readPreference: { ...options.readPreference, ...value },\n                    ...value\n                });\n                if (rp)\n                    return rp;\n                else\n                    throw new error_1.MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n            }\n            if (typeof value === 'string') {\n                const rpOpts = {\n                    hedge: options.readPreference?.hedge,\n                    maxStalenessSeconds: options.readPreference?.maxStalenessSeconds\n                };\n                return new read_preference_1.ReadPreference(value, options.readPreference?.tags, rpOpts);\n            }\n            throw new error_1.MongoParseError(`Unknown ReadPreference value: ${value}`);\n        }\n    },\n    readPreferenceTags: {\n        target: 'readPreference',\n        transform({ values, options }) {\n            const tags = Array.isArray(values[0])\n                ? values[0]\n                : values;\n            const readPreferenceTags = [];\n            for (const tag of tags) {\n                const readPreferenceTag = Object.create(null);\n                if (typeof tag === 'string') {\n                    for (const [k, v] of entriesFromString(tag)) {\n                        readPreferenceTag[k] = v;\n                    }\n                }\n                if ((0, utils_1.isRecord)(tag)) {\n                    for (const [k, v] of Object.entries(tag)) {\n                        readPreferenceTag[k] = v;\n                    }\n                }\n                readPreferenceTags.push(readPreferenceTag);\n            }\n            return read_preference_1.ReadPreference.fromOptions({\n                readPreference: options.readPreference,\n                readPreferenceTags\n            });\n        }\n    },\n    replicaSet: {\n        type: 'string'\n    },\n    retryReads: {\n        default: true,\n        type: 'boolean'\n    },\n    retryWrites: {\n        default: true,\n        type: 'boolean'\n    },\n    serializeFunctions: {\n        type: 'boolean'\n    },\n    serverMonitoringMode: {\n        default: 'auto',\n        transform({ values: [value] }) {\n            if (!Object.values(monitor_1.ServerMonitoringMode).includes(value)) {\n                throw new error_1.MongoParseError('serverMonitoringMode must be one of `auto`, `poll`, or `stream`');\n            }\n            return value;\n        }\n    },\n    serverSelectionTimeoutMS: {\n        default: 30000,\n        type: 'uint'\n    },\n    servername: {\n        type: 'string'\n    },\n    socketTimeoutMS: {\n        default: 0,\n        type: 'uint'\n    },\n    srvMaxHosts: {\n        type: 'uint',\n        default: 0\n    },\n    srvServiceName: {\n        type: 'string',\n        default: 'mongodb'\n    },\n    ssl: {\n        target: 'tls',\n        type: 'boolean'\n    },\n    timeoutMS: {\n        type: 'uint'\n    },\n    tls: {\n        type: 'boolean'\n    },\n    tlsAllowInvalidCertificates: {\n        target: 'rejectUnauthorized',\n        transform({ name, values: [value] }) {\n            // allowInvalidCertificates is the inverse of rejectUnauthorized\n            return !getBoolean(name, value);\n        }\n    },\n    tlsAllowInvalidHostnames: {\n        target: 'checkServerIdentity',\n        transform({ name, values: [value] }) {\n            // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n            return getBoolean(name, value) ? () => undefined : undefined;\n        }\n    },\n    tlsCAFile: {\n        type: 'string'\n    },\n    tlsCRLFile: {\n        type: 'string'\n    },\n    tlsCertificateKeyFile: {\n        type: 'string'\n    },\n    tlsCertificateKeyFilePassword: {\n        target: 'passphrase',\n        type: 'any'\n    },\n    tlsInsecure: {\n        transform({ name, options, values: [value] }) {\n            const tlsInsecure = getBoolean(name, value);\n            if (tlsInsecure) {\n                options.checkServerIdentity = () => undefined;\n                options.rejectUnauthorized = false;\n            }\n            else {\n                options.checkServerIdentity = options.tlsAllowInvalidHostnames\n                    ? () => undefined\n                    : undefined;\n                options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n            }\n            return tlsInsecure;\n        }\n    },\n    w: {\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            return write_concern_1.WriteConcern.fromOptions({ writeConcern: { ...options.writeConcern, w: value } });\n        }\n    },\n    waitQueueTimeoutMS: {\n        default: 0,\n        type: 'uint'\n    },\n    writeConcern: {\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            if ((0, utils_1.isRecord)(value) || value instanceof write_concern_1.WriteConcern) {\n                return write_concern_1.WriteConcern.fromOptions({\n                    writeConcern: {\n                        ...options.writeConcern,\n                        ...value\n                    }\n                });\n            }\n            else if (value === 'majority' || typeof value === 'number') {\n                return write_concern_1.WriteConcern.fromOptions({\n                    writeConcern: {\n                        ...options.writeConcern,\n                        w: value\n                    }\n                });\n            }\n            throw new error_1.MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n        }\n    },\n    wtimeout: {\n        deprecated: 'Please use wtimeoutMS instead',\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    wtimeout: getUIntFromOptions('wtimeout', value)\n                }\n            });\n            if (wc)\n                return wc;\n            throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n        }\n    },\n    wtimeoutMS: {\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    wtimeoutMS: getUIntFromOptions('wtimeoutMS', value)\n                }\n            });\n            if (wc)\n                return wc;\n            throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n        }\n    },\n    zlibCompressionLevel: {\n        default: 0,\n        type: 'int'\n    },\n    // Custom types for modifying core behavior\n    connectionType: { type: 'any' },\n    srvPoller: { type: 'any' },\n    // Accepted Node.js Options\n    allowPartialTrustChain: { type: 'any' },\n    minDHSize: { type: 'any' },\n    pskCallback: { type: 'any' },\n    secureContext: { type: 'any' },\n    enableTrace: { type: 'any' },\n    requestCert: { type: 'any' },\n    rejectUnauthorized: { type: 'any' },\n    checkServerIdentity: { type: 'any' },\n    ALPNProtocols: { type: 'any' },\n    SNICallback: { type: 'any' },\n    session: { type: 'any' },\n    requestOCSP: { type: 'any' },\n    localAddress: { type: 'any' },\n    localPort: { type: 'any' },\n    hints: { type: 'any' },\n    lookup: { type: 'any' },\n    ca: { type: 'any' },\n    cert: { type: 'any' },\n    ciphers: { type: 'any' },\n    crl: { type: 'any' },\n    ecdhCurve: { type: 'any' },\n    key: { type: 'any' },\n    passphrase: { type: 'any' },\n    pfx: { type: 'any' },\n    secureProtocol: { type: 'any' },\n    index: { type: 'any' },\n    // Legacy options from v3 era\n    useNewUrlParser: {\n        type: 'boolean',\n        deprecated: 'useNewUrlParser has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version'\n    },\n    useUnifiedTopology: {\n        type: 'boolean',\n        deprecated: 'useUnifiedTopology has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version'\n    },\n    // MongoLogger\n    /**\n     * @internal\n     * TODO: NODE-5671 - remove internal flag\n     */\n    mongodbLogPath: {\n        transform({ values: [value] }) {\n            if (!((typeof value === 'string' && ['stderr', 'stdout'].includes(value)) ||\n                (value &&\n                    typeof value === 'object' &&\n                    'write' in value &&\n                    typeof value.write === 'function'))) {\n                throw new error_1.MongoAPIError(`Option 'mongodbLogPath' must be of type 'stderr' | 'stdout' | MongoDBLogWritable`);\n            }\n            return value;\n        }\n    },\n    /**\n     * @internal\n     * TODO: NODE-5671 - remove internal flag\n     */\n    mongodbLogComponentSeverities: {\n        transform({ values: [value] }) {\n            if (typeof value !== 'object' || !value) {\n                throw new error_1.MongoAPIError(`Option 'mongodbLogComponentSeverities' must be a non-null object`);\n            }\n            for (const [k, v] of Object.entries(value)) {\n                if (typeof v !== 'string' || typeof k !== 'string') {\n                    throw new error_1.MongoAPIError(`User input for option 'mongodbLogComponentSeverities' object cannot include a non-string key or value`);\n                }\n                if (!Object.values(mongo_logger_1.MongoLoggableComponent).some(val => val === k) && k !== 'default') {\n                    throw new error_1.MongoAPIError(`User input for option 'mongodbLogComponentSeverities' contains invalid key: ${k}`);\n                }\n                if (!Object.values(mongo_logger_1.SeverityLevel).some(val => val === v)) {\n                    throw new error_1.MongoAPIError(`Option 'mongodbLogComponentSeverities' does not support ${v} as a value for ${k}`);\n                }\n            }\n            return value;\n        }\n    },\n    /**\n     * @internal\n     * TODO: NODE-5671 - remove internal flag\n     */\n    mongodbLogMaxDocumentLength: { type: 'uint' }\n};\nexports.DEFAULT_OPTIONS = new CaseInsensitiveMap(Object.entries(exports.OPTIONS)\n    .filter(([, descriptor]) => descriptor.default != null)\n    .map(([k, d]) => [k, d.default]));\n/**\n * Set of permitted feature flags\n * @internal\n */\nexports.FEATURE_FLAGS = new Set([\n    Symbol.for('@@mdb.skipPingOnConnect'),\n    Symbol.for('@@mdb.enableMongoLogger'),\n    Symbol.for('@@mdb.internalLoggerConfig')\n]);\n//# sourceMappingURL=connection_string.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/connection_string.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/constants.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/constants.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.END = exports.CHANGE = exports.INIT = exports.MORE = exports.RESPONSE = exports.SERVER_HEARTBEAT_FAILED = exports.SERVER_HEARTBEAT_SUCCEEDED = exports.SERVER_HEARTBEAT_STARTED = exports.COMMAND_FAILED = exports.COMMAND_SUCCEEDED = exports.COMMAND_STARTED = exports.CLUSTER_TIME_RECEIVED = exports.CONNECTION_CHECKED_IN = exports.CONNECTION_CHECKED_OUT = exports.CONNECTION_CHECK_OUT_FAILED = exports.CONNECTION_CHECK_OUT_STARTED = exports.CONNECTION_CLOSED = exports.CONNECTION_READY = exports.CONNECTION_CREATED = exports.CONNECTION_POOL_READY = exports.CONNECTION_POOL_CLEARED = exports.CONNECTION_POOL_CLOSED = exports.CONNECTION_POOL_CREATED = exports.WAITING_FOR_SUITABLE_SERVER = exports.SERVER_SELECTION_SUCCEEDED = exports.SERVER_SELECTION_FAILED = exports.SERVER_SELECTION_STARTED = exports.TOPOLOGY_DESCRIPTION_CHANGED = exports.TOPOLOGY_CLOSED = exports.TOPOLOGY_OPENING = exports.SERVER_DESCRIPTION_CHANGED = exports.SERVER_CLOSED = exports.SERVER_OPENING = exports.DESCRIPTION_RECEIVED = exports.UNPINNED = exports.PINNED = exports.MESSAGE = exports.ENDED = exports.CLOSED = exports.CONNECT = exports.OPEN = exports.CLOSE = exports.TIMEOUT = exports.ERROR = exports.SYSTEM_JS_COLLECTION = exports.SYSTEM_COMMAND_COLLECTION = exports.SYSTEM_USER_COLLECTION = exports.SYSTEM_PROFILE_COLLECTION = exports.SYSTEM_INDEX_COLLECTION = exports.SYSTEM_NAMESPACE_COLLECTION = void 0;\nexports.kDecoratedKeys = exports.kDecorateResult = exports.LEGACY_HELLO_COMMAND_CAMEL_CASE = exports.LEGACY_HELLO_COMMAND = exports.MONGO_CLIENT_EVENTS = exports.LOCAL_SERVER_EVENTS = exports.SERVER_RELAY_EVENTS = exports.APM_EVENTS = exports.TOPOLOGY_EVENTS = exports.CMAP_EVENTS = exports.HEARTBEAT_EVENTS = exports.RESUME_TOKEN_CHANGED = void 0;\n/* eslint-disable @typescript-eslint/no-unnecessary-type-assertion */\nexports.SYSTEM_NAMESPACE_COLLECTION = 'system.namespaces';\nexports.SYSTEM_INDEX_COLLECTION = 'system.indexes';\nexports.SYSTEM_PROFILE_COLLECTION = 'system.profile';\nexports.SYSTEM_USER_COLLECTION = 'system.users';\nexports.SYSTEM_COMMAND_COLLECTION = '$cmd';\nexports.SYSTEM_JS_COLLECTION = 'system.js';\n// events\nexports.ERROR = 'error';\nexports.TIMEOUT = 'timeout';\nexports.CLOSE = 'close';\nexports.OPEN = 'open';\nexports.CONNECT = 'connect';\nexports.CLOSED = 'closed';\nexports.ENDED = 'ended';\nexports.MESSAGE = 'message';\nexports.PINNED = 'pinned';\nexports.UNPINNED = 'unpinned';\nexports.DESCRIPTION_RECEIVED = 'descriptionReceived';\n/** @internal */\nexports.SERVER_OPENING = 'serverOpening';\n/** @internal */\nexports.SERVER_CLOSED = 'serverClosed';\n/** @internal */\nexports.SERVER_DESCRIPTION_CHANGED = 'serverDescriptionChanged';\n/** @internal */\nexports.TOPOLOGY_OPENING = 'topologyOpening';\n/** @internal */\nexports.TOPOLOGY_CLOSED = 'topologyClosed';\n/** @internal */\nexports.TOPOLOGY_DESCRIPTION_CHANGED = 'topologyDescriptionChanged';\n/** @internal */\nexports.SERVER_SELECTION_STARTED = 'serverSelectionStarted';\n/** @internal */\nexports.SERVER_SELECTION_FAILED = 'serverSelectionFailed';\n/** @internal */\nexports.SERVER_SELECTION_SUCCEEDED = 'serverSelectionSucceeded';\n/** @internal */\nexports.WAITING_FOR_SUITABLE_SERVER = 'waitingForSuitableServer';\n/** @internal */\nexports.CONNECTION_POOL_CREATED = 'connectionPoolCreated';\n/** @internal */\nexports.CONNECTION_POOL_CLOSED = 'connectionPoolClosed';\n/** @internal */\nexports.CONNECTION_POOL_CLEARED = 'connectionPoolCleared';\n/** @internal */\nexports.CONNECTION_POOL_READY = 'connectionPoolReady';\n/** @internal */\nexports.CONNECTION_CREATED = 'connectionCreated';\n/** @internal */\nexports.CONNECTION_READY = 'connectionReady';\n/** @internal */\nexports.CONNECTION_CLOSED = 'connectionClosed';\n/** @internal */\nexports.CONNECTION_CHECK_OUT_STARTED = 'connectionCheckOutStarted';\n/** @internal */\nexports.CONNECTION_CHECK_OUT_FAILED = 'connectionCheckOutFailed';\n/** @internal */\nexports.CONNECTION_CHECKED_OUT = 'connectionCheckedOut';\n/** @internal */\nexports.CONNECTION_CHECKED_IN = 'connectionCheckedIn';\nexports.CLUSTER_TIME_RECEIVED = 'clusterTimeReceived';\n/** @internal */\nexports.COMMAND_STARTED = 'commandStarted';\n/** @internal */\nexports.COMMAND_SUCCEEDED = 'commandSucceeded';\n/** @internal */\nexports.COMMAND_FAILED = 'commandFailed';\n/** @internal */\nexports.SERVER_HEARTBEAT_STARTED = 'serverHeartbeatStarted';\n/** @internal */\nexports.SERVER_HEARTBEAT_SUCCEEDED = 'serverHeartbeatSucceeded';\n/** @internal */\nexports.SERVER_HEARTBEAT_FAILED = 'serverHeartbeatFailed';\nexports.RESPONSE = 'response';\nexports.MORE = 'more';\nexports.INIT = 'init';\nexports.CHANGE = 'change';\nexports.END = 'end';\nexports.RESUME_TOKEN_CHANGED = 'resumeTokenChanged';\n/** @public */\nexports.HEARTBEAT_EVENTS = Object.freeze([\n    exports.SERVER_HEARTBEAT_STARTED,\n    exports.SERVER_HEARTBEAT_SUCCEEDED,\n    exports.SERVER_HEARTBEAT_FAILED\n]);\n/** @public */\nexports.CMAP_EVENTS = Object.freeze([\n    exports.CONNECTION_POOL_CREATED,\n    exports.CONNECTION_POOL_READY,\n    exports.CONNECTION_POOL_CLEARED,\n    exports.CONNECTION_POOL_CLOSED,\n    exports.CONNECTION_CREATED,\n    exports.CONNECTION_READY,\n    exports.CONNECTION_CLOSED,\n    exports.CONNECTION_CHECK_OUT_STARTED,\n    exports.CONNECTION_CHECK_OUT_FAILED,\n    exports.CONNECTION_CHECKED_OUT,\n    exports.CONNECTION_CHECKED_IN\n]);\n/** @public */\nexports.TOPOLOGY_EVENTS = Object.freeze([\n    exports.SERVER_OPENING,\n    exports.SERVER_CLOSED,\n    exports.SERVER_DESCRIPTION_CHANGED,\n    exports.TOPOLOGY_OPENING,\n    exports.TOPOLOGY_CLOSED,\n    exports.TOPOLOGY_DESCRIPTION_CHANGED,\n    exports.ERROR,\n    exports.TIMEOUT,\n    exports.CLOSE\n]);\n/** @public */\nexports.APM_EVENTS = Object.freeze([\n    exports.COMMAND_STARTED,\n    exports.COMMAND_SUCCEEDED,\n    exports.COMMAND_FAILED\n]);\n/**\n * All events that we relay to the `Topology`\n * @internal\n */\nexports.SERVER_RELAY_EVENTS = Object.freeze([\n    exports.SERVER_HEARTBEAT_STARTED,\n    exports.SERVER_HEARTBEAT_SUCCEEDED,\n    exports.SERVER_HEARTBEAT_FAILED,\n    exports.COMMAND_STARTED,\n    exports.COMMAND_SUCCEEDED,\n    exports.COMMAND_FAILED,\n    ...exports.CMAP_EVENTS\n]);\n/**\n * All events we listen to from `Server` instances, but do not forward to the client\n * @internal\n */\nexports.LOCAL_SERVER_EVENTS = Object.freeze([\n    exports.CONNECT,\n    exports.DESCRIPTION_RECEIVED,\n    exports.CLOSED,\n    exports.ENDED\n]);\n/** @public */\nexports.MONGO_CLIENT_EVENTS = Object.freeze([\n    ...exports.CMAP_EVENTS,\n    ...exports.APM_EVENTS,\n    ...exports.TOPOLOGY_EVENTS,\n    ...exports.HEARTBEAT_EVENTS\n]);\n/**\n * @internal\n * The legacy hello command that was deprecated in MongoDB 5.0.\n */\nexports.LEGACY_HELLO_COMMAND = 'ismaster';\n/**\n * @internal\n * The legacy hello command that was deprecated in MongoDB 5.0.\n */\nexports.LEGACY_HELLO_COMMAND_CAMEL_CASE = 'isMaster';\n// Typescript errors if we index objects with `Symbol.for(...)`, so\n// to avoid TS errors we pull them out into variables.  Then we can type\n// the objects (and class) that we expect to see them on and prevent TS\n// errors.\n/** @internal */\nexports.kDecorateResult = Symbol.for('@@mdb.decorateDecryptionResult');\n/** @internal */\nexports.kDecoratedKeys = Symbol.for('@@mdb.decryptedKeys');\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/constants.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/abstract_cursor.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/abstract_cursor.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AbstractCursor = exports.CURSOR_FLAGS = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_types.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/execute_operation.js\");\nconst get_more_1 = __webpack_require__(/*! ../operations/get_more */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/get_more.js\");\nconst kill_cursors_1 = __webpack_require__(/*! ../operations/kill_cursors */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/kill_cursors.js\");\nconst read_concern_1 = __webpack_require__(/*! ../read_concern */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_preference.js\");\nconst resource_management_1 = __webpack_require__(/*! ../resource_management */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/resource_management.js\");\nconst sessions_1 = __webpack_require__(/*! ../sessions */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sessions.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\n/** @public */\nexports.CURSOR_FLAGS = [\n    'tailable',\n    'oplogReplay',\n    'noCursorTimeout',\n    'awaitData',\n    'exhaust',\n    'partial'\n];\n/** @public */\nclass AbstractCursor extends mongo_types_1.TypedEventEmitter {\n    /** @internal */\n    constructor(client, namespace, options = {}) {\n        super();\n        /** @internal */\n        this.documents = null;\n        /** @internal */\n        this.hasEmittedClose = false;\n        if (!client.s.isMongoClient) {\n            throw new error_1.MongoRuntimeError('Cursor must be constructed with MongoClient');\n        }\n        this.cursorClient = client;\n        this.cursorNamespace = namespace;\n        this.cursorId = null;\n        this.initialized = false;\n        this.isClosed = false;\n        this.isKilled = false;\n        this.cursorOptions = {\n            readPreference: options.readPreference && options.readPreference instanceof read_preference_1.ReadPreference\n                ? options.readPreference\n                : read_preference_1.ReadPreference.primary,\n            ...(0, bson_1.pluckBSONSerializeOptions)(options)\n        };\n        this.cursorOptions.timeoutMS = options.timeoutMS;\n        const readConcern = read_concern_1.ReadConcern.fromOptions(options);\n        if (readConcern) {\n            this.cursorOptions.readConcern = readConcern;\n        }\n        if (typeof options.batchSize === 'number') {\n            this.cursorOptions.batchSize = options.batchSize;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            this.cursorOptions.comment = options.comment;\n        }\n        if (typeof options.maxTimeMS === 'number') {\n            this.cursorOptions.maxTimeMS = options.maxTimeMS;\n        }\n        if (typeof options.maxAwaitTimeMS === 'number') {\n            this.cursorOptions.maxAwaitTimeMS = options.maxAwaitTimeMS;\n        }\n        if (options.session instanceof sessions_1.ClientSession) {\n            this.cursorSession = options.session;\n        }\n        else {\n            this.cursorSession = this.cursorClient.startSession({ owner: this, explicit: false });\n        }\n        this.deserializationOptions = {\n            ...this.cursorOptions,\n            validation: {\n                utf8: options?.enableUtf8Validation === false ? false : true\n            }\n        };\n    }\n    /**\n     * The cursor has no id until it receives a response from the initial cursor creating command.\n     *\n     * It is non-zero for as long as the database has an open cursor.\n     *\n     * The initiating command may receive a zero id if the entire result is in the `firstBatch`.\n     */\n    get id() {\n        return this.cursorId ?? undefined;\n    }\n    /** @internal */\n    get isDead() {\n        return (this.cursorId?.isZero() ?? false) || this.isClosed || this.isKilled;\n    }\n    /** @internal */\n    get client() {\n        return this.cursorClient;\n    }\n    /** @internal */\n    get server() {\n        return this.selectedServer;\n    }\n    get namespace() {\n        return this.cursorNamespace;\n    }\n    get readPreference() {\n        return this.cursorOptions.readPreference;\n    }\n    get readConcern() {\n        return this.cursorOptions.readConcern;\n    }\n    /** @internal */\n    get session() {\n        return this.cursorSession;\n    }\n    set session(clientSession) {\n        this.cursorSession = clientSession;\n    }\n    /**\n     * The cursor is closed and all remaining locally buffered documents have been iterated.\n     */\n    get closed() {\n        return this.isClosed && (this.documents?.length ?? 0) === 0;\n    }\n    /**\n     * A `killCursors` command was attempted on this cursor.\n     * This is performed if the cursor id is non zero.\n     */\n    get killed() {\n        return this.isKilled;\n    }\n    get loadBalanced() {\n        return !!this.cursorClient.topology?.loadBalanced;\n    }\n    /** @internal */\n    async asyncDispose() {\n        await this.close();\n    }\n    /** Returns current buffered documents length */\n    bufferedCount() {\n        return this.documents?.length ?? 0;\n    }\n    /** Returns current buffered documents */\n    readBufferedDocuments(number) {\n        const bufferedDocs = [];\n        const documentsToRead = Math.min(number ?? this.documents?.length ?? 0, this.documents?.length ?? 0);\n        for (let count = 0; count < documentsToRead; count++) {\n            const document = this.documents?.shift(this.deserializationOptions);\n            if (document != null) {\n                bufferedDocs.push(document);\n            }\n        }\n        return bufferedDocs;\n    }\n    async *[Symbol.asyncIterator]() {\n        if (this.closed) {\n            return;\n        }\n        try {\n            while (true) {\n                if (this.isKilled) {\n                    return;\n                }\n                if (this.closed) {\n                    return;\n                }\n                if (this.cursorId != null && this.isDead && (this.documents?.length ?? 0) === 0) {\n                    return;\n                }\n                const document = await this.next();\n                // eslint-disable-next-line no-restricted-syntax\n                if (document === null) {\n                    return;\n                }\n                yield document;\n            }\n        }\n        finally {\n            // Only close the cursor if it has not already been closed. This finally clause handles\n            // the case when a user would break out of a for await of loop early.\n            if (!this.isClosed) {\n                try {\n                    await this.close();\n                }\n                catch (error) {\n                    (0, utils_1.squashError)(error);\n                }\n            }\n        }\n    }\n    stream(options) {\n        if (options?.transform) {\n            const transform = options.transform;\n            const readable = new ReadableCursorStream(this);\n            const transformedStream = readable.pipe(new stream_1.Transform({\n                objectMode: true,\n                highWaterMark: 1,\n                transform(chunk, _, callback) {\n                    try {\n                        const transformed = transform(chunk);\n                        callback(undefined, transformed);\n                    }\n                    catch (err) {\n                        callback(err);\n                    }\n                }\n            }));\n            // Bubble errors to transformed stream, because otherwise no way\n            // to handle this error.\n            readable.on('error', err => transformedStream.emit('error', err));\n            return transformedStream;\n        }\n        return new ReadableCursorStream(this);\n    }\n    async hasNext() {\n        if (this.cursorId === bson_1.Long.ZERO) {\n            return false;\n        }\n        do {\n            if ((this.documents?.length ?? 0) !== 0) {\n                return true;\n            }\n            await this.fetchBatch();\n        } while (!this.isDead || (this.documents?.length ?? 0) !== 0);\n        return false;\n    }\n    /** Get the next available document from the cursor, returns null if no more documents are available. */\n    async next() {\n        if (this.cursorId === bson_1.Long.ZERO) {\n            throw new error_1.MongoCursorExhaustedError();\n        }\n        do {\n            const doc = this.documents?.shift(this.deserializationOptions);\n            if (doc != null) {\n                if (this.transform != null)\n                    return await this.transformDocument(doc);\n                return doc;\n            }\n            await this.fetchBatch();\n        } while (!this.isDead || (this.documents?.length ?? 0) !== 0);\n        return null;\n    }\n    /**\n     * Try to get the next available document from the cursor or `null` if an empty batch is returned\n     */\n    async tryNext() {\n        if (this.cursorId === bson_1.Long.ZERO) {\n            throw new error_1.MongoCursorExhaustedError();\n        }\n        let doc = this.documents?.shift(this.deserializationOptions);\n        if (doc != null) {\n            if (this.transform != null)\n                return await this.transformDocument(doc);\n            return doc;\n        }\n        await this.fetchBatch();\n        doc = this.documents?.shift(this.deserializationOptions);\n        if (doc != null) {\n            if (this.transform != null)\n                return await this.transformDocument(doc);\n            return doc;\n        }\n        return null;\n    }\n    /**\n     * Iterates over all the documents for this cursor using the iterator, callback pattern.\n     *\n     * If the iterator returns `false`, iteration will stop.\n     *\n     * @param iterator - The iteration callback.\n     * @deprecated - Will be removed in a future release. Use for await...of instead.\n     */\n    async forEach(iterator) {\n        if (typeof iterator !== 'function') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"iterator\" must be a function');\n        }\n        for await (const document of this) {\n            const result = iterator(document);\n            if (result === false) {\n                break;\n            }\n        }\n    }\n    /**\n     * Frees any client-side resources used by the cursor.\n     */\n    async close() {\n        await this.cleanup();\n    }\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there\n     * is enough memory to store the results. Note that the array only contains partial\n     * results when this cursor had been previously accessed. In that case,\n     * cursor.rewind() can be used to reset the cursor.\n     */\n    async toArray() {\n        const array = [];\n        // at the end of the loop (since readBufferedDocuments is called) the buffer will be empty\n        // then, the 'await of' syntax will run a getMore call\n        for await (const document of this) {\n            array.push(document);\n            const docs = this.readBufferedDocuments();\n            if (this.transform != null) {\n                for (const doc of docs) {\n                    array.push(await this.transformDocument(doc));\n                }\n            }\n            else {\n                array.push(...docs);\n            }\n        }\n        return array;\n    }\n    /**\n     * Add a cursor flag to the cursor\n     *\n     * @param flag - The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial' -.\n     * @param value - The flag boolean value.\n     */\n    addCursorFlag(flag, value) {\n        this.throwIfInitialized();\n        if (!exports.CURSOR_FLAGS.includes(flag)) {\n            throw new error_1.MongoInvalidArgumentError(`Flag ${flag} is not one of ${exports.CURSOR_FLAGS}`);\n        }\n        if (typeof value !== 'boolean') {\n            throw new error_1.MongoInvalidArgumentError(`Flag ${flag} must be a boolean value`);\n        }\n        this.cursorOptions[flag] = value;\n        return this;\n    }\n    /**\n     * Map all documents using the provided function\n     * If there is a transform set on the cursor, that will be called first and the result passed to\n     * this function's transform.\n     *\n     * @remarks\n     *\n     * **Note** Cursors use `null` internally to indicate that there are no more documents in the cursor. Providing a mapping\n     * function that maps values to `null` will result in the cursor closing itself before it has finished iterating\n     * all documents.  This will **not** result in a memory leak, just surprising behavior.  For example:\n     *\n     * ```typescript\n     * const cursor = collection.find({});\n     * cursor.map(() => null);\n     *\n     * const documents = await cursor.toArray();\n     * // documents is always [], regardless of how many documents are in the collection.\n     * ```\n     *\n     * Other falsey values are allowed:\n     *\n     * ```typescript\n     * const cursor = collection.find({});\n     * cursor.map(() => '');\n     *\n     * const documents = await cursor.toArray();\n     * // documents is now an array of empty strings\n     * ```\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling map,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: FindCursor<Document> = coll.find();\n     * const mappedCursor: FindCursor<number> = cursor.map(doc => Object.keys(doc).length);\n     * const keyCounts: number[] = await mappedCursor.toArray(); // cursor.toArray() still returns Document[]\n     * ```\n     * @param transform - The mapping transformation method.\n     */\n    map(transform) {\n        this.throwIfInitialized();\n        const oldTransform = this.transform;\n        if (oldTransform) {\n            this.transform = doc => {\n                return transform(oldTransform(doc));\n            };\n        }\n        else {\n            this.transform = transform;\n        }\n        return this;\n    }\n    /**\n     * Set the ReadPreference for the cursor.\n     *\n     * @param readPreference - The new read preference for the cursor.\n     */\n    withReadPreference(readPreference) {\n        this.throwIfInitialized();\n        if (readPreference instanceof read_preference_1.ReadPreference) {\n            this.cursorOptions.readPreference = readPreference;\n        }\n        else if (typeof readPreference === 'string') {\n            this.cursorOptions.readPreference = read_preference_1.ReadPreference.fromString(readPreference);\n        }\n        else {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference: ${readPreference}`);\n        }\n        return this;\n    }\n    /**\n     * Set the ReadPreference for the cursor.\n     *\n     * @param readPreference - The new read preference for the cursor.\n     */\n    withReadConcern(readConcern) {\n        this.throwIfInitialized();\n        const resolvedReadConcern = read_concern_1.ReadConcern.fromOptions({ readConcern });\n        if (resolvedReadConcern) {\n            this.cursorOptions.readConcern = resolvedReadConcern;\n        }\n        return this;\n    }\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n     *\n     * @param value - Number of milliseconds to wait before aborting the query.\n     */\n    maxTimeMS(value) {\n        this.throwIfInitialized();\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n        }\n        this.cursorOptions.maxTimeMS = value;\n        return this;\n    }\n    /**\n     * Set the batch size for the cursor.\n     *\n     * @param value - The number of documents to return per batch. See {@link https://www.mongodb.com/docs/manual/reference/command/find/|find command documentation}.\n     */\n    batchSize(value) {\n        this.throwIfInitialized();\n        if (this.cursorOptions.tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support batchSize');\n        }\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Operation \"batchSize\" requires an integer');\n        }\n        this.cursorOptions.batchSize = value;\n        return this;\n    }\n    /**\n     * Rewind this cursor to its uninitialized state. Any options that are present on the cursor will\n     * remain in effect. Iterating this cursor will cause new queries to be sent to the server, even\n     * if the resultant data has already been retrieved by this cursor.\n     */\n    rewind() {\n        if (!this.initialized) {\n            return;\n        }\n        this.cursorId = null;\n        this.documents?.clear();\n        this.isClosed = false;\n        this.isKilled = false;\n        this.initialized = false;\n        const session = this.cursorSession;\n        if (session) {\n            // We only want to end this session if we created it, and it hasn't ended yet\n            if (session.explicit === false) {\n                if (!session.hasEnded) {\n                    session.endSession().then(undefined, utils_1.squashError);\n                }\n                this.cursorSession = this.cursorClient.startSession({ owner: this, explicit: false });\n            }\n        }\n    }\n    /** @internal */\n    async getMore(batchSize) {\n        if (this.cursorId == null) {\n            throw new error_1.MongoRuntimeError('Unexpected null cursor id. A cursor creating command should have set this');\n        }\n        if (this.selectedServer == null) {\n            throw new error_1.MongoRuntimeError('Unexpected null selectedServer. A cursor creating command should have set this');\n        }\n        const getMoreOperation = new get_more_1.GetMoreOperation(this.cursorNamespace, this.cursorId, this.selectedServer, {\n            ...this.cursorOptions,\n            session: this.cursorSession,\n            batchSize\n        });\n        return await (0, execute_operation_1.executeOperation)(this.cursorClient, getMoreOperation);\n    }\n    /**\n     * @internal\n     *\n     * This function is exposed for the unified test runner's createChangeStream\n     * operation.  We cannot refactor to use the abstract _initialize method without\n     * a significant refactor.\n     */\n    async cursorInit() {\n        try {\n            const state = await this._initialize(this.cursorSession);\n            const response = state.response;\n            this.selectedServer = state.server;\n            this.cursorId = response.id;\n            this.cursorNamespace = response.ns ?? this.namespace;\n            this.documents = response;\n            this.initialized = true; // the cursor is now initialized, even if it is dead\n        }\n        catch (error) {\n            // the cursor is now initialized, even if an error occurred\n            this.initialized = true;\n            await this.cleanup(error);\n            throw error;\n        }\n        if (this.isDead) {\n            await this.cleanup();\n        }\n        return;\n    }\n    /** @internal Attempt to obtain more documents */\n    async fetchBatch() {\n        if (this.isClosed) {\n            return;\n        }\n        if (this.isDead) {\n            // if the cursor is dead, we clean it up\n            // cleanupCursor should never throw, but if it does it indicates a bug in the driver\n            // and we should surface the error\n            await this.cleanup();\n            return;\n        }\n        if (this.cursorId == null) {\n            await this.cursorInit();\n            // If the cursor died or returned documents, return\n            if ((this.documents?.length ?? 0) !== 0 || this.isDead)\n                return;\n            // Otherwise, run a getMore\n        }\n        // otherwise need to call getMore\n        const batchSize = this.cursorOptions.batchSize || 1000;\n        try {\n            const response = await this.getMore(batchSize);\n            this.cursorId = response.id;\n            this.documents = response;\n        }\n        catch (error) {\n            try {\n                await this.cleanup(error);\n            }\n            catch (error) {\n                // `cleanupCursor` should never throw, squash and throw the original error\n                (0, utils_1.squashError)(error);\n            }\n            throw error;\n        }\n        if (this.isDead) {\n            // If we successfully received a response from a cursor BUT the cursor indicates that it is exhausted,\n            // we intentionally clean up the cursor to release its session back into the pool before the cursor\n            // is iterated.  This prevents a cursor that is exhausted on the server from holding\n            // onto a session indefinitely until the AbstractCursor is iterated.\n            //\n            // cleanupCursorAsync should never throw, but if it does it indicates a bug in the driver\n            // and we should surface the error\n            await this.cleanup();\n        }\n    }\n    /** @internal */\n    async cleanup(error) {\n        this.isClosed = true;\n        const session = this.cursorSession;\n        try {\n            if (!this.isKilled &&\n                this.cursorId &&\n                !this.cursorId.isZero() &&\n                this.cursorNamespace &&\n                this.selectedServer &&\n                !session.hasEnded) {\n                this.isKilled = true;\n                const cursorId = this.cursorId;\n                this.cursorId = bson_1.Long.ZERO;\n                await (0, execute_operation_1.executeOperation)(this.cursorClient, new kill_cursors_1.KillCursorsOperation(cursorId, this.cursorNamespace, this.selectedServer, {\n                    session\n                }));\n            }\n        }\n        catch (error) {\n            (0, utils_1.squashError)(error);\n        }\n        finally {\n            if (session?.owner === this) {\n                await session.endSession({ error });\n            }\n            if (!session?.inTransaction()) {\n                (0, sessions_1.maybeClearPinnedConnection)(session, { error });\n            }\n            this.emitClose();\n        }\n    }\n    /** @internal */\n    emitClose() {\n        try {\n            if (!this.hasEmittedClose && ((this.documents?.length ?? 0) === 0 || this.isClosed)) {\n                // @ts-expect-error: CursorEvents is generic so Parameters<CursorEvents[\"close\"]> may not be assignable to `[]`. Not sure how to require extenders do not add parameters.\n                this.emit('close');\n            }\n        }\n        finally {\n            this.hasEmittedClose = true;\n        }\n    }\n    /** @internal */\n    async transformDocument(document) {\n        if (this.transform == null)\n            return document;\n        try {\n            const transformedDocument = this.transform(document);\n            // eslint-disable-next-line no-restricted-syntax\n            if (transformedDocument === null) {\n                const TRANSFORM_TO_NULL_ERROR = 'Cursor returned a `null` document, but the cursor is not exhausted.  Mapping documents to `null` is not supported in the cursor transform.';\n                throw new error_1.MongoAPIError(TRANSFORM_TO_NULL_ERROR);\n            }\n            return transformedDocument;\n        }\n        catch (transformError) {\n            try {\n                await this.close();\n            }\n            catch (closeError) {\n                (0, utils_1.squashError)(closeError);\n            }\n            throw transformError;\n        }\n    }\n    /** @internal */\n    throwIfInitialized() {\n        if (this.initialized)\n            throw new error_1.MongoCursorInUseError();\n    }\n}\nexports.AbstractCursor = AbstractCursor;\n/** @event */\nAbstractCursor.CLOSE = 'close';\nclass ReadableCursorStream extends stream_1.Readable {\n    constructor(cursor) {\n        super({\n            objectMode: true,\n            autoDestroy: false,\n            highWaterMark: 1\n        });\n        this._readInProgress = false;\n        this._cursor = cursor;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _read(size) {\n        if (!this._readInProgress) {\n            this._readInProgress = true;\n            this._readNext();\n        }\n    }\n    _destroy(error, callback) {\n        this._cursor.close().then(() => callback(error), closeError => callback(closeError));\n    }\n    _readNext() {\n        if (this._cursor.id === bson_1.Long.ZERO) {\n            this.push(null);\n            return;\n        }\n        this._cursor.next().then(result => {\n            if (result == null) {\n                this.push(null);\n            }\n            else if (this.destroyed) {\n                this._cursor.close().then(undefined, utils_1.squashError);\n            }\n            else {\n                if (this.push(result)) {\n                    return this._readNext();\n                }\n                this._readInProgress = false;\n            }\n        }, err => {\n            // NOTE: This is questionable, but we have a test backing the behavior. It seems the\n            //       desired behavior is that a stream ends cleanly when a user explicitly closes\n            //       a client during iteration. Alternatively, we could do the \"right\" thing and\n            //       propagate the error message by removing this special case.\n            if (err.message.match(/server is closed/)) {\n                this._cursor.close().then(undefined, utils_1.squashError);\n                return this.push(null);\n            }\n            // NOTE: This is also perhaps questionable. The rationale here is that these errors tend\n            //       to be \"operation was interrupted\", where a cursor has been closed but there is an\n            //       active getMore in-flight. This used to check if the cursor was killed but once\n            //       that changed to happen in cleanup legitimate errors would not destroy the\n            //       stream. There are change streams test specifically test these cases.\n            if (err.message.match(/operation was interrupted/)) {\n                return this.push(null);\n            }\n            // NOTE: The two above checks on the message of the error will cause a null to be pushed\n            //       to the stream, thus closing the stream before the destroy call happens. This means\n            //       that either of those error messages on a change stream will not get a proper\n            //       'error' event to be emitted (the error passed to destroy). Change stream resumability\n            //       relies on that error event to be emitted to create its new cursor and thus was not\n            //       working on 4.4 servers because the error emitted on failover was \"interrupted at\n            //       shutdown\" while on 5.0+ it is \"The server is in quiesce mode and will shut down\".\n            //       See NODE-4475.\n            return this.destroy(err);\n        });\n    }\n}\n(0, resource_management_1.configureResourceManagement)(AbstractCursor.prototype);\n//# sourceMappingURL=abstract_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/abstract_cursor.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/aggregation_cursor.js":
/*!**************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/aggregation_cursor.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AggregationCursor = void 0;\nconst aggregate_1 = __webpack_require__(/*! ../operations/aggregate */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/aggregate.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/execute_operation.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/**\n * The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query. It supports\n * one by one document iteration, conversion to an array or can be iterated as a Node 4.X\n * or higher stream\n * @public\n */\nclass AggregationCursor extends abstract_cursor_1.AbstractCursor {\n    /** @internal */\n    constructor(client, namespace, pipeline = [], options = {}) {\n        super(client, namespace, options);\n        this.pipeline = pipeline;\n        this.aggregateOptions = options;\n    }\n    clone() {\n        const clonedOptions = (0, utils_1.mergeOptions)({}, this.aggregateOptions);\n        delete clonedOptions.session;\n        return new AggregationCursor(this.client, this.namespace, this.pipeline, {\n            ...clonedOptions\n        });\n    }\n    map(transform) {\n        return super.map(transform);\n    }\n    /** @internal */\n    async _initialize(session) {\n        const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this.pipeline, {\n            ...this.aggregateOptions,\n            ...this.cursorOptions,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.client, aggregateOperation);\n        return { server: aggregateOperation.server, session, response };\n    }\n    /** Execute the explain for the cursor */\n    async explain(verbosity) {\n        return (await (0, execute_operation_1.executeOperation)(this.client, new aggregate_1.AggregateOperation(this.namespace, this.pipeline, {\n            ...this.aggregateOptions, // NOTE: order matters here, we may need to refine this\n            ...this.cursorOptions,\n            explain: verbosity ?? true\n        }))).shift(this.deserializationOptions);\n    }\n    addStage(stage) {\n        this.throwIfInitialized();\n        this.pipeline.push(stage);\n        return this;\n    }\n    group($group) {\n        return this.addStage({ $group });\n    }\n    /** Add a limit stage to the aggregation pipeline */\n    limit($limit) {\n        return this.addStage({ $limit });\n    }\n    /** Add a match stage to the aggregation pipeline */\n    match($match) {\n        return this.addStage({ $match });\n    }\n    /** Add an out stage to the aggregation pipeline */\n    out($out) {\n        return this.addStage({ $out });\n    }\n    /**\n     * Add a project stage to the aggregation pipeline\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * By default chaining a projection to your cursor changes the returned type to the generic {@link Document} type.\n     * You should specify a parameterized type to have assertions on your final results.\n     *\n     * @example\n     * ```typescript\n     * // Best way\n     * const docs: AggregationCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * // Flexible way\n     * const docs: AggregationCursor<Document> = cursor.project({ _id: 0, a: true });\n     * ```\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling project,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: AggregationCursor<{ a: number; b: string }> = coll.aggregate([]);\n     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n     *\n     * // or always use chaining and save the final cursor\n     *\n     * const cursor = coll.aggregate().project<{ a: string }>({\n     *   _id: 0,\n     *   a: { $convert: { input: '$a', to: 'string' }\n     * }});\n     * ```\n     */\n    project($project) {\n        return this.addStage({ $project });\n    }\n    /** Add a lookup stage to the aggregation pipeline */\n    lookup($lookup) {\n        return this.addStage({ $lookup });\n    }\n    /** Add a redact stage to the aggregation pipeline */\n    redact($redact) {\n        return this.addStage({ $redact });\n    }\n    /** Add a skip stage to the aggregation pipeline */\n    skip($skip) {\n        return this.addStage({ $skip });\n    }\n    /** Add a sort stage to the aggregation pipeline */\n    sort($sort) {\n        return this.addStage({ $sort });\n    }\n    /** Add a unwind stage to the aggregation pipeline */\n    unwind($unwind) {\n        return this.addStage({ $unwind });\n    }\n    /** Add a geoNear stage to the aggregation pipeline */\n    geoNear($geoNear) {\n        return this.addStage({ $geoNear });\n    }\n}\nexports.AggregationCursor = AggregationCursor;\n//# sourceMappingURL=aggregation_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/aggregation_cursor.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/change_stream_cursor.js":
/*!****************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/change_stream_cursor.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChangeStreamCursor = void 0;\nconst change_stream_1 = __webpack_require__(/*! ../change_stream */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/change_stream.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/constants.js\");\nconst aggregate_1 = __webpack_require__(/*! ../operations/aggregate */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/aggregate.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/execute_operation.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @internal */\nclass ChangeStreamCursor extends abstract_cursor_1.AbstractCursor {\n    constructor(client, namespace, pipeline = [], options = {}) {\n        super(client, namespace, options);\n        this.pipeline = pipeline;\n        this.changeStreamCursorOptions = options;\n        this._resumeToken = null;\n        this.startAtOperationTime = options.startAtOperationTime ?? null;\n        if (options.startAfter) {\n            this.resumeToken = options.startAfter;\n        }\n        else if (options.resumeAfter) {\n            this.resumeToken = options.resumeAfter;\n        }\n    }\n    set resumeToken(token) {\n        this._resumeToken = token;\n        this.emit(change_stream_1.ChangeStream.RESUME_TOKEN_CHANGED, token);\n    }\n    get resumeToken() {\n        return this._resumeToken;\n    }\n    get resumeOptions() {\n        const options = {\n            ...this.changeStreamCursorOptions\n        };\n        for (const key of ['resumeAfter', 'startAfter', 'startAtOperationTime']) {\n            delete options[key];\n        }\n        if (this.resumeToken != null) {\n            if (this.changeStreamCursorOptions.startAfter && !this.hasReceived) {\n                options.startAfter = this.resumeToken;\n            }\n            else {\n                options.resumeAfter = this.resumeToken;\n            }\n        }\n        else if (this.startAtOperationTime != null && (0, utils_1.maxWireVersion)(this.server) >= 7) {\n            options.startAtOperationTime = this.startAtOperationTime;\n        }\n        return options;\n    }\n    cacheResumeToken(resumeToken) {\n        if (this.bufferedCount() === 0 && this.postBatchResumeToken) {\n            this.resumeToken = this.postBatchResumeToken;\n        }\n        else {\n            this.resumeToken = resumeToken;\n        }\n        this.hasReceived = true;\n    }\n    _processBatch(response) {\n        const { postBatchResumeToken } = response;\n        if (postBatchResumeToken) {\n            this.postBatchResumeToken = postBatchResumeToken;\n            if (response.batchSize === 0) {\n                this.resumeToken = postBatchResumeToken;\n            }\n        }\n    }\n    clone() {\n        return new ChangeStreamCursor(this.client, this.namespace, this.pipeline, {\n            ...this.cursorOptions\n        });\n    }\n    async _initialize(session) {\n        const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this.pipeline, {\n            ...this.cursorOptions,\n            ...this.changeStreamCursorOptions,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(session.client, aggregateOperation);\n        const server = aggregateOperation.server;\n        this.maxWireVersion = (0, utils_1.maxWireVersion)(server);\n        if (this.startAtOperationTime == null &&\n            this.changeStreamCursorOptions.resumeAfter == null &&\n            this.changeStreamCursorOptions.startAfter == null &&\n            this.maxWireVersion >= 7) {\n            this.startAtOperationTime = response.operationTime;\n        }\n        this._processBatch(response);\n        this.emit(constants_1.INIT, response);\n        this.emit(constants_1.RESPONSE);\n        return { server, session, response };\n    }\n    async getMore(batchSize) {\n        const response = await super.getMore(batchSize);\n        this.maxWireVersion = (0, utils_1.maxWireVersion)(this.server);\n        this._processBatch(response);\n        this.emit(change_stream_1.ChangeStream.MORE, response);\n        this.emit(change_stream_1.ChangeStream.RESPONSE);\n        return response;\n    }\n}\nexports.ChangeStreamCursor = ChangeStreamCursor;\n//# sourceMappingURL=change_stream_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jdXJzb3IvY2hhbmdlX3N0cmVhbV9jdXJzb3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCO0FBQzFCLHdCQUF3QixtQkFBTyxDQUFDLDhHQUFrQjtBQUNsRCxvQkFBb0IsbUJBQU8sQ0FBQyxzR0FBYztBQUMxQyxvQkFBb0IsbUJBQU8sQ0FBQyw0SEFBeUI7QUFDckQsNEJBQTRCLG1CQUFPLENBQUMsNElBQWlDO0FBQ3JFLGdCQUFnQixtQkFBTyxDQUFDLDhGQUFVO0FBQ2xDLDBCQUEwQixtQkFBTyxDQUFDLHdIQUFtQjtBQUNyRDtBQUNBO0FBQ0EsOERBQThEO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHVCQUF1QjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jdXJzb3IvY2hhbmdlX3N0cmVhbV9jdXJzb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNoYW5nZVN0cmVhbUN1cnNvciA9IHZvaWQgMDtcbmNvbnN0IGNoYW5nZV9zdHJlYW1fMSA9IHJlcXVpcmUoXCIuLi9jaGFuZ2Vfc3RyZWFtXCIpO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuY29uc3QgYWdncmVnYXRlXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0aW9ucy9hZ2dyZWdhdGVcIik7XG5jb25zdCBleGVjdXRlX29wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4uL29wZXJhdGlvbnMvZXhlY3V0ZV9vcGVyYXRpb25cIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3QgYWJzdHJhY3RfY3Vyc29yXzEgPSByZXF1aXJlKFwiLi9hYnN0cmFjdF9jdXJzb3JcIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBDaGFuZ2VTdHJlYW1DdXJzb3IgZXh0ZW5kcyBhYnN0cmFjdF9jdXJzb3JfMS5BYnN0cmFjdEN1cnNvciB7XG4gICAgY29uc3RydWN0b3IoY2xpZW50LCBuYW1lc3BhY2UsIHBpcGVsaW5lID0gW10sIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBzdXBlcihjbGllbnQsIG5hbWVzcGFjZSwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMucGlwZWxpbmUgPSBwaXBlbGluZTtcbiAgICAgICAgdGhpcy5jaGFuZ2VTdHJlYW1DdXJzb3JPcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5fcmVzdW1lVG9rZW4gPSBudWxsO1xuICAgICAgICB0aGlzLnN0YXJ0QXRPcGVyYXRpb25UaW1lID0gb3B0aW9ucy5zdGFydEF0T3BlcmF0aW9uVGltZSA/PyBudWxsO1xuICAgICAgICBpZiAob3B0aW9ucy5zdGFydEFmdGVyKSB7XG4gICAgICAgICAgICB0aGlzLnJlc3VtZVRva2VuID0gb3B0aW9ucy5zdGFydEFmdGVyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9wdGlvbnMucmVzdW1lQWZ0ZXIpIHtcbiAgICAgICAgICAgIHRoaXMucmVzdW1lVG9rZW4gPSBvcHRpb25zLnJlc3VtZUFmdGVyO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldCByZXN1bWVUb2tlbih0b2tlbikge1xuICAgICAgICB0aGlzLl9yZXN1bWVUb2tlbiA9IHRva2VuO1xuICAgICAgICB0aGlzLmVtaXQoY2hhbmdlX3N0cmVhbV8xLkNoYW5nZVN0cmVhbS5SRVNVTUVfVE9LRU5fQ0hBTkdFRCwgdG9rZW4pO1xuICAgIH1cbiAgICBnZXQgcmVzdW1lVG9rZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXN1bWVUb2tlbjtcbiAgICB9XG4gICAgZ2V0IHJlc3VtZU9wdGlvbnMoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAuLi50aGlzLmNoYW5nZVN0cmVhbUN1cnNvck9wdGlvbnNcbiAgICAgICAgfTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgWydyZXN1bWVBZnRlcicsICdzdGFydEFmdGVyJywgJ3N0YXJ0QXRPcGVyYXRpb25UaW1lJ10pIHtcbiAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucmVzdW1lVG9rZW4gIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2hhbmdlU3RyZWFtQ3Vyc29yT3B0aW9ucy5zdGFydEFmdGVyICYmICF0aGlzLmhhc1JlY2VpdmVkKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5zdGFydEFmdGVyID0gdGhpcy5yZXN1bWVUb2tlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMucmVzdW1lQWZ0ZXIgPSB0aGlzLnJlc3VtZVRva2VuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuc3RhcnRBdE9wZXJhdGlvblRpbWUgIT0gbnVsbCAmJiAoMCwgdXRpbHNfMS5tYXhXaXJlVmVyc2lvbikodGhpcy5zZXJ2ZXIpID49IDcpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuc3RhcnRBdE9wZXJhdGlvblRpbWUgPSB0aGlzLnN0YXJ0QXRPcGVyYXRpb25UaW1lO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH1cbiAgICBjYWNoZVJlc3VtZVRva2VuKHJlc3VtZVRva2VuKSB7XG4gICAgICAgIGlmICh0aGlzLmJ1ZmZlcmVkQ291bnQoKSA9PT0gMCAmJiB0aGlzLnBvc3RCYXRjaFJlc3VtZVRva2VuKSB7XG4gICAgICAgICAgICB0aGlzLnJlc3VtZVRva2VuID0gdGhpcy5wb3N0QmF0Y2hSZXN1bWVUb2tlbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVzdW1lVG9rZW4gPSByZXN1bWVUb2tlbjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhhc1JlY2VpdmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgX3Byb2Nlc3NCYXRjaChyZXNwb25zZSkge1xuICAgICAgICBjb25zdCB7IHBvc3RCYXRjaFJlc3VtZVRva2VuIH0gPSByZXNwb25zZTtcbiAgICAgICAgaWYgKHBvc3RCYXRjaFJlc3VtZVRva2VuKSB7XG4gICAgICAgICAgICB0aGlzLnBvc3RCYXRjaFJlc3VtZVRva2VuID0gcG9zdEJhdGNoUmVzdW1lVG9rZW47XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UuYmF0Y2hTaXplID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXN1bWVUb2tlbiA9IHBvc3RCYXRjaFJlc3VtZVRva2VuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IENoYW5nZVN0cmVhbUN1cnNvcih0aGlzLmNsaWVudCwgdGhpcy5uYW1lc3BhY2UsIHRoaXMucGlwZWxpbmUsIHtcbiAgICAgICAgICAgIC4uLnRoaXMuY3Vyc29yT3B0aW9uc1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgX2luaXRpYWxpemUoc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBhZ2dyZWdhdGVPcGVyYXRpb24gPSBuZXcgYWdncmVnYXRlXzEuQWdncmVnYXRlT3BlcmF0aW9uKHRoaXMubmFtZXNwYWNlLCB0aGlzLnBpcGVsaW5lLCB7XG4gICAgICAgICAgICAuLi50aGlzLmN1cnNvck9wdGlvbnMsXG4gICAgICAgICAgICAuLi50aGlzLmNoYW5nZVN0cmVhbUN1cnNvck9wdGlvbnMsXG4gICAgICAgICAgICBzZXNzaW9uXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0ICgwLCBleGVjdXRlX29wZXJhdGlvbl8xLmV4ZWN1dGVPcGVyYXRpb24pKHNlc3Npb24uY2xpZW50LCBhZ2dyZWdhdGVPcGVyYXRpb24pO1xuICAgICAgICBjb25zdCBzZXJ2ZXIgPSBhZ2dyZWdhdGVPcGVyYXRpb24uc2VydmVyO1xuICAgICAgICB0aGlzLm1heFdpcmVWZXJzaW9uID0gKDAsIHV0aWxzXzEubWF4V2lyZVZlcnNpb24pKHNlcnZlcik7XG4gICAgICAgIGlmICh0aGlzLnN0YXJ0QXRPcGVyYXRpb25UaW1lID09IG51bGwgJiZcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlU3RyZWFtQ3Vyc29yT3B0aW9ucy5yZXN1bWVBZnRlciA9PSBudWxsICYmXG4gICAgICAgICAgICB0aGlzLmNoYW5nZVN0cmVhbUN1cnNvck9wdGlvbnMuc3RhcnRBZnRlciA9PSBudWxsICYmXG4gICAgICAgICAgICB0aGlzLm1heFdpcmVWZXJzaW9uID49IDcpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRBdE9wZXJhdGlvblRpbWUgPSByZXNwb25zZS5vcGVyYXRpb25UaW1lO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Byb2Nlc3NCYXRjaChyZXNwb25zZSk7XG4gICAgICAgIHRoaXMuZW1pdChjb25zdGFudHNfMS5JTklULCByZXNwb25zZSk7XG4gICAgICAgIHRoaXMuZW1pdChjb25zdGFudHNfMS5SRVNQT05TRSk7XG4gICAgICAgIHJldHVybiB7IHNlcnZlciwgc2Vzc2lvbiwgcmVzcG9uc2UgfTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0TW9yZShiYXRjaFNpemUpIHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzdXBlci5nZXRNb3JlKGJhdGNoU2l6ZSk7XG4gICAgICAgIHRoaXMubWF4V2lyZVZlcnNpb24gPSAoMCwgdXRpbHNfMS5tYXhXaXJlVmVyc2lvbikodGhpcy5zZXJ2ZXIpO1xuICAgICAgICB0aGlzLl9wcm9jZXNzQmF0Y2gocmVzcG9uc2UpO1xuICAgICAgICB0aGlzLmVtaXQoY2hhbmdlX3N0cmVhbV8xLkNoYW5nZVN0cmVhbS5NT1JFLCByZXNwb25zZSk7XG4gICAgICAgIHRoaXMuZW1pdChjaGFuZ2Vfc3RyZWFtXzEuQ2hhbmdlU3RyZWFtLlJFU1BPTlNFKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbn1cbmV4cG9ydHMuQ2hhbmdlU3RyZWFtQ3Vyc29yID0gQ2hhbmdlU3RyZWFtQ3Vyc29yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hhbmdlX3N0cmVhbV9jdXJzb3IuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/change_stream_cursor.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/client_bulk_write_cursor.js":
/*!********************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/client_bulk_write_cursor.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ClientBulkWriteCursor = void 0;\nconst client_bulk_write_1 = __webpack_require__(/*! ../operations/client_bulk_write/client_bulk_write */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/client_bulk_write/client_bulk_write.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/execute_operation.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/**\n * This is the cursor that handles client bulk write operations. Note this is never\n * exposed directly to the user and is always immediately exhausted.\n * @internal\n */\nclass ClientBulkWriteCursor extends abstract_cursor_1.AbstractCursor {\n    /** @internal */\n    constructor(client, commandBuilder, options = {}) {\n        super(client, new utils_1.MongoDBNamespace('admin', '$cmd'), options);\n        this.commandBuilder = commandBuilder;\n        this.clientBulkWriteOptions = options;\n    }\n    /**\n     * We need a way to get the top level cursor response fields for\n     * generating the bulk write result, so we expose this here.\n     */\n    get response() {\n        if (this.cursorResponse)\n            return this.cursorResponse;\n        return null;\n    }\n    get operations() {\n        return this.commandBuilder.lastOperations;\n    }\n    clone() {\n        const clonedOptions = (0, utils_1.mergeOptions)({}, this.clientBulkWriteOptions);\n        delete clonedOptions.session;\n        return new ClientBulkWriteCursor(this.client, this.commandBuilder, {\n            ...clonedOptions\n        });\n    }\n    /** @internal */\n    async _initialize(session) {\n        const clientBulkWriteOperation = new client_bulk_write_1.ClientBulkWriteOperation(this.commandBuilder, {\n            ...this.clientBulkWriteOptions,\n            ...this.cursorOptions,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.client, clientBulkWriteOperation);\n        this.cursorResponse = response;\n        return { server: clientBulkWriteOperation.server, session, response };\n    }\n}\nexports.ClientBulkWriteCursor = ClientBulkWriteCursor;\n//# sourceMappingURL=client_bulk_write_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jdXJzb3IvY2xpZW50X2J1bGtfd3JpdGVfY3Vyc29yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QjtBQUM3Qiw0QkFBNEIsbUJBQU8sQ0FBQyxnTEFBbUQ7QUFDdkYsNEJBQTRCLG1CQUFPLENBQUMsNElBQWlDO0FBQ3JFLGdCQUFnQixtQkFBTyxDQUFDLDhGQUFVO0FBQ2xDLDBCQUEwQixtQkFBTyxDQUFDLHdIQUFtQjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBEO0FBQzFEO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy9saW5rdXMvR2l0aHViL21vbm90d28vcGF5bG9hZC1wbHVnaW4tbWV0YS9ub2RlX21vZHVsZXMvLnBucG0vbW9uZ29kYkA2LjEwLjAvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2N1cnNvci9jbGllbnRfYnVsa193cml0ZV9jdXJzb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNsaWVudEJ1bGtXcml0ZUN1cnNvciA9IHZvaWQgMDtcbmNvbnN0IGNsaWVudF9idWxrX3dyaXRlXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0aW9ucy9jbGllbnRfYnVsa193cml0ZS9jbGllbnRfYnVsa193cml0ZVwiKTtcbmNvbnN0IGV4ZWN1dGVfb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0aW9ucy9leGVjdXRlX29wZXJhdGlvblwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBhYnN0cmFjdF9jdXJzb3JfMSA9IHJlcXVpcmUoXCIuL2Fic3RyYWN0X2N1cnNvclwiKTtcbi8qKlxuICogVGhpcyBpcyB0aGUgY3Vyc29yIHRoYXQgaGFuZGxlcyBjbGllbnQgYnVsayB3cml0ZSBvcGVyYXRpb25zLiBOb3RlIHRoaXMgaXMgbmV2ZXJcbiAqIGV4cG9zZWQgZGlyZWN0bHkgdG8gdGhlIHVzZXIgYW5kIGlzIGFsd2F5cyBpbW1lZGlhdGVseSBleGhhdXN0ZWQuXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgQ2xpZW50QnVsa1dyaXRlQ3Vyc29yIGV4dGVuZHMgYWJzdHJhY3RfY3Vyc29yXzEuQWJzdHJhY3RDdXJzb3Ige1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3RvcihjbGllbnQsIGNvbW1hbmRCdWlsZGVyLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgc3VwZXIoY2xpZW50LCBuZXcgdXRpbHNfMS5Nb25nb0RCTmFtZXNwYWNlKCdhZG1pbicsICckY21kJyksIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmNvbW1hbmRCdWlsZGVyID0gY29tbWFuZEJ1aWxkZXI7XG4gICAgICAgIHRoaXMuY2xpZW50QnVsa1dyaXRlT3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdlIG5lZWQgYSB3YXkgdG8gZ2V0IHRoZSB0b3AgbGV2ZWwgY3Vyc29yIHJlc3BvbnNlIGZpZWxkcyBmb3JcbiAgICAgKiBnZW5lcmF0aW5nIHRoZSBidWxrIHdyaXRlIHJlc3VsdCwgc28gd2UgZXhwb3NlIHRoaXMgaGVyZS5cbiAgICAgKi9cbiAgICBnZXQgcmVzcG9uc2UoKSB7XG4gICAgICAgIGlmICh0aGlzLmN1cnNvclJlc3BvbnNlKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3Vyc29yUmVzcG9uc2U7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBnZXQgb3BlcmF0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tbWFuZEJ1aWxkZXIubGFzdE9wZXJhdGlvbnM7XG4gICAgfVxuICAgIGNsb25lKCkge1xuICAgICAgICBjb25zdCBjbG9uZWRPcHRpb25zID0gKDAsIHV0aWxzXzEubWVyZ2VPcHRpb25zKSh7fSwgdGhpcy5jbGllbnRCdWxrV3JpdGVPcHRpb25zKTtcbiAgICAgICAgZGVsZXRlIGNsb25lZE9wdGlvbnMuc2Vzc2lvbjtcbiAgICAgICAgcmV0dXJuIG5ldyBDbGllbnRCdWxrV3JpdGVDdXJzb3IodGhpcy5jbGllbnQsIHRoaXMuY29tbWFuZEJ1aWxkZXIsIHtcbiAgICAgICAgICAgIC4uLmNsb25lZE9wdGlvbnNcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBhc3luYyBfaW5pdGlhbGl6ZShzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGNsaWVudEJ1bGtXcml0ZU9wZXJhdGlvbiA9IG5ldyBjbGllbnRfYnVsa193cml0ZV8xLkNsaWVudEJ1bGtXcml0ZU9wZXJhdGlvbih0aGlzLmNvbW1hbmRCdWlsZGVyLCB7XG4gICAgICAgICAgICAuLi50aGlzLmNsaWVudEJ1bGtXcml0ZU9wdGlvbnMsXG4gICAgICAgICAgICAuLi50aGlzLmN1cnNvck9wdGlvbnMsXG4gICAgICAgICAgICBzZXNzaW9uXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0ICgwLCBleGVjdXRlX29wZXJhdGlvbl8xLmV4ZWN1dGVPcGVyYXRpb24pKHRoaXMuY2xpZW50LCBjbGllbnRCdWxrV3JpdGVPcGVyYXRpb24pO1xuICAgICAgICB0aGlzLmN1cnNvclJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgICAgIHJldHVybiB7IHNlcnZlcjogY2xpZW50QnVsa1dyaXRlT3BlcmF0aW9uLnNlcnZlciwgc2Vzc2lvbiwgcmVzcG9uc2UgfTtcbiAgICB9XG59XG5leHBvcnRzLkNsaWVudEJ1bGtXcml0ZUN1cnNvciA9IENsaWVudEJ1bGtXcml0ZUN1cnNvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNsaWVudF9idWxrX3dyaXRlX2N1cnNvci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/client_bulk_write_cursor.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/find_cursor.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/find_cursor.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FindCursor = exports.FLAGS = void 0;\nconst responses_1 = __webpack_require__(/*! ../cmap/wire_protocol/responses */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/responses.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst count_1 = __webpack_require__(/*! ../operations/count */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/count.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/execute_operation.js\");\nconst find_1 = __webpack_require__(/*! ../operations/find */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/find.js\");\nconst sort_1 = __webpack_require__(/*! ../sort */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sort.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @public Flags allowed for cursor */\nexports.FLAGS = [\n    'tailable',\n    'oplogReplay',\n    'noCursorTimeout',\n    'awaitData',\n    'exhaust',\n    'partial'\n];\n/** @public */\nclass FindCursor extends abstract_cursor_1.AbstractCursor {\n    /** @internal */\n    constructor(client, namespace, filter = {}, options = {}) {\n        super(client, namespace, options);\n        /** @internal */\n        this.numReturned = 0;\n        this.cursorFilter = filter;\n        this.findOptions = options;\n        if (options.sort != null) {\n            this.findOptions.sort = (0, sort_1.formatSort)(options.sort);\n        }\n    }\n    clone() {\n        const clonedOptions = (0, utils_1.mergeOptions)({}, this.findOptions);\n        delete clonedOptions.session;\n        return new FindCursor(this.client, this.namespace, this.cursorFilter, {\n            ...clonedOptions\n        });\n    }\n    map(transform) {\n        return super.map(transform);\n    }\n    /** @internal */\n    async _initialize(session) {\n        const findOperation = new find_1.FindOperation(this.namespace, this.cursorFilter, {\n            ...this.findOptions, // NOTE: order matters here, we may need to refine this\n            ...this.cursorOptions,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.client, findOperation);\n        // the response is not a cursor when `explain` is enabled\n        this.numReturned = response.batchSize;\n        return { server: findOperation.server, session, response };\n    }\n    /** @internal */\n    async getMore(batchSize) {\n        const numReturned = this.numReturned;\n        if (numReturned) {\n            // TODO(DRIVERS-1448): Remove logic to enforce `limit` in the driver\n            const limit = this.findOptions.limit;\n            batchSize =\n                limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;\n            if (batchSize <= 0) {\n                try {\n                    await this.close();\n                }\n                catch (error) {\n                    (0, utils_1.squashError)(error);\n                    // this is an optimization for the special case of a limit for a find command to avoid an\n                    // extra getMore when the limit has been reached and the limit is a multiple of the batchSize.\n                    // This is a consequence of the new query engine in 5.0 having no knowledge of the limit as it\n                    // produces results for the find command.  Once a batch is filled up, it is returned and only\n                    // on the subsequent getMore will the query framework consider the limit, determine the cursor\n                    // is exhausted and return a cursorId of zero.\n                    // instead, if we determine there are no more documents to request from the server, we preemptively\n                    // close the cursor\n                }\n                return responses_1.CursorResponse.emptyGetMore;\n            }\n        }\n        const response = await super.getMore(batchSize);\n        // TODO: wrap this in some logic to prevent it from happening if we don't need this support\n        this.numReturned = this.numReturned + response.batchSize;\n        return response;\n    }\n    /**\n     * Get the count of documents for this cursor\n     * @deprecated Use `collection.estimatedDocumentCount` or `collection.countDocuments` instead\n     */\n    async count(options) {\n        (0, utils_1.emitWarningOnce)('cursor.count is deprecated and will be removed in the next major version, please use `collection.estimatedDocumentCount` or `collection.countDocuments` instead ');\n        if (typeof options === 'boolean') {\n            throw new error_1.MongoInvalidArgumentError('Invalid first parameter to count');\n        }\n        return await (0, execute_operation_1.executeOperation)(this.client, new count_1.CountOperation(this.namespace, this.cursorFilter, {\n            ...this.findOptions, // NOTE: order matters here, we may need to refine this\n            ...this.cursorOptions,\n            ...options\n        }));\n    }\n    /** Execute the explain for the cursor */\n    async explain(verbosity) {\n        return (await (0, execute_operation_1.executeOperation)(this.client, new find_1.FindOperation(this.namespace, this.cursorFilter, {\n            ...this.findOptions, // NOTE: order matters here, we may need to refine this\n            ...this.cursorOptions,\n            explain: verbosity ?? true\n        }))).shift(this.deserializationOptions);\n    }\n    /** Set the cursor query */\n    filter(filter) {\n        this.throwIfInitialized();\n        this.cursorFilter = filter;\n        return this;\n    }\n    /**\n     * Set the cursor hint\n     *\n     * @param hint - If specified, then the query system will only consider plans using the hinted index.\n     */\n    hint(hint) {\n        this.throwIfInitialized();\n        this.findOptions.hint = hint;\n        return this;\n    }\n    /**\n     * Set the cursor min\n     *\n     * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n     */\n    min(min) {\n        this.throwIfInitialized();\n        this.findOptions.min = min;\n        return this;\n    }\n    /**\n     * Set the cursor max\n     *\n     * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n     */\n    max(max) {\n        this.throwIfInitialized();\n        this.findOptions.max = max;\n        return this;\n    }\n    /**\n     * Set the cursor returnKey.\n     * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n     * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n     *\n     * @param value - the returnKey value.\n     */\n    returnKey(value) {\n        this.throwIfInitialized();\n        this.findOptions.returnKey = value;\n        return this;\n    }\n    /**\n     * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n     *\n     * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n     */\n    showRecordId(value) {\n        this.throwIfInitialized();\n        this.findOptions.showRecordId = value;\n        return this;\n    }\n    /**\n     * Add a query modifier to the cursor query\n     *\n     * @param name - The query modifier (must start with $, such as $orderby etc)\n     * @param value - The modifier value.\n     */\n    addQueryModifier(name, value) {\n        this.throwIfInitialized();\n        if (name[0] !== '$') {\n            throw new error_1.MongoInvalidArgumentError(`${name} is not a valid query modifier`);\n        }\n        // Strip of the $\n        const field = name.substr(1);\n        // NOTE: consider some TS magic for this\n        switch (field) {\n            case 'comment':\n                this.findOptions.comment = value;\n                break;\n            case 'explain':\n                this.findOptions.explain = value;\n                break;\n            case 'hint':\n                this.findOptions.hint = value;\n                break;\n            case 'max':\n                this.findOptions.max = value;\n                break;\n            case 'maxTimeMS':\n                this.findOptions.maxTimeMS = value;\n                break;\n            case 'min':\n                this.findOptions.min = value;\n                break;\n            case 'orderby':\n                this.findOptions.sort = (0, sort_1.formatSort)(value);\n                break;\n            case 'query':\n                this.cursorFilter = value;\n                break;\n            case 'returnKey':\n                this.findOptions.returnKey = value;\n                break;\n            case 'showDiskLoc':\n                this.findOptions.showRecordId = value;\n                break;\n            default:\n                throw new error_1.MongoInvalidArgumentError(`Invalid query modifier: ${name}`);\n        }\n        return this;\n    }\n    /**\n     * Add a comment to the cursor query allowing for tracking the comment in the log.\n     *\n     * @param value - The comment attached to this query.\n     */\n    comment(value) {\n        this.throwIfInitialized();\n        this.findOptions.comment = value;\n        return this;\n    }\n    /**\n     * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n     *\n     * @param value - Number of milliseconds to wait before aborting the tailed query.\n     */\n    maxAwaitTimeMS(value) {\n        this.throwIfInitialized();\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Argument for maxAwaitTimeMS must be a number');\n        }\n        this.findOptions.maxAwaitTimeMS = value;\n        return this;\n    }\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n     *\n     * @param value - Number of milliseconds to wait before aborting the query.\n     */\n    maxTimeMS(value) {\n        this.throwIfInitialized();\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n        }\n        this.findOptions.maxTimeMS = value;\n        return this;\n    }\n    /**\n     * Add a project stage to the aggregation pipeline\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * By default chaining a projection to your cursor changes the returned type to the generic\n     * {@link Document} type.\n     * You should specify a parameterized type to have assertions on your final results.\n     *\n     * @example\n     * ```typescript\n     * // Best way\n     * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * // Flexible way\n     * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });\n     * ```\n     *\n     * @remarks\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling project,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n     *\n     * // or always use chaining and save the final cursor\n     *\n     * const cursor = coll.find().project<{ a: string }>({\n     *   _id: 0,\n     *   a: { $convert: { input: '$a', to: 'string' }\n     * }});\n     * ```\n     */\n    project(value) {\n        this.throwIfInitialized();\n        this.findOptions.projection = value;\n        return this;\n    }\n    /**\n     * Sets the sort order of the cursor query.\n     *\n     * @param sort - The key or keys set for the sort.\n     * @param direction - The direction of the sorting (1 or -1).\n     */\n    sort(sort, direction) {\n        this.throwIfInitialized();\n        if (this.findOptions.tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support sorting');\n        }\n        this.findOptions.sort = (0, sort_1.formatSort)(sort, direction);\n        return this;\n    }\n    /**\n     * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n     *\n     * @remarks\n     * {@link https://www.mongodb.com/docs/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n     */\n    allowDiskUse(allow = true) {\n        this.throwIfInitialized();\n        if (!this.findOptions.sort) {\n            throw new error_1.MongoInvalidArgumentError('Option \"allowDiskUse\" requires a sort specification');\n        }\n        // As of 6.0 the default is true. This allows users to get back to the old behavior.\n        if (!allow) {\n            this.findOptions.allowDiskUse = false;\n            return this;\n        }\n        this.findOptions.allowDiskUse = true;\n        return this;\n    }\n    /**\n     * Set the collation options for the cursor.\n     *\n     * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n     */\n    collation(value) {\n        this.throwIfInitialized();\n        this.findOptions.collation = value;\n        return this;\n    }\n    /**\n     * Set the limit for the cursor.\n     *\n     * @param value - The limit for the cursor query.\n     */\n    limit(value) {\n        this.throwIfInitialized();\n        if (this.findOptions.tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support limit');\n        }\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Operation \"limit\" requires an integer');\n        }\n        this.findOptions.limit = value;\n        return this;\n    }\n    /**\n     * Set the skip for the cursor.\n     *\n     * @param value - The skip for the cursor query.\n     */\n    skip(value) {\n        this.throwIfInitialized();\n        if (this.findOptions.tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support skip');\n        }\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Operation \"skip\" requires an integer');\n        }\n        this.findOptions.skip = value;\n        return this;\n    }\n}\nexports.FindCursor = FindCursor;\n//# sourceMappingURL=find_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/find_cursor.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/list_collections_cursor.js":
/*!*******************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/list_collections_cursor.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ListCollectionsCursor = void 0;\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/execute_operation.js\");\nconst list_collections_1 = __webpack_require__(/*! ../operations/list_collections */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/list_collections.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @public */\nclass ListCollectionsCursor extends abstract_cursor_1.AbstractCursor {\n    constructor(db, filter, options) {\n        super(db.client, db.s.namespace, options);\n        this.parent = db;\n        this.filter = filter;\n        this.options = options;\n    }\n    clone() {\n        return new ListCollectionsCursor(this.parent, this.filter, {\n            ...this.options,\n            ...this.cursorOptions\n        });\n    }\n    /** @internal */\n    async _initialize(session) {\n        const operation = new list_collections_1.ListCollectionsOperation(this.parent, this.filter, {\n            ...this.cursorOptions,\n            ...this.options,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.parent.client, operation);\n        return { server: operation.server, session, response };\n    }\n}\nexports.ListCollectionsCursor = ListCollectionsCursor;\n//# sourceMappingURL=list_collections_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jdXJzb3IvbGlzdF9jb2xsZWN0aW9uc19jdXJzb3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNkJBQTZCO0FBQzdCLDRCQUE0QixtQkFBTyxDQUFDLDRJQUFpQztBQUNyRSwyQkFBMkIsbUJBQU8sQ0FBQywwSUFBZ0M7QUFDbkUsMEJBQTBCLG1CQUFPLENBQUMsd0hBQW1CO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jdXJzb3IvbGlzdF9jb2xsZWN0aW9uc19jdXJzb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxpc3RDb2xsZWN0aW9uc0N1cnNvciA9IHZvaWQgMDtcbmNvbnN0IGV4ZWN1dGVfb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0aW9ucy9leGVjdXRlX29wZXJhdGlvblwiKTtcbmNvbnN0IGxpc3RfY29sbGVjdGlvbnNfMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRpb25zL2xpc3RfY29sbGVjdGlvbnNcIik7XG5jb25zdCBhYnN0cmFjdF9jdXJzb3JfMSA9IHJlcXVpcmUoXCIuL2Fic3RyYWN0X2N1cnNvclwiKTtcbi8qKiBAcHVibGljICovXG5jbGFzcyBMaXN0Q29sbGVjdGlvbnNDdXJzb3IgZXh0ZW5kcyBhYnN0cmFjdF9jdXJzb3JfMS5BYnN0cmFjdEN1cnNvciB7XG4gICAgY29uc3RydWN0b3IoZGIsIGZpbHRlciwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihkYi5jbGllbnQsIGRiLnMubmFtZXNwYWNlLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBkYjtcbiAgICAgICAgdGhpcy5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IExpc3RDb2xsZWN0aW9uc0N1cnNvcih0aGlzLnBhcmVudCwgdGhpcy5maWx0ZXIsIHtcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgIC4uLnRoaXMuY3Vyc29yT3B0aW9uc1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGFzeW5jIF9pbml0aWFsaXplKHNlc3Npb24pIHtcbiAgICAgICAgY29uc3Qgb3BlcmF0aW9uID0gbmV3IGxpc3RfY29sbGVjdGlvbnNfMS5MaXN0Q29sbGVjdGlvbnNPcGVyYXRpb24odGhpcy5wYXJlbnQsIHRoaXMuZmlsdGVyLCB7XG4gICAgICAgICAgICAuLi50aGlzLmN1cnNvck9wdGlvbnMsXG4gICAgICAgICAgICAuLi50aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICBzZXNzaW9uXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0ICgwLCBleGVjdXRlX29wZXJhdGlvbl8xLmV4ZWN1dGVPcGVyYXRpb24pKHRoaXMucGFyZW50LmNsaWVudCwgb3BlcmF0aW9uKTtcbiAgICAgICAgcmV0dXJuIHsgc2VydmVyOiBvcGVyYXRpb24uc2VydmVyLCBzZXNzaW9uLCByZXNwb25zZSB9O1xuICAgIH1cbn1cbmV4cG9ydHMuTGlzdENvbGxlY3Rpb25zQ3Vyc29yID0gTGlzdENvbGxlY3Rpb25zQ3Vyc29yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlzdF9jb2xsZWN0aW9uc19jdXJzb3IuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/list_collections_cursor.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/list_indexes_cursor.js":
/*!***************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/list_indexes_cursor.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ListIndexesCursor = void 0;\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/execute_operation.js\");\nconst indexes_1 = __webpack_require__(/*! ../operations/indexes */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/indexes.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @public */\nclass ListIndexesCursor extends abstract_cursor_1.AbstractCursor {\n    constructor(collection, options) {\n        super(collection.client, collection.s.namespace, options);\n        this.parent = collection;\n        this.options = options;\n    }\n    clone() {\n        return new ListIndexesCursor(this.parent, {\n            ...this.options,\n            ...this.cursorOptions\n        });\n    }\n    /** @internal */\n    async _initialize(session) {\n        const operation = new indexes_1.ListIndexesOperation(this.parent, {\n            ...this.cursorOptions,\n            ...this.options,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.parent.client, operation);\n        return { server: operation.server, session, response };\n    }\n}\nexports.ListIndexesCursor = ListIndexesCursor;\n//# sourceMappingURL=list_indexes_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jdXJzb3IvbGlzdF9pbmRleGVzX2N1cnNvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUI7QUFDekIsNEJBQTRCLG1CQUFPLENBQUMsNElBQWlDO0FBQ3JFLGtCQUFrQixtQkFBTyxDQUFDLHdIQUF1QjtBQUNqRCwwQkFBMEIsbUJBQU8sQ0FBQyx3SEFBbUI7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jdXJzb3IvbGlzdF9pbmRleGVzX2N1cnNvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTGlzdEluZGV4ZXNDdXJzb3IgPSB2b2lkIDA7XG5jb25zdCBleGVjdXRlX29wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4uL29wZXJhdGlvbnMvZXhlY3V0ZV9vcGVyYXRpb25cIik7XG5jb25zdCBpbmRleGVzXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0aW9ucy9pbmRleGVzXCIpO1xuY29uc3QgYWJzdHJhY3RfY3Vyc29yXzEgPSByZXF1aXJlKFwiLi9hYnN0cmFjdF9jdXJzb3JcIik7XG4vKiogQHB1YmxpYyAqL1xuY2xhc3MgTGlzdEluZGV4ZXNDdXJzb3IgZXh0ZW5kcyBhYnN0cmFjdF9jdXJzb3JfMS5BYnN0cmFjdEN1cnNvciB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihjb2xsZWN0aW9uLmNsaWVudCwgY29sbGVjdGlvbi5zLm5hbWVzcGFjZSwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMucGFyZW50ID0gY29sbGVjdGlvbjtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGlzdEluZGV4ZXNDdXJzb3IodGhpcy5wYXJlbnQsIHtcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgIC4uLnRoaXMuY3Vyc29yT3B0aW9uc1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGFzeW5jIF9pbml0aWFsaXplKHNlc3Npb24pIHtcbiAgICAgICAgY29uc3Qgb3BlcmF0aW9uID0gbmV3IGluZGV4ZXNfMS5MaXN0SW5kZXhlc09wZXJhdGlvbih0aGlzLnBhcmVudCwge1xuICAgICAgICAgICAgLi4udGhpcy5jdXJzb3JPcHRpb25zLFxuICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgc2Vzc2lvblxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgZXhlY3V0ZV9vcGVyYXRpb25fMS5leGVjdXRlT3BlcmF0aW9uKSh0aGlzLnBhcmVudC5jbGllbnQsIG9wZXJhdGlvbik7XG4gICAgICAgIHJldHVybiB7IHNlcnZlcjogb3BlcmF0aW9uLnNlcnZlciwgc2Vzc2lvbiwgcmVzcG9uc2UgfTtcbiAgICB9XG59XG5leHBvcnRzLkxpc3RJbmRleGVzQ3Vyc29yID0gTGlzdEluZGV4ZXNDdXJzb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saXN0X2luZGV4ZXNfY3Vyc29yLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/list_indexes_cursor.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/list_search_indexes_cursor.js":
/*!**********************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/list_search_indexes_cursor.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ListSearchIndexesCursor = void 0;\nconst aggregation_cursor_1 = __webpack_require__(/*! ./aggregation_cursor */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/aggregation_cursor.js\");\n/** @public */\nclass ListSearchIndexesCursor extends aggregation_cursor_1.AggregationCursor {\n    /** @internal */\n    constructor({ fullNamespace: ns, client }, name, options = {}) {\n        const pipeline = name == null ? [{ $listSearchIndexes: {} }] : [{ $listSearchIndexes: { name } }];\n        super(client, ns, pipeline, options);\n    }\n}\nexports.ListSearchIndexesCursor = ListSearchIndexesCursor;\n//# sourceMappingURL=list_search_indexes_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jdXJzb3IvbGlzdF9zZWFyY2hfaW5kZXhlc19jdXJzb3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsK0JBQStCO0FBQy9CLDZCQUE2QixtQkFBTyxDQUFDLDhIQUFzQjtBQUMzRDtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsMkJBQTJCLG9CQUFvQjtBQUNqRSwyQ0FBMkMsd0JBQXdCLE9BQU8sc0JBQXNCLFFBQVE7QUFDeEc7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jdXJzb3IvbGlzdF9zZWFyY2hfaW5kZXhlc19jdXJzb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxpc3RTZWFyY2hJbmRleGVzQ3Vyc29yID0gdm9pZCAwO1xuY29uc3QgYWdncmVnYXRpb25fY3Vyc29yXzEgPSByZXF1aXJlKFwiLi9hZ2dyZWdhdGlvbl9jdXJzb3JcIik7XG4vKiogQHB1YmxpYyAqL1xuY2xhc3MgTGlzdFNlYXJjaEluZGV4ZXNDdXJzb3IgZXh0ZW5kcyBhZ2dyZWdhdGlvbl9jdXJzb3JfMS5BZ2dyZWdhdGlvbkN1cnNvciB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNvbnN0cnVjdG9yKHsgZnVsbE5hbWVzcGFjZTogbnMsIGNsaWVudCB9LCBuYW1lLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgY29uc3QgcGlwZWxpbmUgPSBuYW1lID09IG51bGwgPyBbeyAkbGlzdFNlYXJjaEluZGV4ZXM6IHt9IH1dIDogW3sgJGxpc3RTZWFyY2hJbmRleGVzOiB7IG5hbWUgfSB9XTtcbiAgICAgICAgc3VwZXIoY2xpZW50LCBucywgcGlwZWxpbmUsIG9wdGlvbnMpO1xuICAgIH1cbn1cbmV4cG9ydHMuTGlzdFNlYXJjaEluZGV4ZXNDdXJzb3IgPSBMaXN0U2VhcmNoSW5kZXhlc0N1cnNvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpc3Rfc2VhcmNoX2luZGV4ZXNfY3Vyc29yLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/list_search_indexes_cursor.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/run_command_cursor.js":
/*!**************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/run_command_cursor.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RunCommandCursor = void 0;\nconst responses_1 = __webpack_require__(/*! ../cmap/wire_protocol/responses */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/responses.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/execute_operation.js\");\nconst get_more_1 = __webpack_require__(/*! ../operations/get_more */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/get_more.js\");\nconst run_command_1 = __webpack_require__(/*! ../operations/run_command */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/run_command.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @public */\nclass RunCommandCursor extends abstract_cursor_1.AbstractCursor {\n    /**\n     * Controls the `getMore.comment` field\n     * @param comment - any BSON value\n     */\n    setComment(comment) {\n        this.getMoreOptions.comment = comment;\n        return this;\n    }\n    /**\n     * Controls the `getMore.maxTimeMS` field. Only valid when cursor is tailable await\n     * @param maxTimeMS - the number of milliseconds to wait for new data\n     */\n    setMaxTimeMS(maxTimeMS) {\n        this.getMoreOptions.maxAwaitTimeMS = maxTimeMS;\n        return this;\n    }\n    /**\n     * Controls the `getMore.batchSize` field\n     * @param maxTimeMS - the number documents to return in the `nextBatch`\n     */\n    setBatchSize(batchSize) {\n        this.getMoreOptions.batchSize = batchSize;\n        return this;\n    }\n    /** Unsupported for RunCommandCursor */\n    clone() {\n        throw new error_1.MongoAPIError('Clone not supported, create a new cursor with db.runCursorCommand');\n    }\n    /** Unsupported for RunCommandCursor: readConcern must be configured directly on command document */\n    withReadConcern(_) {\n        throw new error_1.MongoAPIError('RunCommandCursor does not support readConcern it must be attached to the command being run');\n    }\n    /** Unsupported for RunCommandCursor: various cursor flags must be configured directly on command document */\n    addCursorFlag(_, __) {\n        throw new error_1.MongoAPIError('RunCommandCursor does not support cursor flags, they must be attached to the command being run');\n    }\n    /** Unsupported for RunCommandCursor: maxTimeMS must be configured directly on command document */\n    maxTimeMS(_) {\n        throw new error_1.MongoAPIError('maxTimeMS must be configured on the command document directly, to configure getMore.maxTimeMS use cursor.setMaxTimeMS()');\n    }\n    /** Unsupported for RunCommandCursor: batchSize must be configured directly on command document */\n    batchSize(_) {\n        throw new error_1.MongoAPIError('batchSize must be configured on the command document directly, to configure getMore.batchSize use cursor.setBatchSize()');\n    }\n    /** @internal */\n    constructor(db, command, options = {}) {\n        super(db.client, (0, utils_1.ns)(db.namespace), options);\n        this.getMoreOptions = {};\n        this.db = db;\n        this.command = Object.freeze({ ...command });\n    }\n    /** @internal */\n    async _initialize(session) {\n        const operation = new run_command_1.RunCommandOperation(this.db, this.command, {\n            ...this.cursorOptions,\n            session: session,\n            readPreference: this.cursorOptions.readPreference,\n            responseType: responses_1.CursorResponse\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.client, operation);\n        return {\n            server: operation.server,\n            session,\n            response\n        };\n    }\n    /** @internal */\n    async getMore(_batchSize) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const getMoreOperation = new get_more_1.GetMoreOperation(this.namespace, this.id, this.server, {\n            ...this.cursorOptions,\n            session: this.session,\n            ...this.getMoreOptions\n        });\n        return await (0, execute_operation_1.executeOperation)(this.client, getMoreOperation);\n    }\n}\nexports.RunCommandCursor = RunCommandCursor;\n//# sourceMappingURL=run_command_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jdXJzb3IvcnVuX2NvbW1hbmRfY3Vyc29yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4QixvQkFBb0IsbUJBQU8sQ0FBQyw0SUFBaUM7QUFDN0QsZ0JBQWdCLG1CQUFPLENBQUMsOEZBQVU7QUFDbEMsNEJBQTRCLG1CQUFPLENBQUMsNElBQWlDO0FBQ3JFLG1CQUFtQixtQkFBTyxDQUFDLDBIQUF3QjtBQUNuRCxzQkFBc0IsbUJBQU8sQ0FBQyxnSUFBMkI7QUFDekQsZ0JBQWdCLG1CQUFPLENBQUMsOEZBQVU7QUFDbEMsMEJBQTBCLG1CQUFPLENBQUMsd0hBQW1CO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLFlBQVk7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsiL1VzZXJzL2xpbmt1cy9HaXRodWIvbW9ub3R3by9wYXlsb2FkLXBsdWdpbi1tZXRhL25vZGVfbW9kdWxlcy8ucG5wbS9tb25nb2RiQDYuMTAuMC9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY3Vyc29yL3J1bl9jb21tYW5kX2N1cnNvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUnVuQ29tbWFuZEN1cnNvciA9IHZvaWQgMDtcbmNvbnN0IHJlc3BvbnNlc18xID0gcmVxdWlyZShcIi4uL2NtYXAvd2lyZV9wcm90b2NvbC9yZXNwb25zZXNcIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgZXhlY3V0ZV9vcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRpb25zL2V4ZWN1dGVfb3BlcmF0aW9uXCIpO1xuY29uc3QgZ2V0X21vcmVfMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRpb25zL2dldF9tb3JlXCIpO1xuY29uc3QgcnVuX2NvbW1hbmRfMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRpb25zL3J1bl9jb21tYW5kXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IGFic3RyYWN0X2N1cnNvcl8xID0gcmVxdWlyZShcIi4vYWJzdHJhY3RfY3Vyc29yXCIpO1xuLyoqIEBwdWJsaWMgKi9cbmNsYXNzIFJ1bkNvbW1hbmRDdXJzb3IgZXh0ZW5kcyBhYnN0cmFjdF9jdXJzb3JfMS5BYnN0cmFjdEN1cnNvciB7XG4gICAgLyoqXG4gICAgICogQ29udHJvbHMgdGhlIGBnZXRNb3JlLmNvbW1lbnRgIGZpZWxkXG4gICAgICogQHBhcmFtIGNvbW1lbnQgLSBhbnkgQlNPTiB2YWx1ZVxuICAgICAqL1xuICAgIHNldENvbW1lbnQoY29tbWVudCkge1xuICAgICAgICB0aGlzLmdldE1vcmVPcHRpb25zLmNvbW1lbnQgPSBjb21tZW50O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udHJvbHMgdGhlIGBnZXRNb3JlLm1heFRpbWVNU2AgZmllbGQuIE9ubHkgdmFsaWQgd2hlbiBjdXJzb3IgaXMgdGFpbGFibGUgYXdhaXRcbiAgICAgKiBAcGFyYW0gbWF4VGltZU1TIC0gdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gd2FpdCBmb3IgbmV3IGRhdGFcbiAgICAgKi9cbiAgICBzZXRNYXhUaW1lTVMobWF4VGltZU1TKSB7XG4gICAgICAgIHRoaXMuZ2V0TW9yZU9wdGlvbnMubWF4QXdhaXRUaW1lTVMgPSBtYXhUaW1lTVM7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb250cm9scyB0aGUgYGdldE1vcmUuYmF0Y2hTaXplYCBmaWVsZFxuICAgICAqIEBwYXJhbSBtYXhUaW1lTVMgLSB0aGUgbnVtYmVyIGRvY3VtZW50cyB0byByZXR1cm4gaW4gdGhlIGBuZXh0QmF0Y2hgXG4gICAgICovXG4gICAgc2V0QmF0Y2hTaXplKGJhdGNoU2l6ZSkge1xuICAgICAgICB0aGlzLmdldE1vcmVPcHRpb25zLmJhdGNoU2l6ZSA9IGJhdGNoU2l6ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKiBVbnN1cHBvcnRlZCBmb3IgUnVuQ29tbWFuZEN1cnNvciAqL1xuICAgIGNsb25lKCkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0FQSUVycm9yKCdDbG9uZSBub3Qgc3VwcG9ydGVkLCBjcmVhdGUgYSBuZXcgY3Vyc29yIHdpdGggZGIucnVuQ3Vyc29yQ29tbWFuZCcpO1xuICAgIH1cbiAgICAvKiogVW5zdXBwb3J0ZWQgZm9yIFJ1bkNvbW1hbmRDdXJzb3I6IHJlYWRDb25jZXJuIG11c3QgYmUgY29uZmlndXJlZCBkaXJlY3RseSBvbiBjb21tYW5kIGRvY3VtZW50ICovXG4gICAgd2l0aFJlYWRDb25jZXJuKF8pIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29BUElFcnJvcignUnVuQ29tbWFuZEN1cnNvciBkb2VzIG5vdCBzdXBwb3J0IHJlYWRDb25jZXJuIGl0IG11c3QgYmUgYXR0YWNoZWQgdG8gdGhlIGNvbW1hbmQgYmVpbmcgcnVuJyk7XG4gICAgfVxuICAgIC8qKiBVbnN1cHBvcnRlZCBmb3IgUnVuQ29tbWFuZEN1cnNvcjogdmFyaW91cyBjdXJzb3IgZmxhZ3MgbXVzdCBiZSBjb25maWd1cmVkIGRpcmVjdGx5IG9uIGNvbW1hbmQgZG9jdW1lbnQgKi9cbiAgICBhZGRDdXJzb3JGbGFnKF8sIF9fKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQVBJRXJyb3IoJ1J1bkNvbW1hbmRDdXJzb3IgZG9lcyBub3Qgc3VwcG9ydCBjdXJzb3IgZmxhZ3MsIHRoZXkgbXVzdCBiZSBhdHRhY2hlZCB0byB0aGUgY29tbWFuZCBiZWluZyBydW4nKTtcbiAgICB9XG4gICAgLyoqIFVuc3VwcG9ydGVkIGZvciBSdW5Db21tYW5kQ3Vyc29yOiBtYXhUaW1lTVMgbXVzdCBiZSBjb25maWd1cmVkIGRpcmVjdGx5IG9uIGNvbW1hbmQgZG9jdW1lbnQgKi9cbiAgICBtYXhUaW1lTVMoXykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0FQSUVycm9yKCdtYXhUaW1lTVMgbXVzdCBiZSBjb25maWd1cmVkIG9uIHRoZSBjb21tYW5kIGRvY3VtZW50IGRpcmVjdGx5LCB0byBjb25maWd1cmUgZ2V0TW9yZS5tYXhUaW1lTVMgdXNlIGN1cnNvci5zZXRNYXhUaW1lTVMoKScpO1xuICAgIH1cbiAgICAvKiogVW5zdXBwb3J0ZWQgZm9yIFJ1bkNvbW1hbmRDdXJzb3I6IGJhdGNoU2l6ZSBtdXN0IGJlIGNvbmZpZ3VyZWQgZGlyZWN0bHkgb24gY29tbWFuZCBkb2N1bWVudCAqL1xuICAgIGJhdGNoU2l6ZShfKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQVBJRXJyb3IoJ2JhdGNoU2l6ZSBtdXN0IGJlIGNvbmZpZ3VyZWQgb24gdGhlIGNvbW1hbmQgZG9jdW1lbnQgZGlyZWN0bHksIHRvIGNvbmZpZ3VyZSBnZXRNb3JlLmJhdGNoU2l6ZSB1c2UgY3Vyc29yLnNldEJhdGNoU2l6ZSgpJyk7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3RvcihkYiwgY29tbWFuZCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKGRiLmNsaWVudCwgKDAsIHV0aWxzXzEubnMpKGRiLm5hbWVzcGFjZSksIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmdldE1vcmVPcHRpb25zID0ge307XG4gICAgICAgIHRoaXMuZGIgPSBkYjtcbiAgICAgICAgdGhpcy5jb21tYW5kID0gT2JqZWN0LmZyZWV6ZSh7IC4uLmNvbW1hbmQgfSk7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBhc3luYyBfaW5pdGlhbGl6ZShzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IG9wZXJhdGlvbiA9IG5ldyBydW5fY29tbWFuZF8xLlJ1bkNvbW1hbmRPcGVyYXRpb24odGhpcy5kYiwgdGhpcy5jb21tYW5kLCB7XG4gICAgICAgICAgICAuLi50aGlzLmN1cnNvck9wdGlvbnMsXG4gICAgICAgICAgICBzZXNzaW9uOiBzZXNzaW9uLFxuICAgICAgICAgICAgcmVhZFByZWZlcmVuY2U6IHRoaXMuY3Vyc29yT3B0aW9ucy5yZWFkUHJlZmVyZW5jZSxcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogcmVzcG9uc2VzXzEuQ3Vyc29yUmVzcG9uc2VcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIGV4ZWN1dGVfb3BlcmF0aW9uXzEuZXhlY3V0ZU9wZXJhdGlvbikodGhpcy5jbGllbnQsIG9wZXJhdGlvbik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzZXJ2ZXI6IG9wZXJhdGlvbi5zZXJ2ZXIsXG4gICAgICAgICAgICBzZXNzaW9uLFxuICAgICAgICAgICAgcmVzcG9uc2VcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGFzeW5jIGdldE1vcmUoX2JhdGNoU2l6ZSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICBjb25zdCBnZXRNb3JlT3BlcmF0aW9uID0gbmV3IGdldF9tb3JlXzEuR2V0TW9yZU9wZXJhdGlvbih0aGlzLm5hbWVzcGFjZSwgdGhpcy5pZCwgdGhpcy5zZXJ2ZXIsIHtcbiAgICAgICAgICAgIC4uLnRoaXMuY3Vyc29yT3B0aW9ucyxcbiAgICAgICAgICAgIHNlc3Npb246IHRoaXMuc2Vzc2lvbixcbiAgICAgICAgICAgIC4uLnRoaXMuZ2V0TW9yZU9wdGlvbnNcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBhd2FpdCAoMCwgZXhlY3V0ZV9vcGVyYXRpb25fMS5leGVjdXRlT3BlcmF0aW9uKSh0aGlzLmNsaWVudCwgZ2V0TW9yZU9wZXJhdGlvbik7XG4gICAgfVxufVxuZXhwb3J0cy5SdW5Db21tYW5kQ3Vyc29yID0gUnVuQ29tbWFuZEN1cnNvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJ1bl9jb21tYW5kX2N1cnNvci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/run_command_cursor.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/db.js":
/*!***************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/db.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Db = void 0;\nconst admin_1 = __webpack_require__(/*! ./admin */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/admin.js\");\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\");\nconst change_stream_1 = __webpack_require__(/*! ./change_stream */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/change_stream.js\");\nconst collection_1 = __webpack_require__(/*! ./collection */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/collection.js\");\nconst CONSTANTS = __webpack_require__(/*! ./constants */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/constants.js\");\nconst aggregation_cursor_1 = __webpack_require__(/*! ./cursor/aggregation_cursor */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/aggregation_cursor.js\");\nconst list_collections_cursor_1 = __webpack_require__(/*! ./cursor/list_collections_cursor */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/list_collections_cursor.js\");\nconst run_command_cursor_1 = __webpack_require__(/*! ./cursor/run_command_cursor */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/run_command_cursor.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst collections_1 = __webpack_require__(/*! ./operations/collections */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/collections.js\");\nconst create_collection_1 = __webpack_require__(/*! ./operations/create_collection */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/create_collection.js\");\nconst drop_1 = __webpack_require__(/*! ./operations/drop */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/drop.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/execute_operation.js\");\nconst indexes_1 = __webpack_require__(/*! ./operations/indexes */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/indexes.js\");\nconst profiling_level_1 = __webpack_require__(/*! ./operations/profiling_level */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/profiling_level.js\");\nconst remove_user_1 = __webpack_require__(/*! ./operations/remove_user */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/remove_user.js\");\nconst rename_1 = __webpack_require__(/*! ./operations/rename */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/rename.js\");\nconst run_command_1 = __webpack_require__(/*! ./operations/run_command */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/run_command.js\");\nconst set_profiling_level_1 = __webpack_require__(/*! ./operations/set_profiling_level */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/set_profiling_level.js\");\nconst stats_1 = __webpack_require__(/*! ./operations/stats */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/stats.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_preference.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/write_concern.js\");\n// Allowed parameters\nconst DB_OPTIONS_ALLOW_LIST = [\n    'writeConcern',\n    'readPreference',\n    'readPreferenceTags',\n    'native_parser',\n    'forceServerObjectId',\n    'pkFactory',\n    'serializeFunctions',\n    'raw',\n    'authSource',\n    'ignoreUndefined',\n    'readConcern',\n    'retryMiliSeconds',\n    'numberOfRetries',\n    'useBigInt64',\n    'promoteBuffers',\n    'promoteLongs',\n    'bsonRegExp',\n    'enableUtf8Validation',\n    'promoteValues',\n    'compression',\n    'retryWrites',\n    'timeoutMS'\n];\n/**\n * The **Db** class is a class that represents a MongoDB Database.\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const db = client.db();\n *\n * // Create a collection that validates our union\n * await db.createCollection<Pet>('pets', {\n *   validator: { $expr: { $in: ['$kind', ['dog', 'cat', 'fish']] } }\n * })\n * ```\n */\nclass Db {\n    /**\n     * Creates a new Db instance.\n     *\n     * Db name cannot contain a dot, the server may apply more restrictions when an operation is run.\n     *\n     * @param client - The MongoClient for the database.\n     * @param databaseName - The name of the database this instance represents.\n     * @param options - Optional settings for Db construction.\n     */\n    constructor(client, databaseName, options) {\n        options = options ?? {};\n        // Filter the options\n        options = (0, utils_1.filterOptions)(options, DB_OPTIONS_ALLOW_LIST);\n        // Ensure there are no dots in database name\n        if (typeof databaseName === 'string' && databaseName.includes('.')) {\n            throw new error_1.MongoInvalidArgumentError(`Database names cannot contain the character '.'`);\n        }\n        // Internal state of the db object\n        this.s = {\n            // Options\n            options,\n            // Unpack read preference\n            readPreference: read_preference_1.ReadPreference.fromOptions(options),\n            // Merge bson options\n            bsonOptions: (0, bson_1.resolveBSONOptions)(options, client),\n            // Set up the primary key factory or fallback to ObjectId\n            pkFactory: options?.pkFactory ?? utils_1.DEFAULT_PK_FACTORY,\n            // ReadConcern\n            readConcern: read_concern_1.ReadConcern.fromOptions(options),\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n            // Namespace\n            namespace: new utils_1.MongoDBNamespace(databaseName)\n        };\n        this.client = client;\n    }\n    get databaseName() {\n        return this.s.namespace.db;\n    }\n    // Options\n    get options() {\n        return this.s.options;\n    }\n    /**\n     * Check if a secondary can be used (because the read preference is *not* set to primary)\n     */\n    get secondaryOk() {\n        return this.s.readPreference?.preference !== 'primary' || false;\n    }\n    get readConcern() {\n        return this.s.readConcern;\n    }\n    /**\n     * The current readPreference of the Db. If not explicitly defined for\n     * this Db, will be inherited from the parent MongoClient\n     */\n    get readPreference() {\n        if (this.s.readPreference == null) {\n            return this.client.readPreference;\n        }\n        return this.s.readPreference;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    // get the write Concern\n    get writeConcern() {\n        return this.s.writeConcern;\n    }\n    get namespace() {\n        return this.s.namespace.toString();\n    }\n    /**\n     * Create a new collection on a server with the specified options. Use this to create capped collections.\n     * More information about command options available at https://www.mongodb.com/docs/manual/reference/command/create/\n     *\n     * Collection namespace validation is performed server-side.\n     *\n     * @param name - The name of the collection to create\n     * @param options - Optional settings for the command\n     */\n    async createCollection(name, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new create_collection_1.CreateCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Execute a command\n     *\n     * @remarks\n     * This command does not inherit options from the MongoClient.\n     *\n     * The driver will ensure the following fields are attached to the command sent to the server:\n     * - `lsid` - sourced from an implicit session or options.session\n     * - `$readPreference` - defaults to primary or can be configured by options.readPreference\n     * - `$db` - sourced from the name of this database\n     *\n     * If the client has a serverApi setting:\n     * - `apiVersion`\n     * - `apiStrict`\n     * - `apiDeprecationErrors`\n     *\n     * When in a transaction:\n     * - `readConcern` - sourced from readConcern set on the TransactionOptions\n     * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\n     *\n     * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\n     *\n     * @param command - The command to run\n     * @param options - Optional settings for the command\n     */\n    async command(command, options) {\n        // Intentionally, we do not inherit options from parent for this operation.\n        return await (0, execute_operation_1.executeOperation)(this.client, new run_command_1.RunCommandOperation(this, command, {\n            ...(0, bson_1.resolveBSONOptions)(options),\n            session: options?.session,\n            readPreference: options?.readPreference\n        }));\n    }\n    /**\n     * Execute an aggregation framework pipeline against the database.\n     *\n     * @param pipeline - An array of aggregation stages to be executed\n     * @param options - Optional settings for the command\n     */\n    aggregate(pipeline = [], options) {\n        return new aggregation_cursor_1.AggregationCursor(this.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /** Return the Admin db instance */\n    admin() {\n        return new admin_1.Admin(this);\n    }\n    /**\n     * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\n     *\n     * Collection namespace validation is performed server-side.\n     *\n     * @param name - the collection name we wish to access.\n     * @returns return the new Collection instance\n     */\n    collection(name, options = {}) {\n        if (typeof options === 'function') {\n            throw new error_1.MongoInvalidArgumentError('The callback form of this helper has been removed.');\n        }\n        return new collection_1.Collection(this, name, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Get all the db statistics.\n     *\n     * @param options - Optional settings for the command\n     */\n    async stats(options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new stats_1.DbStatsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    listCollections(filter = {}, options = {}) {\n        return new list_collections_cursor_1.ListCollectionsCursor(this, filter, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Rename a collection.\n     *\n     * @remarks\n     * This operation does not inherit options from the MongoClient.\n     *\n     * @param fromCollection - Name of current collection to rename\n     * @param toCollection - New name of of the collection\n     * @param options - Optional settings for the command\n     */\n    async renameCollection(fromCollection, toCollection, options) {\n        // Intentionally, we do not inherit options from parent for this operation.\n        return await (0, execute_operation_1.executeOperation)(this.client, new rename_1.RenameOperation(this.collection(fromCollection), toCollection, { ...options, new_collection: true, readPreference: read_preference_1.ReadPreference.primary }));\n    }\n    /**\n     * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param name - Name of collection to drop\n     * @param options - Optional settings for the command\n     */\n    async dropCollection(name, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Drop a database, removing it permanently from the server.\n     *\n     * @param options - Optional settings for the command\n     */\n    async dropDatabase(options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropDatabaseOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Fetch all collections for the current db.\n     *\n     * @param options - Optional settings for the command\n     */\n    async collections(options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new collections_1.CollectionsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Creates an index on the db and collection.\n     *\n     * @param name - Name of the collection to create the index on.\n     * @param indexSpec - Specify the field to index, or an index specification\n     * @param options - Optional settings for the command\n     */\n    async createIndex(name, indexSpec, options) {\n        const indexes = await (0, execute_operation_1.executeOperation)(this.client, indexes_1.CreateIndexesOperation.fromIndexSpecification(this, name, indexSpec, options));\n        return indexes[0];\n    }\n    /**\n     * Remove a user from a database\n     *\n     * @param username - The username to remove\n     * @param options - Optional settings for the command\n     */\n    async removeUser(username, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new remove_user_1.RemoveUserOperation(this, username, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Set the current profiling level of MongoDB\n     *\n     * @param level - The new profiling level (off, slow_only, all).\n     * @param options - Optional settings for the command\n     */\n    async setProfilingLevel(level, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new set_profiling_level_1.SetProfilingLevelOperation(this, level, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Retrieve the current profiling Level for MongoDB\n     *\n     * @param options - Optional settings for the command\n     */\n    async profilingLevel(options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new profiling_level_1.ProfilingLevelOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async indexInformation(name, options) {\n        return await this.collection(name).indexInformation((0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates,\n     * replacements, deletions, and invalidations) in this database. Will ignore all\n     * changes to system collections.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to provide the schema that may be defined for all the collections within this database\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     *\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TSchema - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */\n    watch(pipeline = [], options = {}) {\n        // Allow optionally not specifying a pipeline\n        if (!Array.isArray(pipeline)) {\n            options = pipeline;\n            pipeline = [];\n        }\n        return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * A low level cursor API providing basic driver functionality:\n     * - ClientSession management\n     * - ReadPreference for server selection\n     * - Running getMores automatically when a local batch is exhausted\n     *\n     * @param command - The command that will start a cursor on the server.\n     * @param options - Configurations for running the command, bson options will apply to getMores\n     */\n    runCursorCommand(command, options) {\n        return new run_command_cursor_1.RunCommandCursor(this, command, options);\n    }\n}\nexports.Db = Db;\nDb.SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\nDb.SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\nDb.SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\nDb.SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\nDb.SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\nDb.SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION;\n//# sourceMappingURL=db.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/db.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/deps.js":
/*!*****************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/deps.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.aws4 = void 0;\nexports.getKerberos = getKerberos;\nexports.getZstdLibrary = getZstdLibrary;\nexports.getAwsCredentialProvider = getAwsCredentialProvider;\nexports.getGcpMetadata = getGcpMetadata;\nexports.getSnappy = getSnappy;\nexports.getSocks = getSocks;\nexports.getMongoDBClientEncryption = getMongoDBClientEncryption;\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nfunction makeErrorModule(error) {\n    const props = error ? { kModuleError: error } : {};\n    return new Proxy(props, {\n        get: (_, key) => {\n            if (key === 'kModuleError') {\n                return error;\n            }\n            throw error;\n        },\n        set: () => {\n            throw error;\n        }\n    });\n}\nfunction getKerberos() {\n    let kerberos;\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        kerberos = __webpack_require__(/*! kerberos */ \"?9704\");\n    }\n    catch (error) {\n        kerberos = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `kerberos` not found. Please install it to enable kerberos authentication', { cause: error, dependencyName: 'kerberos' }));\n    }\n    return kerberos;\n}\nfunction getZstdLibrary() {\n    let ZStandard;\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        ZStandard = __webpack_require__(/*! @mongodb-js/zstd */ \"?3252\");\n    }\n    catch (error) {\n        ZStandard = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `@mongodb-js/zstd` not found. Please install it to enable zstd compression', { cause: error, dependencyName: 'zstd' }));\n    }\n    return ZStandard;\n}\nfunction getAwsCredentialProvider() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        const credentialProvider = __webpack_require__(/*! @aws-sdk/credential-providers */ \"?f4bf\");\n        return credentialProvider;\n    }\n    catch (error) {\n        return makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `@aws-sdk/credential-providers` not found.' +\n            ' Please install it to enable getting aws credentials via the official sdk.', { cause: error, dependencyName: '@aws-sdk/credential-providers' }));\n    }\n}\nfunction getGcpMetadata() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        const credentialProvider = __webpack_require__(/*! gcp-metadata */ \"?8238\");\n        return credentialProvider;\n    }\n    catch (error) {\n        return makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `gcp-metadata` not found.' +\n            ' Please install it to enable getting gcp credentials via the official sdk.', { cause: error, dependencyName: 'gcp-metadata' }));\n    }\n}\nfunction getSnappy() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        const value = __webpack_require__(/*! snappy */ \"?fad8\");\n        return value;\n    }\n    catch (error) {\n        const kModuleError = new error_1.MongoMissingDependencyError('Optional module `snappy` not found. Please install it to enable snappy compression', { cause: error, dependencyName: 'snappy' });\n        return { kModuleError };\n    }\n}\nfunction getSocks() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        const value = __webpack_require__(/*! socks */ \"?7383\");\n        return value;\n    }\n    catch (error) {\n        const kModuleError = new error_1.MongoMissingDependencyError('Optional module `socks` not found. Please install it to connections over a SOCKS5 proxy', { cause: error, dependencyName: 'socks' });\n        return { kModuleError };\n    }\n}\nexports.aws4 = loadAws4();\nfunction loadAws4() {\n    let aws4;\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        aws4 = __webpack_require__(/*! aws4 */ \"?2bb3\");\n    }\n    catch (error) {\n        aws4 = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `aws4` not found. Please install it to enable AWS authentication', { cause: error, dependencyName: 'aws4' }));\n    }\n    return aws4;\n}\n/** A utility function to get the instance of mongodb-client-encryption, if it exists. */\nfunction getMongoDBClientEncryption() {\n    let mongodbClientEncryption = null;\n    try {\n        // NOTE(NODE-3199): Ensure you always wrap an optional require literally in the try block\n        // Cannot be moved to helper utility function, bundlers search and replace the actual require call\n        // in a way that makes this line throw at bundle time, not runtime, catching here will make bundling succeed\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        mongodbClientEncryption = __webpack_require__(/*! mongodb-client-encryption */ \"?ea37\");\n    }\n    catch (error) {\n        const kModuleError = new error_1.MongoMissingDependencyError('Optional module `mongodb-client-encryption` not found. Please install it to use auto encryption or ClientEncryption.', { cause: error, dependencyName: 'mongodb-client-encryption' });\n        return { kModuleError };\n    }\n    return mongodbClientEncryption;\n}\n//# sourceMappingURL=deps.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/deps.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/encrypter.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/encrypter.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Encrypter = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst auto_encrypter_1 = __webpack_require__(/*! ./client-side-encryption/auto_encrypter */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/constants.js\");\nconst deps_1 = __webpack_require__(/*! ./deps */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst mongo_client_1 = __webpack_require__(/*! ./mongo_client */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_client.js\");\n/** @internal */\nconst kInternalClient = Symbol('internalClient');\n/** @internal */\nclass Encrypter {\n    constructor(client, uri, options) {\n        if (typeof options.autoEncryption !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Option \"autoEncryption\" must be specified');\n        }\n        // initialize to null, if we call getInternalClient, we may set this it is important to not overwrite those function calls.\n        this[kInternalClient] = null;\n        this.bypassAutoEncryption = !!options.autoEncryption.bypassAutoEncryption;\n        this.needsConnecting = false;\n        if (options.maxPoolSize === 0 && options.autoEncryption.keyVaultClient == null) {\n            options.autoEncryption.keyVaultClient = client;\n        }\n        else if (options.autoEncryption.keyVaultClient == null) {\n            options.autoEncryption.keyVaultClient = this.getInternalClient(client, uri, options);\n        }\n        if (this.bypassAutoEncryption) {\n            options.autoEncryption.metadataClient = undefined;\n        }\n        else if (options.maxPoolSize === 0) {\n            options.autoEncryption.metadataClient = client;\n        }\n        else {\n            options.autoEncryption.metadataClient = this.getInternalClient(client, uri, options);\n        }\n        if (options.proxyHost) {\n            options.autoEncryption.proxyOptions = {\n                proxyHost: options.proxyHost,\n                proxyPort: options.proxyPort,\n                proxyUsername: options.proxyUsername,\n                proxyPassword: options.proxyPassword\n            };\n        }\n        this.autoEncrypter = new auto_encrypter_1.AutoEncrypter(client, options.autoEncryption);\n    }\n    getInternalClient(client, uri, options) {\n        // TODO(NODE-4144): Remove new variable for type narrowing\n        let internalClient = this[kInternalClient];\n        if (internalClient == null) {\n            const clonedOptions = {};\n            for (const key of [\n                ...Object.getOwnPropertyNames(options),\n                ...Object.getOwnPropertySymbols(options)\n            ]) {\n                if (['autoEncryption', 'minPoolSize', 'servers', 'caseTranslate', 'dbName'].includes(key))\n                    continue;\n                Reflect.set(clonedOptions, key, Reflect.get(options, key));\n            }\n            clonedOptions.minPoolSize = 0;\n            internalClient = new mongo_client_1.MongoClient(uri, clonedOptions);\n            this[kInternalClient] = internalClient;\n            for (const eventName of constants_1.MONGO_CLIENT_EVENTS) {\n                for (const listener of client.listeners(eventName)) {\n                    internalClient.on(eventName, listener);\n                }\n            }\n            client.on('newListener', (eventName, listener) => {\n                internalClient?.on(eventName, listener);\n            });\n            this.needsConnecting = true;\n        }\n        return internalClient;\n    }\n    async connectInternalClient() {\n        // TODO(NODE-4144): Remove new variable for type narrowing\n        const internalClient = this[kInternalClient];\n        if (this.needsConnecting && internalClient != null) {\n            this.needsConnecting = false;\n            await internalClient.connect();\n        }\n    }\n    closeCallback(client, force, callback) {\n        (0, util_1.callbackify)(this.close.bind(this))(client, force, callback);\n    }\n    async close(client, force) {\n        let error;\n        try {\n            await this.autoEncrypter.teardown(force);\n        }\n        catch (autoEncrypterError) {\n            error = autoEncrypterError;\n        }\n        const internalClient = this[kInternalClient];\n        if (internalClient != null && client !== internalClient) {\n            return await internalClient.close(force);\n        }\n        if (error != null) {\n            throw error;\n        }\n    }\n    static checkForMongoCrypt() {\n        const mongodbClientEncryption = (0, deps_1.getMongoDBClientEncryption)();\n        if ('kModuleError' in mongodbClientEncryption) {\n            throw new error_1.MongoMissingDependencyError('Auto-encryption requested, but the module is not installed. ' +\n                'Please add `mongodb-client-encryption` as a dependency of your project', {\n                cause: mongodbClientEncryption['kModuleError'],\n                dependencyName: 'mongodb-client-encryption'\n            });\n        }\n    }\n}\nexports.Encrypter = Encrypter;\n//# sourceMappingURL=encrypter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/encrypter.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js":
/*!******************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoWriteConcernError = exports.MongoServerSelectionError = exports.MongoSystemError = exports.MongoMissingDependencyError = exports.MongoMissingCredentialsError = exports.MongoCompatibilityError = exports.MongoInvalidArgumentError = exports.MongoParseError = exports.MongoNetworkTimeoutError = exports.MongoNetworkError = exports.MongoTopologyClosedError = exports.MongoCursorExhaustedError = exports.MongoServerClosedError = exports.MongoCursorInUseError = exports.MongoUnexpectedServerResponseError = exports.MongoGridFSChunkError = exports.MongoGridFSStreamError = exports.MongoTailableCursorError = exports.MongoChangeStreamError = exports.MongoClientBulkWriteExecutionError = exports.MongoClientBulkWriteCursorError = exports.MongoClientBulkWriteError = exports.MongoGCPError = exports.MongoAzureError = exports.MongoOIDCError = exports.MongoAWSError = exports.MongoKerberosError = exports.MongoExpiredSessionError = exports.MongoTransactionError = exports.MongoNotConnectedError = exports.MongoDecompressionError = exports.MongoBatchReExecutionError = exports.MongoRuntimeError = exports.MongoAPIError = exports.MongoDriverError = exports.MongoServerError = exports.MongoError = exports.MongoErrorLabel = exports.GET_MORE_RESUMABLE_CODES = exports.MONGODB_ERROR_CODES = exports.NODE_IS_RECOVERING_ERROR_MESSAGE = exports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = void 0;\nexports.isNetworkErrorBeforeHandshake = isNetworkErrorBeforeHandshake;\nexports.needsRetryableWriteLabel = needsRetryableWriteLabel;\nexports.isRetryableWriteError = isRetryableWriteError;\nexports.isRetryableReadError = isRetryableReadError;\nexports.isNodeShuttingDownError = isNodeShuttingDownError;\nexports.isSDAMUnrecoverableError = isSDAMUnrecoverableError;\nexports.isNetworkTimeoutError = isNetworkTimeoutError;\nexports.isResumableError = isResumableError;\n/** @internal */\nconst kErrorLabels = Symbol('errorLabels');\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a writable primary\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\nexports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = new RegExp('not master', 'i');\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a primary or secondary\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\nexports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = new RegExp('not master or secondary', 'i');\n/**\n * @internal\n * The error message from the server that indicates the node is recovering\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\nexports.NODE_IS_RECOVERING_ERROR_MESSAGE = new RegExp('node is recovering', 'i');\n/** @internal MongoDB Error Codes */\nexports.MONGODB_ERROR_CODES = Object.freeze({\n    HostUnreachable: 6,\n    HostNotFound: 7,\n    AuthenticationFailed: 18,\n    NetworkTimeout: 89,\n    ShutdownInProgress: 91,\n    PrimarySteppedDown: 189,\n    ExceededTimeLimit: 262,\n    SocketException: 9001,\n    NotWritablePrimary: 10107,\n    InterruptedAtShutdown: 11600,\n    InterruptedDueToReplStateChange: 11602,\n    NotPrimaryNoSecondaryOk: 13435,\n    NotPrimaryOrSecondary: 13436,\n    StaleShardVersion: 63,\n    StaleEpoch: 150,\n    StaleConfig: 13388,\n    RetryChangeStream: 234,\n    FailedToSatisfyReadPreference: 133,\n    CursorNotFound: 43,\n    LegacyNotPrimary: 10058,\n    WriteConcernFailed: 64,\n    NamespaceNotFound: 26,\n    IllegalOperation: 20,\n    MaxTimeMSExpired: 50,\n    UnknownReplWriteConcern: 79,\n    UnsatisfiableWriteConcern: 100,\n    Reauthenticate: 391,\n    ReadConcernMajorityNotAvailableYet: 134\n});\n// From spec@https://github.com/mongodb/specifications/blob/f93d78191f3db2898a59013a7ed5650352ef6da8/source/change-streams/change-streams.rst#resumable-error\nexports.GET_MORE_RESUMABLE_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.HostUnreachable,\n    exports.MONGODB_ERROR_CODES.HostNotFound,\n    exports.MONGODB_ERROR_CODES.NetworkTimeout,\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress,\n    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,\n    exports.MONGODB_ERROR_CODES.ExceededTimeLimit,\n    exports.MONGODB_ERROR_CODES.SocketException,\n    exports.MONGODB_ERROR_CODES.NotWritablePrimary,\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n    exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n    exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary,\n    exports.MONGODB_ERROR_CODES.StaleShardVersion,\n    exports.MONGODB_ERROR_CODES.StaleEpoch,\n    exports.MONGODB_ERROR_CODES.StaleConfig,\n    exports.MONGODB_ERROR_CODES.RetryChangeStream,\n    exports.MONGODB_ERROR_CODES.FailedToSatisfyReadPreference,\n    exports.MONGODB_ERROR_CODES.CursorNotFound\n]);\n/** @public */\nexports.MongoErrorLabel = Object.freeze({\n    RetryableWriteError: 'RetryableWriteError',\n    TransientTransactionError: 'TransientTransactionError',\n    UnknownTransactionCommitResult: 'UnknownTransactionCommitResult',\n    ResumableChangeStreamError: 'ResumableChangeStreamError',\n    HandshakeError: 'HandshakeError',\n    ResetPool: 'ResetPool',\n    PoolRequstedRetry: 'PoolRequstedRetry',\n    InterruptInUseConnections: 'InterruptInUseConnections',\n    NoWritesPerformed: 'NoWritesPerformed'\n});\nfunction isAggregateError(e) {\n    return e != null && typeof e === 'object' && 'errors' in e && Array.isArray(e.errors);\n}\n/**\n * @public\n * @category Error\n *\n * @privateRemarks\n * mongodb-client-encryption has a dependency on this error, it uses the constructor with a string argument\n */\nclass MongoError extends Error {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n        this[kErrorLabels] = new Set();\n    }\n    /** @internal */\n    static buildErrorMessage(e) {\n        if (typeof e === 'string') {\n            return e;\n        }\n        if (isAggregateError(e) && e.message.length === 0) {\n            return e.errors.length === 0\n                ? 'AggregateError has an empty errors array. Please check the `cause` property for more information.'\n                : e.errors.map(({ message }) => message).join(', ');\n        }\n        return e != null && typeof e === 'object' && 'message' in e && typeof e.message === 'string'\n            ? e.message\n            : 'empty error message';\n    }\n    get name() {\n        return 'MongoError';\n    }\n    /** Legacy name for server error responses */\n    get errmsg() {\n        return this.message;\n    }\n    /**\n     * Checks the error to see if it has an error label\n     *\n     * @param label - The error label to check for\n     * @returns returns true if the error has the provided error label\n     */\n    hasErrorLabel(label) {\n        return this[kErrorLabels].has(label);\n    }\n    addErrorLabel(label) {\n        this[kErrorLabels].add(label);\n    }\n    get errorLabels() {\n        return Array.from(this[kErrorLabels]);\n    }\n}\nexports.MongoError = MongoError;\n/**\n * An error coming from the mongo server\n *\n * @public\n * @category Error\n */\nclass MongoServerError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message.message || message.errmsg || message.$err || 'n/a');\n        if (message.errorLabels) {\n            this[kErrorLabels] = new Set(message.errorLabels);\n        }\n        this.errorResponse = message;\n        for (const name in message) {\n            if (name !== 'errorLabels' &&\n                name !== 'errmsg' &&\n                name !== 'message' &&\n                name !== 'errorResponse') {\n                this[name] = message[name];\n            }\n        }\n    }\n    get name() {\n        return 'MongoServerError';\n    }\n}\nexports.MongoServerError = MongoServerError;\n/**\n * An error generated by the driver\n *\n * @public\n * @category Error\n */\nclass MongoDriverError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoDriverError';\n    }\n}\nexports.MongoDriverError = MongoDriverError;\n/**\n * An error generated when the driver API is used incorrectly\n *\n * @privateRemarks\n * Should **never** be directly instantiated\n *\n * @public\n * @category Error\n */\nclass MongoAPIError extends MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoAPIError';\n    }\n}\nexports.MongoAPIError = MongoAPIError;\n/**\n * An error generated when the driver encounters unexpected input\n * or reaches an unexpected/invalid internal state\n *\n * @privateRemarks\n * Should **never** be directly instantiated.\n *\n * @public\n * @category Error\n */\nclass MongoRuntimeError extends MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoRuntimeError';\n    }\n}\nexports.MongoRuntimeError = MongoRuntimeError;\n/**\n * An error generated when a batch command is re-executed after one of the commands in the batch\n * has failed\n *\n * @public\n * @category Error\n */\nclass MongoBatchReExecutionError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'This batch has already been executed, create new batch to execute') {\n        super(message);\n    }\n    get name() {\n        return 'MongoBatchReExecutionError';\n    }\n}\nexports.MongoBatchReExecutionError = MongoBatchReExecutionError;\n/**\n * An error generated when the driver fails to decompress\n * data received from the server.\n *\n * @public\n * @category Error\n */\nclass MongoDecompressionError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoDecompressionError';\n    }\n}\nexports.MongoDecompressionError = MongoDecompressionError;\n/**\n * An error thrown when the user attempts to operate on a database or collection through a MongoClient\n * that has not yet successfully called the \"connect\" method\n *\n * @public\n * @category Error\n */\nclass MongoNotConnectedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoNotConnectedError';\n    }\n}\nexports.MongoNotConnectedError = MongoNotConnectedError;\n/**\n * An error generated when the user makes a mistake in the usage of transactions.\n * (e.g. attempting to commit a transaction with a readPreference other than primary)\n *\n * @public\n * @category Error\n */\nclass MongoTransactionError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoTransactionError';\n    }\n}\nexports.MongoTransactionError = MongoTransactionError;\n/**\n * An error generated when the user attempts to operate\n * on a session that has expired or has been closed.\n *\n * @public\n * @category Error\n */\nclass MongoExpiredSessionError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'Cannot use a session that has ended') {\n        super(message);\n    }\n    get name() {\n        return 'MongoExpiredSessionError';\n    }\n}\nexports.MongoExpiredSessionError = MongoExpiredSessionError;\n/**\n * A error generated when the user attempts to authenticate\n * via Kerberos, but fails to connect to the Kerberos client.\n *\n * @public\n * @category Error\n */\nclass MongoKerberosError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoKerberosError';\n    }\n}\nexports.MongoKerberosError = MongoKerberosError;\n/**\n * A error generated when the user attempts to authenticate\n * via AWS, but fails\n *\n * @public\n * @category Error\n */\nclass MongoAWSError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoAWSError';\n    }\n}\nexports.MongoAWSError = MongoAWSError;\n/**\n * A error generated when the user attempts to authenticate\n * via OIDC callbacks, but fails.\n *\n * @public\n * @category Error\n */\nclass MongoOIDCError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoOIDCError';\n    }\n}\nexports.MongoOIDCError = MongoOIDCError;\n/**\n * A error generated when the user attempts to authenticate\n * via Azure, but fails.\n *\n * @public\n * @category Error\n */\nclass MongoAzureError extends MongoOIDCError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoAzureError';\n    }\n}\nexports.MongoAzureError = MongoAzureError;\n/**\n * A error generated when the user attempts to authenticate\n * via GCP, but fails.\n *\n * @public\n * @category Error\n */\nclass MongoGCPError extends MongoOIDCError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoGCPError';\n    }\n}\nexports.MongoGCPError = MongoGCPError;\n/**\n * An error indicating that an error occurred when executing the bulk write.\n *\n * @public\n * @category Error\n */\nclass MongoClientBulkWriteError extends MongoServerError {\n    /**\n     * Initialize the client bulk write error.\n     * @param message - The error message.\n     */\n    constructor(message) {\n        super(message);\n        this.writeConcernErrors = [];\n        this.writeErrors = new Map();\n    }\n    get name() {\n        return 'MongoClientBulkWriteError';\n    }\n}\nexports.MongoClientBulkWriteError = MongoClientBulkWriteError;\n/**\n * An error indicating that an error occurred when processing bulk write results.\n *\n * @public\n * @category Error\n */\nclass MongoClientBulkWriteCursorError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoClientBulkWriteCursorError';\n    }\n}\nexports.MongoClientBulkWriteCursorError = MongoClientBulkWriteCursorError;\n/**\n * An error indicating that an error occurred on the client when executing a client bulk write.\n *\n * @public\n * @category Error\n */\nclass MongoClientBulkWriteExecutionError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoClientBulkWriteExecutionError';\n    }\n}\nexports.MongoClientBulkWriteExecutionError = MongoClientBulkWriteExecutionError;\n/**\n * An error generated when a ChangeStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nclass MongoChangeStreamError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoChangeStreamError';\n    }\n}\nexports.MongoChangeStreamError = MongoChangeStreamError;\n/**\n * An error thrown when the user calls a function or method not supported on a tailable cursor\n *\n * @public\n * @category Error\n */\nclass MongoTailableCursorError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'Tailable cursor does not support this operation') {\n        super(message);\n    }\n    get name() {\n        return 'MongoTailableCursorError';\n    }\n}\nexports.MongoTailableCursorError = MongoTailableCursorError;\n/** An error generated when a GridFSStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nclass MongoGridFSStreamError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoGridFSStreamError';\n    }\n}\nexports.MongoGridFSStreamError = MongoGridFSStreamError;\n/**\n * An error generated when a malformed or invalid chunk is\n * encountered when reading from a GridFSStream.\n *\n * @public\n * @category Error\n */\nclass MongoGridFSChunkError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoGridFSChunkError';\n    }\n}\nexports.MongoGridFSChunkError = MongoGridFSChunkError;\n/**\n * An error generated when a **parsable** unexpected response comes from the server.\n * This is generally an error where the driver in a state expecting a certain behavior to occur in\n * the next message from MongoDB but it receives something else.\n * This error **does not** represent an issue with wire message formatting.\n *\n * #### Example\n * When an operation fails, it is the driver's job to retry it. It must perform serverSelection\n * again to make sure that it attempts the operation against a server in a good state. If server\n * selection returns a server that does not support retryable operations, this error is used.\n * This scenario is unlikely as retryable support would also have been determined on the first attempt\n * but it is possible the state change could report a selectable server that does not support retries.\n *\n * @public\n * @category Error\n */\nclass MongoUnexpectedServerResponseError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoUnexpectedServerResponseError';\n    }\n}\nexports.MongoUnexpectedServerResponseError = MongoUnexpectedServerResponseError;\n/**\n * An error thrown when the user attempts to add options to a cursor that has already been\n * initialized\n *\n * @public\n * @category Error\n */\nclass MongoCursorInUseError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'Cursor is already initialized') {\n        super(message);\n    }\n    get name() {\n        return 'MongoCursorInUseError';\n    }\n}\nexports.MongoCursorInUseError = MongoCursorInUseError;\n/**\n * An error generated when an attempt is made to operate\n * on a closed/closing server.\n *\n * @public\n * @category Error\n */\nclass MongoServerClosedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'Server is closed') {\n        super(message);\n    }\n    get name() {\n        return 'MongoServerClosedError';\n    }\n}\nexports.MongoServerClosedError = MongoServerClosedError;\n/**\n * An error thrown when an attempt is made to read from a cursor that has been exhausted\n *\n * @public\n * @category Error\n */\nclass MongoCursorExhaustedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message || 'Cursor is exhausted');\n    }\n    get name() {\n        return 'MongoCursorExhaustedError';\n    }\n}\nexports.MongoCursorExhaustedError = MongoCursorExhaustedError;\n/**\n * An error generated when an attempt is made to operate on a\n * dropped, or otherwise unavailable, database.\n *\n * @public\n * @category Error\n */\nclass MongoTopologyClosedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'Topology is closed') {\n        super(message);\n    }\n    get name() {\n        return 'MongoTopologyClosedError';\n    }\n}\nexports.MongoTopologyClosedError = MongoTopologyClosedError;\n/** @internal */\nconst kBeforeHandshake = Symbol('beforeHandshake');\nfunction isNetworkErrorBeforeHandshake(err) {\n    return err[kBeforeHandshake] === true;\n}\n/**\n * An error indicating an issue with the network, including TCP errors and timeouts.\n * @public\n * @category Error\n */\nclass MongoNetworkError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, { cause: options?.cause });\n        if (options && typeof options.beforeHandshake === 'boolean') {\n            this[kBeforeHandshake] = options.beforeHandshake;\n        }\n    }\n    get name() {\n        return 'MongoNetworkError';\n    }\n}\nexports.MongoNetworkError = MongoNetworkError;\n/**\n * An error indicating a network timeout occurred\n * @public\n * @category Error\n *\n * @privateRemarks\n * mongodb-client-encryption has a dependency on this error with an instanceof check\n */\nclass MongoNetworkTimeoutError extends MongoNetworkError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoNetworkTimeoutError';\n    }\n}\nexports.MongoNetworkTimeoutError = MongoNetworkTimeoutError;\n/**\n * An error used when attempting to parse a value (like a connection string)\n * @public\n * @category Error\n */\nclass MongoParseError extends MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoParseError';\n    }\n}\nexports.MongoParseError = MongoParseError;\n/**\n * An error generated when the user supplies malformed or unexpected arguments\n * or when a required argument or field is not provided.\n *\n *\n * @public\n * @category Error\n */\nclass MongoInvalidArgumentError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoInvalidArgumentError';\n    }\n}\nexports.MongoInvalidArgumentError = MongoInvalidArgumentError;\n/**\n * An error generated when a feature that is not enabled or allowed for the current server\n * configuration is used\n *\n *\n * @public\n * @category Error\n */\nclass MongoCompatibilityError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoCompatibilityError';\n    }\n}\nexports.MongoCompatibilityError = MongoCompatibilityError;\n/**\n * An error generated when the user fails to provide authentication credentials before attempting\n * to connect to a mongo server instance.\n *\n *\n * @public\n * @category Error\n */\nclass MongoMissingCredentialsError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoMissingCredentialsError';\n    }\n}\nexports.MongoMissingCredentialsError = MongoMissingCredentialsError;\n/**\n * An error generated when a required module or dependency is not present in the local environment\n *\n * @public\n * @category Error\n */\nclass MongoMissingDependencyError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n        this.dependencyName = options.dependencyName;\n    }\n    get name() {\n        return 'MongoMissingDependencyError';\n    }\n}\nexports.MongoMissingDependencyError = MongoMissingDependencyError;\n/**\n * An error signifying a general system issue\n * @public\n * @category Error\n */\nclass MongoSystemError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, reason) {\n        if (reason && reason.error) {\n            super(MongoError.buildErrorMessage(reason.error.message || reason.error), {\n                cause: reason.error\n            });\n        }\n        else {\n            super(message);\n        }\n        if (reason) {\n            this.reason = reason;\n        }\n        this.code = reason.error?.code;\n    }\n    get name() {\n        return 'MongoSystemError';\n    }\n}\nexports.MongoSystemError = MongoSystemError;\n/**\n * An error signifying a client-side server selection error\n * @public\n * @category Error\n */\nclass MongoServerSelectionError extends MongoSystemError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, reason) {\n        super(message, reason);\n    }\n    get name() {\n        return 'MongoServerSelectionError';\n    }\n}\nexports.MongoServerSelectionError = MongoServerSelectionError;\n/**\n * An error thrown when the server reports a writeConcernError\n * @public\n * @category Error\n */\nclass MongoWriteConcernError extends MongoServerError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(result) {\n        super({ ...result.writeConcernError, ...result });\n        this.errInfo = result.writeConcernError.errInfo;\n        this.result = result;\n    }\n    get name() {\n        return 'MongoWriteConcernError';\n    }\n}\nexports.MongoWriteConcernError = MongoWriteConcernError;\n// https://github.com/mongodb/specifications/blob/master/source/retryable-reads/retryable-reads.rst#retryable-error\nconst RETRYABLE_READ_ERROR_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.HostUnreachable,\n    exports.MONGODB_ERROR_CODES.HostNotFound,\n    exports.MONGODB_ERROR_CODES.NetworkTimeout,\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress,\n    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,\n    exports.MONGODB_ERROR_CODES.SocketException,\n    exports.MONGODB_ERROR_CODES.NotWritablePrimary,\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n    exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n    exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary,\n    exports.MONGODB_ERROR_CODES.ExceededTimeLimit,\n    exports.MONGODB_ERROR_CODES.ReadConcernMajorityNotAvailableYet\n]);\n// see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\nconst RETRYABLE_WRITE_ERROR_CODES = RETRYABLE_READ_ERROR_CODES;\nfunction needsRetryableWriteLabel(error, maxWireVersion, serverType) {\n    // pre-4.4 server, then the driver adds an error label for every valid case\n    // execute operation will only inspect the label, code/message logic is handled here\n    if (error instanceof MongoNetworkError) {\n        return true;\n    }\n    if (error instanceof MongoError) {\n        if ((maxWireVersion >= 9 || isRetryableWriteError(error)) &&\n            !error.hasErrorLabel(exports.MongoErrorLabel.HandshakeError)) {\n            // If we already have the error label no need to add it again. 4.4+ servers add the label.\n            // In the case where we have a handshake error, need to fall down to the logic checking\n            // the codes.\n            return false;\n        }\n    }\n    if (error instanceof MongoWriteConcernError) {\n        if (serverType === 'Mongos' && maxWireVersion < 9) {\n            // use original top-level code from server response\n            return RETRYABLE_WRITE_ERROR_CODES.has(error.result.code ?? 0);\n        }\n        const code = error.result.writeConcernError.code ?? Number(error.code);\n        return RETRYABLE_WRITE_ERROR_CODES.has(Number.isNaN(code) ? 0 : code);\n    }\n    if (error instanceof MongoError) {\n        return RETRYABLE_WRITE_ERROR_CODES.has(Number(error.code));\n    }\n    const isNotWritablePrimaryError = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);\n    if (isNotWritablePrimaryError) {\n        return true;\n    }\n    const isNodeIsRecoveringError = exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);\n    if (isNodeIsRecoveringError) {\n        return true;\n    }\n    return false;\n}\nfunction isRetryableWriteError(error) {\n    return (error.hasErrorLabel(exports.MongoErrorLabel.RetryableWriteError) ||\n        error.hasErrorLabel(exports.MongoErrorLabel.PoolRequstedRetry));\n}\n/** Determines whether an error is something the driver should attempt to retry */\nfunction isRetryableReadError(error) {\n    const hasRetryableErrorCode = typeof error.code === 'number' ? RETRYABLE_READ_ERROR_CODES.has(error.code) : false;\n    if (hasRetryableErrorCode) {\n        return true;\n    }\n    if (error instanceof MongoNetworkError) {\n        return true;\n    }\n    const isNotWritablePrimaryError = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);\n    if (isNotWritablePrimaryError) {\n        return true;\n    }\n    const isNodeIsRecoveringError = exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);\n    if (isNodeIsRecoveringError) {\n        return true;\n    }\n    return false;\n}\nconst SDAM_RECOVERING_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress,\n    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n    exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary\n]);\nconst SDAM_NOT_PRIMARY_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.NotWritablePrimary,\n    exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n    exports.MONGODB_ERROR_CODES.LegacyNotPrimary\n]);\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress\n]);\nfunction isRecoveringError(err) {\n    if (typeof err.code === 'number') {\n        // If any error code exists, we ignore the error.message\n        return SDAM_RECOVERING_CODES.has(err.code);\n    }\n    return (exports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE.test(err.message) ||\n        exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(err.message));\n}\nfunction isNotWritablePrimaryError(err) {\n    if (typeof err.code === 'number') {\n        // If any error code exists, we ignore the error.message\n        return SDAM_NOT_PRIMARY_CODES.has(err.code);\n    }\n    if (isRecoveringError(err)) {\n        return false;\n    }\n    return exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(err.message);\n}\nfunction isNodeShuttingDownError(err) {\n    return !!(typeof err.code === 'number' && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code));\n}\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering\n */\nfunction isSDAMUnrecoverableError(error) {\n    // NOTE: null check is here for a strictly pre-CMAP world, a timeout or\n    //       close event are considered unrecoverable\n    if (error instanceof MongoParseError || error == null) {\n        return true;\n    }\n    return isRecoveringError(error) || isNotWritablePrimaryError(error);\n}\nfunction isNetworkTimeoutError(err) {\n    return !!(err instanceof MongoNetworkError && err.message.match(/timed out/));\n}\nfunction isResumableError(error, wireVersion) {\n    if (error == null || !(error instanceof MongoError)) {\n        return false;\n    }\n    if (error instanceof MongoNetworkError) {\n        return true;\n    }\n    if (wireVersion != null && wireVersion >= 9) {\n        // DRIVERS-1308: For 4.4 drivers running against 4.4 servers, drivers will add a special case to treat the CursorNotFound error code as resumable\n        if (error.code === exports.MONGODB_ERROR_CODES.CursorNotFound) {\n            return true;\n        }\n        return error.hasErrorLabel(exports.MongoErrorLabel.ResumableChangeStreamError);\n    }\n    if (typeof error.code === 'number') {\n        return exports.GET_MORE_RESUMABLE_CODES.has(error.code);\n    }\n    return false;\n}\n//# sourceMappingURL=error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/explain.js":
/*!********************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/explain.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Explain = exports.ExplainVerbosity = void 0;\n/** @public */\nexports.ExplainVerbosity = Object.freeze({\n    queryPlanner: 'queryPlanner',\n    queryPlannerExtended: 'queryPlannerExtended',\n    executionStats: 'executionStats',\n    allPlansExecution: 'allPlansExecution'\n});\n/** @internal */\nclass Explain {\n    constructor(verbosity, maxTimeMS) {\n        if (typeof verbosity === 'boolean') {\n            this.verbosity = verbosity\n                ? exports.ExplainVerbosity.allPlansExecution\n                : exports.ExplainVerbosity.queryPlanner;\n        }\n        else {\n            this.verbosity = verbosity;\n        }\n        this.maxTimeMS = maxTimeMS;\n    }\n    static fromOptions({ explain } = {}) {\n        if (explain == null)\n            return;\n        if (typeof explain === 'boolean' || typeof explain === 'string') {\n            return new Explain(explain);\n        }\n        const { verbosity, maxTimeMS } = explain;\n        return new Explain(verbosity, maxTimeMS);\n    }\n}\nexports.Explain = Explain;\n//# sourceMappingURL=explain.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9leHBsYWluLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGVBQWUsR0FBRyx3QkFBd0I7QUFDMUM7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsVUFBVSxJQUFJO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsdUJBQXVCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL2xpbmt1cy9HaXRodWIvbW9ub3R3by9wYXlsb2FkLXBsdWdpbi1tZXRhL25vZGVfbW9kdWxlcy8ucG5wbS9tb25nb2RiQDYuMTAuMC9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvZXhwbGFpbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRXhwbGFpbiA9IGV4cG9ydHMuRXhwbGFpblZlcmJvc2l0eSA9IHZvaWQgMDtcbi8qKiBAcHVibGljICovXG5leHBvcnRzLkV4cGxhaW5WZXJib3NpdHkgPSBPYmplY3QuZnJlZXplKHtcbiAgICBxdWVyeVBsYW5uZXI6ICdxdWVyeVBsYW5uZXInLFxuICAgIHF1ZXJ5UGxhbm5lckV4dGVuZGVkOiAncXVlcnlQbGFubmVyRXh0ZW5kZWQnLFxuICAgIGV4ZWN1dGlvblN0YXRzOiAnZXhlY3V0aW9uU3RhdHMnLFxuICAgIGFsbFBsYW5zRXhlY3V0aW9uOiAnYWxsUGxhbnNFeGVjdXRpb24nXG59KTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIEV4cGxhaW4ge1xuICAgIGNvbnN0cnVjdG9yKHZlcmJvc2l0eSwgbWF4VGltZU1TKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmVyYm9zaXR5ID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHRoaXMudmVyYm9zaXR5ID0gdmVyYm9zaXR5XG4gICAgICAgICAgICAgICAgPyBleHBvcnRzLkV4cGxhaW5WZXJib3NpdHkuYWxsUGxhbnNFeGVjdXRpb25cbiAgICAgICAgICAgICAgICA6IGV4cG9ydHMuRXhwbGFpblZlcmJvc2l0eS5xdWVyeVBsYW5uZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnZlcmJvc2l0eSA9IHZlcmJvc2l0eTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1heFRpbWVNUyA9IG1heFRpbWVNUztcbiAgICB9XG4gICAgc3RhdGljIGZyb21PcHRpb25zKHsgZXhwbGFpbiB9ID0ge30pIHtcbiAgICAgICAgaWYgKGV4cGxhaW4gPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKHR5cGVvZiBleHBsYWluID09PSAnYm9vbGVhbicgfHwgdHlwZW9mIGV4cGxhaW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEV4cGxhaW4oZXhwbGFpbik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyB2ZXJib3NpdHksIG1heFRpbWVNUyB9ID0gZXhwbGFpbjtcbiAgICAgICAgcmV0dXJuIG5ldyBFeHBsYWluKHZlcmJvc2l0eSwgbWF4VGltZU1TKTtcbiAgICB9XG59XG5leHBvcnRzLkV4cGxhaW4gPSBFeHBsYWluO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhwbGFpbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/explain.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/gridfs/download.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/gridfs/download.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GridFSBucketReadStream = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\n/**\n * A readable stream that enables you to read buffers from GridFS.\n *\n * Do not instantiate this class directly. Use `openDownloadStream()` instead.\n * @public\n */\nclass GridFSBucketReadStream extends stream_1.Readable {\n    /**\n     * @param chunks - Handle for chunks collection\n     * @param files - Handle for files collection\n     * @param readPreference - The read preference to use\n     * @param filter - The filter to use to find the file document\n     * @internal\n     */\n    constructor(chunks, files, readPreference, filter, options) {\n        super({ emitClose: true });\n        this.s = {\n            bytesToTrim: 0,\n            bytesToSkip: 0,\n            bytesRead: 0,\n            chunks,\n            expected: 0,\n            files,\n            filter,\n            init: false,\n            expectedEnd: 0,\n            options: {\n                start: 0,\n                end: 0,\n                ...options\n            },\n            readPreference\n        };\n    }\n    /**\n     * Reads from the cursor and pushes to the stream.\n     * Private Impl, do not call directly\n     * @internal\n     */\n    _read() {\n        if (this.destroyed)\n            return;\n        waitForFile(this, () => doRead(this));\n    }\n    /**\n     * Sets the 0-based offset in bytes to start streaming from. Throws\n     * an error if this stream has entered flowing mode\n     * (e.g. if you've already called `on('data')`)\n     *\n     * @param start - 0-based offset in bytes to start streaming from\n     */\n    start(start = 0) {\n        throwIfInitialized(this);\n        this.s.options.start = start;\n        return this;\n    }\n    /**\n     * Sets the 0-based offset in bytes to start streaming from. Throws\n     * an error if this stream has entered flowing mode\n     * (e.g. if you've already called `on('data')`)\n     *\n     * @param end - Offset in bytes to stop reading at\n     */\n    end(end = 0) {\n        throwIfInitialized(this);\n        this.s.options.end = end;\n        return this;\n    }\n    /**\n     * Marks this stream as aborted (will never push another `data` event)\n     * and kills the underlying cursor. Will emit the 'end' event, and then\n     * the 'close' event once the cursor is successfully killed.\n     */\n    async abort() {\n        this.push(null);\n        this.destroy();\n        await this.s.cursor?.close();\n    }\n}\nexports.GridFSBucketReadStream = GridFSBucketReadStream;\n/**\n * Fires when the stream loaded the file document corresponding to the provided id.\n * @event\n */\nGridFSBucketReadStream.FILE = 'file';\nfunction throwIfInitialized(stream) {\n    if (stream.s.init) {\n        throw new error_1.MongoGridFSStreamError('Options cannot be changed after the stream is initialized');\n    }\n}\nfunction doRead(stream) {\n    if (stream.destroyed)\n        return;\n    if (!stream.s.cursor)\n        return;\n    if (!stream.s.file)\n        return;\n    const handleReadResult = (doc) => {\n        if (stream.destroyed)\n            return;\n        if (!doc) {\n            stream.push(null);\n            stream.s.cursor?.close().then(undefined, error => stream.destroy(error));\n            return;\n        }\n        if (!stream.s.file)\n            return;\n        const bytesRemaining = stream.s.file.length - stream.s.bytesRead;\n        const expectedN = stream.s.expected++;\n        const expectedLength = Math.min(stream.s.file.chunkSize, bytesRemaining);\n        if (doc.n > expectedN) {\n            return stream.destroy(new error_1.MongoGridFSChunkError(`ChunkIsMissing: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n        }\n        if (doc.n < expectedN) {\n            return stream.destroy(new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n        }\n        let buf = Buffer.isBuffer(doc.data) ? doc.data : doc.data.buffer;\n        if (buf.byteLength !== expectedLength) {\n            if (bytesRemaining <= 0) {\n                return stream.destroy(new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected file length ${stream.s.file.length} bytes but already read ${stream.s.bytesRead} bytes`));\n            }\n            return stream.destroy(new error_1.MongoGridFSChunkError(`ChunkIsWrongSize: Got unexpected length: ${buf.byteLength}, expected: ${expectedLength}`));\n        }\n        stream.s.bytesRead += buf.byteLength;\n        if (buf.byteLength === 0) {\n            return stream.push(null);\n        }\n        let sliceStart = null;\n        let sliceEnd = null;\n        if (stream.s.bytesToSkip != null) {\n            sliceStart = stream.s.bytesToSkip;\n            stream.s.bytesToSkip = 0;\n        }\n        const atEndOfStream = expectedN === stream.s.expectedEnd - 1;\n        const bytesLeftToRead = stream.s.options.end - stream.s.bytesToSkip;\n        if (atEndOfStream && stream.s.bytesToTrim != null) {\n            sliceEnd = stream.s.file.chunkSize - stream.s.bytesToTrim;\n        }\n        else if (stream.s.options.end && bytesLeftToRead < doc.data.byteLength) {\n            sliceEnd = bytesLeftToRead;\n        }\n        if (sliceStart != null || sliceEnd != null) {\n            buf = buf.slice(sliceStart || 0, sliceEnd || buf.byteLength);\n        }\n        stream.push(buf);\n        return;\n    };\n    stream.s.cursor.next().then(handleReadResult, error => {\n        if (stream.destroyed)\n            return;\n        stream.destroy(error);\n    });\n}\nfunction init(stream) {\n    const findOneOptions = {};\n    if (stream.s.readPreference) {\n        findOneOptions.readPreference = stream.s.readPreference;\n    }\n    if (stream.s.options && stream.s.options.sort) {\n        findOneOptions.sort = stream.s.options.sort;\n    }\n    if (stream.s.options && stream.s.options.skip) {\n        findOneOptions.skip = stream.s.options.skip;\n    }\n    const handleReadResult = (doc) => {\n        if (stream.destroyed)\n            return;\n        if (!doc) {\n            const identifier = stream.s.filter._id\n                ? stream.s.filter._id.toString()\n                : stream.s.filter.filename;\n            const errmsg = `FileNotFound: file ${identifier} was not found`;\n            // TODO(NODE-3483)\n            const err = new error_1.MongoRuntimeError(errmsg);\n            err.code = 'ENOENT'; // TODO: NODE-3338 set property as part of constructor\n            return stream.destroy(err);\n        }\n        // If document is empty, kill the stream immediately and don't\n        // execute any reads\n        if (doc.length <= 0) {\n            stream.push(null);\n            return;\n        }\n        if (stream.destroyed) {\n            // If user destroys the stream before we have a cursor, wait\n            // until the query is done to say we're 'closed' because we can't\n            // cancel a query.\n            stream.destroy();\n            return;\n        }\n        try {\n            stream.s.bytesToSkip = handleStartOption(stream, doc, stream.s.options);\n        }\n        catch (error) {\n            return stream.destroy(error);\n        }\n        const filter = { files_id: doc._id };\n        // Currently (MongoDB 3.4.4) skip function does not support the index,\n        // it needs to retrieve all the documents first and then skip them. (CS-25811)\n        // As work around we use $gte on the \"n\" field.\n        if (stream.s.options && stream.s.options.start != null) {\n            const skip = Math.floor(stream.s.options.start / doc.chunkSize);\n            if (skip > 0) {\n                filter['n'] = { $gte: skip };\n            }\n        }\n        stream.s.cursor = stream.s.chunks.find(filter).sort({ n: 1 });\n        if (stream.s.readPreference) {\n            stream.s.cursor.withReadPreference(stream.s.readPreference);\n        }\n        stream.s.expectedEnd = Math.ceil(doc.length / doc.chunkSize);\n        stream.s.file = doc;\n        try {\n            stream.s.bytesToTrim = handleEndOption(stream, doc, stream.s.cursor, stream.s.options);\n        }\n        catch (error) {\n            return stream.destroy(error);\n        }\n        stream.emit(GridFSBucketReadStream.FILE, doc);\n        return;\n    };\n    stream.s.files.findOne(stream.s.filter, findOneOptions).then(handleReadResult, error => {\n        if (stream.destroyed)\n            return;\n        stream.destroy(error);\n    });\n}\nfunction waitForFile(stream, callback) {\n    if (stream.s.file) {\n        return callback();\n    }\n    if (!stream.s.init) {\n        init(stream);\n        stream.s.init = true;\n    }\n    stream.once('file', () => {\n        callback();\n    });\n}\nfunction handleStartOption(stream, doc, options) {\n    if (options && options.start != null) {\n        if (options.start > doc.length) {\n            throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be more than the length of the file (${doc.length})`);\n        }\n        if (options.start < 0) {\n            throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be negative`);\n        }\n        if (options.end != null && options.end < options.start) {\n            throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be greater than stream end (${options.end})`);\n        }\n        stream.s.bytesRead = Math.floor(options.start / doc.chunkSize) * doc.chunkSize;\n        stream.s.expected = Math.floor(options.start / doc.chunkSize);\n        return options.start - stream.s.bytesRead;\n    }\n    throw new error_1.MongoInvalidArgumentError('Start option must be defined');\n}\nfunction handleEndOption(stream, doc, cursor, options) {\n    if (options && options.end != null) {\n        if (options.end > doc.length) {\n            throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be more than the length of the file (${doc.length})`);\n        }\n        if (options.start == null || options.start < 0) {\n            throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be negative`);\n        }\n        const start = options.start != null ? Math.floor(options.start / doc.chunkSize) : 0;\n        cursor.limit(Math.ceil(options.end / doc.chunkSize) - start);\n        stream.s.expectedEnd = Math.ceil(options.end / doc.chunkSize);\n        return Math.ceil(options.end / doc.chunkSize) * doc.chunkSize - options.end;\n    }\n    throw new error_1.MongoInvalidArgumentError('End option must be defined');\n}\n//# sourceMappingURL=download.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/gridfs/download.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/gridfs/index.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/gridfs/index.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GridFSBucket = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_types.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/write_concern.js\");\nconst download_1 = __webpack_require__(/*! ./download */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/gridfs/download.js\");\nconst upload_1 = __webpack_require__(/*! ./upload */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/gridfs/upload.js\");\nconst DEFAULT_GRIDFS_BUCKET_OPTIONS = {\n    bucketName: 'fs',\n    chunkSizeBytes: 255 * 1024\n};\n/**\n * Constructor for a streaming GridFS interface\n * @public\n */\nclass GridFSBucket extends mongo_types_1.TypedEventEmitter {\n    constructor(db, options) {\n        super();\n        this.setMaxListeners(0);\n        const privateOptions = {\n            ...DEFAULT_GRIDFS_BUCKET_OPTIONS,\n            ...options,\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options)\n        };\n        this.s = {\n            db,\n            options: privateOptions,\n            _chunksCollection: db.collection(privateOptions.bucketName + '.chunks'),\n            _filesCollection: db.collection(privateOptions.bucketName + '.files'),\n            checkedIndexes: false,\n            calledOpenUploadStream: false\n        };\n    }\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing\n     * buffers to GridFS. The stream's 'id' property contains the resulting\n     * file's id.\n     *\n     * @param filename - The value of the 'filename' key in the files doc\n     * @param options - Optional settings.\n     */\n    openUploadStream(filename, options) {\n        return new upload_1.GridFSBucketWriteStream(this, filename, options);\n    }\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing\n     * buffers to GridFS for a custom file id. The stream's 'id' property contains the resulting\n     * file's id.\n     */\n    openUploadStreamWithId(id, filename, options) {\n        return new upload_1.GridFSBucketWriteStream(this, filename, { ...options, id });\n    }\n    /** Returns a readable stream (GridFSBucketReadStream) for streaming file data from GridFS. */\n    openDownloadStream(id, options) {\n        return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, { _id: id }, options);\n    }\n    /**\n     * Deletes a file with the given id\n     *\n     * @param id - The id of the file doc\n     */\n    async delete(id) {\n        const { deletedCount } = await this.s._filesCollection.deleteOne({ _id: id });\n        // Delete orphaned chunks before returning FileNotFound\n        await this.s._chunksCollection.deleteMany({ files_id: id });\n        if (deletedCount === 0) {\n            // TODO(NODE-3483): Replace with more appropriate error\n            // Consider creating new error MongoGridFSFileNotFoundError\n            throw new error_1.MongoRuntimeError(`File not found for id ${id}`);\n        }\n    }\n    /** Convenience wrapper around find on the files collection */\n    find(filter = {}, options = {}) {\n        return this.s._filesCollection.find(filter, options);\n    }\n    /**\n     * Returns a readable stream (GridFSBucketReadStream) for streaming the\n     * file with the given name from GridFS. If there are multiple files with\n     * the same name, this will stream the most recent file with the given name\n     * (as determined by the `uploadDate` field). You can set the `revision`\n     * option to change this behavior.\n     */\n    openDownloadStreamByName(filename, options) {\n        let sort = { uploadDate: -1 };\n        let skip = undefined;\n        if (options && options.revision != null) {\n            if (options.revision >= 0) {\n                sort = { uploadDate: 1 };\n                skip = options.revision;\n            }\n            else {\n                skip = -options.revision - 1;\n            }\n        }\n        return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, { filename }, { ...options, sort, skip });\n    }\n    /**\n     * Renames the file with the given _id to the given string\n     *\n     * @param id - the id of the file to rename\n     * @param filename - new name for the file\n     */\n    async rename(id, filename) {\n        const filter = { _id: id };\n        const update = { $set: { filename } };\n        const { matchedCount } = await this.s._filesCollection.updateOne(filter, update);\n        if (matchedCount === 0) {\n            throw new error_1.MongoRuntimeError(`File with id ${id} not found`);\n        }\n    }\n    /** Removes this bucket's files collection, followed by its chunks collection. */\n    async drop() {\n        await this.s._filesCollection.drop();\n        await this.s._chunksCollection.drop();\n    }\n}\nexports.GridFSBucket = GridFSBucket;\n/**\n * When the first call to openUploadStream is made, the upload stream will\n * check to see if it needs to create the proper indexes on the chunks and\n * files collections. This event is fired either when 1) it determines that\n * no index creation is necessary, 2) when it successfully creates the\n * necessary indexes.\n * @event\n */\nGridFSBucket.INDEX = 'index';\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/gridfs/index.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/gridfs/upload.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/gridfs/upload.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GridFSBucketWriteStream = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ./../write_concern */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/write_concern.js\");\n/**\n * A writable stream that enables you to write buffers to GridFS.\n *\n * Do not instantiate this class directly. Use `openUploadStream()` instead.\n * @public\n */\nclass GridFSBucketWriteStream extends stream_1.Writable {\n    /**\n     * @param bucket - Handle for this stream's corresponding bucket\n     * @param filename - The value of the 'filename' key in the files doc\n     * @param options - Optional settings.\n     * @internal\n     */\n    constructor(bucket, filename, options) {\n        super();\n        /**\n         * The document containing information about the inserted file.\n         * This property is defined _after_ the finish event has been emitted.\n         * It will remain `null` if an error occurs.\n         *\n         * @example\n         * ```ts\n         * fs.createReadStream('file.txt')\n         *   .pipe(bucket.openUploadStream('file.txt'))\n         *   .on('finish', function () {\n         *     console.log(this.gridFSFile)\n         *   })\n         * ```\n         */\n        this.gridFSFile = null;\n        options = options ?? {};\n        this.bucket = bucket;\n        this.chunks = bucket.s._chunksCollection;\n        this.filename = filename;\n        this.files = bucket.s._filesCollection;\n        this.options = options;\n        this.writeConcern = write_concern_1.WriteConcern.fromOptions(options) || bucket.s.options.writeConcern;\n        // Signals the write is all done\n        this.done = false;\n        this.id = options.id ? options.id : new bson_1.ObjectId();\n        // properly inherit the default chunksize from parent\n        this.chunkSizeBytes = options.chunkSizeBytes || this.bucket.s.options.chunkSizeBytes;\n        this.bufToStore = Buffer.alloc(this.chunkSizeBytes);\n        this.length = 0;\n        this.n = 0;\n        this.pos = 0;\n        this.state = {\n            streamEnd: false,\n            outstandingRequests: 0,\n            errored: false,\n            aborted: false\n        };\n        if (!this.bucket.s.calledOpenUploadStream) {\n            this.bucket.s.calledOpenUploadStream = true;\n            checkIndexes(this).then(() => {\n                this.bucket.s.checkedIndexes = true;\n                this.bucket.emit('index');\n            }, utils_1.squashError);\n        }\n    }\n    /**\n     * @internal\n     *\n     * The stream is considered constructed when the indexes are done being created\n     */\n    _construct(callback) {\n        if (this.bucket.s.checkedIndexes) {\n            return process.nextTick(callback);\n        }\n        this.bucket.once('index', callback);\n    }\n    /**\n     * @internal\n     * Write a buffer to the stream.\n     *\n     * @param chunk - Buffer to write\n     * @param encoding - Optional encoding for the buffer\n     * @param callback - Function to call when the chunk was added to the buffer, or if the entire chunk was persisted to MongoDB if this chunk caused a flush.\n     */\n    _write(chunk, encoding, callback) {\n        doWrite(this, chunk, encoding, callback);\n    }\n    /** @internal */\n    _final(callback) {\n        if (this.state.streamEnd) {\n            return process.nextTick(callback);\n        }\n        this.state.streamEnd = true;\n        writeRemnant(this, callback);\n    }\n    /**\n     * Places this write stream into an aborted state (all future writes fail)\n     * and deletes all chunks that have already been written.\n     */\n    async abort() {\n        if (this.state.streamEnd) {\n            // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n            throw new error_1.MongoAPIError('Cannot abort a stream that has already completed');\n        }\n        if (this.state.aborted) {\n            // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n            throw new error_1.MongoAPIError('Cannot call abort() on a stream twice');\n        }\n        this.state.aborted = true;\n        await this.chunks.deleteMany({ files_id: this.id });\n    }\n}\nexports.GridFSBucketWriteStream = GridFSBucketWriteStream;\nfunction handleError(stream, error, callback) {\n    if (stream.state.errored) {\n        process.nextTick(callback);\n        return;\n    }\n    stream.state.errored = true;\n    process.nextTick(callback, error);\n}\nfunction createChunkDoc(filesId, n, data) {\n    return {\n        _id: new bson_1.ObjectId(),\n        files_id: filesId,\n        n,\n        data\n    };\n}\nasync function checkChunksIndex(stream) {\n    const index = { files_id: 1, n: 1 };\n    let indexes;\n    try {\n        indexes = await stream.chunks.listIndexes().toArray();\n    }\n    catch (error) {\n        if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n            indexes = [];\n        }\n        else {\n            throw error;\n        }\n    }\n    const hasChunksIndex = !!indexes.find(index => {\n        const keys = Object.keys(index.key);\n        if (keys.length === 2 && index.key.files_id === 1 && index.key.n === 1) {\n            return true;\n        }\n        return false;\n    });\n    if (!hasChunksIndex) {\n        await stream.chunks.createIndex(index, {\n            ...stream.writeConcern,\n            background: true,\n            unique: true\n        });\n    }\n}\nfunction checkDone(stream, callback) {\n    if (stream.done) {\n        return process.nextTick(callback);\n    }\n    if (stream.state.streamEnd && stream.state.outstandingRequests === 0 && !stream.state.errored) {\n        // Set done so we do not trigger duplicate createFilesDoc\n        stream.done = true;\n        // Create a new files doc\n        const gridFSFile = createFilesDoc(stream.id, stream.length, stream.chunkSizeBytes, stream.filename, stream.options.contentType, stream.options.aliases, stream.options.metadata);\n        if (isAborted(stream, callback)) {\n            return;\n        }\n        stream.files.insertOne(gridFSFile, { writeConcern: stream.writeConcern }).then(() => {\n            stream.gridFSFile = gridFSFile;\n            callback();\n        }, error => handleError(stream, error, callback));\n        return;\n    }\n    process.nextTick(callback);\n}\nasync function checkIndexes(stream) {\n    const doc = await stream.files.findOne({}, { projection: { _id: 1 } });\n    if (doc != null) {\n        // If at least one document exists assume the collection has the required index\n        return;\n    }\n    const index = { filename: 1, uploadDate: 1 };\n    let indexes;\n    try {\n        indexes = await stream.files.listIndexes().toArray();\n    }\n    catch (error) {\n        if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n            indexes = [];\n        }\n        else {\n            throw error;\n        }\n    }\n    const hasFileIndex = !!indexes.find(index => {\n        const keys = Object.keys(index.key);\n        if (keys.length === 2 && index.key.filename === 1 && index.key.uploadDate === 1) {\n            return true;\n        }\n        return false;\n    });\n    if (!hasFileIndex) {\n        await stream.files.createIndex(index, { background: false });\n    }\n    await checkChunksIndex(stream);\n}\nfunction createFilesDoc(_id, length, chunkSize, filename, contentType, aliases, metadata) {\n    const ret = {\n        _id,\n        length,\n        chunkSize,\n        uploadDate: new Date(),\n        filename\n    };\n    if (contentType) {\n        ret.contentType = contentType;\n    }\n    if (aliases) {\n        ret.aliases = aliases;\n    }\n    if (metadata) {\n        ret.metadata = metadata;\n    }\n    return ret;\n}\nfunction doWrite(stream, chunk, encoding, callback) {\n    if (isAborted(stream, callback)) {\n        return;\n    }\n    const inputBuf = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding);\n    stream.length += inputBuf.length;\n    // Input is small enough to fit in our buffer\n    if (stream.pos + inputBuf.length < stream.chunkSizeBytes) {\n        inputBuf.copy(stream.bufToStore, stream.pos);\n        stream.pos += inputBuf.length;\n        process.nextTick(callback);\n        return;\n    }\n    // Otherwise, buffer is too big for current chunk, so we need to flush\n    // to MongoDB.\n    let inputBufRemaining = inputBuf.length;\n    let spaceRemaining = stream.chunkSizeBytes - stream.pos;\n    let numToCopy = Math.min(spaceRemaining, inputBuf.length);\n    let outstandingRequests = 0;\n    while (inputBufRemaining > 0) {\n        const inputBufPos = inputBuf.length - inputBufRemaining;\n        inputBuf.copy(stream.bufToStore, stream.pos, inputBufPos, inputBufPos + numToCopy);\n        stream.pos += numToCopy;\n        spaceRemaining -= numToCopy;\n        let doc;\n        if (spaceRemaining === 0) {\n            doc = createChunkDoc(stream.id, stream.n, Buffer.from(stream.bufToStore));\n            ++stream.state.outstandingRequests;\n            ++outstandingRequests;\n            if (isAborted(stream, callback)) {\n                return;\n            }\n            stream.chunks.insertOne(doc, { writeConcern: stream.writeConcern }).then(() => {\n                --stream.state.outstandingRequests;\n                --outstandingRequests;\n                if (!outstandingRequests) {\n                    checkDone(stream, callback);\n                }\n            }, error => handleError(stream, error, callback));\n            spaceRemaining = stream.chunkSizeBytes;\n            stream.pos = 0;\n            ++stream.n;\n        }\n        inputBufRemaining -= numToCopy;\n        numToCopy = Math.min(spaceRemaining, inputBufRemaining);\n    }\n}\nfunction writeRemnant(stream, callback) {\n    // Buffer is empty, so don't bother to insert\n    if (stream.pos === 0) {\n        return checkDone(stream, callback);\n    }\n    ++stream.state.outstandingRequests;\n    // Create a new buffer to make sure the buffer isn't bigger than it needs\n    // to be.\n    const remnant = Buffer.alloc(stream.pos);\n    stream.bufToStore.copy(remnant, 0, 0, stream.pos);\n    const doc = createChunkDoc(stream.id, stream.n, remnant);\n    // If the stream was aborted, do not write remnant\n    if (isAborted(stream, callback)) {\n        return;\n    }\n    stream.chunks.insertOne(doc, { writeConcern: stream.writeConcern }).then(() => {\n        --stream.state.outstandingRequests;\n        checkDone(stream, callback);\n    }, error => handleError(stream, error, callback));\n}\nfunction isAborted(stream, callback) {\n    if (stream.state.aborted) {\n        process.nextTick(callback, new error_1.MongoAPIError('Stream has been aborted'));\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=upload.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/gridfs/upload.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/index.js":
/*!******************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/index.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoServerSelectionError = exports.MongoServerError = exports.MongoServerClosedError = exports.MongoRuntimeError = exports.MongoParseError = exports.MongoOIDCError = exports.MongoNotConnectedError = exports.MongoNetworkTimeoutError = exports.MongoNetworkError = exports.MongoMissingDependencyError = exports.MongoMissingCredentialsError = exports.MongoKerberosError = exports.MongoInvalidArgumentError = exports.MongoGridFSStreamError = exports.MongoGridFSChunkError = exports.MongoGCPError = exports.MongoExpiredSessionError = exports.MongoError = exports.MongoDriverError = exports.MongoDecompressionError = exports.MongoCursorInUseError = exports.MongoCursorExhaustedError = exports.MongoCompatibilityError = exports.MongoClientBulkWriteExecutionError = exports.MongoClientBulkWriteError = exports.MongoClientBulkWriteCursorError = exports.MongoChangeStreamError = exports.MongoBatchReExecutionError = exports.MongoAzureError = exports.MongoAWSError = exports.MongoAPIError = exports.ChangeStreamCursor = exports.ClientEncryption = exports.MongoBulkWriteError = exports.UUID = exports.Timestamp = exports.ObjectId = exports.MinKey = exports.MaxKey = exports.Long = exports.Int32 = exports.Double = exports.Decimal128 = exports.DBRef = exports.Code = exports.BSONType = exports.BSONSymbol = exports.BSONRegExp = exports.Binary = exports.BSON = void 0;\nexports.ConnectionClosedEvent = exports.ConnectionCheckOutStartedEvent = exports.ConnectionCheckOutFailedEvent = exports.ConnectionCheckedOutEvent = exports.ConnectionCheckedInEvent = exports.CommandSucceededEvent = exports.CommandStartedEvent = exports.CommandFailedEvent = exports.WriteConcern = exports.ReadPreference = exports.ReadConcern = exports.TopologyType = exports.ServerType = exports.ReadPreferenceMode = exports.ReadConcernLevel = exports.ProfilingLevel = exports.ReturnDocument = exports.ServerApiVersion = exports.ExplainVerbosity = exports.MongoErrorLabel = exports.CURSOR_FLAGS = exports.Compressor = exports.AuthMechanism = exports.GSSAPICanonicalizationValue = exports.AutoEncryptionLoggerLevel = exports.BatchType = exports.UnorderedBulkOperation = exports.OrderedBulkOperation = exports.MongoClient = exports.ListIndexesCursor = exports.ListCollectionsCursor = exports.GridFSBucketWriteStream = exports.GridFSBucketReadStream = exports.GridFSBucket = exports.FindCursor = exports.Db = exports.Collection = exports.ClientSession = exports.ChangeStream = exports.CancellationToken = exports.AggregationCursor = exports.Admin = exports.AbstractCursor = exports.configureExplicitResourceManagement = exports.MongoWriteConcernError = exports.MongoUnexpectedServerResponseError = exports.MongoTransactionError = exports.MongoTopologyClosedError = exports.MongoTailableCursorError = exports.MongoSystemError = void 0;\nexports.MongoClientAuthProviders = exports.MongoCryptKMSRequestNetworkTimeoutError = exports.MongoCryptInvalidArgumentError = exports.MongoCryptError = exports.MongoCryptCreateEncryptedCollectionError = exports.MongoCryptCreateDataKeyError = exports.MongoCryptAzureKMSRequestError = exports.SrvPollingEvent = exports.WaitingForSuitableServerEvent = exports.ServerSelectionSucceededEvent = exports.ServerSelectionStartedEvent = exports.ServerSelectionFailedEvent = exports.ServerSelectionEvent = exports.TopologyOpeningEvent = exports.TopologyDescriptionChangedEvent = exports.TopologyClosedEvent = exports.ServerOpeningEvent = exports.ServerHeartbeatSucceededEvent = exports.ServerHeartbeatStartedEvent = exports.ServerHeartbeatFailedEvent = exports.ServerDescriptionChangedEvent = exports.ServerClosedEvent = exports.ConnectionReadyEvent = exports.ConnectionPoolReadyEvent = exports.ConnectionPoolMonitoringEvent = exports.ConnectionPoolCreatedEvent = exports.ConnectionPoolClosedEvent = exports.ConnectionPoolClearedEvent = exports.ConnectionCreatedEvent = void 0;\nconst admin_1 = __webpack_require__(/*! ./admin */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/admin.js\");\nObject.defineProperty(exports, \"Admin\", ({ enumerable: true, get: function () { return admin_1.Admin; } }));\nconst ordered_1 = __webpack_require__(/*! ./bulk/ordered */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bulk/ordered.js\");\nObject.defineProperty(exports, \"OrderedBulkOperation\", ({ enumerable: true, get: function () { return ordered_1.OrderedBulkOperation; } }));\nconst unordered_1 = __webpack_require__(/*! ./bulk/unordered */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bulk/unordered.js\");\nObject.defineProperty(exports, \"UnorderedBulkOperation\", ({ enumerable: true, get: function () { return unordered_1.UnorderedBulkOperation; } }));\nconst change_stream_1 = __webpack_require__(/*! ./change_stream */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/change_stream.js\");\nObject.defineProperty(exports, \"ChangeStream\", ({ enumerable: true, get: function () { return change_stream_1.ChangeStream; } }));\nconst collection_1 = __webpack_require__(/*! ./collection */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/collection.js\");\nObject.defineProperty(exports, \"Collection\", ({ enumerable: true, get: function () { return collection_1.Collection; } }));\nconst abstract_cursor_1 = __webpack_require__(/*! ./cursor/abstract_cursor */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/abstract_cursor.js\");\nObject.defineProperty(exports, \"AbstractCursor\", ({ enumerable: true, get: function () { return abstract_cursor_1.AbstractCursor; } }));\nconst aggregation_cursor_1 = __webpack_require__(/*! ./cursor/aggregation_cursor */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/aggregation_cursor.js\");\nObject.defineProperty(exports, \"AggregationCursor\", ({ enumerable: true, get: function () { return aggregation_cursor_1.AggregationCursor; } }));\nconst find_cursor_1 = __webpack_require__(/*! ./cursor/find_cursor */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/find_cursor.js\");\nObject.defineProperty(exports, \"FindCursor\", ({ enumerable: true, get: function () { return find_cursor_1.FindCursor; } }));\nconst list_collections_cursor_1 = __webpack_require__(/*! ./cursor/list_collections_cursor */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/list_collections_cursor.js\");\nObject.defineProperty(exports, \"ListCollectionsCursor\", ({ enumerable: true, get: function () { return list_collections_cursor_1.ListCollectionsCursor; } }));\nconst list_indexes_cursor_1 = __webpack_require__(/*! ./cursor/list_indexes_cursor */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/list_indexes_cursor.js\");\nObject.defineProperty(exports, \"ListIndexesCursor\", ({ enumerable: true, get: function () { return list_indexes_cursor_1.ListIndexesCursor; } }));\nconst db_1 = __webpack_require__(/*! ./db */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/db.js\");\nObject.defineProperty(exports, \"Db\", ({ enumerable: true, get: function () { return db_1.Db; } }));\nconst gridfs_1 = __webpack_require__(/*! ./gridfs */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/gridfs/index.js\");\nObject.defineProperty(exports, \"GridFSBucket\", ({ enumerable: true, get: function () { return gridfs_1.GridFSBucket; } }));\nconst download_1 = __webpack_require__(/*! ./gridfs/download */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/gridfs/download.js\");\nObject.defineProperty(exports, \"GridFSBucketReadStream\", ({ enumerable: true, get: function () { return download_1.GridFSBucketReadStream; } }));\nconst upload_1 = __webpack_require__(/*! ./gridfs/upload */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/gridfs/upload.js\");\nObject.defineProperty(exports, \"GridFSBucketWriteStream\", ({ enumerable: true, get: function () { return upload_1.GridFSBucketWriteStream; } }));\nconst mongo_client_1 = __webpack_require__(/*! ./mongo_client */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_client.js\");\nObject.defineProperty(exports, \"MongoClient\", ({ enumerable: true, get: function () { return mongo_client_1.MongoClient; } }));\nconst mongo_types_1 = __webpack_require__(/*! ./mongo_types */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_types.js\");\nObject.defineProperty(exports, \"CancellationToken\", ({ enumerable: true, get: function () { return mongo_types_1.CancellationToken; } }));\nconst sessions_1 = __webpack_require__(/*! ./sessions */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sessions.js\");\nObject.defineProperty(exports, \"ClientSession\", ({ enumerable: true, get: function () { return sessions_1.ClientSession; } }));\n/** @public */\nvar bson_1 = __webpack_require__(/*! ./bson */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\");\nObject.defineProperty(exports, \"BSON\", ({ enumerable: true, get: function () { return bson_1.BSON; } }));\nvar bson_2 = __webpack_require__(/*! ./bson */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\");\nObject.defineProperty(exports, \"Binary\", ({ enumerable: true, get: function () { return bson_2.Binary; } }));\nObject.defineProperty(exports, \"BSONRegExp\", ({ enumerable: true, get: function () { return bson_2.BSONRegExp; } }));\nObject.defineProperty(exports, \"BSONSymbol\", ({ enumerable: true, get: function () { return bson_2.BSONSymbol; } }));\nObject.defineProperty(exports, \"BSONType\", ({ enumerable: true, get: function () { return bson_2.BSONType; } }));\nObject.defineProperty(exports, \"Code\", ({ enumerable: true, get: function () { return bson_2.Code; } }));\nObject.defineProperty(exports, \"DBRef\", ({ enumerable: true, get: function () { return bson_2.DBRef; } }));\nObject.defineProperty(exports, \"Decimal128\", ({ enumerable: true, get: function () { return bson_2.Decimal128; } }));\nObject.defineProperty(exports, \"Double\", ({ enumerable: true, get: function () { return bson_2.Double; } }));\nObject.defineProperty(exports, \"Int32\", ({ enumerable: true, get: function () { return bson_2.Int32; } }));\nObject.defineProperty(exports, \"Long\", ({ enumerable: true, get: function () { return bson_2.Long; } }));\nObject.defineProperty(exports, \"MaxKey\", ({ enumerable: true, get: function () { return bson_2.MaxKey; } }));\nObject.defineProperty(exports, \"MinKey\", ({ enumerable: true, get: function () { return bson_2.MinKey; } }));\nObject.defineProperty(exports, \"ObjectId\", ({ enumerable: true, get: function () { return bson_2.ObjectId; } }));\nObject.defineProperty(exports, \"Timestamp\", ({ enumerable: true, get: function () { return bson_2.Timestamp; } }));\nObject.defineProperty(exports, \"UUID\", ({ enumerable: true, get: function () { return bson_2.UUID; } }));\nvar common_1 = __webpack_require__(/*! ./bulk/common */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bulk/common.js\");\nObject.defineProperty(exports, \"MongoBulkWriteError\", ({ enumerable: true, get: function () { return common_1.MongoBulkWriteError; } }));\nvar client_encryption_1 = __webpack_require__(/*! ./client-side-encryption/client_encryption */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/client_encryption.js\");\nObject.defineProperty(exports, \"ClientEncryption\", ({ enumerable: true, get: function () { return client_encryption_1.ClientEncryption; } }));\nvar change_stream_cursor_1 = __webpack_require__(/*! ./cursor/change_stream_cursor */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/change_stream_cursor.js\");\nObject.defineProperty(exports, \"ChangeStreamCursor\", ({ enumerable: true, get: function () { return change_stream_cursor_1.ChangeStreamCursor; } }));\nvar error_1 = __webpack_require__(/*! ./error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nObject.defineProperty(exports, \"MongoAPIError\", ({ enumerable: true, get: function () { return error_1.MongoAPIError; } }));\nObject.defineProperty(exports, \"MongoAWSError\", ({ enumerable: true, get: function () { return error_1.MongoAWSError; } }));\nObject.defineProperty(exports, \"MongoAzureError\", ({ enumerable: true, get: function () { return error_1.MongoAzureError; } }));\nObject.defineProperty(exports, \"MongoBatchReExecutionError\", ({ enumerable: true, get: function () { return error_1.MongoBatchReExecutionError; } }));\nObject.defineProperty(exports, \"MongoChangeStreamError\", ({ enumerable: true, get: function () { return error_1.MongoChangeStreamError; } }));\nObject.defineProperty(exports, \"MongoClientBulkWriteCursorError\", ({ enumerable: true, get: function () { return error_1.MongoClientBulkWriteCursorError; } }));\nObject.defineProperty(exports, \"MongoClientBulkWriteError\", ({ enumerable: true, get: function () { return error_1.MongoClientBulkWriteError; } }));\nObject.defineProperty(exports, \"MongoClientBulkWriteExecutionError\", ({ enumerable: true, get: function () { return error_1.MongoClientBulkWriteExecutionError; } }));\nObject.defineProperty(exports, \"MongoCompatibilityError\", ({ enumerable: true, get: function () { return error_1.MongoCompatibilityError; } }));\nObject.defineProperty(exports, \"MongoCursorExhaustedError\", ({ enumerable: true, get: function () { return error_1.MongoCursorExhaustedError; } }));\nObject.defineProperty(exports, \"MongoCursorInUseError\", ({ enumerable: true, get: function () { return error_1.MongoCursorInUseError; } }));\nObject.defineProperty(exports, \"MongoDecompressionError\", ({ enumerable: true, get: function () { return error_1.MongoDecompressionError; } }));\nObject.defineProperty(exports, \"MongoDriverError\", ({ enumerable: true, get: function () { return error_1.MongoDriverError; } }));\nObject.defineProperty(exports, \"MongoError\", ({ enumerable: true, get: function () { return error_1.MongoError; } }));\nObject.defineProperty(exports, \"MongoExpiredSessionError\", ({ enumerable: true, get: function () { return error_1.MongoExpiredSessionError; } }));\nObject.defineProperty(exports, \"MongoGCPError\", ({ enumerable: true, get: function () { return error_1.MongoGCPError; } }));\nObject.defineProperty(exports, \"MongoGridFSChunkError\", ({ enumerable: true, get: function () { return error_1.MongoGridFSChunkError; } }));\nObject.defineProperty(exports, \"MongoGridFSStreamError\", ({ enumerable: true, get: function () { return error_1.MongoGridFSStreamError; } }));\nObject.defineProperty(exports, \"MongoInvalidArgumentError\", ({ enumerable: true, get: function () { return error_1.MongoInvalidArgumentError; } }));\nObject.defineProperty(exports, \"MongoKerberosError\", ({ enumerable: true, get: function () { return error_1.MongoKerberosError; } }));\nObject.defineProperty(exports, \"MongoMissingCredentialsError\", ({ enumerable: true, get: function () { return error_1.MongoMissingCredentialsError; } }));\nObject.defineProperty(exports, \"MongoMissingDependencyError\", ({ enumerable: true, get: function () { return error_1.MongoMissingDependencyError; } }));\nObject.defineProperty(exports, \"MongoNetworkError\", ({ enumerable: true, get: function () { return error_1.MongoNetworkError; } }));\nObject.defineProperty(exports, \"MongoNetworkTimeoutError\", ({ enumerable: true, get: function () { return error_1.MongoNetworkTimeoutError; } }));\nObject.defineProperty(exports, \"MongoNotConnectedError\", ({ enumerable: true, get: function () { return error_1.MongoNotConnectedError; } }));\nObject.defineProperty(exports, \"MongoOIDCError\", ({ enumerable: true, get: function () { return error_1.MongoOIDCError; } }));\nObject.defineProperty(exports, \"MongoParseError\", ({ enumerable: true, get: function () { return error_1.MongoParseError; } }));\nObject.defineProperty(exports, \"MongoRuntimeError\", ({ enumerable: true, get: function () { return error_1.MongoRuntimeError; } }));\nObject.defineProperty(exports, \"MongoServerClosedError\", ({ enumerable: true, get: function () { return error_1.MongoServerClosedError; } }));\nObject.defineProperty(exports, \"MongoServerError\", ({ enumerable: true, get: function () { return error_1.MongoServerError; } }));\nObject.defineProperty(exports, \"MongoServerSelectionError\", ({ enumerable: true, get: function () { return error_1.MongoServerSelectionError; } }));\nObject.defineProperty(exports, \"MongoSystemError\", ({ enumerable: true, get: function () { return error_1.MongoSystemError; } }));\nObject.defineProperty(exports, \"MongoTailableCursorError\", ({ enumerable: true, get: function () { return error_1.MongoTailableCursorError; } }));\nObject.defineProperty(exports, \"MongoTopologyClosedError\", ({ enumerable: true, get: function () { return error_1.MongoTopologyClosedError; } }));\nObject.defineProperty(exports, \"MongoTransactionError\", ({ enumerable: true, get: function () { return error_1.MongoTransactionError; } }));\nObject.defineProperty(exports, \"MongoUnexpectedServerResponseError\", ({ enumerable: true, get: function () { return error_1.MongoUnexpectedServerResponseError; } }));\nObject.defineProperty(exports, \"MongoWriteConcernError\", ({ enumerable: true, get: function () { return error_1.MongoWriteConcernError; } }));\nvar resource_management_1 = __webpack_require__(/*! ./resource_management */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/resource_management.js\");\nObject.defineProperty(exports, \"configureExplicitResourceManagement\", ({ enumerable: true, get: function () { return resource_management_1.configureExplicitResourceManagement; } }));\n// enums\nvar common_2 = __webpack_require__(/*! ./bulk/common */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bulk/common.js\");\nObject.defineProperty(exports, \"BatchType\", ({ enumerable: true, get: function () { return common_2.BatchType; } }));\nvar auto_encrypter_1 = __webpack_require__(/*! ./client-side-encryption/auto_encrypter */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js\");\nObject.defineProperty(exports, \"AutoEncryptionLoggerLevel\", ({ enumerable: true, get: function () { return auto_encrypter_1.AutoEncryptionLoggerLevel; } }));\nvar gssapi_1 = __webpack_require__(/*! ./cmap/auth/gssapi */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/gssapi.js\");\nObject.defineProperty(exports, \"GSSAPICanonicalizationValue\", ({ enumerable: true, get: function () { return gssapi_1.GSSAPICanonicalizationValue; } }));\nvar providers_1 = __webpack_require__(/*! ./cmap/auth/providers */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/providers.js\");\nObject.defineProperty(exports, \"AuthMechanism\", ({ enumerable: true, get: function () { return providers_1.AuthMechanism; } }));\nvar compression_1 = __webpack_require__(/*! ./cmap/wire_protocol/compression */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/compression.js\");\nObject.defineProperty(exports, \"Compressor\", ({ enumerable: true, get: function () { return compression_1.Compressor; } }));\nvar abstract_cursor_2 = __webpack_require__(/*! ./cursor/abstract_cursor */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/abstract_cursor.js\");\nObject.defineProperty(exports, \"CURSOR_FLAGS\", ({ enumerable: true, get: function () { return abstract_cursor_2.CURSOR_FLAGS; } }));\nvar error_2 = __webpack_require__(/*! ./error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nObject.defineProperty(exports, \"MongoErrorLabel\", ({ enumerable: true, get: function () { return error_2.MongoErrorLabel; } }));\nvar explain_1 = __webpack_require__(/*! ./explain */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/explain.js\");\nObject.defineProperty(exports, \"ExplainVerbosity\", ({ enumerable: true, get: function () { return explain_1.ExplainVerbosity; } }));\nvar mongo_client_2 = __webpack_require__(/*! ./mongo_client */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_client.js\");\nObject.defineProperty(exports, \"ServerApiVersion\", ({ enumerable: true, get: function () { return mongo_client_2.ServerApiVersion; } }));\nvar find_and_modify_1 = __webpack_require__(/*! ./operations/find_and_modify */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/find_and_modify.js\");\nObject.defineProperty(exports, \"ReturnDocument\", ({ enumerable: true, get: function () { return find_and_modify_1.ReturnDocument; } }));\nvar set_profiling_level_1 = __webpack_require__(/*! ./operations/set_profiling_level */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/set_profiling_level.js\");\nObject.defineProperty(exports, \"ProfilingLevel\", ({ enumerable: true, get: function () { return set_profiling_level_1.ProfilingLevel; } }));\nvar read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_concern.js\");\nObject.defineProperty(exports, \"ReadConcernLevel\", ({ enumerable: true, get: function () { return read_concern_1.ReadConcernLevel; } }));\nvar read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_preference.js\");\nObject.defineProperty(exports, \"ReadPreferenceMode\", ({ enumerable: true, get: function () { return read_preference_1.ReadPreferenceMode; } }));\nvar common_3 = __webpack_require__(/*! ./sdam/common */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/common.js\");\nObject.defineProperty(exports, \"ServerType\", ({ enumerable: true, get: function () { return common_3.ServerType; } }));\nObject.defineProperty(exports, \"TopologyType\", ({ enumerable: true, get: function () { return common_3.TopologyType; } }));\n// Helper classes\nvar read_concern_2 = __webpack_require__(/*! ./read_concern */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_concern.js\");\nObject.defineProperty(exports, \"ReadConcern\", ({ enumerable: true, get: function () { return read_concern_2.ReadConcern; } }));\nvar read_preference_2 = __webpack_require__(/*! ./read_preference */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_preference.js\");\nObject.defineProperty(exports, \"ReadPreference\", ({ enumerable: true, get: function () { return read_preference_2.ReadPreference; } }));\nvar write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/write_concern.js\");\nObject.defineProperty(exports, \"WriteConcern\", ({ enumerable: true, get: function () { return write_concern_1.WriteConcern; } }));\n// events\nvar command_monitoring_events_1 = __webpack_require__(/*! ./cmap/command_monitoring_events */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/command_monitoring_events.js\");\nObject.defineProperty(exports, \"CommandFailedEvent\", ({ enumerable: true, get: function () { return command_monitoring_events_1.CommandFailedEvent; } }));\nObject.defineProperty(exports, \"CommandStartedEvent\", ({ enumerable: true, get: function () { return command_monitoring_events_1.CommandStartedEvent; } }));\nObject.defineProperty(exports, \"CommandSucceededEvent\", ({ enumerable: true, get: function () { return command_monitoring_events_1.CommandSucceededEvent; } }));\nvar connection_pool_events_1 = __webpack_require__(/*! ./cmap/connection_pool_events */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/connection_pool_events.js\");\nObject.defineProperty(exports, \"ConnectionCheckedInEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionCheckedInEvent; } }));\nObject.defineProperty(exports, \"ConnectionCheckedOutEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionCheckedOutEvent; } }));\nObject.defineProperty(exports, \"ConnectionCheckOutFailedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionCheckOutFailedEvent; } }));\nObject.defineProperty(exports, \"ConnectionCheckOutStartedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionCheckOutStartedEvent; } }));\nObject.defineProperty(exports, \"ConnectionClosedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionClosedEvent; } }));\nObject.defineProperty(exports, \"ConnectionCreatedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionCreatedEvent; } }));\nObject.defineProperty(exports, \"ConnectionPoolClearedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolClearedEvent; } }));\nObject.defineProperty(exports, \"ConnectionPoolClosedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolClosedEvent; } }));\nObject.defineProperty(exports, \"ConnectionPoolCreatedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolCreatedEvent; } }));\nObject.defineProperty(exports, \"ConnectionPoolMonitoringEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolMonitoringEvent; } }));\nObject.defineProperty(exports, \"ConnectionPoolReadyEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolReadyEvent; } }));\nObject.defineProperty(exports, \"ConnectionReadyEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionReadyEvent; } }));\nvar events_1 = __webpack_require__(/*! ./sdam/events */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/events.js\");\nObject.defineProperty(exports, \"ServerClosedEvent\", ({ enumerable: true, get: function () { return events_1.ServerClosedEvent; } }));\nObject.defineProperty(exports, \"ServerDescriptionChangedEvent\", ({ enumerable: true, get: function () { return events_1.ServerDescriptionChangedEvent; } }));\nObject.defineProperty(exports, \"ServerHeartbeatFailedEvent\", ({ enumerable: true, get: function () { return events_1.ServerHeartbeatFailedEvent; } }));\nObject.defineProperty(exports, \"ServerHeartbeatStartedEvent\", ({ enumerable: true, get: function () { return events_1.ServerHeartbeatStartedEvent; } }));\nObject.defineProperty(exports, \"ServerHeartbeatSucceededEvent\", ({ enumerable: true, get: function () { return events_1.ServerHeartbeatSucceededEvent; } }));\nObject.defineProperty(exports, \"ServerOpeningEvent\", ({ enumerable: true, get: function () { return events_1.ServerOpeningEvent; } }));\nObject.defineProperty(exports, \"TopologyClosedEvent\", ({ enumerable: true, get: function () { return events_1.TopologyClosedEvent; } }));\nObject.defineProperty(exports, \"TopologyDescriptionChangedEvent\", ({ enumerable: true, get: function () { return events_1.TopologyDescriptionChangedEvent; } }));\nObject.defineProperty(exports, \"TopologyOpeningEvent\", ({ enumerable: true, get: function () { return events_1.TopologyOpeningEvent; } }));\nvar server_selection_events_1 = __webpack_require__(/*! ./sdam/server_selection_events */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/server_selection_events.js\");\nObject.defineProperty(exports, \"ServerSelectionEvent\", ({ enumerable: true, get: function () { return server_selection_events_1.ServerSelectionEvent; } }));\nObject.defineProperty(exports, \"ServerSelectionFailedEvent\", ({ enumerable: true, get: function () { return server_selection_events_1.ServerSelectionFailedEvent; } }));\nObject.defineProperty(exports, \"ServerSelectionStartedEvent\", ({ enumerable: true, get: function () { return server_selection_events_1.ServerSelectionStartedEvent; } }));\nObject.defineProperty(exports, \"ServerSelectionSucceededEvent\", ({ enumerable: true, get: function () { return server_selection_events_1.ServerSelectionSucceededEvent; } }));\nObject.defineProperty(exports, \"WaitingForSuitableServerEvent\", ({ enumerable: true, get: function () { return server_selection_events_1.WaitingForSuitableServerEvent; } }));\nvar srv_polling_1 = __webpack_require__(/*! ./sdam/srv_polling */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/srv_polling.js\");\nObject.defineProperty(exports, \"SrvPollingEvent\", ({ enumerable: true, get: function () { return srv_polling_1.SrvPollingEvent; } }));\nvar errors_1 = __webpack_require__(/*! ./client-side-encryption/errors */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/client-side-encryption/errors.js\");\nObject.defineProperty(exports, \"MongoCryptAzureKMSRequestError\", ({ enumerable: true, get: function () { return errors_1.MongoCryptAzureKMSRequestError; } }));\nObject.defineProperty(exports, \"MongoCryptCreateDataKeyError\", ({ enumerable: true, get: function () { return errors_1.MongoCryptCreateDataKeyError; } }));\nObject.defineProperty(exports, \"MongoCryptCreateEncryptedCollectionError\", ({ enumerable: true, get: function () { return errors_1.MongoCryptCreateEncryptedCollectionError; } }));\nObject.defineProperty(exports, \"MongoCryptError\", ({ enumerable: true, get: function () { return errors_1.MongoCryptError; } }));\nObject.defineProperty(exports, \"MongoCryptInvalidArgumentError\", ({ enumerable: true, get: function () { return errors_1.MongoCryptInvalidArgumentError; } }));\nObject.defineProperty(exports, \"MongoCryptKMSRequestNetworkTimeoutError\", ({ enumerable: true, get: function () { return errors_1.MongoCryptKMSRequestNetworkTimeoutError; } }));\nvar mongo_client_auth_providers_1 = __webpack_require__(/*! ./mongo_client_auth_providers */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_client_auth_providers.js\");\nObject.defineProperty(exports, \"MongoClientAuthProviders\", ({ enumerable: true, get: function () { return mongo_client_auth_providers_1.MongoClientAuthProviders; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/index.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_client.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_client.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoClient = exports.ServerApiVersion = void 0;\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\");\nconst change_stream_1 = __webpack_require__(/*! ./change_stream */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/change_stream.js\");\nconst mongo_credentials_1 = __webpack_require__(/*! ./cmap/auth/mongo_credentials */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongo_credentials.js\");\nconst providers_1 = __webpack_require__(/*! ./cmap/auth/providers */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/providers.js\");\nconst connection_string_1 = __webpack_require__(/*! ./connection_string */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/connection_string.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/constants.js\");\nconst db_1 = __webpack_require__(/*! ./db */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/db.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst mongo_client_auth_providers_1 = __webpack_require__(/*! ./mongo_client_auth_providers */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_client_auth_providers.js\");\nconst mongo_logger_1 = __webpack_require__(/*! ./mongo_logger */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_logger.js\");\nconst mongo_types_1 = __webpack_require__(/*! ./mongo_types */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_types.js\");\nconst executor_1 = __webpack_require__(/*! ./operations/client_bulk_write/executor */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/client_bulk_write/executor.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/execute_operation.js\");\nconst run_command_1 = __webpack_require__(/*! ./operations/run_command */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/run_command.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_preference.js\");\nconst resource_management_1 = __webpack_require__(/*! ./resource_management */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/resource_management.js\");\nconst server_selection_1 = __webpack_require__(/*! ./sdam/server_selection */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/server_selection.js\");\nconst topology_1 = __webpack_require__(/*! ./sdam/topology */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/topology.js\");\nconst sessions_1 = __webpack_require__(/*! ./sessions */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sessions.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\n/** @public */\nexports.ServerApiVersion = Object.freeze({\n    v1: '1'\n});\n/** @internal */\nconst kOptions = Symbol('options');\n/**\n * The **MongoClient** class is a class that allows for making Connections to MongoDB.\n * @public\n *\n * @remarks\n * The programmatically provided options take precedence over the URI options.\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * // Enable command monitoring for debugging\n * const client = new MongoClient('mongodb://localhost:27017', { monitorCommands: true });\n *\n * client.on('commandStarted', started => console.log(started));\n * client.db().collection('pets');\n * await client.insertOne({ name: 'spot', kind: 'dog' });\n * ```\n */\nclass MongoClient extends mongo_types_1.TypedEventEmitter {\n    constructor(url, options) {\n        super();\n        this[kOptions] = (0, connection_string_1.parseOptions)(url, this, options);\n        const shouldSetLogger = Object.values(this[kOptions].mongoLoggerOptions.componentSeverities).some(value => value !== mongo_logger_1.SeverityLevel.OFF);\n        this.mongoLogger = shouldSetLogger\n            ? new mongo_logger_1.MongoLogger(this[kOptions].mongoLoggerOptions)\n            : undefined;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const client = this;\n        // The internal state\n        this.s = {\n            url,\n            bsonOptions: (0, bson_1.resolveBSONOptions)(this[kOptions]),\n            namespace: (0, utils_1.ns)('admin'),\n            hasBeenClosed: false,\n            sessionPool: new sessions_1.ServerSessionPool(this),\n            activeSessions: new Set(),\n            authProviders: new mongo_client_auth_providers_1.MongoClientAuthProviders(),\n            get options() {\n                return client[kOptions];\n            },\n            get readConcern() {\n                return client[kOptions].readConcern;\n            },\n            get writeConcern() {\n                return client[kOptions].writeConcern;\n            },\n            get readPreference() {\n                return client[kOptions].readPreference;\n            },\n            get isMongoClient() {\n                return true;\n            }\n        };\n        this.checkForNonGenuineHosts();\n    }\n    /** @internal */\n    async asyncDispose() {\n        await this.close();\n    }\n    /** @internal */\n    checkForNonGenuineHosts() {\n        const documentDBHostnames = this[kOptions].hosts.filter((hostAddress) => (0, utils_1.isHostMatch)(utils_1.DOCUMENT_DB_CHECK, hostAddress.host));\n        const srvHostIsDocumentDB = (0, utils_1.isHostMatch)(utils_1.DOCUMENT_DB_CHECK, this[kOptions].srvHost);\n        const cosmosDBHostnames = this[kOptions].hosts.filter((hostAddress) => (0, utils_1.isHostMatch)(utils_1.COSMOS_DB_CHECK, hostAddress.host));\n        const srvHostIsCosmosDB = (0, utils_1.isHostMatch)(utils_1.COSMOS_DB_CHECK, this[kOptions].srvHost);\n        if (documentDBHostnames.length !== 0 || srvHostIsDocumentDB) {\n            this.mongoLogger?.info('client', utils_1.DOCUMENT_DB_MSG);\n        }\n        else if (cosmosDBHostnames.length !== 0 || srvHostIsCosmosDB) {\n            this.mongoLogger?.info('client', utils_1.COSMOS_DB_MSG);\n        }\n    }\n    /** @see MongoOptions */\n    get options() {\n        return Object.freeze({ ...this[kOptions] });\n    }\n    get serverApi() {\n        return this[kOptions].serverApi && Object.freeze({ ...this[kOptions].serverApi });\n    }\n    /**\n     * Intended for APM use only\n     * @internal\n     */\n    get monitorCommands() {\n        return this[kOptions].monitorCommands;\n    }\n    set monitorCommands(value) {\n        this[kOptions].monitorCommands = value;\n    }\n    /** @internal */\n    get autoEncrypter() {\n        return this[kOptions].autoEncrypter;\n    }\n    get readConcern() {\n        return this.s.readConcern;\n    }\n    get writeConcern() {\n        return this.s.writeConcern;\n    }\n    get readPreference() {\n        return this.s.readPreference;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    /**\n     * Executes a client bulk write operation, available on server 8.0+.\n     * @param models - The client bulk write models.\n     * @param options - The client bulk write options.\n     * @returns A ClientBulkWriteResult for acknowledged writes and ok: 1 for unacknowledged writes.\n     */\n    async bulkWrite(models, options) {\n        if (this.autoEncrypter) {\n            throw new error_1.MongoInvalidArgumentError('MongoClient bulkWrite does not currently support automatic encryption.');\n        }\n        // We do not need schema type information past this point (\"as any\" is fine)\n        return await new executor_1.ClientBulkWriteExecutor(this, models, (0, utils_1.resolveOptions)(this, options)).execute();\n    }\n    /**\n     * Connect to MongoDB using a url\n     *\n     * @see docs.mongodb.org/manual/reference/connection-string/\n     */\n    async connect() {\n        if (this.connectionLock) {\n            return await this.connectionLock;\n        }\n        try {\n            this.connectionLock = this._connect();\n            await this.connectionLock;\n        }\n        finally {\n            // release\n            this.connectionLock = undefined;\n        }\n        return this;\n    }\n    /**\n     * Create a topology to open the connection, must be locked to avoid topology leaks in concurrency scenario.\n     * Locking is enforced by the connect method.\n     *\n     * @internal\n     */\n    async _connect() {\n        if (this.topology && this.topology.isConnected()) {\n            return this;\n        }\n        const options = this[kOptions];\n        if (options.tls) {\n            if (typeof options.tlsCAFile === 'string') {\n                options.ca ??= await fs_1.promises.readFile(options.tlsCAFile);\n            }\n            if (typeof options.tlsCRLFile === 'string') {\n                options.crl ??= await fs_1.promises.readFile(options.tlsCRLFile);\n            }\n            if (typeof options.tlsCertificateKeyFile === 'string') {\n                if (!options.key || !options.cert) {\n                    const contents = await fs_1.promises.readFile(options.tlsCertificateKeyFile);\n                    options.key ??= contents;\n                    options.cert ??= contents;\n                }\n            }\n        }\n        if (typeof options.srvHost === 'string') {\n            const hosts = await (0, connection_string_1.resolveSRVRecord)(options);\n            for (const [index, host] of hosts.entries()) {\n                options.hosts[index] = host;\n            }\n        }\n        // It is important to perform validation of hosts AFTER SRV resolution, to check the real hostname,\n        // but BEFORE we even attempt connecting with a potentially not allowed hostname\n        if (options.credentials?.mechanism === providers_1.AuthMechanism.MONGODB_OIDC) {\n            const allowedHosts = options.credentials?.mechanismProperties?.ALLOWED_HOSTS || mongo_credentials_1.DEFAULT_ALLOWED_HOSTS;\n            const isServiceAuth = !!options.credentials?.mechanismProperties?.ENVIRONMENT;\n            if (!isServiceAuth) {\n                for (const host of options.hosts) {\n                    if (!(0, utils_1.hostMatchesWildcards)(host.toHostPort().host, allowedHosts)) {\n                        throw new error_1.MongoInvalidArgumentError(`Host '${host}' is not valid for OIDC authentication with ALLOWED_HOSTS of '${allowedHosts.join(',')}'`);\n                    }\n                }\n            }\n        }\n        this.topology = new topology_1.Topology(this, options.hosts, options);\n        // Events can be emitted before initialization is complete so we have to\n        // save the reference to the topology on the client ASAP if the event handlers need to access it\n        this.topology.once(topology_1.Topology.OPEN, () => this.emit('open', this));\n        for (const event of constants_1.MONGO_CLIENT_EVENTS) {\n            this.topology.on(event, (...args) => this.emit(event, ...args));\n        }\n        const topologyConnect = async () => {\n            try {\n                await this.topology?.connect(options);\n            }\n            catch (error) {\n                this.topology?.close();\n                throw error;\n            }\n        };\n        if (this.autoEncrypter) {\n            await this.autoEncrypter?.init();\n            await topologyConnect();\n            await options.encrypter.connectInternalClient();\n        }\n        else {\n            await topologyConnect();\n        }\n        return this;\n    }\n    /**\n     * Cleans up client-side resources used by the MongoCLient and .  This includes:\n     *\n     * - Closes all open, unused connections (see note).\n     * - Ends all in-use sessions with {@link ClientSession#endSession|ClientSession.endSession()}.\n     * - Ends all unused sessions server-side.\n     * - Cleans up any resources being used for auto encryption if auto encryption is enabled.\n     *\n     * @remarks Any in-progress operations are not killed and any connections used by in progress operations\n     * will be cleaned up lazily as operations finish.\n     *\n     * @param force - Force close, emitting no events\n     */\n    async close(force = false) {\n        // There's no way to set hasBeenClosed back to false\n        Object.defineProperty(this.s, 'hasBeenClosed', {\n            value: true,\n            enumerable: true,\n            configurable: false,\n            writable: false\n        });\n        const activeSessionEnds = Array.from(this.s.activeSessions, session => session.endSession());\n        this.s.activeSessions.clear();\n        await Promise.all(activeSessionEnds);\n        if (this.topology == null) {\n            return;\n        }\n        // If we would attempt to select a server and get nothing back we short circuit\n        // to avoid the server selection timeout.\n        const selector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.primaryPreferred);\n        const topologyDescription = this.topology.description;\n        const serverDescriptions = Array.from(topologyDescription.servers.values());\n        const servers = selector(topologyDescription, serverDescriptions);\n        if (servers.length !== 0) {\n            const endSessions = Array.from(this.s.sessionPool.sessions, ({ id }) => id);\n            if (endSessions.length !== 0) {\n                try {\n                    await (0, execute_operation_1.executeOperation)(this, new run_command_1.RunAdminCommandOperation({ endSessions }, { readPreference: read_preference_1.ReadPreference.primaryPreferred, noResponse: true }));\n                }\n                catch (error) {\n                    (0, utils_1.squashError)(error);\n                }\n            }\n        }\n        // clear out references to old topology\n        const topology = this.topology;\n        this.topology = undefined;\n        topology.close();\n        const { encrypter } = this[kOptions];\n        if (encrypter) {\n            await encrypter.close(this, force);\n        }\n    }\n    /**\n     * Create a new Db instance sharing the current socket connections.\n     *\n     * @param dbName - The name of the database we want to use. If not provided, use database name from connection string.\n     * @param options - Optional settings for Db construction\n     */\n    db(dbName, options) {\n        options = options ?? {};\n        // Default to db from connection string if not provided\n        if (!dbName) {\n            dbName = this.options.dbName;\n        }\n        // Copy the options and add out internal override of the not shared flag\n        const finalOptions = Object.assign({}, this[kOptions], options);\n        // Return the db object\n        const db = new db_1.Db(this, dbName, finalOptions);\n        // Return the database\n        return db;\n    }\n    /**\n     * Connect to MongoDB using a url\n     *\n     * @remarks\n     * The programmatically provided options take precedence over the URI options.\n     *\n     * @see https://www.mongodb.com/docs/manual/reference/connection-string/\n     */\n    static async connect(url, options) {\n        const client = new this(url, options);\n        return await client.connect();\n    }\n    /**\n     * Creates a new ClientSession. When using the returned session in an operation\n     * a corresponding ServerSession will be created.\n     *\n     * @remarks\n     * A ClientSession instance may only be passed to operations being performed on the same\n     * MongoClient it was started from.\n     */\n    startSession(options) {\n        const session = new sessions_1.ClientSession(this, this.s.sessionPool, { explicit: true, ...options }, this[kOptions]);\n        this.s.activeSessions.add(session);\n        session.once('ended', () => {\n            this.s.activeSessions.delete(session);\n        });\n        return session;\n    }\n    async withSession(optionsOrExecutor, executor) {\n        const options = {\n            // Always define an owner\n            owner: Symbol(),\n            // If it's an object inherit the options\n            ...(typeof optionsOrExecutor === 'object' ? optionsOrExecutor : {})\n        };\n        const withSessionCallback = typeof optionsOrExecutor === 'function' ? optionsOrExecutor : executor;\n        if (withSessionCallback == null) {\n            throw new error_1.MongoInvalidArgumentError('Missing required callback parameter');\n        }\n        const session = this.startSession(options);\n        try {\n            return await withSessionCallback(session);\n        }\n        finally {\n            try {\n                await session.endSession();\n            }\n            catch (error) {\n                (0, utils_1.squashError)(error);\n            }\n        }\n    }\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates,\n     * replacements, deletions, and invalidations) in this cluster. Will ignore all\n     * changes to system collections, as well as the local, admin, and config databases.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to provide the schema that may be defined for all the data within the current cluster\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     *\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TSchema - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */\n    watch(pipeline = [], options = {}) {\n        // Allow optionally not specifying a pipeline\n        if (!Array.isArray(pipeline)) {\n            options = pipeline;\n            pipeline = [];\n        }\n        return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n}\nexports.MongoClient = MongoClient;\n(0, resource_management_1.configureResourceManagement)(MongoClient.prototype);\n//# sourceMappingURL=mongo_client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_client.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_client_auth_providers.js":
/*!****************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_client_auth_providers.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoClientAuthProviders = void 0;\nconst gssapi_1 = __webpack_require__(/*! ./cmap/auth/gssapi */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/gssapi.js\");\nconst mongodb_aws_1 = __webpack_require__(/*! ./cmap/auth/mongodb_aws */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_aws.js\");\nconst mongodb_oidc_1 = __webpack_require__(/*! ./cmap/auth/mongodb_oidc */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js\");\nconst automated_callback_workflow_1 = __webpack_require__(/*! ./cmap/auth/mongodb_oidc/automated_callback_workflow */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/automated_callback_workflow.js\");\nconst human_callback_workflow_1 = __webpack_require__(/*! ./cmap/auth/mongodb_oidc/human_callback_workflow */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/human_callback_workflow.js\");\nconst token_cache_1 = __webpack_require__(/*! ./cmap/auth/mongodb_oidc/token_cache */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_cache.js\");\nconst plain_1 = __webpack_require__(/*! ./cmap/auth/plain */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/plain.js\");\nconst providers_1 = __webpack_require__(/*! ./cmap/auth/providers */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/providers.js\");\nconst scram_1 = __webpack_require__(/*! ./cmap/auth/scram */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/scram.js\");\nconst x509_1 = __webpack_require__(/*! ./cmap/auth/x509 */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/auth/x509.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\n/** @internal */\nconst AUTH_PROVIDERS = new Map([\n    [providers_1.AuthMechanism.MONGODB_AWS, () => new mongodb_aws_1.MongoDBAWS()],\n    [\n        providers_1.AuthMechanism.MONGODB_CR,\n        () => {\n            throw new error_1.MongoInvalidArgumentError('MONGODB-CR is no longer a supported auth mechanism in MongoDB 4.0+');\n        }\n    ],\n    [providers_1.AuthMechanism.MONGODB_GSSAPI, () => new gssapi_1.GSSAPI()],\n    [providers_1.AuthMechanism.MONGODB_OIDC, (workflow) => new mongodb_oidc_1.MongoDBOIDC(workflow)],\n    [providers_1.AuthMechanism.MONGODB_PLAIN, () => new plain_1.Plain()],\n    [providers_1.AuthMechanism.MONGODB_SCRAM_SHA1, () => new scram_1.ScramSHA1()],\n    [providers_1.AuthMechanism.MONGODB_SCRAM_SHA256, () => new scram_1.ScramSHA256()],\n    [providers_1.AuthMechanism.MONGODB_X509, () => new x509_1.X509()]\n]);\n/**\n * Create a set of providers per client\n * to avoid sharing the provider's cache between different clients.\n * @internal\n */\nclass MongoClientAuthProviders {\n    constructor() {\n        this.existingProviders = new Map();\n    }\n    /**\n     * Get or create an authentication provider based on the provided mechanism.\n     * We don't want to create all providers at once, as some providers may not be used.\n     * @param name - The name of the provider to get or create.\n     * @param credentials - The credentials.\n     * @returns The provider.\n     * @throws MongoInvalidArgumentError if the mechanism is not supported.\n     * @internal\n     */\n    getOrCreateProvider(name, authMechanismProperties) {\n        const authProvider = this.existingProviders.get(name);\n        if (authProvider) {\n            return authProvider;\n        }\n        const providerFunction = AUTH_PROVIDERS.get(name);\n        if (!providerFunction) {\n            throw new error_1.MongoInvalidArgumentError(`authMechanism ${name} not supported`);\n        }\n        let provider;\n        if (name === providers_1.AuthMechanism.MONGODB_OIDC) {\n            provider = providerFunction(this.getWorkflow(authMechanismProperties));\n        }\n        else {\n            provider = providerFunction();\n        }\n        this.existingProviders.set(name, provider);\n        return provider;\n    }\n    /**\n     * Gets either a device workflow or callback workflow.\n     */\n    getWorkflow(authMechanismProperties) {\n        if (authMechanismProperties.OIDC_HUMAN_CALLBACK) {\n            return new human_callback_workflow_1.HumanCallbackWorkflow(new token_cache_1.TokenCache(), authMechanismProperties.OIDC_HUMAN_CALLBACK);\n        }\n        else if (authMechanismProperties.OIDC_CALLBACK) {\n            return new automated_callback_workflow_1.AutomatedCallbackWorkflow(new token_cache_1.TokenCache(), authMechanismProperties.OIDC_CALLBACK);\n        }\n        else {\n            const environment = authMechanismProperties.ENVIRONMENT;\n            const workflow = mongodb_oidc_1.OIDC_WORKFLOWS.get(environment)?.();\n            if (!workflow) {\n                throw new error_1.MongoInvalidArgumentError(`Could not load workflow for environment ${authMechanismProperties.ENVIRONMENT}`);\n            }\n            return workflow;\n        }\n    }\n}\nexports.MongoClientAuthProviders = MongoClientAuthProviders;\n//# sourceMappingURL=mongo_client_auth_providers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9tb25nb19jbGllbnRfYXV0aF9wcm92aWRlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0NBQWdDO0FBQ2hDLGlCQUFpQixtQkFBTyxDQUFDLG1IQUFvQjtBQUM3QyxzQkFBc0IsbUJBQU8sQ0FBQyw2SEFBeUI7QUFDdkQsdUJBQXVCLG1CQUFPLENBQUMsK0hBQTBCO0FBQ3pELHNDQUFzQyxtQkFBTyxDQUFDLHVMQUFzRDtBQUNwRyxrQ0FBa0MsbUJBQU8sQ0FBQywrS0FBa0Q7QUFDNUYsc0JBQXNCLG1CQUFPLENBQUMsdUpBQXNDO0FBQ3BFLGdCQUFnQixtQkFBTyxDQUFDLGlIQUFtQjtBQUMzQyxvQkFBb0IsbUJBQU8sQ0FBQyx5SEFBdUI7QUFDbkQsZ0JBQWdCLG1CQUFPLENBQUMsaUhBQW1CO0FBQzNDLGVBQWUsbUJBQU8sQ0FBQywrR0FBa0I7QUFDekMsZ0JBQWdCLG1CQUFPLENBQUMsNkZBQVM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RSxNQUFNO0FBQy9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUdBQXVHLG9DQUFvQztBQUMzSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9tb25nb19jbGllbnRfYXV0aF9wcm92aWRlcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1vbmdvQ2xpZW50QXV0aFByb3ZpZGVycyA9IHZvaWQgMDtcbmNvbnN0IGdzc2FwaV8xID0gcmVxdWlyZShcIi4vY21hcC9hdXRoL2dzc2FwaVwiKTtcbmNvbnN0IG1vbmdvZGJfYXdzXzEgPSByZXF1aXJlKFwiLi9jbWFwL2F1dGgvbW9uZ29kYl9hd3NcIik7XG5jb25zdCBtb25nb2RiX29pZGNfMSA9IHJlcXVpcmUoXCIuL2NtYXAvYXV0aC9tb25nb2RiX29pZGNcIik7XG5jb25zdCBhdXRvbWF0ZWRfY2FsbGJhY2tfd29ya2Zsb3dfMSA9IHJlcXVpcmUoXCIuL2NtYXAvYXV0aC9tb25nb2RiX29pZGMvYXV0b21hdGVkX2NhbGxiYWNrX3dvcmtmbG93XCIpO1xuY29uc3QgaHVtYW5fY2FsbGJhY2tfd29ya2Zsb3dfMSA9IHJlcXVpcmUoXCIuL2NtYXAvYXV0aC9tb25nb2RiX29pZGMvaHVtYW5fY2FsbGJhY2tfd29ya2Zsb3dcIik7XG5jb25zdCB0b2tlbl9jYWNoZV8xID0gcmVxdWlyZShcIi4vY21hcC9hdXRoL21vbmdvZGJfb2lkYy90b2tlbl9jYWNoZVwiKTtcbmNvbnN0IHBsYWluXzEgPSByZXF1aXJlKFwiLi9jbWFwL2F1dGgvcGxhaW5cIik7XG5jb25zdCBwcm92aWRlcnNfMSA9IHJlcXVpcmUoXCIuL2NtYXAvYXV0aC9wcm92aWRlcnNcIik7XG5jb25zdCBzY3JhbV8xID0gcmVxdWlyZShcIi4vY21hcC9hdXRoL3NjcmFtXCIpO1xuY29uc3QgeDUwOV8xID0gcmVxdWlyZShcIi4vY21hcC9hdXRoL3g1MDlcIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4vZXJyb3JcIik7XG4vKiogQGludGVybmFsICovXG5jb25zdCBBVVRIX1BST1ZJREVSUyA9IG5ldyBNYXAoW1xuICAgIFtwcm92aWRlcnNfMS5BdXRoTWVjaGFuaXNtLk1PTkdPREJfQVdTLCAoKSA9PiBuZXcgbW9uZ29kYl9hd3NfMS5Nb25nb0RCQVdTKCldLFxuICAgIFtcbiAgICAgICAgcHJvdmlkZXJzXzEuQXV0aE1lY2hhbmlzbS5NT05HT0RCX0NSLFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdNT05HT0RCLUNSIGlzIG5vIGxvbmdlciBhIHN1cHBvcnRlZCBhdXRoIG1lY2hhbmlzbSBpbiBNb25nb0RCIDQuMCsnKTtcbiAgICAgICAgfVxuICAgIF0sXG4gICAgW3Byb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9HU1NBUEksICgpID0+IG5ldyBnc3NhcGlfMS5HU1NBUEkoKV0sXG4gICAgW3Byb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9PSURDLCAod29ya2Zsb3cpID0+IG5ldyBtb25nb2RiX29pZGNfMS5Nb25nb0RCT0lEQyh3b3JrZmxvdyldLFxuICAgIFtwcm92aWRlcnNfMS5BdXRoTWVjaGFuaXNtLk1PTkdPREJfUExBSU4sICgpID0+IG5ldyBwbGFpbl8xLlBsYWluKCldLFxuICAgIFtwcm92aWRlcnNfMS5BdXRoTWVjaGFuaXNtLk1PTkdPREJfU0NSQU1fU0hBMSwgKCkgPT4gbmV3IHNjcmFtXzEuU2NyYW1TSEExKCldLFxuICAgIFtwcm92aWRlcnNfMS5BdXRoTWVjaGFuaXNtLk1PTkdPREJfU0NSQU1fU0hBMjU2LCAoKSA9PiBuZXcgc2NyYW1fMS5TY3JhbVNIQTI1NigpXSxcbiAgICBbcHJvdmlkZXJzXzEuQXV0aE1lY2hhbmlzbS5NT05HT0RCX1g1MDksICgpID0+IG5ldyB4NTA5XzEuWDUwOSgpXVxuXSk7XG4vKipcbiAqIENyZWF0ZSBhIHNldCBvZiBwcm92aWRlcnMgcGVyIGNsaWVudFxuICogdG8gYXZvaWQgc2hhcmluZyB0aGUgcHJvdmlkZXIncyBjYWNoZSBiZXR3ZWVuIGRpZmZlcmVudCBjbGllbnRzLlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIE1vbmdvQ2xpZW50QXV0aFByb3ZpZGVycyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZXhpc3RpbmdQcm92aWRlcnMgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBvciBjcmVhdGUgYW4gYXV0aGVudGljYXRpb24gcHJvdmlkZXIgYmFzZWQgb24gdGhlIHByb3ZpZGVkIG1lY2hhbmlzbS5cbiAgICAgKiBXZSBkb24ndCB3YW50IHRvIGNyZWF0ZSBhbGwgcHJvdmlkZXJzIGF0IG9uY2UsIGFzIHNvbWUgcHJvdmlkZXJzIG1heSBub3QgYmUgdXNlZC5cbiAgICAgKiBAcGFyYW0gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBwcm92aWRlciB0byBnZXQgb3IgY3JlYXRlLlxuICAgICAqIEBwYXJhbSBjcmVkZW50aWFscyAtIFRoZSBjcmVkZW50aWFscy5cbiAgICAgKiBAcmV0dXJucyBUaGUgcHJvdmlkZXIuXG4gICAgICogQHRocm93cyBNb25nb0ludmFsaWRBcmd1bWVudEVycm9yIGlmIHRoZSBtZWNoYW5pc20gaXMgbm90IHN1cHBvcnRlZC5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBnZXRPckNyZWF0ZVByb3ZpZGVyKG5hbWUsIGF1dGhNZWNoYW5pc21Qcm9wZXJ0aWVzKSB7XG4gICAgICAgIGNvbnN0IGF1dGhQcm92aWRlciA9IHRoaXMuZXhpc3RpbmdQcm92aWRlcnMuZ2V0KG5hbWUpO1xuICAgICAgICBpZiAoYXV0aFByb3ZpZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gYXV0aFByb3ZpZGVyO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyRnVuY3Rpb24gPSBBVVRIX1BST1ZJREVSUy5nZXQobmFtZSk7XG4gICAgICAgIGlmICghcHJvdmlkZXJGdW5jdGlvbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcihgYXV0aE1lY2hhbmlzbSAke25hbWV9IG5vdCBzdXBwb3J0ZWRgKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcHJvdmlkZXI7XG4gICAgICAgIGlmIChuYW1lID09PSBwcm92aWRlcnNfMS5BdXRoTWVjaGFuaXNtLk1PTkdPREJfT0lEQykge1xuICAgICAgICAgICAgcHJvdmlkZXIgPSBwcm92aWRlckZ1bmN0aW9uKHRoaXMuZ2V0V29ya2Zsb3coYXV0aE1lY2hhbmlzbVByb3BlcnRpZXMpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHByb3ZpZGVyID0gcHJvdmlkZXJGdW5jdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZXhpc3RpbmdQcm92aWRlcnMuc2V0KG5hbWUsIHByb3ZpZGVyKTtcbiAgICAgICAgcmV0dXJuIHByb3ZpZGVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGVpdGhlciBhIGRldmljZSB3b3JrZmxvdyBvciBjYWxsYmFjayB3b3JrZmxvdy5cbiAgICAgKi9cbiAgICBnZXRXb3JrZmxvdyhhdXRoTWVjaGFuaXNtUHJvcGVydGllcykge1xuICAgICAgICBpZiAoYXV0aE1lY2hhbmlzbVByb3BlcnRpZXMuT0lEQ19IVU1BTl9DQUxMQkFDSykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBodW1hbl9jYWxsYmFja193b3JrZmxvd18xLkh1bWFuQ2FsbGJhY2tXb3JrZmxvdyhuZXcgdG9rZW5fY2FjaGVfMS5Ub2tlbkNhY2hlKCksIGF1dGhNZWNoYW5pc21Qcm9wZXJ0aWVzLk9JRENfSFVNQU5fQ0FMTEJBQ0spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGF1dGhNZWNoYW5pc21Qcm9wZXJ0aWVzLk9JRENfQ0FMTEJBQ0spIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgYXV0b21hdGVkX2NhbGxiYWNrX3dvcmtmbG93XzEuQXV0b21hdGVkQ2FsbGJhY2tXb3JrZmxvdyhuZXcgdG9rZW5fY2FjaGVfMS5Ub2tlbkNhY2hlKCksIGF1dGhNZWNoYW5pc21Qcm9wZXJ0aWVzLk9JRENfQ0FMTEJBQ0spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZW52aXJvbm1lbnQgPSBhdXRoTWVjaGFuaXNtUHJvcGVydGllcy5FTlZJUk9OTUVOVDtcbiAgICAgICAgICAgIGNvbnN0IHdvcmtmbG93ID0gbW9uZ29kYl9vaWRjXzEuT0lEQ19XT1JLRkxPV1MuZ2V0KGVudmlyb25tZW50KT8uKCk7XG4gICAgICAgICAgICBpZiAoIXdvcmtmbG93KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcihgQ291bGQgbm90IGxvYWQgd29ya2Zsb3cgZm9yIGVudmlyb25tZW50ICR7YXV0aE1lY2hhbmlzbVByb3BlcnRpZXMuRU5WSVJPTk1FTlR9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gd29ya2Zsb3c7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLk1vbmdvQ2xpZW50QXV0aFByb3ZpZGVycyA9IE1vbmdvQ2xpZW50QXV0aFByb3ZpZGVycztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vbmdvX2NsaWVudF9hdXRoX3Byb3ZpZGVycy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_client_auth_providers.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_logger.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_logger.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoLogger = exports.MongoLoggableComponent = exports.SEVERITY_LEVEL_MAP = exports.DEFAULT_MAX_DOCUMENT_LENGTH = exports.SeverityLevel = void 0;\nexports.parseSeverityFromString = parseSeverityFromString;\nexports.createStdioLogger = createStdioLogger;\nexports.stringifyWithMaxLen = stringifyWithMaxLen;\nexports.defaultLogTransform = defaultLogTransform;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/constants.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\n/** @internal */\nexports.SeverityLevel = Object.freeze({\n    EMERGENCY: 'emergency',\n    ALERT: 'alert',\n    CRITICAL: 'critical',\n    ERROR: 'error',\n    WARNING: 'warn',\n    NOTICE: 'notice',\n    INFORMATIONAL: 'info',\n    DEBUG: 'debug',\n    TRACE: 'trace',\n    OFF: 'off'\n});\n/** @internal */\nexports.DEFAULT_MAX_DOCUMENT_LENGTH = 1000;\n/** @internal */\nclass SeverityLevelMap extends Map {\n    constructor(entries) {\n        const newEntries = [];\n        for (const [level, value] of entries) {\n            newEntries.push([value, level]);\n        }\n        newEntries.push(...entries);\n        super(newEntries);\n    }\n    getNumericSeverityLevel(severity) {\n        return this.get(severity);\n    }\n    getSeverityLevelName(level) {\n        return this.get(level);\n    }\n}\n/** @internal */\nexports.SEVERITY_LEVEL_MAP = new SeverityLevelMap([\n    [exports.SeverityLevel.OFF, -Infinity],\n    [exports.SeverityLevel.EMERGENCY, 0],\n    [exports.SeverityLevel.ALERT, 1],\n    [exports.SeverityLevel.CRITICAL, 2],\n    [exports.SeverityLevel.ERROR, 3],\n    [exports.SeverityLevel.WARNING, 4],\n    [exports.SeverityLevel.NOTICE, 5],\n    [exports.SeverityLevel.INFORMATIONAL, 6],\n    [exports.SeverityLevel.DEBUG, 7],\n    [exports.SeverityLevel.TRACE, 8]\n]);\n/** @internal */\nexports.MongoLoggableComponent = Object.freeze({\n    COMMAND: 'command',\n    TOPOLOGY: 'topology',\n    SERVER_SELECTION: 'serverSelection',\n    CONNECTION: 'connection',\n    CLIENT: 'client'\n});\n/**\n * Parses a string as one of SeverityLevel\n * @internal\n *\n * @param s - the value to be parsed\n * @returns one of SeverityLevel if value can be parsed as such, otherwise null\n */\nfunction parseSeverityFromString(s) {\n    const validSeverities = Object.values(exports.SeverityLevel);\n    const lowerSeverity = s?.toLowerCase();\n    if (lowerSeverity != null && validSeverities.includes(lowerSeverity)) {\n        return lowerSeverity;\n    }\n    return null;\n}\n/** @internal */\nfunction createStdioLogger(stream) {\n    return {\n        write: (0, util_1.promisify)((log, cb) => {\n            const logLine = (0, util_1.inspect)(log, { compact: true, breakLength: Infinity });\n            stream.write(`${logLine}\\n`, 'utf-8', cb);\n            return;\n        })\n    };\n}\n/**\n * resolves the MONGODB_LOG_PATH and mongodbLogPath options from the environment and the\n * mongo client options respectively. The mongodbLogPath can be either 'stdout', 'stderr', a NodeJS\n * Writable or an object which has a `write` method with the signature:\n * ```ts\n * write(log: Log): void\n * ```\n *\n * @returns the MongoDBLogWritable object to write logs to\n */\nfunction resolveLogPath({ MONGODB_LOG_PATH }, { mongodbLogPath }) {\n    if (typeof mongodbLogPath === 'string' && /^stderr$/i.test(mongodbLogPath)) {\n        return { mongodbLogPath: createStdioLogger(process.stderr), mongodbLogPathIsStdErr: true };\n    }\n    if (typeof mongodbLogPath === 'string' && /^stdout$/i.test(mongodbLogPath)) {\n        return { mongodbLogPath: createStdioLogger(process.stdout), mongodbLogPathIsStdErr: false };\n    }\n    if (typeof mongodbLogPath === 'object' && typeof mongodbLogPath?.write === 'function') {\n        return { mongodbLogPath: mongodbLogPath, mongodbLogPathIsStdErr: false };\n    }\n    if (MONGODB_LOG_PATH && /^stderr$/i.test(MONGODB_LOG_PATH)) {\n        return { mongodbLogPath: createStdioLogger(process.stderr), mongodbLogPathIsStdErr: true };\n    }\n    if (MONGODB_LOG_PATH && /^stdout$/i.test(MONGODB_LOG_PATH)) {\n        return { mongodbLogPath: createStdioLogger(process.stdout), mongodbLogPathIsStdErr: false };\n    }\n    return { mongodbLogPath: createStdioLogger(process.stderr), mongodbLogPathIsStdErr: true };\n}\nfunction resolveSeverityConfiguration(clientOption, environmentOption, defaultSeverity) {\n    return (parseSeverityFromString(clientOption) ??\n        parseSeverityFromString(environmentOption) ??\n        defaultSeverity);\n}\nfunction compareSeverity(s0, s1) {\n    const s0Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s0);\n    const s1Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s1);\n    return s0Num < s1Num ? -1 : s0Num > s1Num ? 1 : 0;\n}\n/** @internal */\nfunction stringifyWithMaxLen(value, maxDocumentLength, options = {}) {\n    let strToTruncate = '';\n    if (typeof value === 'string') {\n        strToTruncate = value;\n    }\n    else if (typeof value === 'function') {\n        strToTruncate = value.name;\n    }\n    else {\n        try {\n            strToTruncate = bson_1.EJSON.stringify(value, options);\n        }\n        catch (e) {\n            strToTruncate = `Extended JSON serialization failed with: ${e.message}`;\n        }\n    }\n    // handle truncation that occurs in the middle of multi-byte codepoints\n    if (maxDocumentLength !== 0 &&\n        strToTruncate.length > maxDocumentLength &&\n        strToTruncate.charCodeAt(maxDocumentLength - 1) !==\n            strToTruncate.codePointAt(maxDocumentLength - 1)) {\n        maxDocumentLength--;\n        if (maxDocumentLength === 0) {\n            return '';\n        }\n    }\n    return maxDocumentLength !== 0 && strToTruncate.length > maxDocumentLength\n        ? `${strToTruncate.slice(0, maxDocumentLength)}...`\n        : strToTruncate;\n}\nfunction isLogConvertible(obj) {\n    const objAsLogConvertible = obj;\n    // eslint-disable-next-line no-restricted-syntax\n    return objAsLogConvertible.toLog !== undefined && typeof objAsLogConvertible.toLog === 'function';\n}\nfunction attachServerSelectionFields(log, serverSelectionEvent, maxDocumentLength = exports.DEFAULT_MAX_DOCUMENT_LENGTH) {\n    const { selector, operation, topologyDescription, message } = serverSelectionEvent;\n    log.selector = stringifyWithMaxLen(selector, maxDocumentLength);\n    log.operation = operation;\n    log.topologyDescription = stringifyWithMaxLen(topologyDescription, maxDocumentLength);\n    log.message = message;\n    return log;\n}\nfunction attachCommandFields(log, commandEvent) {\n    log.commandName = commandEvent.commandName;\n    log.requestId = commandEvent.requestId;\n    log.driverConnectionId = commandEvent.connectionId;\n    const { host, port } = utils_1.HostAddress.fromString(commandEvent.address).toHostPort();\n    log.serverHost = host;\n    log.serverPort = port;\n    if (commandEvent?.serviceId) {\n        log.serviceId = commandEvent.serviceId.toHexString();\n    }\n    log.databaseName = commandEvent.databaseName;\n    log.serverConnectionId = commandEvent.serverConnectionId;\n    return log;\n}\nfunction attachConnectionFields(log, event) {\n    const { host, port } = utils_1.HostAddress.fromString(event.address).toHostPort();\n    log.serverHost = host;\n    log.serverPort = port;\n    return log;\n}\nfunction attachSDAMFields(log, sdamEvent) {\n    log.topologyId = sdamEvent.topologyId;\n    return log;\n}\nfunction attachServerHeartbeatFields(log, serverHeartbeatEvent) {\n    const { awaited, connectionId } = serverHeartbeatEvent;\n    log.awaited = awaited;\n    log.driverConnectionId = serverHeartbeatEvent.connectionId;\n    const { host, port } = utils_1.HostAddress.fromString(connectionId).toHostPort();\n    log.serverHost = host;\n    log.serverPort = port;\n    return log;\n}\n/** @internal */\nfunction defaultLogTransform(logObject, maxDocumentLength = exports.DEFAULT_MAX_DOCUMENT_LENGTH) {\n    let log = Object.create(null);\n    switch (logObject.name) {\n        case constants_1.SERVER_SELECTION_STARTED:\n            log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n            return log;\n        case constants_1.SERVER_SELECTION_FAILED:\n            log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n            log.failure = logObject.failure?.message;\n            return log;\n        case constants_1.SERVER_SELECTION_SUCCEEDED:\n            log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n            log.serverHost = logObject.serverHost;\n            log.serverPort = logObject.serverPort;\n            return log;\n        case constants_1.WAITING_FOR_SUITABLE_SERVER:\n            log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n            log.remainingTimeMS = logObject.remainingTimeMS;\n            return log;\n        case constants_1.COMMAND_STARTED:\n            log = attachCommandFields(log, logObject);\n            log.message = 'Command started';\n            log.command = stringifyWithMaxLen(logObject.command, maxDocumentLength, { relaxed: true });\n            log.databaseName = logObject.databaseName;\n            return log;\n        case constants_1.COMMAND_SUCCEEDED:\n            log = attachCommandFields(log, logObject);\n            log.message = 'Command succeeded';\n            log.durationMS = logObject.duration;\n            log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength, { relaxed: true });\n            return log;\n        case constants_1.COMMAND_FAILED:\n            log = attachCommandFields(log, logObject);\n            log.message = 'Command failed';\n            log.durationMS = logObject.duration;\n            log.failure = logObject.failure?.message ?? '(redacted)';\n            return log;\n        case constants_1.CONNECTION_POOL_CREATED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection pool created';\n            if (logObject.options) {\n                const { maxIdleTimeMS, minPoolSize, maxPoolSize, maxConnecting, waitQueueTimeoutMS } = logObject.options;\n                log = {\n                    ...log,\n                    maxIdleTimeMS,\n                    minPoolSize,\n                    maxPoolSize,\n                    maxConnecting,\n                    waitQueueTimeoutMS\n                };\n            }\n            return log;\n        case constants_1.CONNECTION_POOL_READY:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection pool ready';\n            return log;\n        case constants_1.CONNECTION_POOL_CLEARED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection pool cleared';\n            if (logObject.serviceId?._bsontype === 'ObjectId') {\n                log.serviceId = logObject.serviceId?.toHexString();\n            }\n            return log;\n        case constants_1.CONNECTION_POOL_CLOSED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection pool closed';\n            return log;\n        case constants_1.CONNECTION_CREATED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection created';\n            log.driverConnectionId = logObject.connectionId;\n            return log;\n        case constants_1.CONNECTION_READY:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection ready';\n            log.driverConnectionId = logObject.connectionId;\n            log.durationMS = logObject.durationMS;\n            return log;\n        case constants_1.CONNECTION_CLOSED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection closed';\n            log.driverConnectionId = logObject.connectionId;\n            switch (logObject.reason) {\n                case 'stale':\n                    log.reason = 'Connection became stale because the pool was cleared';\n                    break;\n                case 'idle':\n                    log.reason =\n                        'Connection has been available but unused for longer than the configured max idle time';\n                    break;\n                case 'error':\n                    log.reason = 'An error occurred while using the connection';\n                    if (logObject.error) {\n                        log.error = logObject.error;\n                    }\n                    break;\n                case 'poolClosed':\n                    log.reason = 'Connection pool was closed';\n                    break;\n                default:\n                    log.reason = `Unknown close reason: ${logObject.reason}`;\n            }\n            return log;\n        case constants_1.CONNECTION_CHECK_OUT_STARTED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection checkout started';\n            return log;\n        case constants_1.CONNECTION_CHECK_OUT_FAILED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection checkout failed';\n            switch (logObject.reason) {\n                case 'poolClosed':\n                    log.reason = 'Connection pool was closed';\n                    break;\n                case 'timeout':\n                    log.reason = 'Wait queue timeout elapsed without a connection becoming available';\n                    break;\n                case 'connectionError':\n                    log.reason = 'An error occurred while trying to establish a new connection';\n                    if (logObject.error) {\n                        log.error = logObject.error;\n                    }\n                    break;\n                default:\n                    log.reason = `Unknown close reason: ${logObject.reason}`;\n            }\n            log.durationMS = logObject.durationMS;\n            return log;\n        case constants_1.CONNECTION_CHECKED_OUT:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection checked out';\n            log.driverConnectionId = logObject.connectionId;\n            log.durationMS = logObject.durationMS;\n            return log;\n        case constants_1.CONNECTION_CHECKED_IN:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection checked in';\n            log.driverConnectionId = logObject.connectionId;\n            return log;\n        case constants_1.SERVER_OPENING:\n            log = attachSDAMFields(log, logObject);\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Starting server monitoring';\n            return log;\n        case constants_1.SERVER_CLOSED:\n            log = attachSDAMFields(log, logObject);\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Stopped server monitoring';\n            return log;\n        case constants_1.SERVER_HEARTBEAT_STARTED:\n            log = attachSDAMFields(log, logObject);\n            log = attachServerHeartbeatFields(log, logObject);\n            log.message = 'Server heartbeat started';\n            return log;\n        case constants_1.SERVER_HEARTBEAT_SUCCEEDED:\n            log = attachSDAMFields(log, logObject);\n            log = attachServerHeartbeatFields(log, logObject);\n            log.message = 'Server heartbeat succeeded';\n            log.durationMS = logObject.duration;\n            log.serverConnectionId = logObject.serverConnectionId;\n            log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength, { relaxed: true });\n            return log;\n        case constants_1.SERVER_HEARTBEAT_FAILED:\n            log = attachSDAMFields(log, logObject);\n            log = attachServerHeartbeatFields(log, logObject);\n            log.message = 'Server heartbeat failed';\n            log.durationMS = logObject.duration;\n            log.failure = logObject.failure?.message;\n            return log;\n        case constants_1.TOPOLOGY_OPENING:\n            log = attachSDAMFields(log, logObject);\n            log.message = 'Starting topology monitoring';\n            return log;\n        case constants_1.TOPOLOGY_CLOSED:\n            log = attachSDAMFields(log, logObject);\n            log.message = 'Stopped topology monitoring';\n            return log;\n        case constants_1.TOPOLOGY_DESCRIPTION_CHANGED:\n            log = attachSDAMFields(log, logObject);\n            log.message = 'Topology description changed';\n            log.previousDescription = log.reply = stringifyWithMaxLen(logObject.previousDescription, maxDocumentLength);\n            log.newDescription = log.reply = stringifyWithMaxLen(logObject.newDescription, maxDocumentLength);\n            return log;\n        default:\n            for (const [key, value] of Object.entries(logObject)) {\n                if (value != null)\n                    log[key] = value;\n            }\n    }\n    return log;\n}\n/** @internal */\nclass MongoLogger {\n    constructor(options) {\n        this.pendingLog = null;\n        /**\n         * This method should be used when logging errors that do not have a public driver API for\n         * reporting errors.\n         */\n        this.error = this.log.bind(this, 'error');\n        /**\n         * This method should be used to log situations where undesirable application behaviour might\n         * occur. For example, failing to end sessions on `MongoClient.close`.\n         */\n        this.warn = this.log.bind(this, 'warn');\n        /**\n         * This method should be used to report high-level information about normal driver behaviour.\n         * For example, the creation of a `MongoClient`.\n         */\n        this.info = this.log.bind(this, 'info');\n        /**\n         * This method should be used to report information that would be helpful when debugging an\n         * application. For example, a command starting, succeeding or failing.\n         */\n        this.debug = this.log.bind(this, 'debug');\n        /**\n         * This method should be used to report fine-grained details related to logic flow. For example,\n         * entering and exiting a function body.\n         */\n        this.trace = this.log.bind(this, 'trace');\n        this.componentSeverities = options.componentSeverities;\n        this.maxDocumentLength = options.maxDocumentLength;\n        this.logDestination = options.logDestination;\n        this.logDestinationIsStdErr = options.logDestinationIsStdErr;\n        this.severities = this.createLoggingSeverities();\n    }\n    createLoggingSeverities() {\n        const severities = Object();\n        for (const component of Object.values(exports.MongoLoggableComponent)) {\n            severities[component] = {};\n            for (const severityLevel of Object.values(exports.SeverityLevel)) {\n                severities[component][severityLevel] =\n                    compareSeverity(severityLevel, this.componentSeverities[component]) <= 0;\n            }\n        }\n        return severities;\n    }\n    turnOffSeverities() {\n        for (const component of Object.values(exports.MongoLoggableComponent)) {\n            this.componentSeverities[component] = exports.SeverityLevel.OFF;\n            for (const severityLevel of Object.values(exports.SeverityLevel)) {\n                this.severities[component][severityLevel] = false;\n            }\n        }\n    }\n    logWriteFailureHandler(error) {\n        if (this.logDestinationIsStdErr) {\n            this.turnOffSeverities();\n            this.clearPendingLog();\n            return;\n        }\n        this.logDestination = createStdioLogger(process.stderr);\n        this.logDestinationIsStdErr = true;\n        this.clearPendingLog();\n        this.error(exports.MongoLoggableComponent.CLIENT, {\n            toLog: function () {\n                return {\n                    message: 'User input for mongodbLogPath is now invalid. Logging is halted.',\n                    error: error.message\n                };\n            }\n        });\n        this.turnOffSeverities();\n        this.clearPendingLog();\n    }\n    clearPendingLog() {\n        this.pendingLog = null;\n    }\n    willLog(component, severity) {\n        if (severity === exports.SeverityLevel.OFF)\n            return false;\n        return this.severities[component][severity];\n    }\n    log(severity, component, message) {\n        if (!this.willLog(component, severity))\n            return;\n        let logMessage = { t: new Date(), c: component, s: severity };\n        if (typeof message === 'string') {\n            logMessage.message = message;\n        }\n        else if (typeof message === 'object') {\n            if (isLogConvertible(message)) {\n                logMessage = { ...logMessage, ...message.toLog() };\n            }\n            else {\n                logMessage = { ...logMessage, ...defaultLogTransform(message, this.maxDocumentLength) };\n            }\n        }\n        if ((0, utils_1.isPromiseLike)(this.pendingLog)) {\n            this.pendingLog = this.pendingLog\n                .then(() => this.logDestination.write(logMessage))\n                .then(this.clearPendingLog.bind(this), this.logWriteFailureHandler.bind(this));\n            return;\n        }\n        try {\n            const logResult = this.logDestination.write(logMessage);\n            if ((0, utils_1.isPromiseLike)(logResult)) {\n                this.pendingLog = logResult.then(this.clearPendingLog.bind(this), this.logWriteFailureHandler.bind(this));\n            }\n        }\n        catch (error) {\n            this.logWriteFailureHandler(error);\n        }\n    }\n    /**\n     * Merges options set through environment variables and the MongoClient, preferring environment\n     * variables when both are set, and substituting defaults for values not set. Options set in\n     * constructor take precedence over both environment variables and MongoClient options.\n     *\n     * @remarks\n     * When parsing component severity levels, invalid values are treated as unset and replaced with\n     * the default severity.\n     *\n     * @param envOptions - options set for the logger from the environment\n     * @param clientOptions - options set for the logger in the MongoClient options\n     * @returns a MongoLoggerOptions object to be used when instantiating a new MongoLogger\n     */\n    static resolveOptions(envOptions, clientOptions) {\n        // client options take precedence over env options\n        const resolvedLogPath = resolveLogPath(envOptions, clientOptions);\n        const combinedOptions = {\n            ...envOptions,\n            ...clientOptions,\n            mongodbLogPath: resolvedLogPath.mongodbLogPath,\n            mongodbLogPathIsStdErr: resolvedLogPath.mongodbLogPathIsStdErr\n        };\n        const defaultSeverity = resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.default, combinedOptions.MONGODB_LOG_ALL, exports.SeverityLevel.OFF);\n        return {\n            componentSeverities: {\n                command: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.command, combinedOptions.MONGODB_LOG_COMMAND, defaultSeverity),\n                topology: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.topology, combinedOptions.MONGODB_LOG_TOPOLOGY, defaultSeverity),\n                serverSelection: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.serverSelection, combinedOptions.MONGODB_LOG_SERVER_SELECTION, defaultSeverity),\n                connection: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.connection, combinedOptions.MONGODB_LOG_CONNECTION, defaultSeverity),\n                client: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.client, combinedOptions.MONGODB_LOG_CLIENT, defaultSeverity),\n                default: defaultSeverity\n            },\n            maxDocumentLength: combinedOptions.mongodbLogMaxDocumentLength ??\n                (0, utils_1.parseUnsignedInteger)(combinedOptions.MONGODB_LOG_MAX_DOCUMENT_LENGTH) ??\n                1000,\n            logDestination: combinedOptions.mongodbLogPath,\n            logDestinationIsStdErr: combinedOptions.mongodbLogPathIsStdErr\n        };\n    }\n}\nexports.MongoLogger = MongoLogger;\n//# sourceMappingURL=mongo_logger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_logger.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_types.js":
/*!************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_types.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CancellationToken = exports.TypedEventEmitter = void 0;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst mongo_logger_1 = __webpack_require__(/*! ./mongo_logger */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_logger.js\");\n/**\n * Typescript type safe event emitter\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nclass TypedEventEmitter extends events_1.EventEmitter {\n    /** @internal */\n    emitAndLog(event, ...args) {\n        this.emit(event, ...args);\n        if (this.component)\n            this.mongoLogger?.debug(this.component, args[0]);\n    }\n    /** @internal */\n    emitAndLogHeartbeat(event, topologyId, serverConnectionId, ...args) {\n        this.emit(event, ...args);\n        if (this.component) {\n            const loggableHeartbeatEvent = {\n                topologyId: topologyId,\n                serverConnectionId: serverConnectionId ?? null,\n                ...args[0]\n            };\n            this.mongoLogger?.debug(this.component, loggableHeartbeatEvent);\n        }\n    }\n    /** @internal */\n    emitAndLogCommand(monitorCommands, event, databaseName, connectionEstablished, ...args) {\n        if (monitorCommands) {\n            this.emit(event, ...args);\n        }\n        if (connectionEstablished) {\n            const loggableCommandEvent = {\n                databaseName: databaseName,\n                ...args[0]\n            };\n            this.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.COMMAND, loggableCommandEvent);\n        }\n    }\n}\nexports.TypedEventEmitter = TypedEventEmitter;\n/** @public */\nclass CancellationToken extends TypedEventEmitter {\n}\nexports.CancellationToken = CancellationToken;\n//# sourceMappingURL=mongo_types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9tb25nb190eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUIsR0FBRyx5QkFBeUI7QUFDckQsaUJBQWlCLG1CQUFPLENBQUMsc0JBQVE7QUFDakMsdUJBQXVCLG1CQUFPLENBQUMsMkdBQWdCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9tb25nb190eXBlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ2FuY2VsbGF0aW9uVG9rZW4gPSBleHBvcnRzLlR5cGVkRXZlbnRFbWl0dGVyID0gdm9pZCAwO1xuY29uc3QgZXZlbnRzXzEgPSByZXF1aXJlKFwiZXZlbnRzXCIpO1xuY29uc3QgbW9uZ29fbG9nZ2VyXzEgPSByZXF1aXJlKFwiLi9tb25nb19sb2dnZXJcIik7XG4vKipcbiAqIFR5cGVzY3JpcHQgdHlwZSBzYWZlIGV2ZW50IGVtaXR0ZXJcbiAqIEBwdWJsaWNcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtZGVjbGFyYXRpb24tbWVyZ2luZ1xuY2xhc3MgVHlwZWRFdmVudEVtaXR0ZXIgZXh0ZW5kcyBldmVudHNfMS5FdmVudEVtaXR0ZXIge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBlbWl0QW5kTG9nKGV2ZW50LCAuLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuZW1pdChldmVudCwgLi4uYXJncyk7XG4gICAgICAgIGlmICh0aGlzLmNvbXBvbmVudClcbiAgICAgICAgICAgIHRoaXMubW9uZ29Mb2dnZXI/LmRlYnVnKHRoaXMuY29tcG9uZW50LCBhcmdzWzBdKTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGVtaXRBbmRMb2dIZWFydGJlYXQoZXZlbnQsIHRvcG9sb2d5SWQsIHNlcnZlckNvbm5lY3Rpb25JZCwgLi4uYXJncykge1xuICAgICAgICB0aGlzLmVtaXQoZXZlbnQsIC4uLmFyZ3MpO1xuICAgICAgICBpZiAodGhpcy5jb21wb25lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGxvZ2dhYmxlSGVhcnRiZWF0RXZlbnQgPSB7XG4gICAgICAgICAgICAgICAgdG9wb2xvZ3lJZDogdG9wb2xvZ3lJZCxcbiAgICAgICAgICAgICAgICBzZXJ2ZXJDb25uZWN0aW9uSWQ6IHNlcnZlckNvbm5lY3Rpb25JZCA/PyBudWxsLFxuICAgICAgICAgICAgICAgIC4uLmFyZ3NbMF1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLm1vbmdvTG9nZ2VyPy5kZWJ1Zyh0aGlzLmNvbXBvbmVudCwgbG9nZ2FibGVIZWFydGJlYXRFdmVudCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGVtaXRBbmRMb2dDb21tYW5kKG1vbml0b3JDb21tYW5kcywgZXZlbnQsIGRhdGFiYXNlTmFtZSwgY29ubmVjdGlvbkVzdGFibGlzaGVkLCAuLi5hcmdzKSB7XG4gICAgICAgIGlmIChtb25pdG9yQ29tbWFuZHMpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdChldmVudCwgLi4uYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbm5lY3Rpb25Fc3RhYmxpc2hlZCkge1xuICAgICAgICAgICAgY29uc3QgbG9nZ2FibGVDb21tYW5kRXZlbnQgPSB7XG4gICAgICAgICAgICAgICAgZGF0YWJhc2VOYW1lOiBkYXRhYmFzZU5hbWUsXG4gICAgICAgICAgICAgICAgLi4uYXJnc1swXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMubW9uZ29Mb2dnZXI/LmRlYnVnKG1vbmdvX2xvZ2dlcl8xLk1vbmdvTG9nZ2FibGVDb21wb25lbnQuQ09NTUFORCwgbG9nZ2FibGVDb21tYW5kRXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5UeXBlZEV2ZW50RW1pdHRlciA9IFR5cGVkRXZlbnRFbWl0dGVyO1xuLyoqIEBwdWJsaWMgKi9cbmNsYXNzIENhbmNlbGxhdGlvblRva2VuIGV4dGVuZHMgVHlwZWRFdmVudEVtaXR0ZXIge1xufVxuZXhwb3J0cy5DYW5jZWxsYXRpb25Ub2tlbiA9IENhbmNlbGxhdGlvblRva2VuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9uZ29fdHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_types.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/aggregate.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/aggregate.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AggregateOperation = exports.DB_AGGREGATE_COLLECTION = void 0;\nconst responses_1 = __webpack_require__(/*! ../cmap/wire_protocol/responses */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/responses.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/write_concern.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\n// eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\nexports.DB_AGGREGATE_COLLECTION = 1;\nconst MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT = 8;\n/** @internal */\nclass AggregateOperation extends command_1.CommandOperation {\n    constructor(ns, pipeline, options) {\n        super(undefined, { ...options, dbName: ns.db });\n        this.options = { ...options };\n        // Covers when ns.collection is null, undefined or the empty string, use DB_AGGREGATE_COLLECTION\n        this.target = ns.collection || exports.DB_AGGREGATE_COLLECTION;\n        this.pipeline = pipeline;\n        // determine if we have a write stage, override read preference if so\n        this.hasWriteStage = false;\n        if (typeof options?.out === 'string') {\n            this.pipeline = this.pipeline.concat({ $out: options.out });\n            this.hasWriteStage = true;\n        }\n        else if (pipeline.length > 0) {\n            const finalStage = pipeline[pipeline.length - 1];\n            if (finalStage.$out || finalStage.$merge) {\n                this.hasWriteStage = true;\n            }\n        }\n        if (this.hasWriteStage) {\n            this.trySecondaryWrite = true;\n        }\n        else {\n            delete this.options.writeConcern;\n        }\n        if (this.explain && this.writeConcern) {\n            throw new error_1.MongoInvalidArgumentError('Option \"explain\" cannot be used on an aggregate call with writeConcern');\n        }\n        if (options?.cursor != null && typeof options.cursor !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Cursor options must be an object');\n        }\n    }\n    get commandName() {\n        return 'aggregate';\n    }\n    get canRetryRead() {\n        return !this.hasWriteStage;\n    }\n    addToPipeline(stage) {\n        this.pipeline.push(stage);\n    }\n    async execute(server, session) {\n        const options = this.options;\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const command = { aggregate: this.target, pipeline: this.pipeline };\n        if (this.hasWriteStage && serverWireVersion < MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT) {\n            this.readConcern = undefined;\n        }\n        if (this.hasWriteStage && this.writeConcern) {\n            write_concern_1.WriteConcern.apply(command, this.writeConcern);\n        }\n        if (options.bypassDocumentValidation === true) {\n            command.bypassDocumentValidation = options.bypassDocumentValidation;\n        }\n        if (typeof options.allowDiskUse === 'boolean') {\n            command.allowDiskUse = options.allowDiskUse;\n        }\n        if (options.hint) {\n            command.hint = options.hint;\n        }\n        if (options.let) {\n            command.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        command.cursor = options.cursor || {};\n        if (options.batchSize && !this.hasWriteStage) {\n            command.cursor.batchSize = options.batchSize;\n        }\n        return await super.executeCommand(server, session, command, this.explain ? responses_1.ExplainedCursorResponse : responses_1.CursorResponse);\n    }\n}\nexports.AggregateOperation = AggregateOperation;\n(0, operation_1.defineAspects)(AggregateOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n//# sourceMappingURL=aggregate.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2FnZ3JlZ2F0ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEIsR0FBRywrQkFBK0I7QUFDNUQsb0JBQW9CLG1CQUFPLENBQUMsNElBQWlDO0FBQzdELGdCQUFnQixtQkFBTyxDQUFDLDhGQUFVO0FBQ2xDLGdCQUFnQixtQkFBTyxDQUFDLDhGQUFVO0FBQ2xDLHdCQUF3QixtQkFBTyxDQUFDLDhHQUFrQjtBQUNsRCxrQkFBa0IsbUJBQU8sQ0FBQyw0R0FBVztBQUNyQyxvQkFBb0IsbUJBQU8sQ0FBQyxnSEFBYTtBQUN6QztBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDJCQUEyQjtBQUN0RCx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELG1CQUFtQjtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2FnZ3JlZ2F0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQWdncmVnYXRlT3BlcmF0aW9uID0gZXhwb3J0cy5EQl9BR0dSRUdBVEVfQ09MTEVDVElPTiA9IHZvaWQgMDtcbmNvbnN0IHJlc3BvbnNlc18xID0gcmVxdWlyZShcIi4uL2NtYXAvd2lyZV9wcm90b2NvbC9yZXNwb25zZXNcIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IHdyaXRlX2NvbmNlcm5fMSA9IHJlcXVpcmUoXCIuLi93cml0ZV9jb25jZXJuXCIpO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bm5lY2Vzc2FyeS10eXBlLWFzc2VydGlvblxuZXhwb3J0cy5EQl9BR0dSRUdBVEVfQ09MTEVDVElPTiA9IDE7XG5jb25zdCBNSU5fV0lSRV9WRVJTSU9OXyRPVVRfUkVBRF9DT05DRVJOX1NVUFBPUlQgPSA4O1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgQWdncmVnYXRlT3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG5zLCBwaXBlbGluZSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcih1bmRlZmluZWQsIHsgLi4ub3B0aW9ucywgZGJOYW1lOiBucy5kYiB9KTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0geyAuLi5vcHRpb25zIH07XG4gICAgICAgIC8vIENvdmVycyB3aGVuIG5zLmNvbGxlY3Rpb24gaXMgbnVsbCwgdW5kZWZpbmVkIG9yIHRoZSBlbXB0eSBzdHJpbmcsIHVzZSBEQl9BR0dSRUdBVEVfQ09MTEVDVElPTlxuICAgICAgICB0aGlzLnRhcmdldCA9IG5zLmNvbGxlY3Rpb24gfHwgZXhwb3J0cy5EQl9BR0dSRUdBVEVfQ09MTEVDVElPTjtcbiAgICAgICAgdGhpcy5waXBlbGluZSA9IHBpcGVsaW5lO1xuICAgICAgICAvLyBkZXRlcm1pbmUgaWYgd2UgaGF2ZSBhIHdyaXRlIHN0YWdlLCBvdmVycmlkZSByZWFkIHByZWZlcmVuY2UgaWYgc29cbiAgICAgICAgdGhpcy5oYXNXcml0ZVN0YWdlID0gZmFsc2U7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucz8ub3V0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhpcy5waXBlbGluZSA9IHRoaXMucGlwZWxpbmUuY29uY2F0KHsgJG91dDogb3B0aW9ucy5vdXQgfSk7XG4gICAgICAgICAgICB0aGlzLmhhc1dyaXRlU3RhZ2UgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBpcGVsaW5lLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGZpbmFsU3RhZ2UgPSBwaXBlbGluZVtwaXBlbGluZS5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGlmIChmaW5hbFN0YWdlLiRvdXQgfHwgZmluYWxTdGFnZS4kbWVyZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhhc1dyaXRlU3RhZ2UgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhhc1dyaXRlU3RhZ2UpIHtcbiAgICAgICAgICAgIHRoaXMudHJ5U2Vjb25kYXJ5V3JpdGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMub3B0aW9ucy53cml0ZUNvbmNlcm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZXhwbGFpbiAmJiB0aGlzLndyaXRlQ29uY2Vybikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcignT3B0aW9uIFwiZXhwbGFpblwiIGNhbm5vdCBiZSB1c2VkIG9uIGFuIGFnZ3JlZ2F0ZSBjYWxsIHdpdGggd3JpdGVDb25jZXJuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnM/LmN1cnNvciAhPSBudWxsICYmIHR5cGVvZiBvcHRpb25zLmN1cnNvciAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ0N1cnNvciBvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2FnZ3JlZ2F0ZSc7XG4gICAgfVxuICAgIGdldCBjYW5SZXRyeVJlYWQoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5oYXNXcml0ZVN0YWdlO1xuICAgIH1cbiAgICBhZGRUb1BpcGVsaW5lKHN0YWdlKSB7XG4gICAgICAgIHRoaXMucGlwZWxpbmUucHVzaChzdGFnZSk7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHNlcnZlcldpcmVWZXJzaW9uID0gKDAsIHV0aWxzXzEubWF4V2lyZVZlcnNpb24pKHNlcnZlcik7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSB7IGFnZ3JlZ2F0ZTogdGhpcy50YXJnZXQsIHBpcGVsaW5lOiB0aGlzLnBpcGVsaW5lIH07XG4gICAgICAgIGlmICh0aGlzLmhhc1dyaXRlU3RhZ2UgJiYgc2VydmVyV2lyZVZlcnNpb24gPCBNSU5fV0lSRV9WRVJTSU9OXyRPVVRfUkVBRF9DT05DRVJOX1NVUFBPUlQpIHtcbiAgICAgICAgICAgIHRoaXMucmVhZENvbmNlcm4gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGFzV3JpdGVTdGFnZSAmJiB0aGlzLndyaXRlQ29uY2Vybikge1xuICAgICAgICAgICAgd3JpdGVfY29uY2Vybl8xLldyaXRlQ29uY2Vybi5hcHBseShjb21tYW5kLCB0aGlzLndyaXRlQ29uY2Vybik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb21tYW5kLmJ5cGFzc0RvY3VtZW50VmFsaWRhdGlvbiA9IG9wdGlvbnMuYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5hbGxvd0Rpc2tVc2UgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgY29tbWFuZC5hbGxvd0Rpc2tVc2UgPSBvcHRpb25zLmFsbG93RGlza1VzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5oaW50KSB7XG4gICAgICAgICAgICBjb21tYW5kLmhpbnQgPSBvcHRpb25zLmhpbnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMubGV0KSB7XG4gICAgICAgICAgICBjb21tYW5kLmxldCA9IG9wdGlvbnMubGV0O1xuICAgICAgICB9XG4gICAgICAgIC8vIHdlIGNoZWNrIGZvciB1bmRlZmluZWQgc3BlY2lmaWNhbGx5IGhlcmUgdG8gYWxsb3cgZmFsc3kgdmFsdWVzXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBpZiAob3B0aW9ucy5jb21tZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbW1hbmQuY29tbWVudCA9IG9wdGlvbnMuY29tbWVudDtcbiAgICAgICAgfVxuICAgICAgICBjb21tYW5kLmN1cnNvciA9IG9wdGlvbnMuY3Vyc29yIHx8IHt9O1xuICAgICAgICBpZiAob3B0aW9ucy5iYXRjaFNpemUgJiYgIXRoaXMuaGFzV3JpdGVTdGFnZSkge1xuICAgICAgICAgICAgY29tbWFuZC5jdXJzb3IuYmF0Y2hTaXplID0gb3B0aW9ucy5iYXRjaFNpemU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgY29tbWFuZCwgdGhpcy5leHBsYWluID8gcmVzcG9uc2VzXzEuRXhwbGFpbmVkQ3Vyc29yUmVzcG9uc2UgOiByZXNwb25zZXNfMS5DdXJzb3JSZXNwb25zZSk7XG4gICAgfVxufVxuZXhwb3J0cy5BZ2dyZWdhdGVPcGVyYXRpb24gPSBBZ2dyZWdhdGVPcGVyYXRpb247XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoQWdncmVnYXRlT3BlcmF0aW9uLCBbXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LlJFQURfT1BFUkFUSU9OLFxuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5SRVRSWUFCTEUsXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LkVYUExBSU5BQkxFLFxuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5DVVJTT1JfQ1JFQVRJTkdcbl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWdncmVnYXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/aggregate.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/bulk_write.js":
/*!**********************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/bulk_write.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BulkWriteOperation = void 0;\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass BulkWriteOperation extends operation_1.AbstractOperation {\n    constructor(collection, operations, options) {\n        super(options);\n        this.options = options;\n        this.collection = collection;\n        this.operations = operations;\n    }\n    get commandName() {\n        return 'bulkWrite';\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const operations = this.operations;\n        const options = { ...this.options, ...this.bsonOptions, readPreference: this.readPreference };\n        // Create the bulk operation\n        const bulk = options.ordered === false\n            ? coll.initializeUnorderedBulkOp(options)\n            : coll.initializeOrderedBulkOp(options);\n        // for each op go through and add to the bulk\n        for (let i = 0; i < operations.length; i++) {\n            bulk.raw(operations[i]);\n        }\n        // Execute the bulk\n        return await bulk.execute({ ...options, session });\n    }\n}\nexports.BulkWriteOperation = BulkWriteOperation;\n(0, operation_1.defineAspects)(BulkWriteOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=bulk_write.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2J1bGtfd3JpdGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCO0FBQzFCLG9CQUFvQixtQkFBTyxDQUFDLGdIQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix1QkFBdUI7QUFDL0M7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLHFCQUFxQjtBQUN6RDtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9saW5rdXMvR2l0aHViL21vbm90d28vcGF5bG9hZC1wbHVnaW4tbWV0YS9ub2RlX21vZHVsZXMvLnBucG0vbW9uZ29kYkA2LjEwLjAvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvYnVsa193cml0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQnVsa1dyaXRlT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBCdWxrV3JpdGVPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgb3BlcmF0aW9ucywgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICAgICAgdGhpcy5vcGVyYXRpb25zID0gb3BlcmF0aW9ucztcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2J1bGtXcml0ZSc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGNvbGwgPSB0aGlzLmNvbGxlY3Rpb247XG4gICAgICAgIGNvbnN0IG9wZXJhdGlvbnMgPSB0aGlzLm9wZXJhdGlvbnM7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7IC4uLnRoaXMub3B0aW9ucywgLi4udGhpcy5ic29uT3B0aW9ucywgcmVhZFByZWZlcmVuY2U6IHRoaXMucmVhZFByZWZlcmVuY2UgfTtcbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBidWxrIG9wZXJhdGlvblxuICAgICAgICBjb25zdCBidWxrID0gb3B0aW9ucy5vcmRlcmVkID09PSBmYWxzZVxuICAgICAgICAgICAgPyBjb2xsLmluaXRpYWxpemVVbm9yZGVyZWRCdWxrT3Aob3B0aW9ucylcbiAgICAgICAgICAgIDogY29sbC5pbml0aWFsaXplT3JkZXJlZEJ1bGtPcChvcHRpb25zKTtcbiAgICAgICAgLy8gZm9yIGVhY2ggb3AgZ28gdGhyb3VnaCBhbmQgYWRkIHRvIHRoZSBidWxrXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3BlcmF0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYnVsay5yYXcob3BlcmF0aW9uc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRXhlY3V0ZSB0aGUgYnVsa1xuICAgICAgICByZXR1cm4gYXdhaXQgYnVsay5leGVjdXRlKHsgLi4ub3B0aW9ucywgc2Vzc2lvbiB9KTtcbiAgICB9XG59XG5leHBvcnRzLkJ1bGtXcml0ZU9wZXJhdGlvbiA9IEJ1bGtXcml0ZU9wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShCdWxrV3JpdGVPcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWxrX3dyaXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/bulk_write.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/client_bulk_write/client_bulk_write.js":
/*!***********************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/client_bulk_write/client_bulk_write.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ClientBulkWriteOperation = void 0;\nconst beta_1 = __webpack_require__(/*! ../../beta */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/beta.js\");\nconst responses_1 = __webpack_require__(/*! ../../cmap/wire_protocol/responses */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/responses.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ../command */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ../operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js\");\n/**\n * Executes a single client bulk write operation within a potential batch.\n * @internal\n */\nclass ClientBulkWriteOperation extends command_1.CommandOperation {\n    get commandName() {\n        return 'bulkWrite';\n    }\n    constructor(commandBuilder, options) {\n        super(undefined, options);\n        this.commandBuilder = commandBuilder;\n        this.options = options;\n        this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');\n    }\n    resetBatch() {\n        return this.commandBuilder.resetBatch();\n    }\n    get canRetryWrite() {\n        return this.commandBuilder.isBatchRetryable;\n    }\n    /**\n     * Execute the command. Superclass will handle write concern, etc.\n     * @param server - The server.\n     * @param session - The session.\n     * @returns The response.\n     */\n    async execute(server, session) {\n        let command;\n        if (server.description.type === beta_1.ServerType.LoadBalancer) {\n            if (session) {\n                let connection;\n                if (!session.pinnedConnection) {\n                    // Checkout a connection to build the command.\n                    connection = await server.pool.checkOut();\n                    // Pin the connection to the session so it get used to execute the command and we do not\n                    // perform a double check-in/check-out.\n                    session.pin(connection);\n                }\n                else {\n                    connection = session.pinnedConnection;\n                }\n                command = this.commandBuilder.buildBatch(connection.hello?.maxMessageSizeBytes, connection.hello?.maxWriteBatchSize, connection.hello?.maxBsonObjectSize);\n            }\n            else {\n                throw new beta_1.MongoClientBulkWriteExecutionError('Session provided to the client bulk write operation must be present.');\n            }\n        }\n        else {\n            // At this point we have a server and the auto connect code has already\n            // run in executeOperation, so the server description will be populated.\n            // We can use that to build the command.\n            if (!server.description.maxWriteBatchSize ||\n                !server.description.maxMessageSizeBytes ||\n                !server.description.maxBsonObjectSize) {\n                throw new beta_1.MongoClientBulkWriteExecutionError('In order to execute a client bulk write, both maxWriteBatchSize, maxMessageSizeBytes and maxBsonObjectSize must be provided by the servers hello response.');\n            }\n            command = this.commandBuilder.buildBatch(server.description.maxMessageSizeBytes, server.description.maxWriteBatchSize, server.description.maxBsonObjectSize);\n        }\n        // Check after the batch is built if we cannot retry it and override the option.\n        if (!this.canRetryWrite) {\n            this.options.willRetryWrite = false;\n        }\n        return await super.executeCommand(server, session, command, responses_1.ClientBulkWriteCursorResponse);\n    }\n}\nexports.ClientBulkWriteOperation = ClientBulkWriteOperation;\n// Skipping the collation as it goes on the individual ops.\n(0, operation_1.defineAspects)(ClientBulkWriteOperation, [\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.SKIP_COLLATION,\n    operation_1.Aspect.CURSOR_CREATING,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.COMMAND_BATCHING\n]);\n//# sourceMappingURL=client_bulk_write.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2NsaWVudF9idWxrX3dyaXRlL2NsaWVudF9idWxrX3dyaXRlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdDQUFnQztBQUNoQyxlQUFlLG1CQUFPLENBQUMsK0ZBQVk7QUFDbkMsb0JBQW9CLG1CQUFPLENBQUMsK0lBQW9DO0FBQ2hFLGdCQUFnQixtQkFBTyxDQUFDLGlHQUFhO0FBQ3JDLGtCQUFrQixtQkFBTyxDQUFDLDZHQUFZO0FBQ3RDLG9CQUFvQixtQkFBTyxDQUFDLGlIQUFjO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2NsaWVudF9idWxrX3dyaXRlL2NsaWVudF9idWxrX3dyaXRlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DbGllbnRCdWxrV3JpdGVPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBiZXRhXzEgPSByZXF1aXJlKFwiLi4vLi4vYmV0YVwiKTtcbmNvbnN0IHJlc3BvbnNlc18xID0gcmVxdWlyZShcIi4uLy4uL2NtYXAvd2lyZV9wcm90b2NvbC9yZXNwb25zZXNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzXCIpO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4uL2NvbW1hbmRcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRpb25cIik7XG4vKipcbiAqIEV4ZWN1dGVzIGEgc2luZ2xlIGNsaWVudCBidWxrIHdyaXRlIG9wZXJhdGlvbiB3aXRoaW4gYSBwb3RlbnRpYWwgYmF0Y2guXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgQ2xpZW50QnVsa1dyaXRlT3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdidWxrV3JpdGUnO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihjb21tYW5kQnVpbGRlciwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcih1bmRlZmluZWQsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmNvbW1hbmRCdWlsZGVyID0gY29tbWFuZEJ1aWxkZXI7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMubnMgPSBuZXcgdXRpbHNfMS5Nb25nb0RCTmFtZXNwYWNlKCdhZG1pbicsICckY21kJyk7XG4gICAgfVxuICAgIHJlc2V0QmF0Y2goKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbW1hbmRCdWlsZGVyLnJlc2V0QmF0Y2goKTtcbiAgICB9XG4gICAgZ2V0IGNhblJldHJ5V3JpdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbW1hbmRCdWlsZGVyLmlzQmF0Y2hSZXRyeWFibGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGUgdGhlIGNvbW1hbmQuIFN1cGVyY2xhc3Mgd2lsbCBoYW5kbGUgd3JpdGUgY29uY2VybiwgZXRjLlxuICAgICAqIEBwYXJhbSBzZXJ2ZXIgLSBUaGUgc2VydmVyLlxuICAgICAqIEBwYXJhbSBzZXNzaW9uIC0gVGhlIHNlc3Npb24uXG4gICAgICogQHJldHVybnMgVGhlIHJlc3BvbnNlLlxuICAgICAqL1xuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGxldCBjb21tYW5kO1xuICAgICAgICBpZiAoc2VydmVyLmRlc2NyaXB0aW9uLnR5cGUgPT09IGJldGFfMS5TZXJ2ZXJUeXBlLkxvYWRCYWxhbmNlcikge1xuICAgICAgICAgICAgaWYgKHNlc3Npb24pIHtcbiAgICAgICAgICAgICAgICBsZXQgY29ubmVjdGlvbjtcbiAgICAgICAgICAgICAgICBpZiAoIXNlc3Npb24ucGlubmVkQ29ubmVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAvLyBDaGVja291dCBhIGNvbm5lY3Rpb24gdG8gYnVpbGQgdGhlIGNvbW1hbmQuXG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24gPSBhd2FpdCBzZXJ2ZXIucG9vbC5jaGVja091dCgpO1xuICAgICAgICAgICAgICAgICAgICAvLyBQaW4gdGhlIGNvbm5lY3Rpb24gdG8gdGhlIHNlc3Npb24gc28gaXQgZ2V0IHVzZWQgdG8gZXhlY3V0ZSB0aGUgY29tbWFuZCBhbmQgd2UgZG8gbm90XG4gICAgICAgICAgICAgICAgICAgIC8vIHBlcmZvcm0gYSBkb3VibGUgY2hlY2staW4vY2hlY2stb3V0LlxuICAgICAgICAgICAgICAgICAgICBzZXNzaW9uLnBpbihjb25uZWN0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24gPSBzZXNzaW9uLnBpbm5lZENvbm5lY3Rpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbW1hbmQgPSB0aGlzLmNvbW1hbmRCdWlsZGVyLmJ1aWxkQmF0Y2goY29ubmVjdGlvbi5oZWxsbz8ubWF4TWVzc2FnZVNpemVCeXRlcywgY29ubmVjdGlvbi5oZWxsbz8ubWF4V3JpdGVCYXRjaFNpemUsIGNvbm5lY3Rpb24uaGVsbG8/Lm1heEJzb25PYmplY3RTaXplKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBiZXRhXzEuTW9uZ29DbGllbnRCdWxrV3JpdGVFeGVjdXRpb25FcnJvcignU2Vzc2lvbiBwcm92aWRlZCB0byB0aGUgY2xpZW50IGJ1bGsgd3JpdGUgb3BlcmF0aW9uIG11c3QgYmUgcHJlc2VudC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIEF0IHRoaXMgcG9pbnQgd2UgaGF2ZSBhIHNlcnZlciBhbmQgdGhlIGF1dG8gY29ubmVjdCBjb2RlIGhhcyBhbHJlYWR5XG4gICAgICAgICAgICAvLyBydW4gaW4gZXhlY3V0ZU9wZXJhdGlvbiwgc28gdGhlIHNlcnZlciBkZXNjcmlwdGlvbiB3aWxsIGJlIHBvcHVsYXRlZC5cbiAgICAgICAgICAgIC8vIFdlIGNhbiB1c2UgdGhhdCB0byBidWlsZCB0aGUgY29tbWFuZC5cbiAgICAgICAgICAgIGlmICghc2VydmVyLmRlc2NyaXB0aW9uLm1heFdyaXRlQmF0Y2hTaXplIHx8XG4gICAgICAgICAgICAgICAgIXNlcnZlci5kZXNjcmlwdGlvbi5tYXhNZXNzYWdlU2l6ZUJ5dGVzIHx8XG4gICAgICAgICAgICAgICAgIXNlcnZlci5kZXNjcmlwdGlvbi5tYXhCc29uT2JqZWN0U2l6ZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBiZXRhXzEuTW9uZ29DbGllbnRCdWxrV3JpdGVFeGVjdXRpb25FcnJvcignSW4gb3JkZXIgdG8gZXhlY3V0ZSBhIGNsaWVudCBidWxrIHdyaXRlLCBib3RoIG1heFdyaXRlQmF0Y2hTaXplLCBtYXhNZXNzYWdlU2l6ZUJ5dGVzIGFuZCBtYXhCc29uT2JqZWN0U2l6ZSBtdXN0IGJlIHByb3ZpZGVkIGJ5IHRoZSBzZXJ2ZXJzIGhlbGxvIHJlc3BvbnNlLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29tbWFuZCA9IHRoaXMuY29tbWFuZEJ1aWxkZXIuYnVpbGRCYXRjaChzZXJ2ZXIuZGVzY3JpcHRpb24ubWF4TWVzc2FnZVNpemVCeXRlcywgc2VydmVyLmRlc2NyaXB0aW9uLm1heFdyaXRlQmF0Y2hTaXplLCBzZXJ2ZXIuZGVzY3JpcHRpb24ubWF4QnNvbk9iamVjdFNpemUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENoZWNrIGFmdGVyIHRoZSBiYXRjaCBpcyBidWlsdCBpZiB3ZSBjYW5ub3QgcmV0cnkgaXQgYW5kIG92ZXJyaWRlIHRoZSBvcHRpb24uXG4gICAgICAgIGlmICghdGhpcy5jYW5SZXRyeVdyaXRlKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMud2lsbFJldHJ5V3JpdGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXdhaXQgc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCBjb21tYW5kLCByZXNwb25zZXNfMS5DbGllbnRCdWxrV3JpdGVDdXJzb3JSZXNwb25zZSk7XG4gICAgfVxufVxuZXhwb3J0cy5DbGllbnRCdWxrV3JpdGVPcGVyYXRpb24gPSBDbGllbnRCdWxrV3JpdGVPcGVyYXRpb247XG4vLyBTa2lwcGluZyB0aGUgY29sbGF0aW9uIGFzIGl0IGdvZXMgb24gdGhlIGluZGl2aWR1YWwgb3BzLlxuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKENsaWVudEJ1bGtXcml0ZU9wZXJhdGlvbiwgW1xuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5XUklURV9PUEVSQVRJT04sXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LlNLSVBfQ09MTEFUSU9OLFxuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5DVVJTT1JfQ1JFQVRJTkcsXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LlJFVFJZQUJMRSxcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuQ09NTUFORF9CQVRDSElOR1xuXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGllbnRfYnVsa193cml0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/client_bulk_write/client_bulk_write.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/client_bulk_write/command_builder.js":
/*!*********************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/client_bulk_write/command_builder.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.buildReplaceOneOperation = exports.buildUpdateManyOperation = exports.buildUpdateOneOperation = exports.buildDeleteManyOperation = exports.buildDeleteOneOperation = exports.buildInsertOneOperation = exports.ClientBulkWriteCommandBuilder = void 0;\nexports.buildOperation = buildOperation;\nconst bson_1 = __webpack_require__(/*! ../../bson */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\");\nconst commands_1 = __webpack_require__(/*! ../../cmap/commands */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/commands.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\n/**\n * The bytes overhead for the extra fields added post command generation.\n */\nconst MESSAGE_OVERHEAD_BYTES = 1000;\n/** @internal */\nclass ClientBulkWriteCommandBuilder {\n    /**\n     * Create the command builder.\n     * @param models - The client write models.\n     */\n    constructor(models, options, pkFactory) {\n        this.models = models;\n        this.options = options;\n        this.pkFactory = pkFactory ?? utils_1.DEFAULT_PK_FACTORY;\n        this.currentModelIndex = 0;\n        this.previousModelIndex = 0;\n        this.lastOperations = [];\n        this.isBatchRetryable = true;\n    }\n    /**\n     * Gets the errorsOnly value for the command, which is the inverse of the\n     * user provided verboseResults option. Defaults to true.\n     */\n    get errorsOnly() {\n        if ('verboseResults' in this.options) {\n            return !this.options.verboseResults;\n        }\n        return true;\n    }\n    /**\n     * Determines if there is another batch to process.\n     * @returns True if not all batches have been built.\n     */\n    hasNextBatch() {\n        return this.currentModelIndex < this.models.length;\n    }\n    /**\n     * When we need to retry a command we need to set the current\n     * model index back to its previous value.\n     */\n    resetBatch() {\n        this.currentModelIndex = this.previousModelIndex;\n        return true;\n    }\n    /**\n     * Build a single batch of a client bulk write command.\n     * @param maxMessageSizeBytes - The max message size in bytes.\n     * @param maxWriteBatchSize - The max write batch size.\n     * @returns The client bulk write command.\n     */\n    buildBatch(maxMessageSizeBytes, maxWriteBatchSize, maxBsonObjectSize) {\n        // We start by assuming the batch has no multi-updates, so it is retryable\n        // until we find them.\n        this.isBatchRetryable = true;\n        let commandLength = 0;\n        let currentNamespaceIndex = 0;\n        const command = this.baseCommand();\n        const namespaces = new Map();\n        // In the case of retries we need to mark where we started this batch.\n        this.previousModelIndex = this.currentModelIndex;\n        while (this.currentModelIndex < this.models.length) {\n            const model = this.models[this.currentModelIndex];\n            const ns = model.namespace;\n            const nsIndex = namespaces.get(ns);\n            // Multi updates are not retryable.\n            if (model.name === 'deleteMany' || model.name === 'updateMany') {\n                this.isBatchRetryable = false;\n            }\n            if (nsIndex != null) {\n                // Build the operation and serialize it to get the bytes buffer.\n                const operation = buildOperation(model, nsIndex, this.pkFactory);\n                let operationBuffer;\n                try {\n                    operationBuffer = bson_1.BSON.serialize(operation);\n                }\n                catch (cause) {\n                    throw new error_1.MongoInvalidArgumentError(`Could not serialize operation to BSON`, { cause });\n                }\n                validateBufferSize('ops', operationBuffer, maxBsonObjectSize);\n                // Check if the operation buffer can fit in the command. If it can,\n                // then add the operation to the document sequence and increment the\n                // current length as long as the ops don't exceed the maxWriteBatchSize.\n                if (commandLength + operationBuffer.length < maxMessageSizeBytes &&\n                    command.ops.documents.length < maxWriteBatchSize) {\n                    // Pushing to the ops document sequence returns the total byte length of the document sequence.\n                    commandLength = MESSAGE_OVERHEAD_BYTES + command.ops.push(operation, operationBuffer);\n                    // Increment the builder's current model index.\n                    this.currentModelIndex++;\n                }\n                else {\n                    // The operation cannot fit in the current command and will need to\n                    // go in the next batch. Exit the loop.\n                    break;\n                }\n            }\n            else {\n                // The namespace is not already in the nsInfo so we will set it in the map, and\n                // construct our nsInfo and ops documents and buffers.\n                namespaces.set(ns, currentNamespaceIndex);\n                const nsInfo = { ns: ns };\n                const operation = buildOperation(model, currentNamespaceIndex, this.pkFactory);\n                let nsInfoBuffer;\n                let operationBuffer;\n                try {\n                    nsInfoBuffer = bson_1.BSON.serialize(nsInfo);\n                    operationBuffer = bson_1.BSON.serialize(operation);\n                }\n                catch (cause) {\n                    throw new error_1.MongoInvalidArgumentError(`Could not serialize ns info to BSON`, { cause });\n                }\n                validateBufferSize('nsInfo', nsInfoBuffer, maxBsonObjectSize);\n                validateBufferSize('ops', operationBuffer, maxBsonObjectSize);\n                // Check if the operation and nsInfo buffers can fit in the command. If they\n                // can, then add the operation and nsInfo to their respective document\n                // sequences and increment the current length as long as the ops don't exceed\n                // the maxWriteBatchSize.\n                if (commandLength + nsInfoBuffer.length + operationBuffer.length < maxMessageSizeBytes &&\n                    command.ops.documents.length < maxWriteBatchSize) {\n                    // Pushing to the ops document sequence returns the total byte length of the document sequence.\n                    commandLength =\n                        MESSAGE_OVERHEAD_BYTES +\n                            command.nsInfo.push(nsInfo, nsInfoBuffer) +\n                            command.ops.push(operation, operationBuffer);\n                    // We've added a new namespace, increment the namespace index.\n                    currentNamespaceIndex++;\n                    // Increment the builder's current model index.\n                    this.currentModelIndex++;\n                }\n                else {\n                    // The operation cannot fit in the current command and will need to\n                    // go in the next batch. Exit the loop.\n                    break;\n                }\n            }\n        }\n        // Set the last operations and return the command.\n        this.lastOperations = command.ops.documents;\n        return command;\n    }\n    baseCommand() {\n        const command = {\n            bulkWrite: 1,\n            errorsOnly: this.errorsOnly,\n            ordered: this.options.ordered ?? true,\n            ops: new commands_1.DocumentSequence('ops'),\n            nsInfo: new commands_1.DocumentSequence('nsInfo')\n        };\n        // Add bypassDocumentValidation if it was present in the options.\n        if (this.options.bypassDocumentValidation != null) {\n            command.bypassDocumentValidation = this.options.bypassDocumentValidation;\n        }\n        // Add let if it was present in the options.\n        if (this.options.let) {\n            command.let = this.options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (this.options.comment !== undefined) {\n            command.comment = this.options.comment;\n        }\n        return command;\n    }\n}\nexports.ClientBulkWriteCommandBuilder = ClientBulkWriteCommandBuilder;\nfunction validateBufferSize(name, buffer, maxBsonObjectSize) {\n    if (buffer.length > maxBsonObjectSize) {\n        throw new error_1.MongoInvalidArgumentError(`Client bulk write operation ${name} of length ${buffer.length} exceeds the max bson object size of ${maxBsonObjectSize}`);\n    }\n}\n/**\n * Build the insert one operation.\n * @param model - The insert one model.\n * @param index - The namespace index.\n * @returns the operation.\n */\nconst buildInsertOneOperation = (model, index, pkFactory) => {\n    const document = {\n        insert: index,\n        document: model.document\n    };\n    document.document._id = model.document._id ?? pkFactory.createPk();\n    return document;\n};\nexports.buildInsertOneOperation = buildInsertOneOperation;\n/**\n * Build the delete one operation.\n * @param model - The insert many model.\n * @param index - The namespace index.\n * @returns the operation.\n */\nconst buildDeleteOneOperation = (model, index) => {\n    return createDeleteOperation(model, index, false);\n};\nexports.buildDeleteOneOperation = buildDeleteOneOperation;\n/**\n * Build the delete many operation.\n * @param model - The delete many model.\n * @param index - The namespace index.\n * @returns the operation.\n */\nconst buildDeleteManyOperation = (model, index) => {\n    return createDeleteOperation(model, index, true);\n};\nexports.buildDeleteManyOperation = buildDeleteManyOperation;\n/**\n * Creates a delete operation based on the parameters.\n */\nfunction createDeleteOperation(model, index, multi) {\n    const document = {\n        delete: index,\n        multi: multi,\n        filter: model.filter\n    };\n    if (model.hint) {\n        document.hint = model.hint;\n    }\n    if (model.collation) {\n        document.collation = model.collation;\n    }\n    return document;\n}\n/**\n * Build the update one operation.\n * @param model - The update one model.\n * @param index - The namespace index.\n * @returns the operation.\n */\nconst buildUpdateOneOperation = (model, index) => {\n    return createUpdateOperation(model, index, false);\n};\nexports.buildUpdateOneOperation = buildUpdateOneOperation;\n/**\n * Build the update many operation.\n * @param model - The update many model.\n * @param index - The namespace index.\n * @returns the operation.\n */\nconst buildUpdateManyOperation = (model, index) => {\n    return createUpdateOperation(model, index, true);\n};\nexports.buildUpdateManyOperation = buildUpdateManyOperation;\n/**\n * Validate the update document.\n * @param update - The update document.\n */\nfunction validateUpdate(update) {\n    if (!(0, utils_1.hasAtomicOperators)(update)) {\n        throw new error_1.MongoAPIError('Client bulk write update models must only contain atomic modifiers (start with $) and must not be empty.');\n    }\n}\n/**\n * Creates a delete operation based on the parameters.\n */\nfunction createUpdateOperation(model, index, multi) {\n    // Update documents provided in UpdateOne and UpdateMany write models are\n    // required only to contain atomic modifiers (i.e. keys that start with \"$\").\n    // Drivers MUST throw an error if an update document is empty or if the\n    // document's first key does not start with \"$\".\n    validateUpdate(model.update);\n    const document = {\n        update: index,\n        multi: multi,\n        filter: model.filter,\n        updateMods: model.update\n    };\n    if (model.hint) {\n        document.hint = model.hint;\n    }\n    if (model.upsert) {\n        document.upsert = model.upsert;\n    }\n    if (model.arrayFilters) {\n        document.arrayFilters = model.arrayFilters;\n    }\n    if (model.collation) {\n        document.collation = model.collation;\n    }\n    return document;\n}\n/**\n * Build the replace one operation.\n * @param model - The replace one model.\n * @param index - The namespace index.\n * @returns the operation.\n */\nconst buildReplaceOneOperation = (model, index) => {\n    if ((0, utils_1.hasAtomicOperators)(model.replacement)) {\n        throw new error_1.MongoAPIError('Client bulk write replace models must not contain atomic modifiers (start with $) and must not be empty.');\n    }\n    const document = {\n        update: index,\n        multi: false,\n        filter: model.filter,\n        updateMods: model.replacement\n    };\n    if (model.hint) {\n        document.hint = model.hint;\n    }\n    if (model.upsert) {\n        document.upsert = model.upsert;\n    }\n    if (model.collation) {\n        document.collation = model.collation;\n    }\n    return document;\n};\nexports.buildReplaceOneOperation = buildReplaceOneOperation;\n/** @internal */\nfunction buildOperation(model, index, pkFactory) {\n    switch (model.name) {\n        case 'insertOne':\n            return (0, exports.buildInsertOneOperation)(model, index, pkFactory);\n        case 'deleteOne':\n            return (0, exports.buildDeleteOneOperation)(model, index);\n        case 'deleteMany':\n            return (0, exports.buildDeleteManyOperation)(model, index);\n        case 'updateOne':\n            return (0, exports.buildUpdateOneOperation)(model, index);\n        case 'updateMany':\n            return (0, exports.buildUpdateManyOperation)(model, index);\n        case 'replaceOne':\n            return (0, exports.buildReplaceOneOperation)(model, index);\n    }\n}\n//# sourceMappingURL=command_builder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2NsaWVudF9idWxrX3dyaXRlL2NvbW1hbmRfYnVpbGRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsR0FBRywrQkFBK0IsR0FBRyxnQ0FBZ0MsR0FBRywrQkFBK0IsR0FBRywrQkFBK0IsR0FBRyxxQ0FBcUM7QUFDcFAsc0JBQXNCO0FBQ3RCLGVBQWUsbUJBQU8sQ0FBQywrRkFBWTtBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyxpSEFBcUI7QUFDaEQsZ0JBQWdCLG1CQUFPLENBQUMsaUdBQWE7QUFDckMsZ0JBQWdCLG1CQUFPLENBQUMsaUdBQWE7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyR0FBMkcsT0FBTztBQUNsSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUdBQXlHLE9BQU87QUFDaEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQSxtRkFBbUYsTUFBTSxZQUFZLGVBQWUsc0NBQXNDLGtCQUFrQjtBQUM1SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2NsaWVudF9idWxrX3dyaXRlL2NvbW1hbmRfYnVpbGRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYnVpbGRSZXBsYWNlT25lT3BlcmF0aW9uID0gZXhwb3J0cy5idWlsZFVwZGF0ZU1hbnlPcGVyYXRpb24gPSBleHBvcnRzLmJ1aWxkVXBkYXRlT25lT3BlcmF0aW9uID0gZXhwb3J0cy5idWlsZERlbGV0ZU1hbnlPcGVyYXRpb24gPSBleHBvcnRzLmJ1aWxkRGVsZXRlT25lT3BlcmF0aW9uID0gZXhwb3J0cy5idWlsZEluc2VydE9uZU9wZXJhdGlvbiA9IGV4cG9ydHMuQ2xpZW50QnVsa1dyaXRlQ29tbWFuZEJ1aWxkZXIgPSB2b2lkIDA7XG5leHBvcnRzLmJ1aWxkT3BlcmF0aW9uID0gYnVpbGRPcGVyYXRpb247XG5jb25zdCBic29uXzEgPSByZXF1aXJlKFwiLi4vLi4vYnNvblwiKTtcbmNvbnN0IGNvbW1hbmRzXzEgPSByZXF1aXJlKFwiLi4vLi4vY21hcC9jb21tYW5kc1wiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vLi4vZXJyb3JcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzXCIpO1xuLyoqXG4gKiBUaGUgYnl0ZXMgb3ZlcmhlYWQgZm9yIHRoZSBleHRyYSBmaWVsZHMgYWRkZWQgcG9zdCBjb21tYW5kIGdlbmVyYXRpb24uXG4gKi9cbmNvbnN0IE1FU1NBR0VfT1ZFUkhFQURfQllURVMgPSAxMDAwO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgQ2xpZW50QnVsa1dyaXRlQ29tbWFuZEJ1aWxkZXIge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSB0aGUgY29tbWFuZCBidWlsZGVyLlxuICAgICAqIEBwYXJhbSBtb2RlbHMgLSBUaGUgY2xpZW50IHdyaXRlIG1vZGVscy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihtb2RlbHMsIG9wdGlvbnMsIHBrRmFjdG9yeSkge1xuICAgICAgICB0aGlzLm1vZGVscyA9IG1vZGVscztcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5wa0ZhY3RvcnkgPSBwa0ZhY3RvcnkgPz8gdXRpbHNfMS5ERUZBVUxUX1BLX0ZBQ1RPUlk7XG4gICAgICAgIHRoaXMuY3VycmVudE1vZGVsSW5kZXggPSAwO1xuICAgICAgICB0aGlzLnByZXZpb3VzTW9kZWxJbmRleCA9IDA7XG4gICAgICAgIHRoaXMubGFzdE9wZXJhdGlvbnMgPSBbXTtcbiAgICAgICAgdGhpcy5pc0JhdGNoUmV0cnlhYmxlID0gdHJ1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZXJyb3JzT25seSB2YWx1ZSBmb3IgdGhlIGNvbW1hbmQsIHdoaWNoIGlzIHRoZSBpbnZlcnNlIG9mIHRoZVxuICAgICAqIHVzZXIgcHJvdmlkZWQgdmVyYm9zZVJlc3VsdHMgb3B0aW9uLiBEZWZhdWx0cyB0byB0cnVlLlxuICAgICAqL1xuICAgIGdldCBlcnJvcnNPbmx5KCkge1xuICAgICAgICBpZiAoJ3ZlcmJvc2VSZXN1bHRzJyBpbiB0aGlzLm9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiAhdGhpcy5vcHRpb25zLnZlcmJvc2VSZXN1bHRzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIHRoZXJlIGlzIGFub3RoZXIgYmF0Y2ggdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyBUcnVlIGlmIG5vdCBhbGwgYmF0Y2hlcyBoYXZlIGJlZW4gYnVpbHQuXG4gICAgICovXG4gICAgaGFzTmV4dEJhdGNoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50TW9kZWxJbmRleCA8IHRoaXMubW9kZWxzLmxlbmd0aDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2hlbiB3ZSBuZWVkIHRvIHJldHJ5IGEgY29tbWFuZCB3ZSBuZWVkIHRvIHNldCB0aGUgY3VycmVudFxuICAgICAqIG1vZGVsIGluZGV4IGJhY2sgdG8gaXRzIHByZXZpb3VzIHZhbHVlLlxuICAgICAqL1xuICAgIHJlc2V0QmF0Y2goKSB7XG4gICAgICAgIHRoaXMuY3VycmVudE1vZGVsSW5kZXggPSB0aGlzLnByZXZpb3VzTW9kZWxJbmRleDtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEJ1aWxkIGEgc2luZ2xlIGJhdGNoIG9mIGEgY2xpZW50IGJ1bGsgd3JpdGUgY29tbWFuZC5cbiAgICAgKiBAcGFyYW0gbWF4TWVzc2FnZVNpemVCeXRlcyAtIFRoZSBtYXggbWVzc2FnZSBzaXplIGluIGJ5dGVzLlxuICAgICAqIEBwYXJhbSBtYXhXcml0ZUJhdGNoU2l6ZSAtIFRoZSBtYXggd3JpdGUgYmF0Y2ggc2l6ZS5cbiAgICAgKiBAcmV0dXJucyBUaGUgY2xpZW50IGJ1bGsgd3JpdGUgY29tbWFuZC5cbiAgICAgKi9cbiAgICBidWlsZEJhdGNoKG1heE1lc3NhZ2VTaXplQnl0ZXMsIG1heFdyaXRlQmF0Y2hTaXplLCBtYXhCc29uT2JqZWN0U2l6ZSkge1xuICAgICAgICAvLyBXZSBzdGFydCBieSBhc3N1bWluZyB0aGUgYmF0Y2ggaGFzIG5vIG11bHRpLXVwZGF0ZXMsIHNvIGl0IGlzIHJldHJ5YWJsZVxuICAgICAgICAvLyB1bnRpbCB3ZSBmaW5kIHRoZW0uXG4gICAgICAgIHRoaXMuaXNCYXRjaFJldHJ5YWJsZSA9IHRydWU7XG4gICAgICAgIGxldCBjb21tYW5kTGVuZ3RoID0gMDtcbiAgICAgICAgbGV0IGN1cnJlbnROYW1lc3BhY2VJbmRleCA9IDA7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSB0aGlzLmJhc2VDb21tYW5kKCk7XG4gICAgICAgIGNvbnN0IG5hbWVzcGFjZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgIC8vIEluIHRoZSBjYXNlIG9mIHJldHJpZXMgd2UgbmVlZCB0byBtYXJrIHdoZXJlIHdlIHN0YXJ0ZWQgdGhpcyBiYXRjaC5cbiAgICAgICAgdGhpcy5wcmV2aW91c01vZGVsSW5kZXggPSB0aGlzLmN1cnJlbnRNb2RlbEluZGV4O1xuICAgICAgICB3aGlsZSAodGhpcy5jdXJyZW50TW9kZWxJbmRleCA8IHRoaXMubW9kZWxzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgbW9kZWwgPSB0aGlzLm1vZGVsc1t0aGlzLmN1cnJlbnRNb2RlbEluZGV4XTtcbiAgICAgICAgICAgIGNvbnN0IG5zID0gbW9kZWwubmFtZXNwYWNlO1xuICAgICAgICAgICAgY29uc3QgbnNJbmRleCA9IG5hbWVzcGFjZXMuZ2V0KG5zKTtcbiAgICAgICAgICAgIC8vIE11bHRpIHVwZGF0ZXMgYXJlIG5vdCByZXRyeWFibGUuXG4gICAgICAgICAgICBpZiAobW9kZWwubmFtZSA9PT0gJ2RlbGV0ZU1hbnknIHx8IG1vZGVsLm5hbWUgPT09ICd1cGRhdGVNYW55Jykge1xuICAgICAgICAgICAgICAgIHRoaXMuaXNCYXRjaFJldHJ5YWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5zSW5kZXggIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIEJ1aWxkIHRoZSBvcGVyYXRpb24gYW5kIHNlcmlhbGl6ZSBpdCB0byBnZXQgdGhlIGJ5dGVzIGJ1ZmZlci5cbiAgICAgICAgICAgICAgICBjb25zdCBvcGVyYXRpb24gPSBidWlsZE9wZXJhdGlvbihtb2RlbCwgbnNJbmRleCwgdGhpcy5wa0ZhY3RvcnkpO1xuICAgICAgICAgICAgICAgIGxldCBvcGVyYXRpb25CdWZmZXI7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb3BlcmF0aW9uQnVmZmVyID0gYnNvbl8xLkJTT04uc2VyaWFsaXplKG9wZXJhdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChjYXVzZSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKGBDb3VsZCBub3Qgc2VyaWFsaXplIG9wZXJhdGlvbiB0byBCU09OYCwgeyBjYXVzZSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFsaWRhdGVCdWZmZXJTaXplKCdvcHMnLCBvcGVyYXRpb25CdWZmZXIsIG1heEJzb25PYmplY3RTaXplKTtcbiAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgb3BlcmF0aW9uIGJ1ZmZlciBjYW4gZml0IGluIHRoZSBjb21tYW5kLiBJZiBpdCBjYW4sXG4gICAgICAgICAgICAgICAgLy8gdGhlbiBhZGQgdGhlIG9wZXJhdGlvbiB0byB0aGUgZG9jdW1lbnQgc2VxdWVuY2UgYW5kIGluY3JlbWVudCB0aGVcbiAgICAgICAgICAgICAgICAvLyBjdXJyZW50IGxlbmd0aCBhcyBsb25nIGFzIHRoZSBvcHMgZG9uJ3QgZXhjZWVkIHRoZSBtYXhXcml0ZUJhdGNoU2l6ZS5cbiAgICAgICAgICAgICAgICBpZiAoY29tbWFuZExlbmd0aCArIG9wZXJhdGlvbkJ1ZmZlci5sZW5ndGggPCBtYXhNZXNzYWdlU2l6ZUJ5dGVzICYmXG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQub3BzLmRvY3VtZW50cy5sZW5ndGggPCBtYXhXcml0ZUJhdGNoU2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBQdXNoaW5nIHRvIHRoZSBvcHMgZG9jdW1lbnQgc2VxdWVuY2UgcmV0dXJucyB0aGUgdG90YWwgYnl0ZSBsZW5ndGggb2YgdGhlIGRvY3VtZW50IHNlcXVlbmNlLlxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kTGVuZ3RoID0gTUVTU0FHRV9PVkVSSEVBRF9CWVRFUyArIGNvbW1hbmQub3BzLnB1c2gob3BlcmF0aW9uLCBvcGVyYXRpb25CdWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICAvLyBJbmNyZW1lbnQgdGhlIGJ1aWxkZXIncyBjdXJyZW50IG1vZGVsIGluZGV4LlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRNb2RlbEluZGV4Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgb3BlcmF0aW9uIGNhbm5vdCBmaXQgaW4gdGhlIGN1cnJlbnQgY29tbWFuZCBhbmQgd2lsbCBuZWVkIHRvXG4gICAgICAgICAgICAgICAgICAgIC8vIGdvIGluIHRoZSBuZXh0IGJhdGNoLiBFeGl0IHRoZSBsb29wLlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgbmFtZXNwYWNlIGlzIG5vdCBhbHJlYWR5IGluIHRoZSBuc0luZm8gc28gd2Ugd2lsbCBzZXQgaXQgaW4gdGhlIG1hcCwgYW5kXG4gICAgICAgICAgICAgICAgLy8gY29uc3RydWN0IG91ciBuc0luZm8gYW5kIG9wcyBkb2N1bWVudHMgYW5kIGJ1ZmZlcnMuXG4gICAgICAgICAgICAgICAgbmFtZXNwYWNlcy5zZXQobnMsIGN1cnJlbnROYW1lc3BhY2VJbmRleCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbnNJbmZvID0geyBuczogbnMgfTtcbiAgICAgICAgICAgICAgICBjb25zdCBvcGVyYXRpb24gPSBidWlsZE9wZXJhdGlvbihtb2RlbCwgY3VycmVudE5hbWVzcGFjZUluZGV4LCB0aGlzLnBrRmFjdG9yeSk7XG4gICAgICAgICAgICAgICAgbGV0IG5zSW5mb0J1ZmZlcjtcbiAgICAgICAgICAgICAgICBsZXQgb3BlcmF0aW9uQnVmZmVyO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIG5zSW5mb0J1ZmZlciA9IGJzb25fMS5CU09OLnNlcmlhbGl6ZShuc0luZm8pO1xuICAgICAgICAgICAgICAgICAgICBvcGVyYXRpb25CdWZmZXIgPSBic29uXzEuQlNPTi5zZXJpYWxpemUob3BlcmF0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGNhdXNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoYENvdWxkIG5vdCBzZXJpYWxpemUgbnMgaW5mbyB0byBCU09OYCwgeyBjYXVzZSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFsaWRhdGVCdWZmZXJTaXplKCduc0luZm8nLCBuc0luZm9CdWZmZXIsIG1heEJzb25PYmplY3RTaXplKTtcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZUJ1ZmZlclNpemUoJ29wcycsIG9wZXJhdGlvbkJ1ZmZlciwgbWF4QnNvbk9iamVjdFNpemUpO1xuICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBvcGVyYXRpb24gYW5kIG5zSW5mbyBidWZmZXJzIGNhbiBmaXQgaW4gdGhlIGNvbW1hbmQuIElmIHRoZXlcbiAgICAgICAgICAgICAgICAvLyBjYW4sIHRoZW4gYWRkIHRoZSBvcGVyYXRpb24gYW5kIG5zSW5mbyB0byB0aGVpciByZXNwZWN0aXZlIGRvY3VtZW50XG4gICAgICAgICAgICAgICAgLy8gc2VxdWVuY2VzIGFuZCBpbmNyZW1lbnQgdGhlIGN1cnJlbnQgbGVuZ3RoIGFzIGxvbmcgYXMgdGhlIG9wcyBkb24ndCBleGNlZWRcbiAgICAgICAgICAgICAgICAvLyB0aGUgbWF4V3JpdGVCYXRjaFNpemUuXG4gICAgICAgICAgICAgICAgaWYgKGNvbW1hbmRMZW5ndGggKyBuc0luZm9CdWZmZXIubGVuZ3RoICsgb3BlcmF0aW9uQnVmZmVyLmxlbmd0aCA8IG1heE1lc3NhZ2VTaXplQnl0ZXMgJiZcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5vcHMuZG9jdW1lbnRzLmxlbmd0aCA8IG1heFdyaXRlQmF0Y2hTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFB1c2hpbmcgdG8gdGhlIG9wcyBkb2N1bWVudCBzZXF1ZW5jZSByZXR1cm5zIHRoZSB0b3RhbCBieXRlIGxlbmd0aCBvZiB0aGUgZG9jdW1lbnQgc2VxdWVuY2UuXG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmRMZW5ndGggPVxuICAgICAgICAgICAgICAgICAgICAgICAgTUVTU0FHRV9PVkVSSEVBRF9CWVRFUyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5uc0luZm8ucHVzaChuc0luZm8sIG5zSW5mb0J1ZmZlcikgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmQub3BzLnB1c2gob3BlcmF0aW9uLCBvcGVyYXRpb25CdWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICAvLyBXZSd2ZSBhZGRlZCBhIG5ldyBuYW1lc3BhY2UsIGluY3JlbWVudCB0aGUgbmFtZXNwYWNlIGluZGV4LlxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50TmFtZXNwYWNlSW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgLy8gSW5jcmVtZW50IHRoZSBidWlsZGVyJ3MgY3VycmVudCBtb2RlbCBpbmRleC5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50TW9kZWxJbmRleCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIG9wZXJhdGlvbiBjYW5ub3QgZml0IGluIHRoZSBjdXJyZW50IGNvbW1hbmQgYW5kIHdpbGwgbmVlZCB0b1xuICAgICAgICAgICAgICAgICAgICAvLyBnbyBpbiB0aGUgbmV4dCBiYXRjaC4gRXhpdCB0aGUgbG9vcC5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFNldCB0aGUgbGFzdCBvcGVyYXRpb25zIGFuZCByZXR1cm4gdGhlIGNvbW1hbmQuXG4gICAgICAgIHRoaXMubGFzdE9wZXJhdGlvbnMgPSBjb21tYW5kLm9wcy5kb2N1bWVudHM7XG4gICAgICAgIHJldHVybiBjb21tYW5kO1xuICAgIH1cbiAgICBiYXNlQ29tbWFuZCgpIHtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHtcbiAgICAgICAgICAgIGJ1bGtXcml0ZTogMSxcbiAgICAgICAgICAgIGVycm9yc09ubHk6IHRoaXMuZXJyb3JzT25seSxcbiAgICAgICAgICAgIG9yZGVyZWQ6IHRoaXMub3B0aW9ucy5vcmRlcmVkID8/IHRydWUsXG4gICAgICAgICAgICBvcHM6IG5ldyBjb21tYW5kc18xLkRvY3VtZW50U2VxdWVuY2UoJ29wcycpLFxuICAgICAgICAgICAgbnNJbmZvOiBuZXcgY29tbWFuZHNfMS5Eb2N1bWVudFNlcXVlbmNlKCduc0luZm8nKVxuICAgICAgICB9O1xuICAgICAgICAvLyBBZGQgYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uIGlmIGl0IHdhcyBwcmVzZW50IGluIHRoZSBvcHRpb25zLlxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmJ5cGFzc0RvY3VtZW50VmFsaWRhdGlvbiAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb21tYW5kLmJ5cGFzc0RvY3VtZW50VmFsaWRhdGlvbiA9IHRoaXMub3B0aW9ucy5ieXBhc3NEb2N1bWVudFZhbGlkYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWRkIGxldCBpZiBpdCB3YXMgcHJlc2VudCBpbiB0aGUgb3B0aW9ucy5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5sZXQpIHtcbiAgICAgICAgICAgIGNvbW1hbmQubGV0ID0gdGhpcy5vcHRpb25zLmxldDtcbiAgICAgICAgfVxuICAgICAgICAvLyB3ZSBjaGVjayBmb3IgdW5kZWZpbmVkIHNwZWNpZmljYWxseSBoZXJlIHRvIGFsbG93IGZhbHN5IHZhbHVlc1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5jb21tZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbW1hbmQuY29tbWVudCA9IHRoaXMub3B0aW9ucy5jb21tZW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb21tYW5kO1xuICAgIH1cbn1cbmV4cG9ydHMuQ2xpZW50QnVsa1dyaXRlQ29tbWFuZEJ1aWxkZXIgPSBDbGllbnRCdWxrV3JpdGVDb21tYW5kQnVpbGRlcjtcbmZ1bmN0aW9uIHZhbGlkYXRlQnVmZmVyU2l6ZShuYW1lLCBidWZmZXIsIG1heEJzb25PYmplY3RTaXplKSB7XG4gICAgaWYgKGJ1ZmZlci5sZW5ndGggPiBtYXhCc29uT2JqZWN0U2l6ZSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKGBDbGllbnQgYnVsayB3cml0ZSBvcGVyYXRpb24gJHtuYW1lfSBvZiBsZW5ndGggJHtidWZmZXIubGVuZ3RofSBleGNlZWRzIHRoZSBtYXggYnNvbiBvYmplY3Qgc2l6ZSBvZiAke21heEJzb25PYmplY3RTaXplfWApO1xuICAgIH1cbn1cbi8qKlxuICogQnVpbGQgdGhlIGluc2VydCBvbmUgb3BlcmF0aW9uLlxuICogQHBhcmFtIG1vZGVsIC0gVGhlIGluc2VydCBvbmUgbW9kZWwuXG4gKiBAcGFyYW0gaW5kZXggLSBUaGUgbmFtZXNwYWNlIGluZGV4LlxuICogQHJldHVybnMgdGhlIG9wZXJhdGlvbi5cbiAqL1xuY29uc3QgYnVpbGRJbnNlcnRPbmVPcGVyYXRpb24gPSAobW9kZWwsIGluZGV4LCBwa0ZhY3RvcnkpID0+IHtcbiAgICBjb25zdCBkb2N1bWVudCA9IHtcbiAgICAgICAgaW5zZXJ0OiBpbmRleCxcbiAgICAgICAgZG9jdW1lbnQ6IG1vZGVsLmRvY3VtZW50XG4gICAgfTtcbiAgICBkb2N1bWVudC5kb2N1bWVudC5faWQgPSBtb2RlbC5kb2N1bWVudC5faWQgPz8gcGtGYWN0b3J5LmNyZWF0ZVBrKCk7XG4gICAgcmV0dXJuIGRvY3VtZW50O1xufTtcbmV4cG9ydHMuYnVpbGRJbnNlcnRPbmVPcGVyYXRpb24gPSBidWlsZEluc2VydE9uZU9wZXJhdGlvbjtcbi8qKlxuICogQnVpbGQgdGhlIGRlbGV0ZSBvbmUgb3BlcmF0aW9uLlxuICogQHBhcmFtIG1vZGVsIC0gVGhlIGluc2VydCBtYW55IG1vZGVsLlxuICogQHBhcmFtIGluZGV4IC0gVGhlIG5hbWVzcGFjZSBpbmRleC5cbiAqIEByZXR1cm5zIHRoZSBvcGVyYXRpb24uXG4gKi9cbmNvbnN0IGJ1aWxkRGVsZXRlT25lT3BlcmF0aW9uID0gKG1vZGVsLCBpbmRleCkgPT4ge1xuICAgIHJldHVybiBjcmVhdGVEZWxldGVPcGVyYXRpb24obW9kZWwsIGluZGV4LCBmYWxzZSk7XG59O1xuZXhwb3J0cy5idWlsZERlbGV0ZU9uZU9wZXJhdGlvbiA9IGJ1aWxkRGVsZXRlT25lT3BlcmF0aW9uO1xuLyoqXG4gKiBCdWlsZCB0aGUgZGVsZXRlIG1hbnkgb3BlcmF0aW9uLlxuICogQHBhcmFtIG1vZGVsIC0gVGhlIGRlbGV0ZSBtYW55IG1vZGVsLlxuICogQHBhcmFtIGluZGV4IC0gVGhlIG5hbWVzcGFjZSBpbmRleC5cbiAqIEByZXR1cm5zIHRoZSBvcGVyYXRpb24uXG4gKi9cbmNvbnN0IGJ1aWxkRGVsZXRlTWFueU9wZXJhdGlvbiA9IChtb2RlbCwgaW5kZXgpID0+IHtcbiAgICByZXR1cm4gY3JlYXRlRGVsZXRlT3BlcmF0aW9uKG1vZGVsLCBpbmRleCwgdHJ1ZSk7XG59O1xuZXhwb3J0cy5idWlsZERlbGV0ZU1hbnlPcGVyYXRpb24gPSBidWlsZERlbGV0ZU1hbnlPcGVyYXRpb247XG4vKipcbiAqIENyZWF0ZXMgYSBkZWxldGUgb3BlcmF0aW9uIGJhc2VkIG9uIHRoZSBwYXJhbWV0ZXJzLlxuICovXG5mdW5jdGlvbiBjcmVhdGVEZWxldGVPcGVyYXRpb24obW9kZWwsIGluZGV4LCBtdWx0aSkge1xuICAgIGNvbnN0IGRvY3VtZW50ID0ge1xuICAgICAgICBkZWxldGU6IGluZGV4LFxuICAgICAgICBtdWx0aTogbXVsdGksXG4gICAgICAgIGZpbHRlcjogbW9kZWwuZmlsdGVyXG4gICAgfTtcbiAgICBpZiAobW9kZWwuaGludCkge1xuICAgICAgICBkb2N1bWVudC5oaW50ID0gbW9kZWwuaGludDtcbiAgICB9XG4gICAgaWYgKG1vZGVsLmNvbGxhdGlvbikge1xuICAgICAgICBkb2N1bWVudC5jb2xsYXRpb24gPSBtb2RlbC5jb2xsYXRpb247XG4gICAgfVxuICAgIHJldHVybiBkb2N1bWVudDtcbn1cbi8qKlxuICogQnVpbGQgdGhlIHVwZGF0ZSBvbmUgb3BlcmF0aW9uLlxuICogQHBhcmFtIG1vZGVsIC0gVGhlIHVwZGF0ZSBvbmUgbW9kZWwuXG4gKiBAcGFyYW0gaW5kZXggLSBUaGUgbmFtZXNwYWNlIGluZGV4LlxuICogQHJldHVybnMgdGhlIG9wZXJhdGlvbi5cbiAqL1xuY29uc3QgYnVpbGRVcGRhdGVPbmVPcGVyYXRpb24gPSAobW9kZWwsIGluZGV4KSA9PiB7XG4gICAgcmV0dXJuIGNyZWF0ZVVwZGF0ZU9wZXJhdGlvbihtb2RlbCwgaW5kZXgsIGZhbHNlKTtcbn07XG5leHBvcnRzLmJ1aWxkVXBkYXRlT25lT3BlcmF0aW9uID0gYnVpbGRVcGRhdGVPbmVPcGVyYXRpb247XG4vKipcbiAqIEJ1aWxkIHRoZSB1cGRhdGUgbWFueSBvcGVyYXRpb24uXG4gKiBAcGFyYW0gbW9kZWwgLSBUaGUgdXBkYXRlIG1hbnkgbW9kZWwuXG4gKiBAcGFyYW0gaW5kZXggLSBUaGUgbmFtZXNwYWNlIGluZGV4LlxuICogQHJldHVybnMgdGhlIG9wZXJhdGlvbi5cbiAqL1xuY29uc3QgYnVpbGRVcGRhdGVNYW55T3BlcmF0aW9uID0gKG1vZGVsLCBpbmRleCkgPT4ge1xuICAgIHJldHVybiBjcmVhdGVVcGRhdGVPcGVyYXRpb24obW9kZWwsIGluZGV4LCB0cnVlKTtcbn07XG5leHBvcnRzLmJ1aWxkVXBkYXRlTWFueU9wZXJhdGlvbiA9IGJ1aWxkVXBkYXRlTWFueU9wZXJhdGlvbjtcbi8qKlxuICogVmFsaWRhdGUgdGhlIHVwZGF0ZSBkb2N1bWVudC5cbiAqIEBwYXJhbSB1cGRhdGUgLSBUaGUgdXBkYXRlIGRvY3VtZW50LlxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZVVwZGF0ZSh1cGRhdGUpIHtcbiAgICBpZiAoISgwLCB1dGlsc18xLmhhc0F0b21pY09wZXJhdG9ycykodXBkYXRlKSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0FQSUVycm9yKCdDbGllbnQgYnVsayB3cml0ZSB1cGRhdGUgbW9kZWxzIG11c3Qgb25seSBjb250YWluIGF0b21pYyBtb2RpZmllcnMgKHN0YXJ0IHdpdGggJCkgYW5kIG11c3Qgbm90IGJlIGVtcHR5LicpO1xuICAgIH1cbn1cbi8qKlxuICogQ3JlYXRlcyBhIGRlbGV0ZSBvcGVyYXRpb24gYmFzZWQgb24gdGhlIHBhcmFtZXRlcnMuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVVwZGF0ZU9wZXJhdGlvbihtb2RlbCwgaW5kZXgsIG11bHRpKSB7XG4gICAgLy8gVXBkYXRlIGRvY3VtZW50cyBwcm92aWRlZCBpbiBVcGRhdGVPbmUgYW5kIFVwZGF0ZU1hbnkgd3JpdGUgbW9kZWxzIGFyZVxuICAgIC8vIHJlcXVpcmVkIG9ubHkgdG8gY29udGFpbiBhdG9taWMgbW9kaWZpZXJzIChpLmUuIGtleXMgdGhhdCBzdGFydCB3aXRoIFwiJFwiKS5cbiAgICAvLyBEcml2ZXJzIE1VU1QgdGhyb3cgYW4gZXJyb3IgaWYgYW4gdXBkYXRlIGRvY3VtZW50IGlzIGVtcHR5IG9yIGlmIHRoZVxuICAgIC8vIGRvY3VtZW50J3MgZmlyc3Qga2V5IGRvZXMgbm90IHN0YXJ0IHdpdGggXCIkXCIuXG4gICAgdmFsaWRhdGVVcGRhdGUobW9kZWwudXBkYXRlKTtcbiAgICBjb25zdCBkb2N1bWVudCA9IHtcbiAgICAgICAgdXBkYXRlOiBpbmRleCxcbiAgICAgICAgbXVsdGk6IG11bHRpLFxuICAgICAgICBmaWx0ZXI6IG1vZGVsLmZpbHRlcixcbiAgICAgICAgdXBkYXRlTW9kczogbW9kZWwudXBkYXRlXG4gICAgfTtcbiAgICBpZiAobW9kZWwuaGludCkge1xuICAgICAgICBkb2N1bWVudC5oaW50ID0gbW9kZWwuaGludDtcbiAgICB9XG4gICAgaWYgKG1vZGVsLnVwc2VydCkge1xuICAgICAgICBkb2N1bWVudC51cHNlcnQgPSBtb2RlbC51cHNlcnQ7XG4gICAgfVxuICAgIGlmIChtb2RlbC5hcnJheUZpbHRlcnMpIHtcbiAgICAgICAgZG9jdW1lbnQuYXJyYXlGaWx0ZXJzID0gbW9kZWwuYXJyYXlGaWx0ZXJzO1xuICAgIH1cbiAgICBpZiAobW9kZWwuY29sbGF0aW9uKSB7XG4gICAgICAgIGRvY3VtZW50LmNvbGxhdGlvbiA9IG1vZGVsLmNvbGxhdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIGRvY3VtZW50O1xufVxuLyoqXG4gKiBCdWlsZCB0aGUgcmVwbGFjZSBvbmUgb3BlcmF0aW9uLlxuICogQHBhcmFtIG1vZGVsIC0gVGhlIHJlcGxhY2Ugb25lIG1vZGVsLlxuICogQHBhcmFtIGluZGV4IC0gVGhlIG5hbWVzcGFjZSBpbmRleC5cbiAqIEByZXR1cm5zIHRoZSBvcGVyYXRpb24uXG4gKi9cbmNvbnN0IGJ1aWxkUmVwbGFjZU9uZU9wZXJhdGlvbiA9IChtb2RlbCwgaW5kZXgpID0+IHtcbiAgICBpZiAoKDAsIHV0aWxzXzEuaGFzQXRvbWljT3BlcmF0b3JzKShtb2RlbC5yZXBsYWNlbWVudCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29BUElFcnJvcignQ2xpZW50IGJ1bGsgd3JpdGUgcmVwbGFjZSBtb2RlbHMgbXVzdCBub3QgY29udGFpbiBhdG9taWMgbW9kaWZpZXJzIChzdGFydCB3aXRoICQpIGFuZCBtdXN0IG5vdCBiZSBlbXB0eS4nKTtcbiAgICB9XG4gICAgY29uc3QgZG9jdW1lbnQgPSB7XG4gICAgICAgIHVwZGF0ZTogaW5kZXgsXG4gICAgICAgIG11bHRpOiBmYWxzZSxcbiAgICAgICAgZmlsdGVyOiBtb2RlbC5maWx0ZXIsXG4gICAgICAgIHVwZGF0ZU1vZHM6IG1vZGVsLnJlcGxhY2VtZW50XG4gICAgfTtcbiAgICBpZiAobW9kZWwuaGludCkge1xuICAgICAgICBkb2N1bWVudC5oaW50ID0gbW9kZWwuaGludDtcbiAgICB9XG4gICAgaWYgKG1vZGVsLnVwc2VydCkge1xuICAgICAgICBkb2N1bWVudC51cHNlcnQgPSBtb2RlbC51cHNlcnQ7XG4gICAgfVxuICAgIGlmIChtb2RlbC5jb2xsYXRpb24pIHtcbiAgICAgICAgZG9jdW1lbnQuY29sbGF0aW9uID0gbW9kZWwuY29sbGF0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gZG9jdW1lbnQ7XG59O1xuZXhwb3J0cy5idWlsZFJlcGxhY2VPbmVPcGVyYXRpb24gPSBidWlsZFJlcGxhY2VPbmVPcGVyYXRpb247XG4vKiogQGludGVybmFsICovXG5mdW5jdGlvbiBidWlsZE9wZXJhdGlvbihtb2RlbCwgaW5kZXgsIHBrRmFjdG9yeSkge1xuICAgIHN3aXRjaCAobW9kZWwubmFtZSkge1xuICAgICAgICBjYXNlICdpbnNlcnRPbmUnOlxuICAgICAgICAgICAgcmV0dXJuICgwLCBleHBvcnRzLmJ1aWxkSW5zZXJ0T25lT3BlcmF0aW9uKShtb2RlbCwgaW5kZXgsIHBrRmFjdG9yeSk7XG4gICAgICAgIGNhc2UgJ2RlbGV0ZU9uZSc6XG4gICAgICAgICAgICByZXR1cm4gKDAsIGV4cG9ydHMuYnVpbGREZWxldGVPbmVPcGVyYXRpb24pKG1vZGVsLCBpbmRleCk7XG4gICAgICAgIGNhc2UgJ2RlbGV0ZU1hbnknOlxuICAgICAgICAgICAgcmV0dXJuICgwLCBleHBvcnRzLmJ1aWxkRGVsZXRlTWFueU9wZXJhdGlvbikobW9kZWwsIGluZGV4KTtcbiAgICAgICAgY2FzZSAndXBkYXRlT25lJzpcbiAgICAgICAgICAgIHJldHVybiAoMCwgZXhwb3J0cy5idWlsZFVwZGF0ZU9uZU9wZXJhdGlvbikobW9kZWwsIGluZGV4KTtcbiAgICAgICAgY2FzZSAndXBkYXRlTWFueSc6XG4gICAgICAgICAgICByZXR1cm4gKDAsIGV4cG9ydHMuYnVpbGRVcGRhdGVNYW55T3BlcmF0aW9uKShtb2RlbCwgaW5kZXgpO1xuICAgICAgICBjYXNlICdyZXBsYWNlT25lJzpcbiAgICAgICAgICAgIHJldHVybiAoMCwgZXhwb3J0cy5idWlsZFJlcGxhY2VPbmVPcGVyYXRpb24pKG1vZGVsLCBpbmRleCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tbWFuZF9idWlsZGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/client_bulk_write/command_builder.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/client_bulk_write/executor.js":
/*!**************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/client_bulk_write/executor.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ClientBulkWriteExecutor = void 0;\nconst client_bulk_write_cursor_1 = __webpack_require__(/*! ../../cursor/client_bulk_write_cursor */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/client_bulk_write_cursor.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst write_concern_1 = __webpack_require__(/*! ../../write_concern */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/write_concern.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../execute_operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/execute_operation.js\");\nconst client_bulk_write_1 = __webpack_require__(/*! ./client_bulk_write */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/client_bulk_write/client_bulk_write.js\");\nconst command_builder_1 = __webpack_require__(/*! ./command_builder */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/client_bulk_write/command_builder.js\");\nconst results_merger_1 = __webpack_require__(/*! ./results_merger */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/client_bulk_write/results_merger.js\");\n/**\n * Responsible for executing a client bulk write.\n * @internal\n */\nclass ClientBulkWriteExecutor {\n    /**\n     * Instantiate the executor.\n     * @param client - The mongo client.\n     * @param operations - The user supplied bulk write models.\n     * @param options - The bulk write options.\n     */\n    constructor(client, operations, options) {\n        if (operations.length === 0) {\n            throw new error_1.MongoClientBulkWriteExecutionError('No client bulk write models were provided.');\n        }\n        this.client = client;\n        this.operations = operations;\n        this.options = {\n            ordered: true,\n            bypassDocumentValidation: false,\n            verboseResults: false,\n            ...options\n        };\n        // If no write concern was provided, we inherit one from the client.\n        if (!this.options.writeConcern) {\n            this.options.writeConcern = write_concern_1.WriteConcern.fromOptions(this.client.options);\n        }\n        if (this.options.writeConcern?.w === 0) {\n            if (this.options.verboseResults) {\n                throw new error_1.MongoInvalidArgumentError('Cannot request unacknowledged write concern and verbose results');\n            }\n            if (this.options.ordered) {\n                throw new error_1.MongoInvalidArgumentError('Cannot request unacknowledged write concern and ordered writes');\n            }\n        }\n    }\n    /**\n     * Execute the client bulk write. Will split commands into batches and exhaust the cursors\n     * for each, then merge the results into one.\n     * @returns The result.\n     */\n    async execute() {\n        // The command builder will take the user provided models and potential split the batch\n        // into multiple commands due to size.\n        const pkFactory = this.client.s.options.pkFactory;\n        const commandBuilder = new command_builder_1.ClientBulkWriteCommandBuilder(this.operations, this.options, pkFactory);\n        // Unacknowledged writes need to execute all batches and return { ok: 1}\n        if (this.options.writeConcern?.w === 0) {\n            while (commandBuilder.hasNextBatch()) {\n                const operation = new client_bulk_write_1.ClientBulkWriteOperation(commandBuilder, this.options);\n                await (0, execute_operation_1.executeOperation)(this.client, operation);\n            }\n            return results_merger_1.ClientBulkWriteResultsMerger.unacknowledged();\n        }\n        else {\n            const resultsMerger = new results_merger_1.ClientBulkWriteResultsMerger(this.options);\n            // For each command will will create and exhaust a cursor for the results.\n            while (commandBuilder.hasNextBatch()) {\n                const cursor = new client_bulk_write_cursor_1.ClientBulkWriteCursor(this.client, commandBuilder, this.options);\n                try {\n                    await resultsMerger.merge(cursor);\n                }\n                catch (error) {\n                    // Write concern errors are recorded in the writeConcernErrors field on MongoClientBulkWriteError.\n                    // When a write concern error is encountered, it should not terminate execution of the bulk write\n                    // for either ordered or unordered bulk writes. However, drivers MUST throw an exception at the end\n                    // of execution if any write concern errors were observed.\n                    if (error instanceof error_1.MongoServerError && !(error instanceof error_1.MongoClientBulkWriteError)) {\n                        // Server side errors need to be wrapped inside a MongoClientBulkWriteError, where the root\n                        // cause is the error property and a partial result is to be included.\n                        const bulkWriteError = new error_1.MongoClientBulkWriteError({\n                            message: 'Mongo client bulk write encountered an error during execution'\n                        });\n                        bulkWriteError.cause = error;\n                        bulkWriteError.partialResult = resultsMerger.bulkWriteResult;\n                        throw bulkWriteError;\n                    }\n                    else {\n                        // Client side errors are just thrown.\n                        throw error;\n                    }\n                }\n            }\n            // If we have write concern errors or unordered write errors at the end we throw.\n            if (resultsMerger.writeConcernErrors.length > 0 || resultsMerger.writeErrors.size > 0) {\n                const error = new error_1.MongoClientBulkWriteError({\n                    message: 'Mongo client bulk write encountered errors during execution.'\n                });\n                error.writeConcernErrors = resultsMerger.writeConcernErrors;\n                error.writeErrors = resultsMerger.writeErrors;\n                error.partialResult = resultsMerger.bulkWriteResult;\n                throw error;\n            }\n            return resultsMerger.bulkWriteResult;\n        }\n    }\n}\nexports.ClientBulkWriteExecutor = ClientBulkWriteExecutor;\n//# sourceMappingURL=executor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/client_bulk_write/executor.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/client_bulk_write/results_merger.js":
/*!********************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/client_bulk_write/results_merger.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ClientBulkWriteResultsMerger = void 0;\nconst __1 = __webpack_require__(/*! ../.. */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/index.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\n/**\n * Unacknowledged bulk writes are always the same.\n */\nconst UNACKNOWLEDGED = {\n    acknowledged: false,\n    insertedCount: 0,\n    upsertedCount: 0,\n    matchedCount: 0,\n    modifiedCount: 0,\n    deletedCount: 0,\n    insertResults: undefined,\n    updateResults: undefined,\n    deleteResults: undefined\n};\n/**\n * Merges client bulk write cursor responses together into a single result.\n * @internal\n */\nclass ClientBulkWriteResultsMerger {\n    /**\n     * @returns The standard unacknowledged bulk write result.\n     */\n    static unacknowledged() {\n        return UNACKNOWLEDGED;\n    }\n    /**\n     * Instantiate the merger.\n     * @param options - The options.\n     */\n    constructor(options) {\n        this.options = options;\n        this.currentBatchOffset = 0;\n        this.writeConcernErrors = [];\n        this.writeErrors = new Map();\n        this.result = {\n            acknowledged: true,\n            insertedCount: 0,\n            upsertedCount: 0,\n            matchedCount: 0,\n            modifiedCount: 0,\n            deletedCount: 0,\n            insertResults: undefined,\n            updateResults: undefined,\n            deleteResults: undefined\n        };\n        if (options.verboseResults) {\n            this.result.insertResults = new Map();\n            this.result.updateResults = new Map();\n            this.result.deleteResults = new Map();\n        }\n    }\n    /**\n     * Get the bulk write result object.\n     */\n    get bulkWriteResult() {\n        return {\n            acknowledged: this.result.acknowledged,\n            insertedCount: this.result.insertedCount,\n            upsertedCount: this.result.upsertedCount,\n            matchedCount: this.result.matchedCount,\n            modifiedCount: this.result.modifiedCount,\n            deletedCount: this.result.deletedCount,\n            insertResults: this.result.insertResults,\n            updateResults: this.result.updateResults,\n            deleteResults: this.result.deleteResults\n        };\n    }\n    /**\n     * Merge the results in the cursor to the existing result.\n     * @param currentBatchOffset - The offset index to the original models.\n     * @param response - The cursor response.\n     * @param documents - The documents in the cursor.\n     * @returns The current result.\n     */\n    async merge(cursor) {\n        let writeConcernErrorResult;\n        try {\n            for await (const document of cursor) {\n                // Only add to maps if ok: 1\n                if (document.ok === 1) {\n                    if (this.options.verboseResults) {\n                        this.processDocument(cursor, document);\n                    }\n                }\n                else {\n                    // If an individual write error is encountered during an ordered bulk write, drivers MUST\n                    // record the error in writeErrors and immediately throw the exception. Otherwise, drivers\n                    // MUST continue to iterate the results cursor and execute any further bulkWrite batches.\n                    if (this.options.ordered) {\n                        const error = new error_1.MongoClientBulkWriteError({\n                            message: 'Mongo client ordered bulk write encountered a write error.'\n                        });\n                        error.writeErrors.set(document.idx + this.currentBatchOffset, {\n                            code: document.code,\n                            message: document.errmsg\n                        });\n                        error.partialResult = this.result;\n                        throw error;\n                    }\n                    else {\n                        this.writeErrors.set(document.idx + this.currentBatchOffset, {\n                            code: document.code,\n                            message: document.errmsg\n                        });\n                    }\n                }\n            }\n        }\n        catch (error) {\n            if (error instanceof __1.MongoWriteConcernError) {\n                const result = error.result;\n                writeConcernErrorResult = {\n                    insertedCount: result.nInserted,\n                    upsertedCount: result.nUpserted,\n                    matchedCount: result.nMatched,\n                    modifiedCount: result.nModified,\n                    deletedCount: result.nDeleted,\n                    writeConcernError: result.writeConcernError\n                };\n                if (this.options.verboseResults && result.cursor.firstBatch) {\n                    for (const document of result.cursor.firstBatch) {\n                        if (document.ok === 1) {\n                            this.processDocument(cursor, document);\n                        }\n                    }\n                }\n            }\n            else {\n                throw error;\n            }\n        }\n        finally {\n            // Update the counts from the cursor response.\n            if (cursor.response) {\n                const response = cursor.response;\n                this.incrementCounts(response);\n            }\n            // Increment the batch offset.\n            this.currentBatchOffset += cursor.operations.length;\n        }\n        // If we have write concern errors ensure they are added.\n        if (writeConcernErrorResult) {\n            const writeConcernError = writeConcernErrorResult.writeConcernError;\n            this.incrementCounts(writeConcernErrorResult);\n            this.writeConcernErrors.push({\n                code: writeConcernError.code,\n                message: writeConcernError.errmsg\n            });\n        }\n        return this.result;\n    }\n    /**\n     * Process an individual document in the results.\n     * @param cursor - The cursor.\n     * @param document - The document to process.\n     */\n    processDocument(cursor, document) {\n        // Get the corresponding operation from the command.\n        const operation = cursor.operations[document.idx];\n        // Handle insert results.\n        if ('insert' in operation) {\n            this.result.insertResults?.set(document.idx + this.currentBatchOffset, {\n                insertedId: operation.document._id\n            });\n        }\n        // Handle update results.\n        if ('update' in operation) {\n            const result = {\n                matchedCount: document.n,\n                modifiedCount: document.nModified ?? 0,\n                // Check if the bulk did actually upsert.\n                didUpsert: document.upserted != null\n            };\n            if (document.upserted) {\n                result.upsertedId = document.upserted._id;\n            }\n            this.result.updateResults?.set(document.idx + this.currentBatchOffset, result);\n        }\n        // Handle delete results.\n        if ('delete' in operation) {\n            this.result.deleteResults?.set(document.idx + this.currentBatchOffset, {\n                deletedCount: document.n\n            });\n        }\n    }\n    /**\n     * Increment the result counts.\n     * @param document - The document with the results.\n     */\n    incrementCounts(document) {\n        this.result.insertedCount += document.insertedCount;\n        this.result.upsertedCount += document.upsertedCount;\n        this.result.matchedCount += document.matchedCount;\n        this.result.modifiedCount += document.modifiedCount;\n        this.result.deletedCount += document.deletedCount;\n    }\n}\nexports.ClientBulkWriteResultsMerger = ClientBulkWriteResultsMerger;\n//# sourceMappingURL=results_merger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/client_bulk_write/results_merger.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/collections.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/collections.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CollectionsOperation = void 0;\nconst collection_1 = __webpack_require__(/*! ../collection */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/collection.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass CollectionsOperation extends operation_1.AbstractOperation {\n    constructor(db, options) {\n        super(options);\n        this.options = options;\n        this.db = db;\n    }\n    get commandName() {\n        return 'listCollections';\n    }\n    async execute(server, session) {\n        // Let's get the collection names\n        const documents = await this.db\n            .listCollections({}, { ...this.options, nameOnly: true, readPreference: this.readPreference, session })\n            .toArray();\n        const collections = [];\n        for (const { name } of documents) {\n            if (!name.includes('$')) {\n                // Filter collections removing any illegal ones\n                collections.push(new collection_1.Collection(this.db, name, this.db.s.options));\n            }\n        }\n        // Return the collection objects\n        return collections;\n    }\n}\nexports.CollectionsOperation = CollectionsOperation;\n//# sourceMappingURL=collections.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2NvbGxlY3Rpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QjtBQUM1QixxQkFBcUIsbUJBQU8sQ0FBQyx3R0FBZTtBQUM1QyxvQkFBb0IsbUJBQU8sQ0FBQyxnSEFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixJQUFJLCtFQUErRTtBQUNsSDtBQUNBO0FBQ0EscUJBQXFCLE9BQU87QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2NvbGxlY3Rpb25zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db2xsZWN0aW9uc09wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi9jb2xsZWN0aW9uXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBDb2xsZWN0aW9uc09wZXJhdGlvbiBleHRlbmRzIG9wZXJhdGlvbl8xLkFic3RyYWN0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihkYiwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5kYiA9IGRiO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnbGlzdENvbGxlY3Rpb25zJztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgLy8gTGV0J3MgZ2V0IHRoZSBjb2xsZWN0aW9uIG5hbWVzXG4gICAgICAgIGNvbnN0IGRvY3VtZW50cyA9IGF3YWl0IHRoaXMuZGJcbiAgICAgICAgICAgIC5saXN0Q29sbGVjdGlvbnMoe30sIHsgLi4udGhpcy5vcHRpb25zLCBuYW1lT25seTogdHJ1ZSwgcmVhZFByZWZlcmVuY2U6IHRoaXMucmVhZFByZWZlcmVuY2UsIHNlc3Npb24gfSlcbiAgICAgICAgICAgIC50b0FycmF5KCk7XG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb25zID0gW107XG4gICAgICAgIGZvciAoY29uc3QgeyBuYW1lIH0gb2YgZG9jdW1lbnRzKSB7XG4gICAgICAgICAgICBpZiAoIW5hbWUuaW5jbHVkZXMoJyQnKSkge1xuICAgICAgICAgICAgICAgIC8vIEZpbHRlciBjb2xsZWN0aW9ucyByZW1vdmluZyBhbnkgaWxsZWdhbCBvbmVzXG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbnMucHVzaChuZXcgY29sbGVjdGlvbl8xLkNvbGxlY3Rpb24odGhpcy5kYiwgbmFtZSwgdGhpcy5kYi5zLm9wdGlvbnMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBSZXR1cm4gdGhlIGNvbGxlY3Rpb24gb2JqZWN0c1xuICAgICAgICByZXR1cm4gY29sbGVjdGlvbnM7XG4gICAgfVxufVxuZXhwb3J0cy5Db2xsZWN0aW9uc09wZXJhdGlvbiA9IENvbGxlY3Rpb25zT3BlcmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29sbGVjdGlvbnMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/collections.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/command.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/command.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CommandOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst explain_1 = __webpack_require__(/*! ../explain */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/explain.js\");\nconst read_concern_1 = __webpack_require__(/*! ../read_concern */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_concern.js\");\nconst server_selection_1 = __webpack_require__(/*! ../sdam/server_selection */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/server_selection.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/write_concern.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass CommandOperation extends operation_1.AbstractOperation {\n    constructor(parent, options) {\n        super(options);\n        this.options = options ?? {};\n        // NOTE: this was explicitly added for the add/remove user operations, it's likely\n        //       something we'd want to reconsider. Perhaps those commands can use `Admin`\n        //       as a parent?\n        const dbNameOverride = options?.dbName || options?.authdb;\n        if (dbNameOverride) {\n            this.ns = new utils_1.MongoDBNamespace(dbNameOverride, '$cmd');\n        }\n        else {\n            this.ns = parent\n                ? parent.s.namespace.withCollection('$cmd')\n                : new utils_1.MongoDBNamespace('admin', '$cmd');\n        }\n        this.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n        this.writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        if (this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n            this.explain = explain_1.Explain.fromOptions(options);\n        }\n        else if (options?.explain != null) {\n            throw new error_1.MongoInvalidArgumentError(`Option \"explain\" is not supported on this command`);\n        }\n    }\n    get canRetryWrite() {\n        if (this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n            return this.explain == null;\n        }\n        return super.canRetryWrite;\n    }\n    async executeCommand(server, session, cmd, responseType) {\n        this.server = server;\n        const options = {\n            ...this.options,\n            ...this.bsonOptions,\n            readPreference: this.readPreference,\n            session\n        };\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const inTransaction = this.session && this.session.inTransaction();\n        if (this.readConcern && (0, utils_1.commandSupportsReadConcern)(cmd) && !inTransaction) {\n            Object.assign(cmd, { readConcern: this.readConcern });\n        }\n        if (this.trySecondaryWrite && serverWireVersion < server_selection_1.MIN_SECONDARY_WRITE_WIRE_VERSION) {\n            options.omitReadPreference = true;\n        }\n        if (this.writeConcern && this.hasAspect(operation_1.Aspect.WRITE_OPERATION) && !inTransaction) {\n            write_concern_1.WriteConcern.apply(cmd, this.writeConcern);\n        }\n        if (options.collation &&\n            typeof options.collation === 'object' &&\n            !this.hasAspect(operation_1.Aspect.SKIP_COLLATION)) {\n            Object.assign(cmd, { collation: options.collation });\n        }\n        if (typeof options.maxTimeMS === 'number') {\n            cmd.maxTimeMS = options.maxTimeMS;\n        }\n        if (this.hasAspect(operation_1.Aspect.EXPLAINABLE) && this.explain) {\n            cmd = (0, utils_1.decorateWithExplain)(cmd, this.explain);\n        }\n        return await server.command(this.ns, cmd, options, responseType);\n    }\n}\nexports.CommandOperation = CommandOperation;\n//# sourceMappingURL=command.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2NvbW1hbmQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0JBQXdCO0FBQ3hCLGdCQUFnQixtQkFBTyxDQUFDLDhGQUFVO0FBQ2xDLGtCQUFrQixtQkFBTyxDQUFDLGtHQUFZO0FBQ3RDLHVCQUF1QixtQkFBTyxDQUFDLDRHQUFpQjtBQUNoRCwyQkFBMkIsbUJBQU8sQ0FBQyw4SEFBMEI7QUFDN0QsZ0JBQWdCLG1CQUFPLENBQUMsOEZBQVU7QUFDbEMsd0JBQXdCLG1CQUFPLENBQUMsOEdBQWtCO0FBQ2xELG9CQUFvQixtQkFBTyxDQUFDLGdIQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLCtCQUErQjtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyw4QkFBOEI7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9saW5rdXMvR2l0aHViL21vbm90d28vcGF5bG9hZC1wbHVnaW4tbWV0YS9ub2RlX21vZHVsZXMvLnBucG0vbW9uZ29kYkA2LjEwLjAvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvY29tbWFuZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ29tbWFuZE9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCBleHBsYWluXzEgPSByZXF1aXJlKFwiLi4vZXhwbGFpblwiKTtcbmNvbnN0IHJlYWRfY29uY2Vybl8xID0gcmVxdWlyZShcIi4uL3JlYWRfY29uY2VyblwiKTtcbmNvbnN0IHNlcnZlcl9zZWxlY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi9zZGFtL3NlcnZlcl9zZWxlY3Rpb25cIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3Qgd3JpdGVfY29uY2Vybl8xID0gcmVxdWlyZShcIi4uL3dyaXRlX2NvbmNlcm5cIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIENvbW1hbmRPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IocGFyZW50LCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zID8/IHt9O1xuICAgICAgICAvLyBOT1RFOiB0aGlzIHdhcyBleHBsaWNpdGx5IGFkZGVkIGZvciB0aGUgYWRkL3JlbW92ZSB1c2VyIG9wZXJhdGlvbnMsIGl0J3MgbGlrZWx5XG4gICAgICAgIC8vICAgICAgIHNvbWV0aGluZyB3ZSdkIHdhbnQgdG8gcmVjb25zaWRlci4gUGVyaGFwcyB0aG9zZSBjb21tYW5kcyBjYW4gdXNlIGBBZG1pbmBcbiAgICAgICAgLy8gICAgICAgYXMgYSBwYXJlbnQ/XG4gICAgICAgIGNvbnN0IGRiTmFtZU92ZXJyaWRlID0gb3B0aW9ucz8uZGJOYW1lIHx8IG9wdGlvbnM/LmF1dGhkYjtcbiAgICAgICAgaWYgKGRiTmFtZU92ZXJyaWRlKSB7XG4gICAgICAgICAgICB0aGlzLm5zID0gbmV3IHV0aWxzXzEuTW9uZ29EQk5hbWVzcGFjZShkYk5hbWVPdmVycmlkZSwgJyRjbWQnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubnMgPSBwYXJlbnRcbiAgICAgICAgICAgICAgICA/IHBhcmVudC5zLm5hbWVzcGFjZS53aXRoQ29sbGVjdGlvbignJGNtZCcpXG4gICAgICAgICAgICAgICAgOiBuZXcgdXRpbHNfMS5Nb25nb0RCTmFtZXNwYWNlKCdhZG1pbicsICckY21kJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZWFkQ29uY2VybiA9IHJlYWRfY29uY2Vybl8xLlJlYWRDb25jZXJuLmZyb21PcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLndyaXRlQ29uY2VybiA9IHdyaXRlX2NvbmNlcm5fMS5Xcml0ZUNvbmNlcm4uZnJvbU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIGlmICh0aGlzLmhhc0FzcGVjdChvcGVyYXRpb25fMS5Bc3BlY3QuRVhQTEFJTkFCTEUpKSB7XG4gICAgICAgICAgICB0aGlzLmV4cGxhaW4gPSBleHBsYWluXzEuRXhwbGFpbi5mcm9tT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvcHRpb25zPy5leHBsYWluICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoYE9wdGlvbiBcImV4cGxhaW5cIiBpcyBub3Qgc3VwcG9ydGVkIG9uIHRoaXMgY29tbWFuZGApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBjYW5SZXRyeVdyaXRlKCkge1xuICAgICAgICBpZiAodGhpcy5oYXNBc3BlY3Qob3BlcmF0aW9uXzEuQXNwZWN0LkVYUExBSU5BQkxFKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXhwbGFpbiA9PSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5jYW5SZXRyeVdyaXRlO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIGNtZCwgcmVzcG9uc2VUeXBlKSB7XG4gICAgICAgIHRoaXMuc2VydmVyID0gc2VydmVyO1xuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgLi4udGhpcy5ic29uT3B0aW9ucyxcbiAgICAgICAgICAgIHJlYWRQcmVmZXJlbmNlOiB0aGlzLnJlYWRQcmVmZXJlbmNlLFxuICAgICAgICAgICAgc2Vzc2lvblxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBzZXJ2ZXJXaXJlVmVyc2lvbiA9ICgwLCB1dGlsc18xLm1heFdpcmVWZXJzaW9uKShzZXJ2ZXIpO1xuICAgICAgICBjb25zdCBpblRyYW5zYWN0aW9uID0gdGhpcy5zZXNzaW9uICYmIHRoaXMuc2Vzc2lvbi5pblRyYW5zYWN0aW9uKCk7XG4gICAgICAgIGlmICh0aGlzLnJlYWRDb25jZXJuICYmICgwLCB1dGlsc18xLmNvbW1hbmRTdXBwb3J0c1JlYWRDb25jZXJuKShjbWQpICYmICFpblRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGNtZCwgeyByZWFkQ29uY2VybjogdGhpcy5yZWFkQ29uY2VybiB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy50cnlTZWNvbmRhcnlXcml0ZSAmJiBzZXJ2ZXJXaXJlVmVyc2lvbiA8IHNlcnZlcl9zZWxlY3Rpb25fMS5NSU5fU0VDT05EQVJZX1dSSVRFX1dJUkVfVkVSU0lPTikge1xuICAgICAgICAgICAgb3B0aW9ucy5vbWl0UmVhZFByZWZlcmVuY2UgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLndyaXRlQ29uY2VybiAmJiB0aGlzLmhhc0FzcGVjdChvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OKSAmJiAhaW5UcmFuc2FjdGlvbikge1xuICAgICAgICAgICAgd3JpdGVfY29uY2Vybl8xLldyaXRlQ29uY2Vybi5hcHBseShjbWQsIHRoaXMud3JpdGVDb25jZXJuKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5jb2xsYXRpb24gJiZcbiAgICAgICAgICAgIHR5cGVvZiBvcHRpb25zLmNvbGxhdGlvbiA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICF0aGlzLmhhc0FzcGVjdChvcGVyYXRpb25fMS5Bc3BlY3QuU0tJUF9DT0xMQVRJT04pKSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGNtZCwgeyBjb2xsYXRpb246IG9wdGlvbnMuY29sbGF0aW9uIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5tYXhUaW1lTVMgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBjbWQubWF4VGltZU1TID0gb3B0aW9ucy5tYXhUaW1lTVM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGFzQXNwZWN0KG9wZXJhdGlvbl8xLkFzcGVjdC5FWFBMQUlOQUJMRSkgJiYgdGhpcy5leHBsYWluKSB7XG4gICAgICAgICAgICBjbWQgPSAoMCwgdXRpbHNfMS5kZWNvcmF0ZVdpdGhFeHBsYWluKShjbWQsIHRoaXMuZXhwbGFpbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGF3YWl0IHNlcnZlci5jb21tYW5kKHRoaXMubnMsIGNtZCwgb3B0aW9ucywgcmVzcG9uc2VUeXBlKTtcbiAgICB9XG59XG5leHBvcnRzLkNvbW1hbmRPcGVyYXRpb24gPSBDb21tYW5kT3BlcmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tbWFuZC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/command.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/count.js":
/*!*****************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/count.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CountOperation = void 0;\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass CountOperation extends command_1.CommandOperation {\n    constructor(namespace, filter, options) {\n        super({ s: { namespace: namespace } }, options);\n        this.options = options;\n        this.collectionName = namespace.collection;\n        this.query = filter;\n    }\n    get commandName() {\n        return 'count';\n    }\n    async execute(server, session) {\n        const options = this.options;\n        const cmd = {\n            count: this.collectionName,\n            query: this.query\n        };\n        if (typeof options.limit === 'number') {\n            cmd.limit = options.limit;\n        }\n        if (typeof options.skip === 'number') {\n            cmd.skip = options.skip;\n        }\n        if (options.hint != null) {\n            cmd.hint = options.hint;\n        }\n        if (typeof options.maxTimeMS === 'number') {\n            cmd.maxTimeMS = options.maxTimeMS;\n        }\n        const result = await super.executeCommand(server, session, cmd);\n        return result ? result.n : 0;\n    }\n}\nexports.CountOperation = CountOperation;\n(0, operation_1.defineAspects)(CountOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE]);\n//# sourceMappingURL=count.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2NvdW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQjtBQUN0QixrQkFBa0IsbUJBQU8sQ0FBQyw0R0FBVztBQUNyQyxvQkFBb0IsbUJBQU8sQ0FBQyxnSEFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsS0FBSyx3QkFBd0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2NvdW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db3VudE9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIENvdW50T3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG5hbWVzcGFjZSwgZmlsdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKHsgczogeyBuYW1lc3BhY2U6IG5hbWVzcGFjZSB9IH0sIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb25OYW1lID0gbmFtZXNwYWNlLmNvbGxlY3Rpb247XG4gICAgICAgIHRoaXMucXVlcnkgPSBmaWx0ZXI7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdjb3VudCc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGNtZCA9IHtcbiAgICAgICAgICAgIGNvdW50OiB0aGlzLmNvbGxlY3Rpb25OYW1lLFxuICAgICAgICAgICAgcXVlcnk6IHRoaXMucXVlcnlcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmxpbWl0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgY21kLmxpbWl0ID0gb3B0aW9ucy5saW1pdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuc2tpcCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGNtZC5za2lwID0gb3B0aW9ucy5za2lwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmhpbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgY21kLmhpbnQgPSBvcHRpb25zLmhpbnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLm1heFRpbWVNUyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGNtZC5tYXhUaW1lTVMgPSBvcHRpb25zLm1heFRpbWVNUztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIGNtZCk7XG4gICAgICAgIHJldHVybiByZXN1bHQgPyByZXN1bHQubiA6IDA7XG4gICAgfVxufVxuZXhwb3J0cy5Db3VudE9wZXJhdGlvbiA9IENvdW50T3BlcmF0aW9uO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKENvdW50T3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LlJFQURfT1BFUkFUSU9OLCBvcGVyYXRpb25fMS5Bc3BlY3QuUkVUUllBQkxFXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb3VudC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/count.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/create_collection.js":
/*!*****************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/create_collection.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CreateCollectionOperation = void 0;\nconst constants_1 = __webpack_require__(/*! ../cmap/wire_protocol/constants */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\nconst collection_1 = __webpack_require__(/*! ../collection */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/collection.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/command.js\");\nconst indexes_1 = __webpack_require__(/*! ./indexes */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/indexes.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js\");\nconst ILLEGAL_COMMAND_FIELDS = new Set([\n    'w',\n    'wtimeout',\n    'j',\n    'fsync',\n    'autoIndexId',\n    'pkFactory',\n    'raw',\n    'readPreference',\n    'session',\n    'readConcern',\n    'writeConcern',\n    'raw',\n    'fieldsAsRaw',\n    'useBigInt64',\n    'promoteLongs',\n    'promoteValues',\n    'promoteBuffers',\n    'bsonRegExp',\n    'serializeFunctions',\n    'ignoreUndefined',\n    'enableUtf8Validation'\n]);\n/* @internal */\nconst INVALID_QE_VERSION = 'Driver support of Queryable Encryption is incompatible with server. Upgrade server to use Queryable Encryption.';\n/** @internal */\nclass CreateCollectionOperation extends command_1.CommandOperation {\n    constructor(db, name, options = {}) {\n        super(db, options);\n        this.options = options;\n        this.db = db;\n        this.name = name;\n    }\n    get commandName() {\n        return 'create';\n    }\n    async execute(server, session) {\n        const db = this.db;\n        const name = this.name;\n        const options = this.options;\n        const encryptedFields = options.encryptedFields ??\n            db.client.options.autoEncryption?.encryptedFieldsMap?.[`${db.databaseName}.${name}`];\n        if (encryptedFields) {\n            // Creating a QE collection required min server of 7.0.0\n            // TODO(NODE-5353): Get wire version information from connection.\n            if (!server.loadBalanced &&\n                server.description.maxWireVersion < constants_1.MIN_SUPPORTED_QE_WIRE_VERSION) {\n                throw new error_1.MongoCompatibilityError(`${INVALID_QE_VERSION} The minimum server version required is ${constants_1.MIN_SUPPORTED_QE_SERVER_VERSION}`);\n            }\n            // Create auxilliary collections for queryable encryption support.\n            const escCollection = encryptedFields.escCollection ?? `enxcol_.${name}.esc`;\n            const ecocCollection = encryptedFields.ecocCollection ?? `enxcol_.${name}.ecoc`;\n            for (const collectionName of [escCollection, ecocCollection]) {\n                const createOp = new CreateCollectionOperation(db, collectionName, {\n                    clusteredIndex: {\n                        key: { _id: 1 },\n                        unique: true\n                    }\n                });\n                await createOp.executeWithoutEncryptedFieldsCheck(server, session);\n            }\n            if (!options.encryptedFields) {\n                this.options = { ...this.options, encryptedFields };\n            }\n        }\n        const coll = await this.executeWithoutEncryptedFieldsCheck(server, session);\n        if (encryptedFields) {\n            // Create the required index for queryable encryption support.\n            const createIndexOp = indexes_1.CreateIndexesOperation.fromIndexSpecification(db, name, { __safeContent__: 1 }, {});\n            await createIndexOp.execute(server, session);\n        }\n        return coll;\n    }\n    async executeWithoutEncryptedFieldsCheck(server, session) {\n        const db = this.db;\n        const name = this.name;\n        const options = this.options;\n        const cmd = { create: name };\n        for (const n in options) {\n            if (options[n] != null &&\n                typeof options[n] !== 'function' &&\n                !ILLEGAL_COMMAND_FIELDS.has(n)) {\n                cmd[n] = options[n];\n            }\n        }\n        // otherwise just execute the command\n        await super.executeCommand(server, session, cmd);\n        return new collection_1.Collection(db, name, options);\n    }\n}\nexports.CreateCollectionOperation = CreateCollectionOperation;\n(0, operation_1.defineAspects)(CreateCollectionOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=create_collection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2NyZWF0ZV9jb2xsZWN0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlDQUFpQztBQUNqQyxvQkFBb0IsbUJBQU8sQ0FBQyw0SUFBaUM7QUFDN0QscUJBQXFCLG1CQUFPLENBQUMsd0dBQWU7QUFDNUMsZ0JBQWdCLG1CQUFPLENBQUMsOEZBQVU7QUFDbEMsa0JBQWtCLG1CQUFPLENBQUMsNEdBQVc7QUFDckMsa0JBQWtCLG1CQUFPLENBQUMsNEdBQVc7QUFDckMsb0JBQW9CLG1CQUFPLENBQUMsZ0hBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0VBQXNFLGdCQUFnQixHQUFHLEtBQUs7QUFDOUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RCxvQkFBb0IseUNBQXlDLDRDQUE0QztBQUN0SztBQUNBO0FBQ0EsOEVBQThFLEtBQUs7QUFDbkYsZ0ZBQWdGLEtBQUs7QUFDckY7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLFFBQVE7QUFDdkM7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNHQUFzRyxvQkFBb0IsSUFBSTtBQUM5SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2NyZWF0ZV9jb2xsZWN0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DcmVhdGVDb2xsZWN0aW9uT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vY21hcC93aXJlX3Byb3RvY29sL2NvbnN0YW50c1wiKTtcbmNvbnN0IGNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi9jb2xsZWN0aW9uXCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBpbmRleGVzXzEgPSByZXF1aXJlKFwiLi9pbmRleGVzXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG5jb25zdCBJTExFR0FMX0NPTU1BTkRfRklFTERTID0gbmV3IFNldChbXG4gICAgJ3cnLFxuICAgICd3dGltZW91dCcsXG4gICAgJ2onLFxuICAgICdmc3luYycsXG4gICAgJ2F1dG9JbmRleElkJyxcbiAgICAncGtGYWN0b3J5JyxcbiAgICAncmF3JyxcbiAgICAncmVhZFByZWZlcmVuY2UnLFxuICAgICdzZXNzaW9uJyxcbiAgICAncmVhZENvbmNlcm4nLFxuICAgICd3cml0ZUNvbmNlcm4nLFxuICAgICdyYXcnLFxuICAgICdmaWVsZHNBc1JhdycsXG4gICAgJ3VzZUJpZ0ludDY0JyxcbiAgICAncHJvbW90ZUxvbmdzJyxcbiAgICAncHJvbW90ZVZhbHVlcycsXG4gICAgJ3Byb21vdGVCdWZmZXJzJyxcbiAgICAnYnNvblJlZ0V4cCcsXG4gICAgJ3NlcmlhbGl6ZUZ1bmN0aW9ucycsXG4gICAgJ2lnbm9yZVVuZGVmaW5lZCcsXG4gICAgJ2VuYWJsZVV0ZjhWYWxpZGF0aW9uJ1xuXSk7XG4vKiBAaW50ZXJuYWwgKi9cbmNvbnN0IElOVkFMSURfUUVfVkVSU0lPTiA9ICdEcml2ZXIgc3VwcG9ydCBvZiBRdWVyeWFibGUgRW5jcnlwdGlvbiBpcyBpbmNvbXBhdGlibGUgd2l0aCBzZXJ2ZXIuIFVwZ3JhZGUgc2VydmVyIHRvIHVzZSBRdWVyeWFibGUgRW5jcnlwdGlvbi4nO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgQ3JlYXRlQ29sbGVjdGlvbk9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihkYiwgbmFtZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKGRiLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5kYiA9IGRiO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnY3JlYXRlJztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgZGIgPSB0aGlzLmRiO1xuICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5uYW1lO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBlbmNyeXB0ZWRGaWVsZHMgPSBvcHRpb25zLmVuY3J5cHRlZEZpZWxkcyA/P1xuICAgICAgICAgICAgZGIuY2xpZW50Lm9wdGlvbnMuYXV0b0VuY3J5cHRpb24/LmVuY3J5cHRlZEZpZWxkc01hcD8uW2Ake2RiLmRhdGFiYXNlTmFtZX0uJHtuYW1lfWBdO1xuICAgICAgICBpZiAoZW5jcnlwdGVkRmllbGRzKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGluZyBhIFFFIGNvbGxlY3Rpb24gcmVxdWlyZWQgbWluIHNlcnZlciBvZiA3LjAuMFxuICAgICAgICAgICAgLy8gVE9ETyhOT0RFLTUzNTMpOiBHZXQgd2lyZSB2ZXJzaW9uIGluZm9ybWF0aW9uIGZyb20gY29ubmVjdGlvbi5cbiAgICAgICAgICAgIGlmICghc2VydmVyLmxvYWRCYWxhbmNlZCAmJlxuICAgICAgICAgICAgICAgIHNlcnZlci5kZXNjcmlwdGlvbi5tYXhXaXJlVmVyc2lvbiA8IGNvbnN0YW50c18xLk1JTl9TVVBQT1JURURfUUVfV0lSRV9WRVJTSU9OKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29Db21wYXRpYmlsaXR5RXJyb3IoYCR7SU5WQUxJRF9RRV9WRVJTSU9OfSBUaGUgbWluaW11bSBzZXJ2ZXIgdmVyc2lvbiByZXF1aXJlZCBpcyAke2NvbnN0YW50c18xLk1JTl9TVVBQT1JURURfUUVfU0VSVkVSX1ZFUlNJT059YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBDcmVhdGUgYXV4aWxsaWFyeSBjb2xsZWN0aW9ucyBmb3IgcXVlcnlhYmxlIGVuY3J5cHRpb24gc3VwcG9ydC5cbiAgICAgICAgICAgIGNvbnN0IGVzY0NvbGxlY3Rpb24gPSBlbmNyeXB0ZWRGaWVsZHMuZXNjQ29sbGVjdGlvbiA/PyBgZW54Y29sXy4ke25hbWV9LmVzY2A7XG4gICAgICAgICAgICBjb25zdCBlY29jQ29sbGVjdGlvbiA9IGVuY3J5cHRlZEZpZWxkcy5lY29jQ29sbGVjdGlvbiA/PyBgZW54Y29sXy4ke25hbWV9LmVjb2NgO1xuICAgICAgICAgICAgZm9yIChjb25zdCBjb2xsZWN0aW9uTmFtZSBvZiBbZXNjQ29sbGVjdGlvbiwgZWNvY0NvbGxlY3Rpb25dKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY3JlYXRlT3AgPSBuZXcgQ3JlYXRlQ29sbGVjdGlvbk9wZXJhdGlvbihkYiwgY29sbGVjdGlvbk5hbWUsIHtcbiAgICAgICAgICAgICAgICAgICAgY2x1c3RlcmVkSW5kZXg6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogeyBfaWQ6IDEgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuaXF1ZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYXdhaXQgY3JlYXRlT3AuZXhlY3V0ZVdpdGhvdXRFbmNyeXB0ZWRGaWVsZHNDaGVjayhzZXJ2ZXIsIHNlc3Npb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmVuY3J5cHRlZEZpZWxkcykge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IHsgLi4udGhpcy5vcHRpb25zLCBlbmNyeXB0ZWRGaWVsZHMgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb2xsID0gYXdhaXQgdGhpcy5leGVjdXRlV2l0aG91dEVuY3J5cHRlZEZpZWxkc0NoZWNrKHNlcnZlciwgc2Vzc2lvbik7XG4gICAgICAgIGlmIChlbmNyeXB0ZWRGaWVsZHMpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSB0aGUgcmVxdWlyZWQgaW5kZXggZm9yIHF1ZXJ5YWJsZSBlbmNyeXB0aW9uIHN1cHBvcnQuXG4gICAgICAgICAgICBjb25zdCBjcmVhdGVJbmRleE9wID0gaW5kZXhlc18xLkNyZWF0ZUluZGV4ZXNPcGVyYXRpb24uZnJvbUluZGV4U3BlY2lmaWNhdGlvbihkYiwgbmFtZSwgeyBfX3NhZmVDb250ZW50X186IDEgfSwge30pO1xuICAgICAgICAgICAgYXdhaXQgY3JlYXRlSW5kZXhPcC5leGVjdXRlKHNlcnZlciwgc2Vzc2lvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbGw7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGVXaXRob3V0RW5jcnlwdGVkRmllbGRzQ2hlY2soc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGRiID0gdGhpcy5kYjtcbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMubmFtZTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgY21kID0geyBjcmVhdGU6IG5hbWUgfTtcbiAgICAgICAgZm9yIChjb25zdCBuIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zW25dICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2Ygb3B0aW9uc1tuXSAhPT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICAgICAgICAgICFJTExFR0FMX0NPTU1BTkRfRklFTERTLmhhcyhuKSkge1xuICAgICAgICAgICAgICAgIGNtZFtuXSA9IG9wdGlvbnNbbl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gb3RoZXJ3aXNlIGp1c3QgZXhlY3V0ZSB0aGUgY29tbWFuZFxuICAgICAgICBhd2FpdCBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIGNtZCk7XG4gICAgICAgIHJldHVybiBuZXcgY29sbGVjdGlvbl8xLkNvbGxlY3Rpb24oZGIsIG5hbWUsIG9wdGlvbnMpO1xuICAgIH1cbn1cbmV4cG9ydHMuQ3JlYXRlQ29sbGVjdGlvbk9wZXJhdGlvbiA9IENyZWF0ZUNvbGxlY3Rpb25PcGVyYXRpb247XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoQ3JlYXRlQ29sbGVjdGlvbk9wZXJhdGlvbiwgW29wZXJhdGlvbl8xLkFzcGVjdC5XUklURV9PUEVSQVRJT05dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZV9jb2xsZWN0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/create_collection.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/delete.js":
/*!******************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/delete.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DeleteManyOperation = exports.DeleteOneOperation = exports.DeleteOperation = void 0;\nexports.makeDeleteStatement = makeDeleteStatement;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass DeleteOperation extends command_1.CommandOperation {\n    constructor(ns, statements, options) {\n        super(undefined, options);\n        this.options = options;\n        this.ns = ns;\n        this.statements = statements;\n    }\n    get commandName() {\n        return 'delete';\n    }\n    get canRetryWrite() {\n        if (super.canRetryWrite === false) {\n            return false;\n        }\n        return this.statements.every(op => (op.limit != null ? op.limit > 0 : true));\n    }\n    async execute(server, session) {\n        const options = this.options ?? {};\n        const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n        const command = {\n            delete: this.ns.collection,\n            deletes: this.statements,\n            ordered\n        };\n        if (options.let) {\n            command.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        const unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n        if (unacknowledgedWrite) {\n            if (this.statements.find((o) => o.hint)) {\n                // TODO(NODE-3541): fix error for hint with unacknowledged writes\n                throw new error_1.MongoCompatibilityError(`hint is not supported with unacknowledged writes`);\n            }\n        }\n        const res = await super.executeCommand(server, session, command);\n        return res;\n    }\n}\nexports.DeleteOperation = DeleteOperation;\nclass DeleteOneOperation extends DeleteOperation {\n    constructor(collection, filter, options) {\n        super(collection.s.namespace, [makeDeleteStatement(filter, { ...options, limit: 1 })], options);\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (this.explain)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            deletedCount: res.n\n        };\n    }\n}\nexports.DeleteOneOperation = DeleteOneOperation;\nclass DeleteManyOperation extends DeleteOperation {\n    constructor(collection, filter, options) {\n        super(collection.s.namespace, [makeDeleteStatement(filter, options)], options);\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (this.explain)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            deletedCount: res.n\n        };\n    }\n}\nexports.DeleteManyOperation = DeleteManyOperation;\nfunction makeDeleteStatement(filter, options) {\n    const op = {\n        q: filter,\n        limit: typeof options.limit === 'number' ? options.limit : 0\n    };\n    if (options.collation) {\n        op.collation = options.collation;\n    }\n    if (options.hint) {\n        op.hint = options.hint;\n    }\n    return op;\n}\n(0, operation_1.defineAspects)(DeleteOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DeleteOneOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n(0, operation_1.defineAspects)(DeleteManyOperation, [\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n//# sourceMappingURL=delete.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2RlbGV0ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkIsR0FBRywwQkFBMEIsR0FBRyx1QkFBdUI7QUFDbEYsMkJBQTJCO0FBQzNCLGdCQUFnQixtQkFBTyxDQUFDLDhGQUFVO0FBQ2xDLGtCQUFrQixtQkFBTyxDQUFDLDRHQUFXO0FBQ3JDLG9CQUFvQixtQkFBTyxDQUFDLGdIQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBLHFFQUFxRSxzQkFBc0I7QUFDM0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2RlbGV0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRGVsZXRlTWFueU9wZXJhdGlvbiA9IGV4cG9ydHMuRGVsZXRlT25lT3BlcmF0aW9uID0gZXhwb3J0cy5EZWxldGVPcGVyYXRpb24gPSB2b2lkIDA7XG5leHBvcnRzLm1ha2VEZWxldGVTdGF0ZW1lbnQgPSBtYWtlRGVsZXRlU3RhdGVtZW50O1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIERlbGV0ZU9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihucywgc3RhdGVtZW50cywgb3B0aW9ucykge1xuICAgICAgICBzdXBlcih1bmRlZmluZWQsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLm5zID0gbnM7XG4gICAgICAgIHRoaXMuc3RhdGVtZW50cyA9IHN0YXRlbWVudHM7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdkZWxldGUnO1xuICAgIH1cbiAgICBnZXQgY2FuUmV0cnlXcml0ZSgpIHtcbiAgICAgICAgaWYgKHN1cGVyLmNhblJldHJ5V3JpdGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGVtZW50cy5ldmVyeShvcCA9PiAob3AubGltaXQgIT0gbnVsbCA/IG9wLmxpbWl0ID4gMCA6IHRydWUpKTtcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyA/PyB7fTtcbiAgICAgICAgY29uc3Qgb3JkZXJlZCA9IHR5cGVvZiBvcHRpb25zLm9yZGVyZWQgPT09ICdib29sZWFuJyA/IG9wdGlvbnMub3JkZXJlZCA6IHRydWU7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSB7XG4gICAgICAgICAgICBkZWxldGU6IHRoaXMubnMuY29sbGVjdGlvbixcbiAgICAgICAgICAgIGRlbGV0ZXM6IHRoaXMuc3RhdGVtZW50cyxcbiAgICAgICAgICAgIG9yZGVyZWRcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG9wdGlvbnMubGV0KSB7XG4gICAgICAgICAgICBjb21tYW5kLmxldCA9IG9wdGlvbnMubGV0O1xuICAgICAgICB9XG4gICAgICAgIC8vIHdlIGNoZWNrIGZvciB1bmRlZmluZWQgc3BlY2lmaWNhbGx5IGhlcmUgdG8gYWxsb3cgZmFsc3kgdmFsdWVzXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBpZiAob3B0aW9ucy5jb21tZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbW1hbmQuY29tbWVudCA9IG9wdGlvbnMuY29tbWVudDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB1bmFja25vd2xlZGdlZFdyaXRlID0gdGhpcy53cml0ZUNvbmNlcm4gJiYgdGhpcy53cml0ZUNvbmNlcm4udyA9PT0gMDtcbiAgICAgICAgaWYgKHVuYWNrbm93bGVkZ2VkV3JpdGUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlbWVudHMuZmluZCgobykgPT4gby5oaW50KSkge1xuICAgICAgICAgICAgICAgIC8vIFRPRE8oTk9ERS0zNTQxKTogZml4IGVycm9yIGZvciBoaW50IHdpdGggdW5hY2tub3dsZWRnZWQgd3JpdGVzXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29Db21wYXRpYmlsaXR5RXJyb3IoYGhpbnQgaXMgbm90IHN1cHBvcnRlZCB3aXRoIHVuYWNrbm93bGVkZ2VkIHdyaXRlc2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgY29tbWFuZCk7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxufVxuZXhwb3J0cy5EZWxldGVPcGVyYXRpb24gPSBEZWxldGVPcGVyYXRpb247XG5jbGFzcyBEZWxldGVPbmVPcGVyYXRpb24gZXh0ZW5kcyBEZWxldGVPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIGZpbHRlciwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihjb2xsZWN0aW9uLnMubmFtZXNwYWNlLCBbbWFrZURlbGV0ZVN0YXRlbWVudChmaWx0ZXIsIHsgLi4ub3B0aW9ucywgbGltaXQ6IDEgfSldLCBvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgc3VwZXIuZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pO1xuICAgICAgICBpZiAodGhpcy5leHBsYWluKVxuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgaWYgKHJlcy5jb2RlKVxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29TZXJ2ZXJFcnJvcihyZXMpO1xuICAgICAgICBpZiAocmVzLndyaXRlRXJyb3JzKVxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29TZXJ2ZXJFcnJvcihyZXMud3JpdGVFcnJvcnNbMF0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWNrbm93bGVkZ2VkOiB0aGlzLndyaXRlQ29uY2Vybj8udyAhPT0gMCxcbiAgICAgICAgICAgIGRlbGV0ZWRDb3VudDogcmVzLm5cbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLkRlbGV0ZU9uZU9wZXJhdGlvbiA9IERlbGV0ZU9uZU9wZXJhdGlvbjtcbmNsYXNzIERlbGV0ZU1hbnlPcGVyYXRpb24gZXh0ZW5kcyBEZWxldGVPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIGZpbHRlciwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihjb2xsZWN0aW9uLnMubmFtZXNwYWNlLCBbbWFrZURlbGV0ZVN0YXRlbWVudChmaWx0ZXIsIG9wdGlvbnMpXSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHN1cGVyLmV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKTtcbiAgICAgICAgaWYgKHRoaXMuZXhwbGFpbilcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIGlmIChyZXMuY29kZSlcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvU2VydmVyRXJyb3IocmVzKTtcbiAgICAgICAgaWYgKHJlcy53cml0ZUVycm9ycylcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvU2VydmVyRXJyb3IocmVzLndyaXRlRXJyb3JzWzBdKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFja25vd2xlZGdlZDogdGhpcy53cml0ZUNvbmNlcm4/LncgIT09IDAsXG4gICAgICAgICAgICBkZWxldGVkQ291bnQ6IHJlcy5uXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5EZWxldGVNYW55T3BlcmF0aW9uID0gRGVsZXRlTWFueU9wZXJhdGlvbjtcbmZ1bmN0aW9uIG1ha2VEZWxldGVTdGF0ZW1lbnQoZmlsdGVyLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgb3AgPSB7XG4gICAgICAgIHE6IGZpbHRlcixcbiAgICAgICAgbGltaXQ6IHR5cGVvZiBvcHRpb25zLmxpbWl0ID09PSAnbnVtYmVyJyA/IG9wdGlvbnMubGltaXQgOiAwXG4gICAgfTtcbiAgICBpZiAob3B0aW9ucy5jb2xsYXRpb24pIHtcbiAgICAgICAgb3AuY29sbGF0aW9uID0gb3B0aW9ucy5jb2xsYXRpb247XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmhpbnQpIHtcbiAgICAgICAgb3AuaGludCA9IG9wdGlvbnMuaGludDtcbiAgICB9XG4gICAgcmV0dXJuIG9wO1xufVxuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKERlbGV0ZU9wZXJhdGlvbiwgW29wZXJhdGlvbl8xLkFzcGVjdC5SRVRSWUFCTEUsIG9wZXJhdGlvbl8xLkFzcGVjdC5XUklURV9PUEVSQVRJT05dKTtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShEZWxldGVPbmVPcGVyYXRpb24sIFtcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuUkVUUllBQkxFLFxuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5XUklURV9PUEVSQVRJT04sXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LkVYUExBSU5BQkxFLFxuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5TS0lQX0NPTExBVElPTlxuXSk7XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoRGVsZXRlTWFueU9wZXJhdGlvbiwgW1xuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5XUklURV9PUEVSQVRJT04sXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LkVYUExBSU5BQkxFLFxuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5TS0lQX0NPTExBVElPTlxuXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWxldGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/delete.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/distinct.js":
/*!********************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/distinct.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DistinctOperation = void 0;\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js\");\n/**\n * Return a list of distinct values for the given key across a collection.\n * @internal\n */\nclass DistinctOperation extends command_1.CommandOperation {\n    /**\n     * Construct a Distinct operation.\n     *\n     * @param collection - Collection instance.\n     * @param key - Field of the document to find distinct values for.\n     * @param query - The query for filtering the set of documents to which we apply the distinct filter.\n     * @param options - Optional settings. See Collection.prototype.distinct for a list of options.\n     */\n    constructor(collection, key, query, options) {\n        super(collection, options);\n        this.options = options ?? {};\n        this.collection = collection;\n        this.key = key;\n        this.query = query;\n    }\n    get commandName() {\n        return 'distinct';\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const key = this.key;\n        const query = this.query;\n        const options = this.options;\n        // Distinct command\n        const cmd = {\n            distinct: coll.collectionName,\n            key: key,\n            query: query\n        };\n        // Add maxTimeMS if defined\n        if (typeof options.maxTimeMS === 'number') {\n            cmd.maxTimeMS = options.maxTimeMS;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (typeof options.comment !== 'undefined') {\n            cmd.comment = options.comment;\n        }\n        // Do we have a readConcern specified\n        (0, utils_1.decorateWithReadConcern)(cmd, coll, options);\n        // Have we specified collation\n        (0, utils_1.decorateWithCollation)(cmd, coll, options);\n        const result = await super.executeCommand(server, session, cmd);\n        return this.explain ? result : result.values;\n    }\n}\nexports.DistinctOperation = DistinctOperation;\n(0, operation_1.defineAspects)(DistinctOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.EXPLAINABLE]);\n//# sourceMappingURL=distinct.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2Rpc3RpbmN0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6QixnQkFBZ0IsbUJBQU8sQ0FBQyw4RkFBVTtBQUNsQyxrQkFBa0IsbUJBQU8sQ0FBQyw0R0FBVztBQUNyQyxvQkFBb0IsbUJBQU8sQ0FBQyxnSEFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2xpbmt1cy9HaXRodWIvbW9ub3R3by9wYXlsb2FkLXBsdWdpbi1tZXRhL25vZGVfbW9kdWxlcy8ucG5wbS9tb25nb2RiQDYuMTAuMC9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9kaXN0aW5jdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRGlzdGluY3RPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqXG4gKiBSZXR1cm4gYSBsaXN0IG9mIGRpc3RpbmN0IHZhbHVlcyBmb3IgdGhlIGdpdmVuIGtleSBhY3Jvc3MgYSBjb2xsZWN0aW9uLlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIERpc3RpbmN0T3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdCBhIERpc3RpbmN0IG9wZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb2xsZWN0aW9uIC0gQ29sbGVjdGlvbiBpbnN0YW5jZS5cbiAgICAgKiBAcGFyYW0ga2V5IC0gRmllbGQgb2YgdGhlIGRvY3VtZW50IHRvIGZpbmQgZGlzdGluY3QgdmFsdWVzIGZvci5cbiAgICAgKiBAcGFyYW0gcXVlcnkgLSBUaGUgcXVlcnkgZm9yIGZpbHRlcmluZyB0aGUgc2V0IG9mIGRvY3VtZW50cyB0byB3aGljaCB3ZSBhcHBseSB0aGUgZGlzdGluY3QgZmlsdGVyLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwgc2V0dGluZ3MuIFNlZSBDb2xsZWN0aW9uLnByb3RvdHlwZS5kaXN0aW5jdCBmb3IgYSBsaXN0IG9mIG9wdGlvbnMuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwga2V5LCBxdWVyeSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihjb2xsZWN0aW9uLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyA/PyB7fTtcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICAgICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgICAgIHRoaXMucXVlcnkgPSBxdWVyeTtcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2Rpc3RpbmN0JztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgY29sbCA9IHRoaXMuY29sbGVjdGlvbjtcbiAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5rZXk7XG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gdGhpcy5xdWVyeTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgLy8gRGlzdGluY3QgY29tbWFuZFxuICAgICAgICBjb25zdCBjbWQgPSB7XG4gICAgICAgICAgICBkaXN0aW5jdDogY29sbC5jb2xsZWN0aW9uTmFtZSxcbiAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5XG4gICAgICAgIH07XG4gICAgICAgIC8vIEFkZCBtYXhUaW1lTVMgaWYgZGVmaW5lZFxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMubWF4VGltZU1TID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgY21kLm1heFRpbWVNUyA9IG9wdGlvbnMubWF4VGltZU1TO1xuICAgICAgICB9XG4gICAgICAgIC8vIHdlIGNoZWNrIGZvciB1bmRlZmluZWQgc3BlY2lmaWNhbGx5IGhlcmUgdG8gYWxsb3cgZmFsc3kgdmFsdWVzXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuY29tbWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGNtZC5jb21tZW50ID0gb3B0aW9ucy5jb21tZW50O1xuICAgICAgICB9XG4gICAgICAgIC8vIERvIHdlIGhhdmUgYSByZWFkQ29uY2VybiBzcGVjaWZpZWRcbiAgICAgICAgKDAsIHV0aWxzXzEuZGVjb3JhdGVXaXRoUmVhZENvbmNlcm4pKGNtZCwgY29sbCwgb3B0aW9ucyk7XG4gICAgICAgIC8vIEhhdmUgd2Ugc3BlY2lmaWVkIGNvbGxhdGlvblxuICAgICAgICAoMCwgdXRpbHNfMS5kZWNvcmF0ZVdpdGhDb2xsYXRpb24pKGNtZCwgY29sbCwgb3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgY21kKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXhwbGFpbiA/IHJlc3VsdCA6IHJlc3VsdC52YWx1ZXM7XG4gICAgfVxufVxuZXhwb3J0cy5EaXN0aW5jdE9wZXJhdGlvbiA9IERpc3RpbmN0T3BlcmF0aW9uO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKERpc3RpbmN0T3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LlJFQURfT1BFUkFUSU9OLCBvcGVyYXRpb25fMS5Bc3BlY3QuUkVUUllBQkxFLCBvcGVyYXRpb25fMS5Bc3BlY3QuRVhQTEFJTkFCTEVdKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpc3RpbmN0LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/distinct.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/drop.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/drop.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DropDatabaseOperation = exports.DropCollectionOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass DropCollectionOperation extends command_1.CommandOperation {\n    constructor(db, name, options = {}) {\n        super(db, options);\n        this.db = db;\n        this.options = options;\n        this.name = name;\n    }\n    get commandName() {\n        return 'drop';\n    }\n    async execute(server, session) {\n        const db = this.db;\n        const options = this.options;\n        const name = this.name;\n        const encryptedFieldsMap = db.client.options.autoEncryption?.encryptedFieldsMap;\n        let encryptedFields = options.encryptedFields ?? encryptedFieldsMap?.[`${db.databaseName}.${name}`];\n        if (!encryptedFields && encryptedFieldsMap) {\n            // If the MongoClient was configured with an encryptedFieldsMap,\n            // and no encryptedFields config was available in it or explicitly\n            // passed as an argument, the spec tells us to look one up using\n            // listCollections().\n            const listCollectionsResult = await db\n                .listCollections({ name }, { nameOnly: false })\n                .toArray();\n            encryptedFields = listCollectionsResult?.[0]?.options?.encryptedFields;\n        }\n        if (encryptedFields) {\n            const escCollection = encryptedFields.escCollection || `enxcol_.${name}.esc`;\n            const ecocCollection = encryptedFields.ecocCollection || `enxcol_.${name}.ecoc`;\n            for (const collectionName of [escCollection, ecocCollection]) {\n                // Drop auxilliary collections, ignoring potential NamespaceNotFound errors.\n                const dropOp = new DropCollectionOperation(db, collectionName);\n                try {\n                    await dropOp.executeWithoutEncryptedFieldsCheck(server, session);\n                }\n                catch (err) {\n                    if (!(err instanceof error_1.MongoServerError) ||\n                        err.code !== error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n                        throw err;\n                    }\n                }\n            }\n        }\n        return await this.executeWithoutEncryptedFieldsCheck(server, session);\n    }\n    async executeWithoutEncryptedFieldsCheck(server, session) {\n        await super.executeCommand(server, session, { drop: this.name });\n        return true;\n    }\n}\nexports.DropCollectionOperation = DropCollectionOperation;\n/** @internal */\nclass DropDatabaseOperation extends command_1.CommandOperation {\n    constructor(db, options) {\n        super(db, options);\n        this.options = options;\n    }\n    get commandName() {\n        return 'dropDatabase';\n    }\n    async execute(server, session) {\n        await super.executeCommand(server, session, { dropDatabase: 1 });\n        return true;\n    }\n}\nexports.DropDatabaseOperation = DropDatabaseOperation;\n(0, operation_1.defineAspects)(DropCollectionOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DropDatabaseOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=drop.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2Ryb3AuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNkJBQTZCLEdBQUcsK0JBQStCO0FBQy9ELGdCQUFnQixtQkFBTyxDQUFDLDhGQUFVO0FBQ2xDLGtCQUFrQixtQkFBTyxDQUFDLDRHQUFXO0FBQ3JDLG9CQUFvQixtQkFBTyxDQUFDLGdIQUFhO0FBQ3pDO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRkFBaUYsZ0JBQWdCLEdBQUcsS0FBSztBQUN6RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsTUFBTSxJQUFJLGlCQUFpQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhFQUE4RSxLQUFLO0FBQ25GLGdGQUFnRixLQUFLO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsaUJBQWlCO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxpQkFBaUI7QUFDdkU7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2xpbmt1cy9HaXRodWIvbW9ub3R3by9wYXlsb2FkLXBsdWdpbi1tZXRhL25vZGVfbW9kdWxlcy8ucG5wbS9tb25nb2RiQDYuMTAuMC9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9kcm9wLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Ecm9wRGF0YWJhc2VPcGVyYXRpb24gPSBleHBvcnRzLkRyb3BDb2xsZWN0aW9uT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIERyb3BDb2xsZWN0aW9uT3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGRiLCBuYW1lLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgc3VwZXIoZGIsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmRiID0gZGI7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdkcm9wJztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgZGIgPSB0aGlzLmRiO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5uYW1lO1xuICAgICAgICBjb25zdCBlbmNyeXB0ZWRGaWVsZHNNYXAgPSBkYi5jbGllbnQub3B0aW9ucy5hdXRvRW5jcnlwdGlvbj8uZW5jcnlwdGVkRmllbGRzTWFwO1xuICAgICAgICBsZXQgZW5jcnlwdGVkRmllbGRzID0gb3B0aW9ucy5lbmNyeXB0ZWRGaWVsZHMgPz8gZW5jcnlwdGVkRmllbGRzTWFwPy5bYCR7ZGIuZGF0YWJhc2VOYW1lfS4ke25hbWV9YF07XG4gICAgICAgIGlmICghZW5jcnlwdGVkRmllbGRzICYmIGVuY3J5cHRlZEZpZWxkc01hcCkge1xuICAgICAgICAgICAgLy8gSWYgdGhlIE1vbmdvQ2xpZW50IHdhcyBjb25maWd1cmVkIHdpdGggYW4gZW5jcnlwdGVkRmllbGRzTWFwLFxuICAgICAgICAgICAgLy8gYW5kIG5vIGVuY3J5cHRlZEZpZWxkcyBjb25maWcgd2FzIGF2YWlsYWJsZSBpbiBpdCBvciBleHBsaWNpdGx5XG4gICAgICAgICAgICAvLyBwYXNzZWQgYXMgYW4gYXJndW1lbnQsIHRoZSBzcGVjIHRlbGxzIHVzIHRvIGxvb2sgb25lIHVwIHVzaW5nXG4gICAgICAgICAgICAvLyBsaXN0Q29sbGVjdGlvbnMoKS5cbiAgICAgICAgICAgIGNvbnN0IGxpc3RDb2xsZWN0aW9uc1Jlc3VsdCA9IGF3YWl0IGRiXG4gICAgICAgICAgICAgICAgLmxpc3RDb2xsZWN0aW9ucyh7IG5hbWUgfSwgeyBuYW1lT25seTogZmFsc2UgfSlcbiAgICAgICAgICAgICAgICAudG9BcnJheSgpO1xuICAgICAgICAgICAgZW5jcnlwdGVkRmllbGRzID0gbGlzdENvbGxlY3Rpb25zUmVzdWx0Py5bMF0/Lm9wdGlvbnM/LmVuY3J5cHRlZEZpZWxkcztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW5jcnlwdGVkRmllbGRzKSB7XG4gICAgICAgICAgICBjb25zdCBlc2NDb2xsZWN0aW9uID0gZW5jcnlwdGVkRmllbGRzLmVzY0NvbGxlY3Rpb24gfHwgYGVueGNvbF8uJHtuYW1lfS5lc2NgO1xuICAgICAgICAgICAgY29uc3QgZWNvY0NvbGxlY3Rpb24gPSBlbmNyeXB0ZWRGaWVsZHMuZWNvY0NvbGxlY3Rpb24gfHwgYGVueGNvbF8uJHtuYW1lfS5lY29jYDtcbiAgICAgICAgICAgIGZvciAoY29uc3QgY29sbGVjdGlvbk5hbWUgb2YgW2VzY0NvbGxlY3Rpb24sIGVjb2NDb2xsZWN0aW9uXSkge1xuICAgICAgICAgICAgICAgIC8vIERyb3AgYXV4aWxsaWFyeSBjb2xsZWN0aW9ucywgaWdub3JpbmcgcG90ZW50aWFsIE5hbWVzcGFjZU5vdEZvdW5kIGVycm9ycy5cbiAgICAgICAgICAgICAgICBjb25zdCBkcm9wT3AgPSBuZXcgRHJvcENvbGxlY3Rpb25PcGVyYXRpb24oZGIsIGNvbGxlY3Rpb25OYW1lKTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBkcm9wT3AuZXhlY3V0ZVdpdGhvdXRFbmNyeXB0ZWRGaWVsZHNDaGVjayhzZXJ2ZXIsIHNlc3Npb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGVyciBpbnN0YW5jZW9mIGVycm9yXzEuTW9uZ29TZXJ2ZXJFcnJvcikgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVyci5jb2RlICE9PSBlcnJvcl8xLk1PTkdPREJfRVJST1JfQ09ERVMuTmFtZXNwYWNlTm90Rm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5leGVjdXRlV2l0aG91dEVuY3J5cHRlZEZpZWxkc0NoZWNrKHNlcnZlciwgc2Vzc2lvbik7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGVXaXRob3V0RW5jcnlwdGVkRmllbGRzQ2hlY2soc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgeyBkcm9wOiB0aGlzLm5hbWUgfSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbmV4cG9ydHMuRHJvcENvbGxlY3Rpb25PcGVyYXRpb24gPSBEcm9wQ29sbGVjdGlvbk9wZXJhdGlvbjtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIERyb3BEYXRhYmFzZU9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihkYiwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihkYiwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdkcm9wRGF0YWJhc2UnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBhd2FpdCBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIHsgZHJvcERhdGFiYXNlOiAxIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5leHBvcnRzLkRyb3BEYXRhYmFzZU9wZXJhdGlvbiA9IERyb3BEYXRhYmFzZU9wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShEcm9wQ29sbGVjdGlvbk9wZXJhdGlvbiwgW29wZXJhdGlvbl8xLkFzcGVjdC5XUklURV9PUEVSQVRJT05dKTtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShEcm9wRGF0YWJhc2VPcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kcm9wLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/drop.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/estimated_document_count.js":
/*!************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/estimated_document_count.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EstimatedDocumentCountOperation = void 0;\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass EstimatedDocumentCountOperation extends command_1.CommandOperation {\n    constructor(collection, options = {}) {\n        super(collection, options);\n        this.options = options;\n        this.collectionName = collection.collectionName;\n    }\n    get commandName() {\n        return 'count';\n    }\n    async execute(server, session) {\n        const cmd = { count: this.collectionName };\n        if (typeof this.options.maxTimeMS === 'number') {\n            cmd.maxTimeMS = this.options.maxTimeMS;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (this.options.comment !== undefined) {\n            cmd.comment = this.options.comment;\n        }\n        const response = await super.executeCommand(server, session, cmd);\n        return response?.n || 0;\n    }\n}\nexports.EstimatedDocumentCountOperation = EstimatedDocumentCountOperation;\n(0, operation_1.defineAspects)(EstimatedDocumentCountOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n//# sourceMappingURL=estimated_document_count.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2VzdGltYXRlZF9kb2N1bWVudF9jb3VudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1Q0FBdUM7QUFDdkMsa0JBQWtCLG1CQUFPLENBQUMsNEdBQVc7QUFDckMsb0JBQW9CLG1CQUFPLENBQUMsZ0hBQWE7QUFDekM7QUFDQTtBQUNBLHdDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9saW5rdXMvR2l0aHViL21vbm90d28vcGF5bG9hZC1wbHVnaW4tbWV0YS9ub2RlX21vZHVsZXMvLnBucG0vbW9uZ29kYkA2LjEwLjAvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvZXN0aW1hdGVkX2RvY3VtZW50X2NvdW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Fc3RpbWF0ZWREb2N1bWVudENvdW50T3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgRXN0aW1hdGVkRG9jdW1lbnRDb3VudE9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgc3VwZXIoY29sbGVjdGlvbiwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbk5hbWUgPSBjb2xsZWN0aW9uLmNvbGxlY3Rpb25OYW1lO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnY291bnQnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBjbWQgPSB7IGNvdW50OiB0aGlzLmNvbGxlY3Rpb25OYW1lIH07XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLm1heFRpbWVNUyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGNtZC5tYXhUaW1lTVMgPSB0aGlzLm9wdGlvbnMubWF4VGltZU1TO1xuICAgICAgICB9XG4gICAgICAgIC8vIHdlIGNoZWNrIGZvciB1bmRlZmluZWQgc3BlY2lmaWNhbGx5IGhlcmUgdG8gYWxsb3cgZmFsc3kgdmFsdWVzXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNvbW1lbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY21kLmNvbW1lbnQgPSB0aGlzLm9wdGlvbnMuY29tbWVudDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgY21kKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlPy5uIHx8IDA7XG4gICAgfVxufVxuZXhwb3J0cy5Fc3RpbWF0ZWREb2N1bWVudENvdW50T3BlcmF0aW9uID0gRXN0aW1hdGVkRG9jdW1lbnRDb3VudE9wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShFc3RpbWF0ZWREb2N1bWVudENvdW50T3BlcmF0aW9uLCBbXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LlJFQURfT1BFUkFUSU9OLFxuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5SRVRSWUFCTEUsXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LkNVUlNPUl9DUkVBVElOR1xuXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lc3RpbWF0ZWRfZG9jdW1lbnRfY291bnQuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/estimated_document_count.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/execute_operation.js":
/*!*****************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/execute_operation.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.executeOperation = executeOperation;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_preference.js\");\nconst server_selection_1 = __webpack_require__(/*! ../sdam/server_selection */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/server_selection.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js\");\nconst MMAPv1_RETRY_WRITES_ERROR_CODE = error_1.MONGODB_ERROR_CODES.IllegalOperation;\nconst MMAPv1_RETRY_WRITES_ERROR_MESSAGE = 'This MongoDB deployment does not support retryable writes. Please add retryWrites=false to your connection string.';\n/**\n * Executes the given operation with provided arguments.\n * @internal\n *\n * @remarks\n * Allows for a single point of entry to provide features such as implicit sessions, which\n * are required by the Driver Sessions specification in the event that a ClientSession is\n * not provided.\n *\n * The expectation is that this function:\n * - Connects the MongoClient if it has not already been connected, see {@link autoConnect}\n * - Creates a session if none is provided and cleans up the session it creates\n * - Tries an operation and retries under certain conditions, see {@link tryOperation}\n *\n * @typeParam T - The operation's type\n * @typeParam TResult - The type of the operation's result, calculated from T\n *\n * @param client - The MongoClient to execute this operation with\n * @param operation - The operation to execute\n */\nasync function executeOperation(client, operation) {\n    if (!(operation instanceof operation_1.AbstractOperation)) {\n        // TODO(NODE-3483): Extend MongoRuntimeError\n        throw new error_1.MongoRuntimeError('This method requires a valid operation instance');\n    }\n    const topology = await autoConnect(client);\n    // The driver sessions spec mandates that we implicitly create sessions for operations\n    // that are not explicitly provided with a session.\n    let session = operation.session;\n    let owner;\n    if (session == null) {\n        owner = Symbol();\n        session = client.startSession({ owner, explicit: false });\n    }\n    else if (session.hasEnded) {\n        throw new error_1.MongoExpiredSessionError('Use of expired sessions is not permitted');\n    }\n    else if (session.snapshotEnabled && !topology.capabilities.supportsSnapshotReads) {\n        throw new error_1.MongoCompatibilityError('Snapshot reads require MongoDB 5.0 or later');\n    }\n    else if (session.client !== client) {\n        throw new error_1.MongoInvalidArgumentError('ClientSession must be from the same MongoClient');\n    }\n    if (session.explicit && session?.timeoutMS != null && operation.options.timeoutMS != null) {\n        throw new error_1.MongoInvalidArgumentError('Do not specify timeoutMS on operation if already specified on an explicit session');\n    }\n    const readPreference = operation.readPreference ?? read_preference_1.ReadPreference.primary;\n    const inTransaction = !!session?.inTransaction();\n    const hasReadAspect = operation.hasAspect(operation_1.Aspect.READ_OPERATION);\n    if (inTransaction &&\n        !readPreference.equals(read_preference_1.ReadPreference.primary) &&\n        (hasReadAspect || operation.commandName === 'runCommand')) {\n        throw new error_1.MongoTransactionError(`Read preference in a transaction must be primary, not: ${readPreference.mode}`);\n    }\n    if (session?.isPinned && session.transaction.isCommitted && !operation.bypassPinningCheck) {\n        session.unpin();\n    }\n    try {\n        return await tryOperation(operation, {\n            topology,\n            session,\n            readPreference\n        });\n    }\n    finally {\n        if (session?.owner != null && session.owner === owner) {\n            await session.endSession();\n        }\n    }\n}\n/**\n * Connects a client if it has not yet been connected\n * @internal\n */\nasync function autoConnect(client) {\n    if (client.topology == null) {\n        if (client.s.hasBeenClosed) {\n            throw new error_1.MongoNotConnectedError('Client must be connected before running operations');\n        }\n        client.s.options[Symbol.for('@@mdb.skipPingOnConnect')] = true;\n        try {\n            await client.connect();\n            if (client.topology == null) {\n                throw new error_1.MongoRuntimeError('client.connect did not create a topology but also did not throw');\n            }\n            return client.topology;\n        }\n        finally {\n            delete client.s.options[Symbol.for('@@mdb.skipPingOnConnect')];\n        }\n    }\n    return client.topology;\n}\n/**\n * Executes an operation and retries as appropriate\n * @internal\n *\n * @remarks\n * Implements behaviour described in [Retryable Reads](https://github.com/mongodb/specifications/blob/master/source/retryable-reads/retryable-reads.md) and [Retryable\n * Writes](https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.md) specification\n *\n * This function:\n * - performs initial server selection\n * - attempts to execute an operation\n * - retries the operation if it meets the criteria for a retryable read or a retryable write\n *\n * @typeParam T - The operation's type\n * @typeParam TResult - The type of the operation's result, calculated from T\n *\n * @param operation - The operation to execute\n * */\nasync function tryOperation(operation, { topology, session, readPreference }) {\n    let selector;\n    if (operation.hasAspect(operation_1.Aspect.MUST_SELECT_SAME_SERVER)) {\n        // GetMore and KillCursor operations must always select the same server, but run through\n        // server selection to potentially force monitor checks if the server is\n        // in an unknown state.\n        selector = (0, server_selection_1.sameServerSelector)(operation.server?.description);\n    }\n    else if (operation.trySecondaryWrite) {\n        // If operation should try to write to secondary use the custom server selector\n        // otherwise provide the read preference.\n        selector = (0, server_selection_1.secondaryWritableServerSelector)(topology.commonWireVersion, readPreference);\n    }\n    else {\n        selector = readPreference;\n    }\n    let server = await topology.selectServer(selector, {\n        session,\n        operationName: operation.commandName\n    });\n    const hasReadAspect = operation.hasAspect(operation_1.Aspect.READ_OPERATION);\n    const hasWriteAspect = operation.hasAspect(operation_1.Aspect.WRITE_OPERATION);\n    const inTransaction = session?.inTransaction() ?? false;\n    const willRetryRead = topology.s.options.retryReads && !inTransaction && operation.canRetryRead;\n    const willRetryWrite = topology.s.options.retryWrites &&\n        !inTransaction &&\n        (0, utils_1.supportsRetryableWrites)(server) &&\n        operation.canRetryWrite;\n    const willRetry = operation.hasAspect(operation_1.Aspect.RETRYABLE) &&\n        session != null &&\n        ((hasReadAspect && willRetryRead) || (hasWriteAspect && willRetryWrite));\n    if (hasWriteAspect && willRetryWrite && session != null) {\n        operation.options.willRetryWrite = true;\n        session.incrementTransactionNumber();\n    }\n    // TODO(NODE-6231): implement infinite retry within CSOT timeout here\n    const maxTries = willRetry ? 2 : 1;\n    let previousOperationError;\n    let previousServer;\n    // TODO(NODE-6231): implement infinite retry within CSOT timeout here\n    for (let tries = 0; tries < maxTries; tries++) {\n        if (previousOperationError) {\n            if (hasWriteAspect && previousOperationError.code === MMAPv1_RETRY_WRITES_ERROR_CODE) {\n                throw new error_1.MongoServerError({\n                    message: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n                    errmsg: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n                    originalError: previousOperationError\n                });\n            }\n            if (operation.hasAspect(operation_1.Aspect.COMMAND_BATCHING) && !operation.canRetryWrite) {\n                throw previousOperationError;\n            }\n            if (hasWriteAspect && !(0, error_1.isRetryableWriteError)(previousOperationError))\n                throw previousOperationError;\n            if (hasReadAspect && !(0, error_1.isRetryableReadError)(previousOperationError))\n                throw previousOperationError;\n            if (previousOperationError instanceof error_1.MongoNetworkError &&\n                operation.hasAspect(operation_1.Aspect.CURSOR_CREATING) &&\n                session != null &&\n                session.isPinned &&\n                !session.inTransaction()) {\n                session.unpin({ force: true, forceClear: true });\n            }\n            server = await topology.selectServer(selector, {\n                session,\n                operationName: operation.commandName,\n                previousServer\n            });\n            if (hasWriteAspect && !(0, utils_1.supportsRetryableWrites)(server)) {\n                throw new error_1.MongoUnexpectedServerResponseError('Selected server does not support retryable writes');\n            }\n        }\n        try {\n            // If tries > 0 and we are command batching we need to reset the batch.\n            if (tries > 0 && operation.hasAspect(operation_1.Aspect.COMMAND_BATCHING)) {\n                operation.resetBatch();\n            }\n            return await operation.execute(server, session);\n        }\n        catch (operationError) {\n            if (!(operationError instanceof error_1.MongoError))\n                throw operationError;\n            if (previousOperationError != null &&\n                operationError.hasErrorLabel(error_1.MongoErrorLabel.NoWritesPerformed)) {\n                throw previousOperationError;\n            }\n            previousServer = server.description;\n            previousOperationError = operationError;\n        }\n    }\n    throw (previousOperationError ??\n        new error_1.MongoRuntimeError('Tried to propagate retryability error, but no error was found.'));\n}\n//# sourceMappingURL=execute_operation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/execute_operation.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/find.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/find.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FindOperation = void 0;\nconst responses_1 = __webpack_require__(/*! ../cmap/wire_protocol/responses */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/responses.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst read_concern_1 = __webpack_require__(/*! ../read_concern */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_concern.js\");\nconst sort_1 = __webpack_require__(/*! ../sort */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sort.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass FindOperation extends command_1.CommandOperation {\n    constructor(ns, filter = {}, options = {}) {\n        super(undefined, options);\n        this.options = { ...options };\n        delete this.options.writeConcern;\n        this.ns = ns;\n        if (typeof filter !== 'object' || Array.isArray(filter)) {\n            throw new error_1.MongoInvalidArgumentError('Query filter must be a plain object or ObjectId');\n        }\n        // special case passing in an ObjectId as a filter\n        this.filter = filter != null && filter._bsontype === 'ObjectId' ? { _id: filter } : filter;\n    }\n    get commandName() {\n        return 'find';\n    }\n    async execute(server, session) {\n        this.server = server;\n        const options = this.options;\n        let findCommand = makeFindCommand(this.ns, this.filter, options);\n        if (this.explain) {\n            findCommand = (0, utils_1.decorateWithExplain)(findCommand, this.explain);\n        }\n        return await server.command(this.ns, findCommand, {\n            ...this.options,\n            ...this.bsonOptions,\n            documentsReturnedIn: 'firstBatch',\n            session\n        }, this.explain ? responses_1.ExplainedCursorResponse : responses_1.CursorResponse);\n    }\n}\nexports.FindOperation = FindOperation;\nfunction makeFindCommand(ns, filter, options) {\n    const findCommand = {\n        find: ns.collection,\n        filter\n    };\n    if (options.sort) {\n        findCommand.sort = (0, sort_1.formatSort)(options.sort);\n    }\n    if (options.projection) {\n        let projection = options.projection;\n        if (projection && Array.isArray(projection)) {\n            projection = projection.length\n                ? projection.reduce((result, field) => {\n                    result[field] = 1;\n                    return result;\n                }, {})\n                : { _id: 1 };\n        }\n        findCommand.projection = projection;\n    }\n    if (options.hint) {\n        findCommand.hint = (0, utils_1.normalizeHintField)(options.hint);\n    }\n    if (typeof options.skip === 'number') {\n        findCommand.skip = options.skip;\n    }\n    if (typeof options.limit === 'number') {\n        if (options.limit < 0) {\n            findCommand.limit = -options.limit;\n            findCommand.singleBatch = true;\n        }\n        else {\n            findCommand.limit = options.limit;\n        }\n    }\n    if (typeof options.batchSize === 'number') {\n        if (options.batchSize < 0) {\n            if (options.limit &&\n                options.limit !== 0 &&\n                Math.abs(options.batchSize) < Math.abs(options.limit)) {\n                findCommand.limit = -options.batchSize;\n            }\n            findCommand.singleBatch = true;\n        }\n        else {\n            findCommand.batchSize = options.batchSize;\n        }\n    }\n    if (typeof options.singleBatch === 'boolean') {\n        findCommand.singleBatch = options.singleBatch;\n    }\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n        findCommand.comment = options.comment;\n    }\n    if (typeof options.maxTimeMS === 'number') {\n        findCommand.maxTimeMS = options.maxTimeMS;\n    }\n    const readConcern = read_concern_1.ReadConcern.fromOptions(options);\n    if (readConcern) {\n        findCommand.readConcern = readConcern.toJSON();\n    }\n    if (options.max) {\n        findCommand.max = options.max;\n    }\n    if (options.min) {\n        findCommand.min = options.min;\n    }\n    if (typeof options.returnKey === 'boolean') {\n        findCommand.returnKey = options.returnKey;\n    }\n    if (typeof options.showRecordId === 'boolean') {\n        findCommand.showRecordId = options.showRecordId;\n    }\n    if (typeof options.tailable === 'boolean') {\n        findCommand.tailable = options.tailable;\n    }\n    if (typeof options.oplogReplay === 'boolean') {\n        findCommand.oplogReplay = options.oplogReplay;\n    }\n    if (typeof options.timeout === 'boolean') {\n        findCommand.noCursorTimeout = !options.timeout;\n    }\n    else if (typeof options.noCursorTimeout === 'boolean') {\n        findCommand.noCursorTimeout = options.noCursorTimeout;\n    }\n    if (typeof options.awaitData === 'boolean') {\n        findCommand.awaitData = options.awaitData;\n    }\n    if (typeof options.allowPartialResults === 'boolean') {\n        findCommand.allowPartialResults = options.allowPartialResults;\n    }\n    if (options.collation) {\n        findCommand.collation = options.collation;\n    }\n    if (typeof options.allowDiskUse === 'boolean') {\n        findCommand.allowDiskUse = options.allowDiskUse;\n    }\n    if (options.let) {\n        findCommand.let = options.let;\n    }\n    return findCommand;\n}\n(0, operation_1.defineAspects)(FindOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n//# sourceMappingURL=find.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/find.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/find_and_modify.js":
/*!***************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/find_and_modify.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FindOneAndUpdateOperation = exports.FindOneAndReplaceOperation = exports.FindOneAndDeleteOperation = exports.FindAndModifyOperation = exports.ReturnDocument = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_preference.js\");\nconst sort_1 = __webpack_require__(/*! ../sort */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sort.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @public */\nexports.ReturnDocument = Object.freeze({\n    BEFORE: 'before',\n    AFTER: 'after'\n});\nfunction configureFindAndModifyCmdBaseUpdateOpts(cmdBase, options) {\n    cmdBase.new = options.returnDocument === exports.ReturnDocument.AFTER;\n    cmdBase.upsert = options.upsert === true;\n    if (options.bypassDocumentValidation === true) {\n        cmdBase.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n    return cmdBase;\n}\n/** @internal */\nclass FindAndModifyOperation extends command_1.CommandOperation {\n    constructor(collection, query, options) {\n        super(collection, options);\n        this.options = options ?? {};\n        this.cmdBase = {\n            remove: false,\n            new: false,\n            upsert: false\n        };\n        options.includeResultMetadata ??= false;\n        const sort = (0, sort_1.formatSort)(options.sort);\n        if (sort) {\n            this.cmdBase.sort = sort;\n        }\n        if (options.projection) {\n            this.cmdBase.fields = options.projection;\n        }\n        if (options.maxTimeMS) {\n            this.cmdBase.maxTimeMS = options.maxTimeMS;\n        }\n        // Decorate the findAndModify command with the write Concern\n        if (options.writeConcern) {\n            this.cmdBase.writeConcern = options.writeConcern;\n        }\n        if (options.let) {\n            this.cmdBase.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            this.cmdBase.comment = options.comment;\n        }\n        // force primary read preference\n        this.readPreference = read_preference_1.ReadPreference.primary;\n        this.collection = collection;\n        this.query = query;\n    }\n    get commandName() {\n        return 'findAndModify';\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const query = this.query;\n        const options = { ...this.options, ...this.bsonOptions };\n        // Create findAndModify command object\n        const cmd = {\n            findAndModify: coll.collectionName,\n            query: query,\n            ...this.cmdBase\n        };\n        (0, utils_1.decorateWithCollation)(cmd, coll, options);\n        if (options.hint) {\n            // TODO: once this method becomes a CommandOperation we will have the server\n            // in place to check.\n            const unacknowledgedWrite = this.writeConcern?.w === 0;\n            if (unacknowledgedWrite || (0, utils_1.maxWireVersion)(server) < 8) {\n                throw new error_1.MongoCompatibilityError('The current topology does not support a hint on findAndModify commands');\n            }\n            cmd.hint = options.hint;\n        }\n        // Execute the command\n        const result = await super.executeCommand(server, session, cmd);\n        return options.includeResultMetadata ? result : (result.value ?? null);\n    }\n}\nexports.FindAndModifyOperation = FindAndModifyOperation;\n/** @internal */\nclass FindOneAndDeleteOperation extends FindAndModifyOperation {\n    constructor(collection, filter, options) {\n        // Basic validation\n        if (filter == null || typeof filter !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n        }\n        super(collection, filter, options);\n        this.cmdBase.remove = true;\n    }\n}\nexports.FindOneAndDeleteOperation = FindOneAndDeleteOperation;\n/** @internal */\nclass FindOneAndReplaceOperation extends FindAndModifyOperation {\n    constructor(collection, filter, replacement, options) {\n        if (filter == null || typeof filter !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n        }\n        if (replacement == null || typeof replacement !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"replacement\" must be an object');\n        }\n        if ((0, utils_1.hasAtomicOperators)(replacement)) {\n            throw new error_1.MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n        }\n        super(collection, filter, options);\n        this.cmdBase.update = replacement;\n        configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n    }\n}\nexports.FindOneAndReplaceOperation = FindOneAndReplaceOperation;\n/** @internal */\nclass FindOneAndUpdateOperation extends FindAndModifyOperation {\n    constructor(collection, filter, update, options) {\n        if (filter == null || typeof filter !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n        }\n        if (update == null || typeof update !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"update\" must be an object');\n        }\n        if (!(0, utils_1.hasAtomicOperators)(update)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        super(collection, filter, options);\n        this.cmdBase.update = update;\n        configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n        if (options.arrayFilters) {\n            this.cmdBase.arrayFilters = options.arrayFilters;\n        }\n    }\n}\nexports.FindOneAndUpdateOperation = FindOneAndUpdateOperation;\n(0, operation_1.defineAspects)(FindAndModifyOperation, [\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.EXPLAINABLE\n]);\n//# sourceMappingURL=find_and_modify.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/find_and_modify.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/get_more.js":
/*!********************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/get_more.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GetMoreOperation = void 0;\nconst responses_1 = __webpack_require__(/*! ../cmap/wire_protocol/responses */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/responses.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass GetMoreOperation extends operation_1.AbstractOperation {\n    constructor(ns, cursorId, server, options) {\n        super(options);\n        this.options = options;\n        this.ns = ns;\n        this.cursorId = cursorId;\n        this.server = server;\n    }\n    get commandName() {\n        return 'getMore';\n    }\n    /**\n     * Although there is a server already associated with the get more operation, the signature\n     * for execute passes a server so we will just use that one.\n     */\n    async execute(server, _session) {\n        if (server !== this.server) {\n            throw new error_1.MongoRuntimeError('Getmore must run on the same server operation began on');\n        }\n        if (this.cursorId == null || this.cursorId.isZero()) {\n            throw new error_1.MongoRuntimeError('Unable to iterate cursor with no id');\n        }\n        const collection = this.ns.collection;\n        if (collection == null) {\n            // Cursors should have adopted the namespace returned by MongoDB\n            // which should always defined a collection name (even a pseudo one, ex. db.aggregate())\n            throw new error_1.MongoRuntimeError('A collection name must be determined before getMore');\n        }\n        const getMoreCmd = {\n            getMore: this.cursorId,\n            collection\n        };\n        if (typeof this.options.batchSize === 'number') {\n            getMoreCmd.batchSize = Math.abs(this.options.batchSize);\n        }\n        if (typeof this.options.maxAwaitTimeMS === 'number') {\n            getMoreCmd.maxTimeMS = this.options.maxAwaitTimeMS;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (this.options.comment !== undefined && (0, utils_1.maxWireVersion)(server) >= 9) {\n            getMoreCmd.comment = this.options.comment;\n        }\n        const commandOptions = {\n            returnFieldSelector: null,\n            documentsReturnedIn: 'nextBatch',\n            ...this.options\n        };\n        return await server.command(this.ns, getMoreCmd, commandOptions, responses_1.CursorResponse);\n    }\n}\nexports.GetMoreOperation = GetMoreOperation;\n(0, operation_1.defineAspects)(GetMoreOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.MUST_SELECT_SAME_SERVER]);\n//# sourceMappingURL=get_more.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2dldF9tb3JlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4QixvQkFBb0IsbUJBQU8sQ0FBQyw0SUFBaUM7QUFDN0QsZ0JBQWdCLG1CQUFPLENBQUMsOEZBQVU7QUFDbEMsZ0JBQWdCLG1CQUFPLENBQUMsOEZBQVU7QUFDbEMsb0JBQW9CLG1CQUFPLENBQUMsZ0hBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2xpbmt1cy9HaXRodWIvbW9ub3R3by9wYXlsb2FkLXBsdWdpbi1tZXRhL25vZGVfbW9kdWxlcy8ucG5wbS9tb25nb2RiQDYuMTAuMC9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9nZXRfbW9yZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuR2V0TW9yZU9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IHJlc3BvbnNlc18xID0gcmVxdWlyZShcIi4uL2NtYXAvd2lyZV9wcm90b2NvbC9yZXNwb25zZXNcIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgR2V0TW9yZU9wZXJhdGlvbiBleHRlbmRzIG9wZXJhdGlvbl8xLkFic3RyYWN0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihucywgY3Vyc29ySWQsIHNlcnZlciwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5ucyA9IG5zO1xuICAgICAgICB0aGlzLmN1cnNvcklkID0gY3Vyc29ySWQ7XG4gICAgICAgIHRoaXMuc2VydmVyID0gc2VydmVyO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnZ2V0TW9yZSc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFsdGhvdWdoIHRoZXJlIGlzIGEgc2VydmVyIGFscmVhZHkgYXNzb2NpYXRlZCB3aXRoIHRoZSBnZXQgbW9yZSBvcGVyYXRpb24sIHRoZSBzaWduYXR1cmVcbiAgICAgKiBmb3IgZXhlY3V0ZSBwYXNzZXMgYSBzZXJ2ZXIgc28gd2Ugd2lsbCBqdXN0IHVzZSB0aGF0IG9uZS5cbiAgICAgKi9cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgX3Nlc3Npb24pIHtcbiAgICAgICAgaWYgKHNlcnZlciAhPT0gdGhpcy5zZXJ2ZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKCdHZXRtb3JlIG11c3QgcnVuIG9uIHRoZSBzYW1lIHNlcnZlciBvcGVyYXRpb24gYmVnYW4gb24nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jdXJzb3JJZCA9PSBudWxsIHx8IHRoaXMuY3Vyc29ySWQuaXNaZXJvKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKCdVbmFibGUgdG8gaXRlcmF0ZSBjdXJzb3Igd2l0aCBubyBpZCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSB0aGlzLm5zLmNvbGxlY3Rpb247XG4gICAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIEN1cnNvcnMgc2hvdWxkIGhhdmUgYWRvcHRlZCB0aGUgbmFtZXNwYWNlIHJldHVybmVkIGJ5IE1vbmdvREJcbiAgICAgICAgICAgIC8vIHdoaWNoIHNob3VsZCBhbHdheXMgZGVmaW5lZCBhIGNvbGxlY3Rpb24gbmFtZSAoZXZlbiBhIHBzZXVkbyBvbmUsIGV4LiBkYi5hZ2dyZWdhdGUoKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKCdBIGNvbGxlY3Rpb24gbmFtZSBtdXN0IGJlIGRldGVybWluZWQgYmVmb3JlIGdldE1vcmUnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBnZXRNb3JlQ21kID0ge1xuICAgICAgICAgICAgZ2V0TW9yZTogdGhpcy5jdXJzb3JJZCxcbiAgICAgICAgICAgIGNvbGxlY3Rpb25cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMuYmF0Y2hTaXplID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgZ2V0TW9yZUNtZC5iYXRjaFNpemUgPSBNYXRoLmFicyh0aGlzLm9wdGlvbnMuYmF0Y2hTaXplKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5tYXhBd2FpdFRpbWVNUyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGdldE1vcmVDbWQubWF4VGltZU1TID0gdGhpcy5vcHRpb25zLm1heEF3YWl0VGltZU1TO1xuICAgICAgICB9XG4gICAgICAgIC8vIHdlIGNoZWNrIGZvciB1bmRlZmluZWQgc3BlY2lmaWNhbGx5IGhlcmUgdG8gYWxsb3cgZmFsc3kgdmFsdWVzXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNvbW1lbnQgIT09IHVuZGVmaW5lZCAmJiAoMCwgdXRpbHNfMS5tYXhXaXJlVmVyc2lvbikoc2VydmVyKSA+PSA5KSB7XG4gICAgICAgICAgICBnZXRNb3JlQ21kLmNvbW1lbnQgPSB0aGlzLm9wdGlvbnMuY29tbWVudDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb21tYW5kT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHJldHVybkZpZWxkU2VsZWN0b3I6IG51bGwsXG4gICAgICAgICAgICBkb2N1bWVudHNSZXR1cm5lZEluOiAnbmV4dEJhdGNoJyxcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9uc1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gYXdhaXQgc2VydmVyLmNvbW1hbmQodGhpcy5ucywgZ2V0TW9yZUNtZCwgY29tbWFuZE9wdGlvbnMsIHJlc3BvbnNlc18xLkN1cnNvclJlc3BvbnNlKTtcbiAgICB9XG59XG5leHBvcnRzLkdldE1vcmVPcGVyYXRpb24gPSBHZXRNb3JlT3BlcmF0aW9uO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKEdldE1vcmVPcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuUkVBRF9PUEVSQVRJT04sIG9wZXJhdGlvbl8xLkFzcGVjdC5NVVNUX1NFTEVDVF9TQU1FX1NFUlZFUl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0X21vcmUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/get_more.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/indexes.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/indexes.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ListIndexesOperation = exports.DropIndexOperation = exports.CreateIndexesOperation = void 0;\nconst responses_1 = __webpack_require__(/*! ../cmap/wire_protocol/responses */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/responses.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js\");\nconst VALID_INDEX_OPTIONS = new Set([\n    'background',\n    'unique',\n    'name',\n    'partialFilterExpression',\n    'sparse',\n    'hidden',\n    'expireAfterSeconds',\n    'storageEngine',\n    'collation',\n    'version',\n    // text indexes\n    'weights',\n    'default_language',\n    'language_override',\n    'textIndexVersion',\n    // 2d-sphere indexes\n    '2dsphereIndexVersion',\n    // 2d indexes\n    'bits',\n    'min',\n    'max',\n    // geoHaystack Indexes\n    'bucketSize',\n    // wildcard indexes\n    'wildcardProjection'\n]);\nfunction isIndexDirection(x) {\n    return (typeof x === 'number' || x === '2d' || x === '2dsphere' || x === 'text' || x === 'geoHaystack');\n}\nfunction isSingleIndexTuple(t) {\n    return Array.isArray(t) && t.length === 2 && isIndexDirection(t[1]);\n}\n/**\n * Converts an `IndexSpecification`, which can be specified in multiple formats, into a\n * valid `key` for the createIndexes command.\n */\nfunction constructIndexDescriptionMap(indexSpec) {\n    const key = new Map();\n    const indexSpecs = !Array.isArray(indexSpec) || isSingleIndexTuple(indexSpec) ? [indexSpec] : indexSpec;\n    // Iterate through array and handle different types\n    for (const spec of indexSpecs) {\n        if (typeof spec === 'string') {\n            key.set(spec, 1);\n        }\n        else if (Array.isArray(spec)) {\n            key.set(spec[0], spec[1] ?? 1);\n        }\n        else if (spec instanceof Map) {\n            for (const [property, value] of spec) {\n                key.set(property, value);\n            }\n        }\n        else if ((0, utils_1.isObject)(spec)) {\n            for (const [property, value] of Object.entries(spec)) {\n                key.set(property, value);\n            }\n        }\n    }\n    return key;\n}\n/**\n * Receives an index description and returns a modified index description which has had invalid options removed\n * from the description and has mapped the `version` option to the `v` option.\n */\nfunction resolveIndexDescription(description) {\n    const validProvidedOptions = Object.entries(description).filter(([optionName]) => VALID_INDEX_OPTIONS.has(optionName));\n    return Object.fromEntries(\n    // we support the `version` option, but the `createIndexes` command expects it to be the `v`\n    validProvidedOptions.map(([name, value]) => (name === 'version' ? ['v', value] : [name, value])));\n}\n/** @internal */\nclass CreateIndexesOperation extends command_1.CommandOperation {\n    constructor(parent, collectionName, indexes, options) {\n        super(parent, options);\n        this.options = options ?? {};\n        this.collectionName = collectionName;\n        this.indexes = indexes.map((userIndex) => {\n            // Ensure the key is a Map to preserve index key ordering\n            const key = userIndex.key instanceof Map ? userIndex.key : new Map(Object.entries(userIndex.key));\n            const name = userIndex.name ?? Array.from(key).flat().join('_');\n            const validIndexOptions = resolveIndexDescription(userIndex);\n            return {\n                ...validIndexOptions,\n                name,\n                key\n            };\n        });\n    }\n    static fromIndexDescriptionArray(parent, collectionName, indexes, options) {\n        return new CreateIndexesOperation(parent, collectionName, indexes, options);\n    }\n    static fromIndexSpecification(parent, collectionName, indexSpec, options = {}) {\n        const key = constructIndexDescriptionMap(indexSpec);\n        const description = { ...options, key };\n        return new CreateIndexesOperation(parent, collectionName, [description], options);\n    }\n    get commandName() {\n        return 'createIndexes';\n    }\n    async execute(server, session) {\n        const options = this.options;\n        const indexes = this.indexes;\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const cmd = { createIndexes: this.collectionName, indexes };\n        if (options.commitQuorum != null) {\n            if (serverWireVersion < 9) {\n                throw new error_1.MongoCompatibilityError('Option `commitQuorum` for `createIndexes` not supported on servers < 4.4');\n            }\n            cmd.commitQuorum = options.commitQuorum;\n        }\n        // collation is set on each index, it should not be defined at the root\n        this.options.collation = undefined;\n        await super.executeCommand(server, session, cmd);\n        const indexNames = indexes.map(index => index.name || '');\n        return indexNames;\n    }\n}\nexports.CreateIndexesOperation = CreateIndexesOperation;\n/** @internal */\nclass DropIndexOperation extends command_1.CommandOperation {\n    constructor(collection, indexName, options) {\n        super(collection, options);\n        this.options = options ?? {};\n        this.collection = collection;\n        this.indexName = indexName;\n    }\n    get commandName() {\n        return 'dropIndexes';\n    }\n    async execute(server, session) {\n        const cmd = { dropIndexes: this.collection.collectionName, index: this.indexName };\n        return await super.executeCommand(server, session, cmd);\n    }\n}\nexports.DropIndexOperation = DropIndexOperation;\n/** @internal */\nclass ListIndexesOperation extends command_1.CommandOperation {\n    constructor(collection, options) {\n        super(collection, options);\n        this.options = { ...options };\n        delete this.options.writeConcern;\n        this.collectionNamespace = collection.s.namespace;\n    }\n    get commandName() {\n        return 'listIndexes';\n    }\n    async execute(server, session) {\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const cursor = this.options.batchSize ? { batchSize: this.options.batchSize } : {};\n        const command = { listIndexes: this.collectionNamespace.collection, cursor };\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (serverWireVersion >= 9 && this.options.comment !== undefined) {\n            command.comment = this.options.comment;\n        }\n        return await super.executeCommand(server, session, command, responses_1.CursorResponse);\n    }\n}\nexports.ListIndexesOperation = ListIndexesOperation;\n(0, operation_1.defineAspects)(ListIndexesOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n(0, operation_1.defineAspects)(CreateIndexesOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DropIndexOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=indexes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/indexes.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/insert.js":
/*!******************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/insert.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InsertManyOperation = exports.InsertOneOperation = exports.InsertOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/write_concern.js\");\nconst bulk_write_1 = __webpack_require__(/*! ./bulk_write */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/bulk_write.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass InsertOperation extends command_1.CommandOperation {\n    constructor(ns, documents, options) {\n        super(undefined, options);\n        this.options = { ...options, checkKeys: options.checkKeys ?? false };\n        this.ns = ns;\n        this.documents = documents;\n    }\n    get commandName() {\n        return 'insert';\n    }\n    async execute(server, session) {\n        const options = this.options ?? {};\n        const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n        const command = {\n            insert: this.ns.collection,\n            documents: this.documents,\n            ordered\n        };\n        if (typeof options.bypassDocumentValidation === 'boolean') {\n            command.bypassDocumentValidation = options.bypassDocumentValidation;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        return await super.executeCommand(server, session, command);\n    }\n}\nexports.InsertOperation = InsertOperation;\nclass InsertOneOperation extends InsertOperation {\n    constructor(collection, doc, options) {\n        super(collection.s.namespace, (0, utils_1.maybeAddIdToDocuments)(collection, [doc], options), options);\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors) {\n            // This should be a WriteError but we can't change it now because of error hierarchy\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        }\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            insertedId: this.documents[0]._id\n        };\n    }\n}\nexports.InsertOneOperation = InsertOneOperation;\n/** @internal */\nclass InsertManyOperation extends operation_1.AbstractOperation {\n    constructor(collection, docs, options) {\n        super(options);\n        if (!Array.isArray(docs)) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"docs\" must be an array of documents');\n        }\n        this.options = options;\n        this.collection = collection;\n        this.docs = docs;\n    }\n    get commandName() {\n        return 'insert';\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const options = { ...this.options, ...this.bsonOptions, readPreference: this.readPreference };\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        const bulkWriteOperation = new bulk_write_1.BulkWriteOperation(coll, this.docs.map(document => ({\n            insertOne: { document }\n        })), options);\n        try {\n            const res = await bulkWriteOperation.execute(server, session);\n            return {\n                acknowledged: writeConcern?.w !== 0,\n                insertedCount: res.insertedCount,\n                insertedIds: res.insertedIds\n            };\n        }\n        catch (err) {\n            if (err && err.message === 'Operation must be an object with an operation key') {\n                throw new error_1.MongoInvalidArgumentError('Collection.insertMany() cannot be called with an array that has null/undefined values');\n            }\n            throw err;\n        }\n    }\n}\nexports.InsertManyOperation = InsertManyOperation;\n(0, operation_1.defineAspects)(InsertOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(InsertOneOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(InsertManyOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=insert.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2luc2VydC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkIsR0FBRywwQkFBMEIsR0FBRyx1QkFBdUI7QUFDbEYsZ0JBQWdCLG1CQUFPLENBQUMsOEZBQVU7QUFDbEMsZ0JBQWdCLG1CQUFPLENBQUMsOEZBQVU7QUFDbEMsd0JBQXdCLG1CQUFPLENBQUMsOEdBQWtCO0FBQ2xELHFCQUFxQixtQkFBTyxDQUFDLGtIQUFjO0FBQzNDLGtCQUFrQixtQkFBTyxDQUFDLDRHQUFXO0FBQ3JDLG9CQUFvQixtQkFBTyxDQUFDLGdIQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2xpbmt1cy9HaXRodWIvbW9ub3R3by9wYXlsb2FkLXBsdWdpbi1tZXRhL25vZGVfbW9kdWxlcy8ucG5wbS9tb25nb2RiQDYuMTAuMC9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9pbnNlcnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkluc2VydE1hbnlPcGVyYXRpb24gPSBleHBvcnRzLkluc2VydE9uZU9wZXJhdGlvbiA9IGV4cG9ydHMuSW5zZXJ0T3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCB3cml0ZV9jb25jZXJuXzEgPSByZXF1aXJlKFwiLi4vd3JpdGVfY29uY2VyblwiKTtcbmNvbnN0IGJ1bGtfd3JpdGVfMSA9IHJlcXVpcmUoXCIuL2J1bGtfd3JpdGVcIik7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBJbnNlcnRPcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IobnMsIGRvY3VtZW50cywgb3B0aW9ucykge1xuICAgICAgICBzdXBlcih1bmRlZmluZWQsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7IC4uLm9wdGlvbnMsIGNoZWNrS2V5czogb3B0aW9ucy5jaGVja0tleXMgPz8gZmFsc2UgfTtcbiAgICAgICAgdGhpcy5ucyA9IG5zO1xuICAgICAgICB0aGlzLmRvY3VtZW50cyA9IGRvY3VtZW50cztcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2luc2VydCc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMgPz8ge307XG4gICAgICAgIGNvbnN0IG9yZGVyZWQgPSB0eXBlb2Ygb3B0aW9ucy5vcmRlcmVkID09PSAnYm9vbGVhbicgPyBvcHRpb25zLm9yZGVyZWQgOiB0cnVlO1xuICAgICAgICBjb25zdCBjb21tYW5kID0ge1xuICAgICAgICAgICAgaW5zZXJ0OiB0aGlzLm5zLmNvbGxlY3Rpb24sXG4gICAgICAgICAgICBkb2N1bWVudHM6IHRoaXMuZG9jdW1lbnRzLFxuICAgICAgICAgICAgb3JkZXJlZFxuICAgICAgICB9O1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIGNvbW1hbmQuYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uID0gb3B0aW9ucy5ieXBhc3NEb2N1bWVudFZhbGlkYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgLy8gd2UgY2hlY2sgZm9yIHVuZGVmaW5lZCBzcGVjaWZpY2FsbHkgaGVyZSB0byBhbGxvdyBmYWxzeSB2YWx1ZXNcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICAgIGlmIChvcHRpb25zLmNvbW1lbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29tbWFuZC5jb21tZW50ID0gb3B0aW9ucy5jb21tZW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhd2FpdCBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIGNvbW1hbmQpO1xuICAgIH1cbn1cbmV4cG9ydHMuSW5zZXJ0T3BlcmF0aW9uID0gSW5zZXJ0T3BlcmF0aW9uO1xuY2xhc3MgSW5zZXJ0T25lT3BlcmF0aW9uIGV4dGVuZHMgSW5zZXJ0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBkb2MsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoY29sbGVjdGlvbi5zLm5hbWVzcGFjZSwgKDAsIHV0aWxzXzEubWF5YmVBZGRJZFRvRG9jdW1lbnRzKShjb2xsZWN0aW9uLCBbZG9jXSwgb3B0aW9ucyksIG9wdGlvbnMpO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBzdXBlci5leGVjdXRlKHNlcnZlciwgc2Vzc2lvbik7XG4gICAgICAgIGlmIChyZXMuY29kZSlcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvU2VydmVyRXJyb3IocmVzKTtcbiAgICAgICAgaWYgKHJlcy53cml0ZUVycm9ycykge1xuICAgICAgICAgICAgLy8gVGhpcyBzaG91bGQgYmUgYSBXcml0ZUVycm9yIGJ1dCB3ZSBjYW4ndCBjaGFuZ2UgaXQgbm93IGJlY2F1c2Ugb2YgZXJyb3IgaGllcmFyY2h5XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1NlcnZlckVycm9yKHJlcy53cml0ZUVycm9yc1swXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFja25vd2xlZGdlZDogdGhpcy53cml0ZUNvbmNlcm4/LncgIT09IDAsXG4gICAgICAgICAgICBpbnNlcnRlZElkOiB0aGlzLmRvY3VtZW50c1swXS5faWRcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLkluc2VydE9uZU9wZXJhdGlvbiA9IEluc2VydE9uZU9wZXJhdGlvbjtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIEluc2VydE1hbnlPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgZG9jcywgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGRvY3MpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdBcmd1bWVudCBcImRvY3NcIiBtdXN0IGJlIGFuIGFycmF5IG9mIGRvY3VtZW50cycpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgICAgIHRoaXMuZG9jcyA9IGRvY3M7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdpbnNlcnQnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBjb2xsID0gdGhpcy5jb2xsZWN0aW9uO1xuICAgICAgICBjb25zdCBvcHRpb25zID0geyAuLi50aGlzLm9wdGlvbnMsIC4uLnRoaXMuYnNvbk9wdGlvbnMsIHJlYWRQcmVmZXJlbmNlOiB0aGlzLnJlYWRQcmVmZXJlbmNlIH07XG4gICAgICAgIGNvbnN0IHdyaXRlQ29uY2VybiA9IHdyaXRlX2NvbmNlcm5fMS5Xcml0ZUNvbmNlcm4uZnJvbU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGJ1bGtXcml0ZU9wZXJhdGlvbiA9IG5ldyBidWxrX3dyaXRlXzEuQnVsa1dyaXRlT3BlcmF0aW9uKGNvbGwsIHRoaXMuZG9jcy5tYXAoZG9jdW1lbnQgPT4gKHtcbiAgICAgICAgICAgIGluc2VydE9uZTogeyBkb2N1bWVudCB9XG4gICAgICAgIH0pKSwgb3B0aW9ucyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBidWxrV3JpdGVPcGVyYXRpb24uZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBhY2tub3dsZWRnZWQ6IHdyaXRlQ29uY2Vybj8udyAhPT0gMCxcbiAgICAgICAgICAgICAgICBpbnNlcnRlZENvdW50OiByZXMuaW5zZXJ0ZWRDb3VudCxcbiAgICAgICAgICAgICAgICBpbnNlcnRlZElkczogcmVzLmluc2VydGVkSWRzXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIgJiYgZXJyLm1lc3NhZ2UgPT09ICdPcGVyYXRpb24gbXVzdCBiZSBhbiBvYmplY3Qgd2l0aCBhbiBvcGVyYXRpb24ga2V5Jykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ0NvbGxlY3Rpb24uaW5zZXJ0TWFueSgpIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBhbiBhcnJheSB0aGF0IGhhcyBudWxsL3VuZGVmaW5lZCB2YWx1ZXMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuSW5zZXJ0TWFueU9wZXJhdGlvbiA9IEluc2VydE1hbnlPcGVyYXRpb247XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoSW5zZXJ0T3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LlJFVFJZQUJMRSwgb3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTl0pO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKEluc2VydE9uZU9wZXJhdGlvbiwgW29wZXJhdGlvbl8xLkFzcGVjdC5SRVRSWUFCTEUsIG9wZXJhdGlvbl8xLkFzcGVjdC5XUklURV9PUEVSQVRJT05dKTtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShJbnNlcnRNYW55T3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5zZXJ0LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/insert.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/is_capped.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/is_capped.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IsCappedOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass IsCappedOperation extends operation_1.AbstractOperation {\n    constructor(collection, options) {\n        super(options);\n        this.options = options;\n        this.collection = collection;\n    }\n    get commandName() {\n        return 'listCollections';\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const [collection] = await coll.s.db\n            .listCollections({ name: coll.collectionName }, { ...this.options, nameOnly: false, readPreference: this.readPreference, session })\n            .toArray();\n        if (collection == null || collection.options == null) {\n            throw new error_1.MongoAPIError(`collection ${coll.namespace} not found`);\n        }\n        return !!collection.options?.capped;\n    }\n}\nexports.IsCappedOperation = IsCappedOperation;\n//# sourceMappingURL=is_capped.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2lzX2NhcHBlZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUI7QUFDekIsZ0JBQWdCLG1CQUFPLENBQUMsOEZBQVU7QUFDbEMsb0JBQW9CLG1CQUFPLENBQUMsZ0hBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsMkJBQTJCLElBQUksZ0ZBQWdGO0FBQzlJO0FBQ0E7QUFDQSwwREFBMEQsZ0JBQWdCO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2lzX2NhcHBlZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSXNDYXBwZWRPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBJc0NhcHBlZE9wZXJhdGlvbiBleHRlbmRzIG9wZXJhdGlvbl8xLkFic3RyYWN0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnbGlzdENvbGxlY3Rpb25zJztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgY29sbCA9IHRoaXMuY29sbGVjdGlvbjtcbiAgICAgICAgY29uc3QgW2NvbGxlY3Rpb25dID0gYXdhaXQgY29sbC5zLmRiXG4gICAgICAgICAgICAubGlzdENvbGxlY3Rpb25zKHsgbmFtZTogY29sbC5jb2xsZWN0aW9uTmFtZSB9LCB7IC4uLnRoaXMub3B0aW9ucywgbmFtZU9ubHk6IGZhbHNlLCByZWFkUHJlZmVyZW5jZTogdGhpcy5yZWFkUHJlZmVyZW5jZSwgc2Vzc2lvbiB9KVxuICAgICAgICAgICAgLnRvQXJyYXkoKTtcbiAgICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCB8fCBjb2xsZWN0aW9uLm9wdGlvbnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29BUElFcnJvcihgY29sbGVjdGlvbiAke2NvbGwubmFtZXNwYWNlfSBub3QgZm91bmRgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gISFjb2xsZWN0aW9uLm9wdGlvbnM/LmNhcHBlZDtcbiAgICB9XG59XG5leHBvcnRzLklzQ2FwcGVkT3BlcmF0aW9uID0gSXNDYXBwZWRPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc19jYXBwZWQuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/is_capped.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/kill_cursors.js":
/*!************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/kill_cursors.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.KillCursorsOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js\");\nclass KillCursorsOperation extends operation_1.AbstractOperation {\n    constructor(cursorId, ns, server, options) {\n        super(options);\n        this.ns = ns;\n        this.cursorId = cursorId;\n        this.server = server;\n    }\n    get commandName() {\n        return 'killCursors';\n    }\n    async execute(server, session) {\n        if (server !== this.server) {\n            throw new error_1.MongoRuntimeError('Killcursor must run on the same server operation began on');\n        }\n        const killCursors = this.ns.collection;\n        if (killCursors == null) {\n            // Cursors should have adopted the namespace returned by MongoDB\n            // which should always defined a collection name (even a pseudo one, ex. db.aggregate())\n            throw new error_1.MongoRuntimeError('A collection name must be determined before killCursors');\n        }\n        const killCursorsCommand = {\n            killCursors,\n            cursors: [this.cursorId]\n        };\n        try {\n            await server.command(this.ns, killCursorsCommand, { session });\n        }\n        catch (error) {\n            // The driver should never emit errors from killCursors, this is spec-ed behavior\n            (0, utils_1.squashError)(error);\n        }\n    }\n}\nexports.KillCursorsOperation = KillCursorsOperation;\n(0, operation_1.defineAspects)(KillCursorsOperation, [operation_1.Aspect.MUST_SELECT_SAME_SERVER]);\n//# sourceMappingURL=kill_cursors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2tpbGxfY3Vyc29ycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw0QkFBNEI7QUFDNUIsZ0JBQWdCLG1CQUFPLENBQUMsOEZBQVU7QUFDbEMsZ0JBQWdCLG1CQUFPLENBQUMsOEZBQVU7QUFDbEMsb0JBQW9CLG1CQUFPLENBQUMsZ0hBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRUFBZ0UsU0FBUztBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2tpbGxfY3Vyc29ycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuS2lsbEN1cnNvcnNPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuY2xhc3MgS2lsbEN1cnNvcnNPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY3Vyc29ySWQsIG5zLCBzZXJ2ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMubnMgPSBucztcbiAgICAgICAgdGhpcy5jdXJzb3JJZCA9IGN1cnNvcklkO1xuICAgICAgICB0aGlzLnNlcnZlciA9IHNlcnZlcjtcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2tpbGxDdXJzb3JzJztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgaWYgKHNlcnZlciAhPT0gdGhpcy5zZXJ2ZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKCdLaWxsY3Vyc29yIG11c3QgcnVuIG9uIHRoZSBzYW1lIHNlcnZlciBvcGVyYXRpb24gYmVnYW4gb24nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBraWxsQ3Vyc29ycyA9IHRoaXMubnMuY29sbGVjdGlvbjtcbiAgICAgICAgaWYgKGtpbGxDdXJzb3JzID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIEN1cnNvcnMgc2hvdWxkIGhhdmUgYWRvcHRlZCB0aGUgbmFtZXNwYWNlIHJldHVybmVkIGJ5IE1vbmdvREJcbiAgICAgICAgICAgIC8vIHdoaWNoIHNob3VsZCBhbHdheXMgZGVmaW5lZCBhIGNvbGxlY3Rpb24gbmFtZSAoZXZlbiBhIHBzZXVkbyBvbmUsIGV4LiBkYi5hZ2dyZWdhdGUoKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKCdBIGNvbGxlY3Rpb24gbmFtZSBtdXN0IGJlIGRldGVybWluZWQgYmVmb3JlIGtpbGxDdXJzb3JzJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qga2lsbEN1cnNvcnNDb21tYW5kID0ge1xuICAgICAgICAgICAga2lsbEN1cnNvcnMsXG4gICAgICAgICAgICBjdXJzb3JzOiBbdGhpcy5jdXJzb3JJZF1cbiAgICAgICAgfTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHNlcnZlci5jb21tYW5kKHRoaXMubnMsIGtpbGxDdXJzb3JzQ29tbWFuZCwgeyBzZXNzaW9uIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgLy8gVGhlIGRyaXZlciBzaG91bGQgbmV2ZXIgZW1pdCBlcnJvcnMgZnJvbSBraWxsQ3Vyc29ycywgdGhpcyBpcyBzcGVjLWVkIGJlaGF2aW9yXG4gICAgICAgICAgICAoMCwgdXRpbHNfMS5zcXVhc2hFcnJvcikoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5LaWxsQ3Vyc29yc09wZXJhdGlvbiA9IEtpbGxDdXJzb3JzT3BlcmF0aW9uO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKEtpbGxDdXJzb3JzT3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0Lk1VU1RfU0VMRUNUX1NBTUVfU0VSVkVSXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1raWxsX2N1cnNvcnMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/kill_cursors.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/list_collections.js":
/*!****************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/list_collections.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ListCollectionsOperation = void 0;\nconst responses_1 = __webpack_require__(/*! ../cmap/wire_protocol/responses */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/responses.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass ListCollectionsOperation extends command_1.CommandOperation {\n    constructor(db, filter, options) {\n        super(db, options);\n        this.options = { ...options };\n        delete this.options.writeConcern;\n        this.db = db;\n        this.filter = filter;\n        this.nameOnly = !!this.options.nameOnly;\n        this.authorizedCollections = !!this.options.authorizedCollections;\n        if (typeof this.options.batchSize === 'number') {\n            this.batchSize = this.options.batchSize;\n        }\n    }\n    get commandName() {\n        return 'listCollections';\n    }\n    async execute(server, session) {\n        return await super.executeCommand(server, session, this.generateCommand((0, utils_1.maxWireVersion)(server)), responses_1.CursorResponse);\n    }\n    /* This is here for the purpose of unit testing the final command that gets sent. */\n    generateCommand(wireVersion) {\n        const command = {\n            listCollections: 1,\n            filter: this.filter,\n            cursor: this.batchSize ? { batchSize: this.batchSize } : {},\n            nameOnly: this.nameOnly,\n            authorizedCollections: this.authorizedCollections\n        };\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (wireVersion >= 9 && this.options.comment !== undefined) {\n            command.comment = this.options.comment;\n        }\n        return command;\n    }\n}\nexports.ListCollectionsOperation = ListCollectionsOperation;\n(0, operation_1.defineAspects)(ListCollectionsOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n//# sourceMappingURL=list_collections.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2xpc3RfY29sbGVjdGlvbnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0NBQWdDO0FBQ2hDLG9CQUFvQixtQkFBTyxDQUFDLDRJQUFpQztBQUM3RCxnQkFBZ0IsbUJBQU8sQ0FBQyw4RkFBVTtBQUNsQyxrQkFBa0IsbUJBQU8sQ0FBQyw0R0FBVztBQUNyQyxvQkFBb0IsbUJBQU8sQ0FBQyxnSEFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLDRCQUE0QixJQUFJO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2xpc3RfY29sbGVjdGlvbnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxpc3RDb2xsZWN0aW9uc09wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IHJlc3BvbnNlc18xID0gcmVxdWlyZShcIi4uL2NtYXAvd2lyZV9wcm90b2NvbC9yZXNwb25zZXNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgTGlzdENvbGxlY3Rpb25zT3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGRiLCBmaWx0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoZGIsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7IC4uLm9wdGlvbnMgfTtcbiAgICAgICAgZGVsZXRlIHRoaXMub3B0aW9ucy53cml0ZUNvbmNlcm47XG4gICAgICAgIHRoaXMuZGIgPSBkYjtcbiAgICAgICAgdGhpcy5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgICAgIHRoaXMubmFtZU9ubHkgPSAhIXRoaXMub3B0aW9ucy5uYW1lT25seTtcbiAgICAgICAgdGhpcy5hdXRob3JpemVkQ29sbGVjdGlvbnMgPSAhIXRoaXMub3B0aW9ucy5hdXRob3JpemVkQ29sbGVjdGlvbnM7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLmJhdGNoU2l6ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRoaXMuYmF0Y2hTaXplID0gdGhpcy5vcHRpb25zLmJhdGNoU2l6ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnbGlzdENvbGxlY3Rpb25zJztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgdGhpcy5nZW5lcmF0ZUNvbW1hbmQoKDAsIHV0aWxzXzEubWF4V2lyZVZlcnNpb24pKHNlcnZlcikpLCByZXNwb25zZXNfMS5DdXJzb3JSZXNwb25zZSk7XG4gICAgfVxuICAgIC8qIFRoaXMgaXMgaGVyZSBmb3IgdGhlIHB1cnBvc2Ugb2YgdW5pdCB0ZXN0aW5nIHRoZSBmaW5hbCBjb21tYW5kIHRoYXQgZ2V0cyBzZW50LiAqL1xuICAgIGdlbmVyYXRlQ29tbWFuZCh3aXJlVmVyc2lvbikge1xuICAgICAgICBjb25zdCBjb21tYW5kID0ge1xuICAgICAgICAgICAgbGlzdENvbGxlY3Rpb25zOiAxLFxuICAgICAgICAgICAgZmlsdGVyOiB0aGlzLmZpbHRlcixcbiAgICAgICAgICAgIGN1cnNvcjogdGhpcy5iYXRjaFNpemUgPyB7IGJhdGNoU2l6ZTogdGhpcy5iYXRjaFNpemUgfSA6IHt9LFxuICAgICAgICAgICAgbmFtZU9ubHk6IHRoaXMubmFtZU9ubHksXG4gICAgICAgICAgICBhdXRob3JpemVkQ29sbGVjdGlvbnM6IHRoaXMuYXV0aG9yaXplZENvbGxlY3Rpb25zXG4gICAgICAgIH07XG4gICAgICAgIC8vIHdlIGNoZWNrIGZvciB1bmRlZmluZWQgc3BlY2lmaWNhbGx5IGhlcmUgdG8gYWxsb3cgZmFsc3kgdmFsdWVzXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBpZiAod2lyZVZlcnNpb24gPj0gOSAmJiB0aGlzLm9wdGlvbnMuY29tbWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb21tYW5kLmNvbW1lbnQgPSB0aGlzLm9wdGlvbnMuY29tbWVudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29tbWFuZDtcbiAgICB9XG59XG5leHBvcnRzLkxpc3RDb2xsZWN0aW9uc09wZXJhdGlvbiA9IExpc3RDb2xsZWN0aW9uc09wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShMaXN0Q29sbGVjdGlvbnNPcGVyYXRpb24sIFtcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuUkVBRF9PUEVSQVRJT04sXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LlJFVFJZQUJMRSxcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuQ1VSU09SX0NSRUFUSU5HXG5dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpc3RfY29sbGVjdGlvbnMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/list_collections.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/list_databases.js":
/*!**************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/list_databases.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ListDatabasesOperation = void 0;\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass ListDatabasesOperation extends command_1.CommandOperation {\n    constructor(db, options) {\n        super(db, options);\n        this.options = options ?? {};\n        this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');\n    }\n    get commandName() {\n        return 'listDatabases';\n    }\n    async execute(server, session) {\n        const cmd = { listDatabases: 1 };\n        if (typeof this.options.nameOnly === 'boolean') {\n            cmd.nameOnly = this.options.nameOnly;\n        }\n        if (this.options.filter) {\n            cmd.filter = this.options.filter;\n        }\n        if (typeof this.options.authorizedDatabases === 'boolean') {\n            cmd.authorizedDatabases = this.options.authorizedDatabases;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if ((0, utils_1.maxWireVersion)(server) >= 9 && this.options.comment !== undefined) {\n            cmd.comment = this.options.comment;\n        }\n        return await super.executeCommand(server, session, cmd);\n    }\n}\nexports.ListDatabasesOperation = ListDatabasesOperation;\n(0, operation_1.defineAspects)(ListDatabasesOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE]);\n//# sourceMappingURL=list_databases.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2xpc3RfZGF0YWJhc2VzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDhCQUE4QjtBQUM5QixnQkFBZ0IsbUJBQU8sQ0FBQyw4RkFBVTtBQUNsQyxrQkFBa0IsbUJBQU8sQ0FBQyw0R0FBVztBQUNyQyxvQkFBb0IsbUJBQU8sQ0FBQyxnSEFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2xpbmt1cy9HaXRodWIvbW9ub3R3by9wYXlsb2FkLXBsdWdpbi1tZXRhL25vZGVfbW9kdWxlcy8ucG5wbS9tb25nb2RiQDYuMTAuMC9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9saXN0X2RhdGFiYXNlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTGlzdERhdGFiYXNlc09wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBMaXN0RGF0YWJhc2VzT3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGRiLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGRiLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyA/PyB7fTtcbiAgICAgICAgdGhpcy5ucyA9IG5ldyB1dGlsc18xLk1vbmdvREJOYW1lc3BhY2UoJ2FkbWluJywgJyRjbWQnKTtcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2xpc3REYXRhYmFzZXMnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBjbWQgPSB7IGxpc3REYXRhYmFzZXM6IDEgfTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMubmFtZU9ubHkgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgY21kLm5hbWVPbmx5ID0gdGhpcy5vcHRpb25zLm5hbWVPbmx5O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZmlsdGVyKSB7XG4gICAgICAgICAgICBjbWQuZmlsdGVyID0gdGhpcy5vcHRpb25zLmZpbHRlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5hdXRob3JpemVkRGF0YWJhc2VzID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIGNtZC5hdXRob3JpemVkRGF0YWJhc2VzID0gdGhpcy5vcHRpb25zLmF1dGhvcml6ZWREYXRhYmFzZXM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gd2UgY2hlY2sgZm9yIHVuZGVmaW5lZCBzcGVjaWZpY2FsbHkgaGVyZSB0byBhbGxvdyBmYWxzeSB2YWx1ZXNcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICAgIGlmICgoMCwgdXRpbHNfMS5tYXhXaXJlVmVyc2lvbikoc2VydmVyKSA+PSA5ICYmIHRoaXMub3B0aW9ucy5jb21tZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNtZC5jb21tZW50ID0gdGhpcy5vcHRpb25zLmNvbW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgY21kKTtcbiAgICB9XG59XG5leHBvcnRzLkxpc3REYXRhYmFzZXNPcGVyYXRpb24gPSBMaXN0RGF0YWJhc2VzT3BlcmF0aW9uO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKExpc3REYXRhYmFzZXNPcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuUkVBRF9PUEVSQVRJT04sIG9wZXJhdGlvbl8xLkFzcGVjdC5SRVRSWUFCTEVdKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpc3RfZGF0YWJhc2VzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/list_databases.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AbstractOperation = exports.Aspect = void 0;\nexports.defineAspects = defineAspects;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_preference.js\");\nexports.Aspect = {\n    READ_OPERATION: Symbol('READ_OPERATION'),\n    WRITE_OPERATION: Symbol('WRITE_OPERATION'),\n    RETRYABLE: Symbol('RETRYABLE'),\n    EXPLAINABLE: Symbol('EXPLAINABLE'),\n    SKIP_COLLATION: Symbol('SKIP_COLLATION'),\n    CURSOR_CREATING: Symbol('CURSOR_CREATING'),\n    MUST_SELECT_SAME_SERVER: Symbol('MUST_SELECT_SAME_SERVER'),\n    COMMAND_BATCHING: Symbol('COMMAND_BATCHING')\n};\n/** @internal */\nconst kSession = Symbol('session');\n/**\n * This class acts as a parent class for any operation and is responsible for setting this.options,\n * as well as setting and getting a session.\n * Additionally, this class implements `hasAspect`, which determines whether an operation has\n * a specific aspect.\n * @internal\n */\nclass AbstractOperation {\n    constructor(options = {}) {\n        this.readPreference = this.hasAspect(exports.Aspect.WRITE_OPERATION)\n            ? read_preference_1.ReadPreference.primary\n            : (read_preference_1.ReadPreference.fromOptions(options) ?? read_preference_1.ReadPreference.primary);\n        // Pull the BSON serialize options from the already-resolved options\n        this.bsonOptions = (0, bson_1.resolveBSONOptions)(options);\n        this[kSession] = options.session != null ? options.session : undefined;\n        this.options = options;\n        this.bypassPinningCheck = !!options.bypassPinningCheck;\n        this.trySecondaryWrite = false;\n    }\n    hasAspect(aspect) {\n        const ctor = this.constructor;\n        if (ctor.aspects == null) {\n            return false;\n        }\n        return ctor.aspects.has(aspect);\n    }\n    get session() {\n        return this[kSession];\n    }\n    clearSession() {\n        this[kSession] = undefined;\n    }\n    resetBatch() {\n        return true;\n    }\n    get canRetryRead() {\n        return this.hasAspect(exports.Aspect.RETRYABLE) && this.hasAspect(exports.Aspect.READ_OPERATION);\n    }\n    get canRetryWrite() {\n        return this.hasAspect(exports.Aspect.RETRYABLE) && this.hasAspect(exports.Aspect.WRITE_OPERATION);\n    }\n}\nexports.AbstractOperation = AbstractOperation;\nfunction defineAspects(operation, aspects) {\n    if (!Array.isArray(aspects) && !(aspects instanceof Set)) {\n        aspects = [aspects];\n    }\n    aspects = new Set(aspects);\n    Object.defineProperty(operation, 'aspects', {\n        value: aspects,\n        writable: false\n    });\n    return aspects;\n}\n//# sourceMappingURL=operation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL29wZXJhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUIsR0FBRyxjQUFjO0FBQzFDLHFCQUFxQjtBQUNyQixlQUFlLG1CQUFPLENBQUMsNEZBQVM7QUFDaEMsMEJBQTBCLG1CQUFPLENBQUMsa0hBQW9CO0FBQ3RELGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9saW5rdXMvR2l0aHViL21vbm90d28vcGF5bG9hZC1wbHVnaW4tbWV0YS9ub2RlX21vZHVsZXMvLnBucG0vbW9uZ29kYkA2LjEwLjAvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvb3BlcmF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BYnN0cmFjdE9wZXJhdGlvbiA9IGV4cG9ydHMuQXNwZWN0ID0gdm9pZCAwO1xuZXhwb3J0cy5kZWZpbmVBc3BlY3RzID0gZGVmaW5lQXNwZWN0cztcbmNvbnN0IGJzb25fMSA9IHJlcXVpcmUoXCIuLi9ic29uXCIpO1xuY29uc3QgcmVhZF9wcmVmZXJlbmNlXzEgPSByZXF1aXJlKFwiLi4vcmVhZF9wcmVmZXJlbmNlXCIpO1xuZXhwb3J0cy5Bc3BlY3QgPSB7XG4gICAgUkVBRF9PUEVSQVRJT046IFN5bWJvbCgnUkVBRF9PUEVSQVRJT04nKSxcbiAgICBXUklURV9PUEVSQVRJT046IFN5bWJvbCgnV1JJVEVfT1BFUkFUSU9OJyksXG4gICAgUkVUUllBQkxFOiBTeW1ib2woJ1JFVFJZQUJMRScpLFxuICAgIEVYUExBSU5BQkxFOiBTeW1ib2woJ0VYUExBSU5BQkxFJyksXG4gICAgU0tJUF9DT0xMQVRJT046IFN5bWJvbCgnU0tJUF9DT0xMQVRJT04nKSxcbiAgICBDVVJTT1JfQ1JFQVRJTkc6IFN5bWJvbCgnQ1VSU09SX0NSRUFUSU5HJyksXG4gICAgTVVTVF9TRUxFQ1RfU0FNRV9TRVJWRVI6IFN5bWJvbCgnTVVTVF9TRUxFQ1RfU0FNRV9TRVJWRVInKSxcbiAgICBDT01NQU5EX0JBVENISU5HOiBTeW1ib2woJ0NPTU1BTkRfQkFUQ0hJTkcnKVxufTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNvbnN0IGtTZXNzaW9uID0gU3ltYm9sKCdzZXNzaW9uJyk7XG4vKipcbiAqIFRoaXMgY2xhc3MgYWN0cyBhcyBhIHBhcmVudCBjbGFzcyBmb3IgYW55IG9wZXJhdGlvbiBhbmQgaXMgcmVzcG9uc2libGUgZm9yIHNldHRpbmcgdGhpcy5vcHRpb25zLFxuICogYXMgd2VsbCBhcyBzZXR0aW5nIGFuZCBnZXR0aW5nIGEgc2Vzc2lvbi5cbiAqIEFkZGl0aW9uYWxseSwgdGhpcyBjbGFzcyBpbXBsZW1lbnRzIGBoYXNBc3BlY3RgLCB3aGljaCBkZXRlcm1pbmVzIHdoZXRoZXIgYW4gb3BlcmF0aW9uIGhhc1xuICogYSBzcGVjaWZpYyBhc3BlY3QuXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgQWJzdHJhY3RPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICB0aGlzLnJlYWRQcmVmZXJlbmNlID0gdGhpcy5oYXNBc3BlY3QoZXhwb3J0cy5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OKVxuICAgICAgICAgICAgPyByZWFkX3ByZWZlcmVuY2VfMS5SZWFkUHJlZmVyZW5jZS5wcmltYXJ5XG4gICAgICAgICAgICA6IChyZWFkX3ByZWZlcmVuY2VfMS5SZWFkUHJlZmVyZW5jZS5mcm9tT3B0aW9ucyhvcHRpb25zKSA/PyByZWFkX3ByZWZlcmVuY2VfMS5SZWFkUHJlZmVyZW5jZS5wcmltYXJ5KTtcbiAgICAgICAgLy8gUHVsbCB0aGUgQlNPTiBzZXJpYWxpemUgb3B0aW9ucyBmcm9tIHRoZSBhbHJlYWR5LXJlc29sdmVkIG9wdGlvbnNcbiAgICAgICAgdGhpcy5ic29uT3B0aW9ucyA9ICgwLCBic29uXzEucmVzb2x2ZUJTT05PcHRpb25zKShvcHRpb25zKTtcbiAgICAgICAgdGhpc1trU2Vzc2lvbl0gPSBvcHRpb25zLnNlc3Npb24gIT0gbnVsbCA/IG9wdGlvbnMuc2Vzc2lvbiA6IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5ieXBhc3NQaW5uaW5nQ2hlY2sgPSAhIW9wdGlvbnMuYnlwYXNzUGlubmluZ0NoZWNrO1xuICAgICAgICB0aGlzLnRyeVNlY29uZGFyeVdyaXRlID0gZmFsc2U7XG4gICAgfVxuICAgIGhhc0FzcGVjdChhc3BlY3QpIHtcbiAgICAgICAgY29uc3QgY3RvciA9IHRoaXMuY29uc3RydWN0b3I7XG4gICAgICAgIGlmIChjdG9yLmFzcGVjdHMgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjdG9yLmFzcGVjdHMuaGFzKGFzcGVjdCk7XG4gICAgfVxuICAgIGdldCBzZXNzaW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpc1trU2Vzc2lvbl07XG4gICAgfVxuICAgIGNsZWFyU2Vzc2lvbigpIHtcbiAgICAgICAgdGhpc1trU2Vzc2lvbl0gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJlc2V0QmF0Y2goKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBnZXQgY2FuUmV0cnlSZWFkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNBc3BlY3QoZXhwb3J0cy5Bc3BlY3QuUkVUUllBQkxFKSAmJiB0aGlzLmhhc0FzcGVjdChleHBvcnRzLkFzcGVjdC5SRUFEX09QRVJBVElPTik7XG4gICAgfVxuICAgIGdldCBjYW5SZXRyeVdyaXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNBc3BlY3QoZXhwb3J0cy5Bc3BlY3QuUkVUUllBQkxFKSAmJiB0aGlzLmhhc0FzcGVjdChleHBvcnRzLkFzcGVjdC5XUklURV9PUEVSQVRJT04pO1xuICAgIH1cbn1cbmV4cG9ydHMuQWJzdHJhY3RPcGVyYXRpb24gPSBBYnN0cmFjdE9wZXJhdGlvbjtcbmZ1bmN0aW9uIGRlZmluZUFzcGVjdHMob3BlcmF0aW9uLCBhc3BlY3RzKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFzcGVjdHMpICYmICEoYXNwZWN0cyBpbnN0YW5jZW9mIFNldCkpIHtcbiAgICAgICAgYXNwZWN0cyA9IFthc3BlY3RzXTtcbiAgICB9XG4gICAgYXNwZWN0cyA9IG5ldyBTZXQoYXNwZWN0cyk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wZXJhdGlvbiwgJ2FzcGVjdHMnLCB7XG4gICAgICAgIHZhbHVlOiBhc3BlY3RzLFxuICAgICAgICB3cml0YWJsZTogZmFsc2VcbiAgICB9KTtcbiAgICByZXR1cm4gYXNwZWN0cztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wZXJhdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/options_operation.js":
/*!*****************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/options_operation.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OptionsOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass OptionsOperation extends operation_1.AbstractOperation {\n    constructor(collection, options) {\n        super(options);\n        this.options = options;\n        this.collection = collection;\n    }\n    get commandName() {\n        return 'listCollections';\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const [collection] = await coll.s.db\n            .listCollections({ name: coll.collectionName }, { ...this.options, nameOnly: false, readPreference: this.readPreference, session })\n            .toArray();\n        if (collection == null || collection.options == null) {\n            throw new error_1.MongoAPIError(`collection ${coll.namespace} not found`);\n        }\n        return collection.options;\n    }\n}\nexports.OptionsOperation = OptionsOperation;\n//# sourceMappingURL=options_operation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL29wdGlvbnNfb3BlcmF0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4QixnQkFBZ0IsbUJBQU8sQ0FBQyw4RkFBVTtBQUNsQyxvQkFBb0IsbUJBQU8sQ0FBQyxnSEFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQiwyQkFBMkIsSUFBSSxnRkFBZ0Y7QUFDOUk7QUFDQTtBQUNBLDBEQUEwRCxnQkFBZ0I7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9saW5rdXMvR2l0aHViL21vbm90d28vcGF5bG9hZC1wbHVnaW4tbWV0YS9ub2RlX21vZHVsZXMvLnBucG0vbW9uZ29kYkA2LjEwLjAvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvb3B0aW9uc19vcGVyYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk9wdGlvbnNPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBPcHRpb25zT3BlcmF0aW9uIGV4dGVuZHMgb3BlcmF0aW9uXzEuQWJzdHJhY3RPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdsaXN0Q29sbGVjdGlvbnMnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBjb2xsID0gdGhpcy5jb2xsZWN0aW9uO1xuICAgICAgICBjb25zdCBbY29sbGVjdGlvbl0gPSBhd2FpdCBjb2xsLnMuZGJcbiAgICAgICAgICAgIC5saXN0Q29sbGVjdGlvbnMoeyBuYW1lOiBjb2xsLmNvbGxlY3Rpb25OYW1lIH0sIHsgLi4udGhpcy5vcHRpb25zLCBuYW1lT25seTogZmFsc2UsIHJlYWRQcmVmZXJlbmNlOiB0aGlzLnJlYWRQcmVmZXJlbmNlLCBzZXNzaW9uIH0pXG4gICAgICAgICAgICAudG9BcnJheSgpO1xuICAgICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsIHx8IGNvbGxlY3Rpb24ub3B0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0FQSUVycm9yKGBjb2xsZWN0aW9uICR7Y29sbC5uYW1lc3BhY2V9IG5vdCBmb3VuZGApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uLm9wdGlvbnM7XG4gICAgfVxufVxuZXhwb3J0cy5PcHRpb25zT3BlcmF0aW9uID0gT3B0aW9uc09wZXJhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wdGlvbnNfb3BlcmF0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/options_operation.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/profiling_level.js":
/*!***************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/profiling_level.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ProfilingLevelOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/command.js\");\n/** @internal */\nclass ProfilingLevelOperation extends command_1.CommandOperation {\n    constructor(db, options) {\n        super(db, options);\n        this.options = options;\n    }\n    get commandName() {\n        return 'profile';\n    }\n    async execute(server, session) {\n        const doc = await super.executeCommand(server, session, { profile: -1 });\n        if (doc.ok === 1) {\n            const was = doc.was;\n            if (was === 0)\n                return 'off';\n            if (was === 1)\n                return 'slow_only';\n            if (was === 2)\n                return 'all';\n            throw new error_1.MongoUnexpectedServerResponseError(`Illegal profiling level value ${was}`);\n        }\n        else {\n            throw new error_1.MongoUnexpectedServerResponseError('Error with profile command');\n        }\n    }\n}\nexports.ProfilingLevelOperation = ProfilingLevelOperation;\n//# sourceMappingURL=profiling_level.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3Byb2ZpbGluZ19sZXZlbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwrQkFBK0I7QUFDL0IsZ0JBQWdCLG1CQUFPLENBQUMsOEZBQVU7QUFDbEMsa0JBQWtCLG1CQUFPLENBQUMsNEdBQVc7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0UsYUFBYTtBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0dBQWtHLElBQUk7QUFDdEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3Byb2ZpbGluZ19sZXZlbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUHJvZmlsaW5nTGV2ZWxPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIFByb2ZpbGluZ0xldmVsT3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGRiLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGRiLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ3Byb2ZpbGUnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBkb2MgPSBhd2FpdCBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIHsgcHJvZmlsZTogLTEgfSk7XG4gICAgICAgIGlmIChkb2Mub2sgPT09IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IHdhcyA9IGRvYy53YXM7XG4gICAgICAgICAgICBpZiAod2FzID09PSAwKVxuICAgICAgICAgICAgICAgIHJldHVybiAnb2ZmJztcbiAgICAgICAgICAgIGlmICh3YXMgPT09IDEpXG4gICAgICAgICAgICAgICAgcmV0dXJuICdzbG93X29ubHknO1xuICAgICAgICAgICAgaWYgKHdhcyA9PT0gMilcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2FsbCc7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1VuZXhwZWN0ZWRTZXJ2ZXJSZXNwb25zZUVycm9yKGBJbGxlZ2FsIHByb2ZpbGluZyBsZXZlbCB2YWx1ZSAke3dhc31gKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvVW5leHBlY3RlZFNlcnZlclJlc3BvbnNlRXJyb3IoJ0Vycm9yIHdpdGggcHJvZmlsZSBjb21tYW5kJyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlByb2ZpbGluZ0xldmVsT3BlcmF0aW9uID0gUHJvZmlsaW5nTGV2ZWxPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9maWxpbmdfbGV2ZWwuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/profiling_level.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/remove_user.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/remove_user.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RemoveUserOperation = void 0;\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass RemoveUserOperation extends command_1.CommandOperation {\n    constructor(db, username, options) {\n        super(db, options);\n        this.options = options;\n        this.username = username;\n    }\n    get commandName() {\n        return 'dropUser';\n    }\n    async execute(server, session) {\n        await super.executeCommand(server, session, { dropUser: this.username });\n        return true;\n    }\n}\nexports.RemoveUserOperation = RemoveUserOperation;\n(0, operation_1.defineAspects)(RemoveUserOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=remove_user.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3JlbW92ZV91c2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDJCQUEyQjtBQUMzQixrQkFBa0IsbUJBQU8sQ0FBQyw0R0FBVztBQUNyQyxvQkFBb0IsbUJBQU8sQ0FBQyxnSEFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELHlCQUF5QjtBQUMvRTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2xpbmt1cy9HaXRodWIvbW9ub3R3by9wYXlsb2FkLXBsdWdpbi1tZXRhL25vZGVfbW9kdWxlcy8ucG5wbS9tb25nb2RiQDYuMTAuMC9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9yZW1vdmVfdXNlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmVtb3ZlVXNlck9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIFJlbW92ZVVzZXJPcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZGIsIHVzZXJuYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGRiLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy51c2VybmFtZSA9IHVzZXJuYW1lO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnZHJvcFVzZXInO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBhd2FpdCBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIHsgZHJvcFVzZXI6IHRoaXMudXNlcm5hbWUgfSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbmV4cG9ydHMuUmVtb3ZlVXNlck9wZXJhdGlvbiA9IFJlbW92ZVVzZXJPcGVyYXRpb247XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoUmVtb3ZlVXNlck9wZXJhdGlvbiwgW29wZXJhdGlvbl8xLkFzcGVjdC5XUklURV9PUEVSQVRJT05dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlbW92ZV91c2VyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/remove_user.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/rename.js":
/*!******************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/rename.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RenameOperation = void 0;\nconst collection_1 = __webpack_require__(/*! ../collection */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/collection.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass RenameOperation extends command_1.CommandOperation {\n    constructor(collection, newName, options) {\n        super(collection, options);\n        this.collection = collection;\n        this.newName = newName;\n        this.options = options;\n        this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');\n    }\n    get commandName() {\n        return 'renameCollection';\n    }\n    async execute(server, session) {\n        // Build the command\n        const renameCollection = this.collection.namespace;\n        const toCollection = this.collection.s.namespace.withCollection(this.newName).toString();\n        const dropTarget = typeof this.options.dropTarget === 'boolean' ? this.options.dropTarget : false;\n        const command = {\n            renameCollection: renameCollection,\n            to: toCollection,\n            dropTarget: dropTarget\n        };\n        await super.executeCommand(server, session, command);\n        return new collection_1.Collection(this.collection.s.db, this.newName, this.collection.s.options);\n    }\n}\nexports.RenameOperation = RenameOperation;\n(0, operation_1.defineAspects)(RenameOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=rename.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3JlbmFtZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUI7QUFDdkIscUJBQXFCLG1CQUFPLENBQUMsd0dBQWU7QUFDNUMsZ0JBQWdCLG1CQUFPLENBQUMsOEZBQVU7QUFDbEMsa0JBQWtCLG1CQUFPLENBQUMsNEdBQVc7QUFDckMsb0JBQW9CLG1CQUFPLENBQUMsZ0hBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3JlbmFtZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmVuYW1lT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgY29sbGVjdGlvbl8xID0gcmVxdWlyZShcIi4uL2NvbGxlY3Rpb25cIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgUmVuYW1lT3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIG5ld05hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoY29sbGVjdGlvbiwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgICAgIHRoaXMubmV3TmFtZSA9IG5ld05hbWU7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMubnMgPSBuZXcgdXRpbHNfMS5Nb25nb0RCTmFtZXNwYWNlKCdhZG1pbicsICckY21kJyk7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdyZW5hbWVDb2xsZWN0aW9uJztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgLy8gQnVpbGQgdGhlIGNvbW1hbmRcbiAgICAgICAgY29uc3QgcmVuYW1lQ29sbGVjdGlvbiA9IHRoaXMuY29sbGVjdGlvbi5uYW1lc3BhY2U7XG4gICAgICAgIGNvbnN0IHRvQ29sbGVjdGlvbiA9IHRoaXMuY29sbGVjdGlvbi5zLm5hbWVzcGFjZS53aXRoQ29sbGVjdGlvbih0aGlzLm5ld05hbWUpLnRvU3RyaW5nKCk7XG4gICAgICAgIGNvbnN0IGRyb3BUYXJnZXQgPSB0eXBlb2YgdGhpcy5vcHRpb25zLmRyb3BUYXJnZXQgPT09ICdib29sZWFuJyA/IHRoaXMub3B0aW9ucy5kcm9wVGFyZ2V0IDogZmFsc2U7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSB7XG4gICAgICAgICAgICByZW5hbWVDb2xsZWN0aW9uOiByZW5hbWVDb2xsZWN0aW9uLFxuICAgICAgICAgICAgdG86IHRvQ29sbGVjdGlvbixcbiAgICAgICAgICAgIGRyb3BUYXJnZXQ6IGRyb3BUYXJnZXRcbiAgICAgICAgfTtcbiAgICAgICAgYXdhaXQgc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCBjb21tYW5kKTtcbiAgICAgICAgcmV0dXJuIG5ldyBjb2xsZWN0aW9uXzEuQ29sbGVjdGlvbih0aGlzLmNvbGxlY3Rpb24ucy5kYiwgdGhpcy5uZXdOYW1lLCB0aGlzLmNvbGxlY3Rpb24ucy5vcHRpb25zKTtcbiAgICB9XG59XG5leHBvcnRzLlJlbmFtZU9wZXJhdGlvbiA9IFJlbmFtZU9wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShSZW5hbWVPcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZW5hbWUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/rename.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/run_command.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/run_command.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RunAdminCommandOperation = exports.RunCommandOperation = void 0;\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass RunCommandOperation extends operation_1.AbstractOperation {\n    constructor(parent, command, options) {\n        super(options);\n        this.command = command;\n        this.options = options;\n        this.ns = parent.s.namespace.withCollection('$cmd');\n    }\n    get commandName() {\n        return 'runCommand';\n    }\n    async execute(server, session) {\n        this.server = server;\n        const res = await server.command(this.ns, this.command, {\n            ...this.options,\n            readPreference: this.readPreference,\n            session\n        }, this.options.responseType);\n        return res;\n    }\n}\nexports.RunCommandOperation = RunCommandOperation;\nclass RunAdminCommandOperation extends operation_1.AbstractOperation {\n    constructor(command, options) {\n        super(options);\n        this.command = command;\n        this.options = options;\n        this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');\n    }\n    get commandName() {\n        return 'runCommand';\n    }\n    async execute(server, session) {\n        this.server = server;\n        const res = await server.command(this.ns, this.command, {\n            ...this.options,\n            readPreference: this.readPreference,\n            session\n        });\n        return res;\n    }\n}\nexports.RunAdminCommandOperation = RunAdminCommandOperation;\n//# sourceMappingURL=run_command.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3J1bl9jb21tYW5kLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdDQUFnQyxHQUFHLDJCQUEyQjtBQUM5RCxnQkFBZ0IsbUJBQU8sQ0FBQyw4RkFBVTtBQUNsQyxvQkFBb0IsbUJBQU8sQ0FBQyxnSEFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9saW5rdXMvR2l0aHViL21vbm90d28vcGF5bG9hZC1wbHVnaW4tbWV0YS9ub2RlX21vZHVsZXMvLnBucG0vbW9uZ29kYkA2LjEwLjAvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvcnVuX2NvbW1hbmQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJ1bkFkbWluQ29tbWFuZE9wZXJhdGlvbiA9IGV4cG9ydHMuUnVuQ29tbWFuZE9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIFJ1bkNvbW1hbmRPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IocGFyZW50LCBjb21tYW5kLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmNvbW1hbmQgPSBjb21tYW5kO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLm5zID0gcGFyZW50LnMubmFtZXNwYWNlLndpdGhDb2xsZWN0aW9uKCckY21kJyk7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdydW5Db21tYW5kJztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgdGhpcy5zZXJ2ZXIgPSBzZXJ2ZXI7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHNlcnZlci5jb21tYW5kKHRoaXMubnMsIHRoaXMuY29tbWFuZCwge1xuICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgcmVhZFByZWZlcmVuY2U6IHRoaXMucmVhZFByZWZlcmVuY2UsXG4gICAgICAgICAgICBzZXNzaW9uXG4gICAgICAgIH0sIHRoaXMub3B0aW9ucy5yZXNwb25zZVR5cGUpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbn1cbmV4cG9ydHMuUnVuQ29tbWFuZE9wZXJhdGlvbiA9IFJ1bkNvbW1hbmRPcGVyYXRpb247XG5jbGFzcyBSdW5BZG1pbkNvbW1hbmRPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29tbWFuZCwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5jb21tYW5kID0gY29tbWFuZDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5ucyA9IG5ldyB1dGlsc18xLk1vbmdvREJOYW1lc3BhY2UoJ2FkbWluJywgJyRjbWQnKTtcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ3J1bkNvbW1hbmQnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICB0aGlzLnNlcnZlciA9IHNlcnZlcjtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgc2VydmVyLmNvbW1hbmQodGhpcy5ucywgdGhpcy5jb21tYW5kLCB7XG4gICAgICAgICAgICAuLi50aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICByZWFkUHJlZmVyZW5jZTogdGhpcy5yZWFkUHJlZmVyZW5jZSxcbiAgICAgICAgICAgIHNlc3Npb25cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxufVxuZXhwb3J0cy5SdW5BZG1pbkNvbW1hbmRPcGVyYXRpb24gPSBSdW5BZG1pbkNvbW1hbmRPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ydW5fY29tbWFuZC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/run_command.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/search_indexes/create.js":
/*!*********************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/search_indexes/create.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CreateSearchIndexesOperation = void 0;\nconst operation_1 = __webpack_require__(/*! ../operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass CreateSearchIndexesOperation extends operation_1.AbstractOperation {\n    constructor(collection, descriptions) {\n        super();\n        this.collection = collection;\n        this.descriptions = descriptions;\n    }\n    get commandName() {\n        return 'createSearchIndexes';\n    }\n    async execute(server, session) {\n        const namespace = this.collection.fullNamespace;\n        const command = {\n            createSearchIndexes: namespace.collection,\n            indexes: this.descriptions\n        };\n        const res = await server.command(namespace, command, { session });\n        const indexesCreated = res?.indexesCreated ?? [];\n        return indexesCreated.map(({ name }) => name);\n    }\n}\nexports.CreateSearchIndexesOperation = CreateSearchIndexesOperation;\n//# sourceMappingURL=create.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3NlYXJjaF9pbmRleGVzL2NyZWF0ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQ0FBb0M7QUFDcEMsb0JBQW9CLG1CQUFPLENBQUMsaUhBQWM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBK0QsU0FBUztBQUN4RTtBQUNBLHFDQUFxQyxNQUFNO0FBQzNDO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9saW5rdXMvR2l0aHViL21vbm90d28vcGF5bG9hZC1wbHVnaW4tbWV0YS9ub2RlX21vZHVsZXMvLnBucG0vbW9uZ29kYkA2LjEwLjAvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvc2VhcmNoX2luZGV4ZXMvY3JlYXRlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DcmVhdGVTZWFyY2hJbmRleGVzT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgQ3JlYXRlU2VhcmNoSW5kZXhlc09wZXJhdGlvbiBleHRlbmRzIG9wZXJhdGlvbl8xLkFic3RyYWN0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBkZXNjcmlwdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbnMgPSBkZXNjcmlwdGlvbnM7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdjcmVhdGVTZWFyY2hJbmRleGVzJztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgbmFtZXNwYWNlID0gdGhpcy5jb2xsZWN0aW9uLmZ1bGxOYW1lc3BhY2U7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSB7XG4gICAgICAgICAgICBjcmVhdGVTZWFyY2hJbmRleGVzOiBuYW1lc3BhY2UuY29sbGVjdGlvbixcbiAgICAgICAgICAgIGluZGV4ZXM6IHRoaXMuZGVzY3JpcHRpb25zXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHNlcnZlci5jb21tYW5kKG5hbWVzcGFjZSwgY29tbWFuZCwgeyBzZXNzaW9uIH0pO1xuICAgICAgICBjb25zdCBpbmRleGVzQ3JlYXRlZCA9IHJlcz8uaW5kZXhlc0NyZWF0ZWQgPz8gW107XG4gICAgICAgIHJldHVybiBpbmRleGVzQ3JlYXRlZC5tYXAoKHsgbmFtZSB9KSA9PiBuYW1lKTtcbiAgICB9XG59XG5leHBvcnRzLkNyZWF0ZVNlYXJjaEluZGV4ZXNPcGVyYXRpb24gPSBDcmVhdGVTZWFyY2hJbmRleGVzT3BlcmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/search_indexes/create.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/search_indexes/drop.js":
/*!*******************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/search_indexes/drop.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DropSearchIndexOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst operation_1 = __webpack_require__(/*! ../operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass DropSearchIndexOperation extends operation_1.AbstractOperation {\n    constructor(collection, name) {\n        super();\n        this.collection = collection;\n        this.name = name;\n    }\n    get commandName() {\n        return 'dropSearchIndex';\n    }\n    async execute(server, session) {\n        const namespace = this.collection.fullNamespace;\n        const command = {\n            dropSearchIndex: namespace.collection\n        };\n        if (typeof this.name === 'string') {\n            command.name = this.name;\n        }\n        try {\n            await server.command(namespace, command, { session });\n        }\n        catch (error) {\n            const isNamespaceNotFoundError = error instanceof error_1.MongoServerError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound;\n            if (!isNamespaceNotFoundError) {\n                throw error;\n            }\n        }\n    }\n}\nexports.DropSearchIndexOperation = DropSearchIndexOperation;\n//# sourceMappingURL=drop.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3NlYXJjaF9pbmRleGVzL2Ryb3AuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0NBQWdDO0FBQ2hDLGdCQUFnQixtQkFBTyxDQUFDLGlHQUFhO0FBQ3JDLG9CQUFvQixtQkFBTyxDQUFDLGlIQUFjO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELFNBQVM7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3NlYXJjaF9pbmRleGVzL2Ryb3AuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRyb3BTZWFyY2hJbmRleE9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vLi4vZXJyb3JcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBEcm9wU2VhcmNoSW5kZXhPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgbmFtZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnZHJvcFNlYXJjaEluZGV4JztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgbmFtZXNwYWNlID0gdGhpcy5jb2xsZWN0aW9uLmZ1bGxOYW1lc3BhY2U7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSB7XG4gICAgICAgICAgICBkcm9wU2VhcmNoSW5kZXg6IG5hbWVzcGFjZS5jb2xsZWN0aW9uXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5uYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29tbWFuZC5uYW1lID0gdGhpcy5uYW1lO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBzZXJ2ZXIuY29tbWFuZChuYW1lc3BhY2UsIGNvbW1hbmQsIHsgc2Vzc2lvbiB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnN0IGlzTmFtZXNwYWNlTm90Rm91bmRFcnJvciA9IGVycm9yIGluc3RhbmNlb2YgZXJyb3JfMS5Nb25nb1NlcnZlckVycm9yICYmIGVycm9yLmNvZGUgPT09IGVycm9yXzEuTU9OR09EQl9FUlJPUl9DT0RFUy5OYW1lc3BhY2VOb3RGb3VuZDtcbiAgICAgICAgICAgIGlmICghaXNOYW1lc3BhY2VOb3RGb3VuZEVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkRyb3BTZWFyY2hJbmRleE9wZXJhdGlvbiA9IERyb3BTZWFyY2hJbmRleE9wZXJhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRyb3AuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/search_indexes/drop.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/search_indexes/update.js":
/*!*********************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/search_indexes/update.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UpdateSearchIndexOperation = void 0;\nconst operation_1 = __webpack_require__(/*! ../operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass UpdateSearchIndexOperation extends operation_1.AbstractOperation {\n    constructor(collection, name, definition) {\n        super();\n        this.collection = collection;\n        this.name = name;\n        this.definition = definition;\n    }\n    get commandName() {\n        return 'updateSearchIndex';\n    }\n    async execute(server, session) {\n        const namespace = this.collection.fullNamespace;\n        const command = {\n            updateSearchIndex: namespace.collection,\n            name: this.name,\n            definition: this.definition\n        };\n        await server.command(namespace, command, { session });\n        return;\n    }\n}\nexports.UpdateSearchIndexOperation = UpdateSearchIndexOperation;\n//# sourceMappingURL=update.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3NlYXJjaF9pbmRleGVzL3VwZGF0ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQ0FBa0M7QUFDbEMsb0JBQW9CLG1CQUFPLENBQUMsaUhBQWM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELFNBQVM7QUFDNUQ7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3NlYXJjaF9pbmRleGVzL3VwZGF0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVXBkYXRlU2VhcmNoSW5kZXhPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBVcGRhdGVTZWFyY2hJbmRleE9wZXJhdGlvbiBleHRlbmRzIG9wZXJhdGlvbl8xLkFic3RyYWN0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBuYW1lLCBkZWZpbml0aW9uKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuZGVmaW5pdGlvbiA9IGRlZmluaXRpb247XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICd1cGRhdGVTZWFyY2hJbmRleCc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IG5hbWVzcGFjZSA9IHRoaXMuY29sbGVjdGlvbi5mdWxsTmFtZXNwYWNlO1xuICAgICAgICBjb25zdCBjb21tYW5kID0ge1xuICAgICAgICAgICAgdXBkYXRlU2VhcmNoSW5kZXg6IG5hbWVzcGFjZS5jb2xsZWN0aW9uLFxuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgZGVmaW5pdGlvbjogdGhpcy5kZWZpbml0aW9uXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IHNlcnZlci5jb21tYW5kKG5hbWVzcGFjZSwgY29tbWFuZCwgeyBzZXNzaW9uIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgfVxufVxuZXhwb3J0cy5VcGRhdGVTZWFyY2hJbmRleE9wZXJhdGlvbiA9IFVwZGF0ZVNlYXJjaEluZGV4T3BlcmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXBkYXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/search_indexes/update.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/set_profiling_level.js":
/*!*******************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/set_profiling_level.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SetProfilingLevelOperation = exports.ProfilingLevel = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/command.js\");\nconst levelValues = new Set(['off', 'slow_only', 'all']);\n/** @public */\nexports.ProfilingLevel = Object.freeze({\n    off: 'off',\n    slowOnly: 'slow_only',\n    all: 'all'\n});\n/** @internal */\nclass SetProfilingLevelOperation extends command_1.CommandOperation {\n    constructor(db, level, options) {\n        super(db, options);\n        this.options = options;\n        switch (level) {\n            case exports.ProfilingLevel.off:\n                this.profile = 0;\n                break;\n            case exports.ProfilingLevel.slowOnly:\n                this.profile = 1;\n                break;\n            case exports.ProfilingLevel.all:\n                this.profile = 2;\n                break;\n            default:\n                this.profile = 0;\n                break;\n        }\n        this.level = level;\n    }\n    get commandName() {\n        return 'profile';\n    }\n    async execute(server, session) {\n        const level = this.level;\n        if (!levelValues.has(level)) {\n            throw new error_1.MongoInvalidArgumentError(`Profiling level must be one of \"${(0, utils_1.enumToString)(exports.ProfilingLevel)}\"`);\n        }\n        // TODO(NODE-3483): Determine error to put here\n        await super.executeCommand(server, session, { profile: this.profile });\n        return level;\n    }\n}\nexports.SetProfilingLevelOperation = SetProfilingLevelOperation;\n//# sourceMappingURL=set_profiling_level.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3NldF9wcm9maWxpbmdfbGV2ZWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0NBQWtDLEdBQUcsc0JBQXNCO0FBQzNELGdCQUFnQixtQkFBTyxDQUFDLDhGQUFVO0FBQ2xDLGdCQUFnQixtQkFBTyxDQUFDLDhGQUFVO0FBQ2xDLGtCQUFrQixtQkFBTyxDQUFDLDRHQUFXO0FBQ3JDO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJGQUEyRixrREFBa0Q7QUFDN0k7QUFDQTtBQUNBLHNEQUFzRCx1QkFBdUI7QUFDN0U7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3NldF9wcm9maWxpbmdfbGV2ZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNldFByb2ZpbGluZ0xldmVsT3BlcmF0aW9uID0gZXhwb3J0cy5Qcm9maWxpbmdMZXZlbCA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbmNvbnN0IGxldmVsVmFsdWVzID0gbmV3IFNldChbJ29mZicsICdzbG93X29ubHknLCAnYWxsJ10pO1xuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydHMuUHJvZmlsaW5nTGV2ZWwgPSBPYmplY3QuZnJlZXplKHtcbiAgICBvZmY6ICdvZmYnLFxuICAgIHNsb3dPbmx5OiAnc2xvd19vbmx5JyxcbiAgICBhbGw6ICdhbGwnXG59KTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIFNldFByb2ZpbGluZ0xldmVsT3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGRiLCBsZXZlbCwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihkYiwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHN3aXRjaCAobGV2ZWwpIHtcbiAgICAgICAgICAgIGNhc2UgZXhwb3J0cy5Qcm9maWxpbmdMZXZlbC5vZmY6XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9maWxlID0gMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZXhwb3J0cy5Qcm9maWxpbmdMZXZlbC5zbG93T25seTpcbiAgICAgICAgICAgICAgICB0aGlzLnByb2ZpbGUgPSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBleHBvcnRzLlByb2ZpbGluZ0xldmVsLmFsbDpcbiAgICAgICAgICAgICAgICB0aGlzLnByb2ZpbGUgPSAyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aGlzLnByb2ZpbGUgPSAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGV2ZWwgPSBsZXZlbDtcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ3Byb2ZpbGUnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBsZXZlbCA9IHRoaXMubGV2ZWw7XG4gICAgICAgIGlmICghbGV2ZWxWYWx1ZXMuaGFzKGxldmVsKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcihgUHJvZmlsaW5nIGxldmVsIG11c3QgYmUgb25lIG9mIFwiJHsoMCwgdXRpbHNfMS5lbnVtVG9TdHJpbmcpKGV4cG9ydHMuUHJvZmlsaW5nTGV2ZWwpfVwiYCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVE9ETyhOT0RFLTM0ODMpOiBEZXRlcm1pbmUgZXJyb3IgdG8gcHV0IGhlcmVcbiAgICAgICAgYXdhaXQgc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCB7IHByb2ZpbGU6IHRoaXMucHJvZmlsZSB9KTtcbiAgICAgICAgcmV0dXJuIGxldmVsO1xuICAgIH1cbn1cbmV4cG9ydHMuU2V0UHJvZmlsaW5nTGV2ZWxPcGVyYXRpb24gPSBTZXRQcm9maWxpbmdMZXZlbE9wZXJhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNldF9wcm9maWxpbmdfbGV2ZWwuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/set_profiling_level.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/stats.js":
/*!*****************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/stats.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DbStatsOperation = void 0;\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass DbStatsOperation extends command_1.CommandOperation {\n    constructor(db, options) {\n        super(db, options);\n        this.options = options;\n    }\n    get commandName() {\n        return 'dbStats';\n    }\n    async execute(server, session) {\n        const command = { dbStats: true };\n        if (this.options.scale != null) {\n            command.scale = this.options.scale;\n        }\n        return await super.executeCommand(server, session, command);\n    }\n}\nexports.DbStatsOperation = DbStatsOperation;\n(0, operation_1.defineAspects)(DbStatsOperation, [operation_1.Aspect.READ_OPERATION]);\n//# sourceMappingURL=stats.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3N0YXRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4QixrQkFBa0IsbUJBQU8sQ0FBQyw0R0FBVztBQUNyQyxvQkFBb0IsbUJBQU8sQ0FBQyxnSEFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2xpbmt1cy9HaXRodWIvbW9ub3R3by9wYXlsb2FkLXBsdWdpbi1tZXRhL25vZGVfbW9kdWxlcy8ucG5wbS9tb25nb2RiQDYuMTAuMC9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9zdGF0cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRGJTdGF0c09wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIERiU3RhdHNPcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZGIsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoZGIsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnZGJTdGF0cyc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSB7IGRiU3RhdHM6IHRydWUgfTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb21tYW5kLnNjYWxlID0gdGhpcy5vcHRpb25zLnNjYWxlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhd2FpdCBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIGNvbW1hbmQpO1xuICAgIH1cbn1cbmV4cG9ydHMuRGJTdGF0c09wZXJhdGlvbiA9IERiU3RhdHNPcGVyYXRpb247XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoRGJTdGF0c09wZXJhdGlvbiwgW29wZXJhdGlvbl8xLkFzcGVjdC5SRUFEX09QRVJBVElPTl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/stats.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/update.js":
/*!******************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/update.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ReplaceOneOperation = exports.UpdateManyOperation = exports.UpdateOneOperation = exports.UpdateOperation = void 0;\nexports.makeUpdateStatement = makeUpdateStatement;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/operation.js\");\n/**\n * @internal\n * UpdateOperation is used in bulk write, while UpdateOneOperation and UpdateManyOperation are only used in the collections API\n */\nclass UpdateOperation extends command_1.CommandOperation {\n    constructor(ns, statements, options) {\n        super(undefined, options);\n        this.options = options;\n        this.ns = ns;\n        this.statements = statements;\n    }\n    get commandName() {\n        return 'update';\n    }\n    get canRetryWrite() {\n        if (super.canRetryWrite === false) {\n            return false;\n        }\n        return this.statements.every(op => op.multi == null || op.multi === false);\n    }\n    async execute(server, session) {\n        const options = this.options ?? {};\n        const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n        const command = {\n            update: this.ns.collection,\n            updates: this.statements,\n            ordered\n        };\n        if (typeof options.bypassDocumentValidation === 'boolean') {\n            command.bypassDocumentValidation = options.bypassDocumentValidation;\n        }\n        if (options.let) {\n            command.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        const unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n        if (unacknowledgedWrite) {\n            if (this.statements.find((o) => o.hint)) {\n                // TODO(NODE-3541): fix error for hint with unacknowledged writes\n                throw new error_1.MongoCompatibilityError(`hint is not supported with unacknowledged writes`);\n            }\n        }\n        const res = await super.executeCommand(server, session, command);\n        return res;\n    }\n}\nexports.UpdateOperation = UpdateOperation;\n/** @internal */\nclass UpdateOneOperation extends UpdateOperation {\n    constructor(collection, filter, update, options) {\n        super(collection.s.namespace, [makeUpdateStatement(filter, update, { ...options, multi: false })], options);\n        if (!(0, utils_1.hasAtomicOperators)(update)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (this.explain != null)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            modifiedCount: res.nModified ?? res.n,\n            upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n            upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n            matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n        };\n    }\n}\nexports.UpdateOneOperation = UpdateOneOperation;\n/** @internal */\nclass UpdateManyOperation extends UpdateOperation {\n    constructor(collection, filter, update, options) {\n        super(collection.s.namespace, [makeUpdateStatement(filter, update, { ...options, multi: true })], options);\n        if (!(0, utils_1.hasAtomicOperators)(update)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (this.explain != null)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            modifiedCount: res.nModified ?? res.n,\n            upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n            upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n            matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n        };\n    }\n}\nexports.UpdateManyOperation = UpdateManyOperation;\n/** @internal */\nclass ReplaceOneOperation extends UpdateOperation {\n    constructor(collection, filter, replacement, options) {\n        super(collection.s.namespace, [makeUpdateStatement(filter, replacement, { ...options, multi: false })], options);\n        if ((0, utils_1.hasAtomicOperators)(replacement)) {\n            throw new error_1.MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n        }\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (this.explain != null)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            modifiedCount: res.nModified ?? res.n,\n            upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n            upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n            matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n        };\n    }\n}\nexports.ReplaceOneOperation = ReplaceOneOperation;\nfunction makeUpdateStatement(filter, update, options) {\n    if (filter == null || typeof filter !== 'object') {\n        throw new error_1.MongoInvalidArgumentError('Selector must be a valid JavaScript object');\n    }\n    if (update == null || typeof update !== 'object') {\n        throw new error_1.MongoInvalidArgumentError('Document must be a valid JavaScript object');\n    }\n    const op = { q: filter, u: update };\n    if (typeof options.upsert === 'boolean') {\n        op.upsert = options.upsert;\n    }\n    if (options.multi) {\n        op.multi = options.multi;\n    }\n    if (options.hint) {\n        op.hint = options.hint;\n    }\n    if (options.arrayFilters) {\n        op.arrayFilters = options.arrayFilters;\n    }\n    if (options.collation) {\n        op.collation = options.collation;\n    }\n    return op;\n}\n(0, operation_1.defineAspects)(UpdateOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.SKIP_COLLATION]);\n(0, operation_1.defineAspects)(UpdateOneOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n(0, operation_1.defineAspects)(UpdateManyOperation, [\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n(0, operation_1.defineAspects)(ReplaceOneOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n//# sourceMappingURL=update.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/update.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/validate_collection.js":
/*!*******************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/validate_collection.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ValidateCollectionOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/command.js\");\n/** @internal */\nclass ValidateCollectionOperation extends command_1.CommandOperation {\n    constructor(admin, collectionName, options) {\n        // Decorate command with extra options\n        const command = { validate: collectionName };\n        const keys = Object.keys(options);\n        for (let i = 0; i < keys.length; i++) {\n            if (Object.prototype.hasOwnProperty.call(options, keys[i]) && keys[i] !== 'session') {\n                command[keys[i]] = options[keys[i]];\n            }\n        }\n        super(admin.s.db, options);\n        this.options = options;\n        this.command = command;\n        this.collectionName = collectionName;\n    }\n    get commandName() {\n        return 'validate';\n    }\n    async execute(server, session) {\n        const collectionName = this.collectionName;\n        const doc = await super.executeCommand(server, session, this.command);\n        if (doc.result != null && typeof doc.result !== 'string')\n            throw new error_1.MongoUnexpectedServerResponseError('Error with validation data');\n        if (doc.result != null && doc.result.match(/exception|corrupt/) != null)\n            throw new error_1.MongoUnexpectedServerResponseError(`Invalid collection ${collectionName}`);\n        if (doc.valid != null && !doc.valid)\n            throw new error_1.MongoUnexpectedServerResponseError(`Invalid collection ${collectionName}`);\n        return doc;\n    }\n}\nexports.ValidateCollectionOperation = ValidateCollectionOperation;\n//# sourceMappingURL=validate_collection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3ZhbGlkYXRlX2NvbGxlY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUNBQW1DO0FBQ25DLGdCQUFnQixtQkFBTyxDQUFDLDhGQUFVO0FBQ2xDLGtCQUFrQixtQkFBTyxDQUFDLDRHQUFXO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0Esd0JBQXdCLGlCQUFpQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1RkFBdUYsZUFBZTtBQUN0RztBQUNBLHVGQUF1RixlQUFlO0FBQ3RHO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQyIsInNvdXJjZXMiOlsiL1VzZXJzL2xpbmt1cy9HaXRodWIvbW9ub3R3by9wYXlsb2FkLXBsdWdpbi1tZXRhL25vZGVfbW9kdWxlcy8ucG5wbS9tb25nb2RiQDYuMTAuMC9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy92YWxpZGF0ZV9jb2xsZWN0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5WYWxpZGF0ZUNvbGxlY3Rpb25PcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIFZhbGlkYXRlQ29sbGVjdGlvbk9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihhZG1pbiwgY29sbGVjdGlvbk5hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgLy8gRGVjb3JhdGUgY29tbWFuZCB3aXRoIGV4dHJhIG9wdGlvbnNcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHsgdmFsaWRhdGU6IGNvbGxlY3Rpb25OYW1lIH07XG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsIGtleXNbaV0pICYmIGtleXNbaV0gIT09ICdzZXNzaW9uJykge1xuICAgICAgICAgICAgICAgIGNvbW1hbmRba2V5c1tpXV0gPSBvcHRpb25zW2tleXNbaV1dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN1cGVyKGFkbWluLnMuZGIsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmNvbW1hbmQgPSBjb21tYW5kO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb25OYW1lID0gY29sbGVjdGlvbk5hbWU7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICd2YWxpZGF0ZSc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb25OYW1lID0gdGhpcy5jb2xsZWN0aW9uTmFtZTtcbiAgICAgICAgY29uc3QgZG9jID0gYXdhaXQgc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCB0aGlzLmNvbW1hbmQpO1xuICAgICAgICBpZiAoZG9jLnJlc3VsdCAhPSBudWxsICYmIHR5cGVvZiBkb2MucmVzdWx0ICE9PSAnc3RyaW5nJylcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvVW5leHBlY3RlZFNlcnZlclJlc3BvbnNlRXJyb3IoJ0Vycm9yIHdpdGggdmFsaWRhdGlvbiBkYXRhJyk7XG4gICAgICAgIGlmIChkb2MucmVzdWx0ICE9IG51bGwgJiYgZG9jLnJlc3VsdC5tYXRjaCgvZXhjZXB0aW9ufGNvcnJ1cHQvKSAhPSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29VbmV4cGVjdGVkU2VydmVyUmVzcG9uc2VFcnJvcihgSW52YWxpZCBjb2xsZWN0aW9uICR7Y29sbGVjdGlvbk5hbWV9YCk7XG4gICAgICAgIGlmIChkb2MudmFsaWQgIT0gbnVsbCAmJiAhZG9jLnZhbGlkKVxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29VbmV4cGVjdGVkU2VydmVyUmVzcG9uc2VFcnJvcihgSW52YWxpZCBjb2xsZWN0aW9uICR7Y29sbGVjdGlvbk5hbWV9YCk7XG4gICAgICAgIHJldHVybiBkb2M7XG4gICAgfVxufVxuZXhwb3J0cy5WYWxpZGF0ZUNvbGxlY3Rpb25PcGVyYXRpb24gPSBWYWxpZGF0ZUNvbGxlY3Rpb25PcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD12YWxpZGF0ZV9jb2xsZWN0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/validate_collection.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_concern.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_concern.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ReadConcern = exports.ReadConcernLevel = void 0;\n/** @public */\nexports.ReadConcernLevel = Object.freeze({\n    local: 'local',\n    majority: 'majority',\n    linearizable: 'linearizable',\n    available: 'available',\n    snapshot: 'snapshot'\n});\n/**\n * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties\n * of the data read from replica sets and replica set shards.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/reference/read-concern/index.html\n */\nclass ReadConcern {\n    /** Constructs a ReadConcern from the read concern level.*/\n    constructor(level) {\n        /**\n         * A spec test exists that allows level to be any string.\n         * \"invalid readConcern with out stage\"\n         * @see ./test/spec/crud/v2/aggregate-out-readConcern.json\n         * @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#unknown-levels-and-additional-options-for-string-based-readconcerns\n         */\n        this.level = exports.ReadConcernLevel[level] ?? level;\n    }\n    /**\n     * Construct a ReadConcern given an options object.\n     *\n     * @param options - The options object from which to extract the write concern.\n     */\n    static fromOptions(options) {\n        if (options == null) {\n            return;\n        }\n        if (options.readConcern) {\n            const { readConcern } = options;\n            if (readConcern instanceof ReadConcern) {\n                return readConcern;\n            }\n            else if (typeof readConcern === 'string') {\n                return new ReadConcern(readConcern);\n            }\n            else if ('level' in readConcern && readConcern.level) {\n                return new ReadConcern(readConcern.level);\n            }\n        }\n        if (options.level) {\n            return new ReadConcern(options.level);\n        }\n        return;\n    }\n    static get MAJORITY() {\n        return exports.ReadConcernLevel.majority;\n    }\n    static get AVAILABLE() {\n        return exports.ReadConcernLevel.available;\n    }\n    static get LINEARIZABLE() {\n        return exports.ReadConcernLevel.linearizable;\n    }\n    static get SNAPSHOT() {\n        return exports.ReadConcernLevel.snapshot;\n    }\n    toJSON() {\n        return { level: this.level };\n    }\n}\nexports.ReadConcern = ReadConcern;\n//# sourceMappingURL=read_concern.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9yZWFkX2NvbmNlcm4uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUJBQW1CLEdBQUcsd0JBQXdCO0FBQzlDO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsY0FBYztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9yZWFkX2NvbmNlcm4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJlYWRDb25jZXJuID0gZXhwb3J0cy5SZWFkQ29uY2VybkxldmVsID0gdm9pZCAwO1xuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydHMuUmVhZENvbmNlcm5MZXZlbCA9IE9iamVjdC5mcmVlemUoe1xuICAgIGxvY2FsOiAnbG9jYWwnLFxuICAgIG1ham9yaXR5OiAnbWFqb3JpdHknLFxuICAgIGxpbmVhcml6YWJsZTogJ2xpbmVhcml6YWJsZScsXG4gICAgYXZhaWxhYmxlOiAnYXZhaWxhYmxlJyxcbiAgICBzbmFwc2hvdDogJ3NuYXBzaG90J1xufSk7XG4vKipcbiAqIFRoZSBNb25nb0RCIFJlYWRDb25jZXJuLCB3aGljaCBhbGxvd3MgZm9yIGNvbnRyb2wgb2YgdGhlIGNvbnNpc3RlbmN5IGFuZCBpc29sYXRpb24gcHJvcGVydGllc1xuICogb2YgdGhlIGRhdGEgcmVhZCBmcm9tIHJlcGxpY2Egc2V0cyBhbmQgcmVwbGljYSBzZXQgc2hhcmRzLlxuICogQHB1YmxpY1xuICpcbiAqIEBzZWUgaHR0cHM6Ly93d3cubW9uZ29kYi5jb20vZG9jcy9tYW51YWwvcmVmZXJlbmNlL3JlYWQtY29uY2Vybi9pbmRleC5odG1sXG4gKi9cbmNsYXNzIFJlYWRDb25jZXJuIHtcbiAgICAvKiogQ29uc3RydWN0cyBhIFJlYWRDb25jZXJuIGZyb20gdGhlIHJlYWQgY29uY2VybiBsZXZlbC4qL1xuICAgIGNvbnN0cnVjdG9yKGxldmVsKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHNwZWMgdGVzdCBleGlzdHMgdGhhdCBhbGxvd3MgbGV2ZWwgdG8gYmUgYW55IHN0cmluZy5cbiAgICAgICAgICogXCJpbnZhbGlkIHJlYWRDb25jZXJuIHdpdGggb3V0IHN0YWdlXCJcbiAgICAgICAgICogQHNlZSAuL3Rlc3Qvc3BlYy9jcnVkL3YyL2FnZ3JlZ2F0ZS1vdXQtcmVhZENvbmNlcm4uanNvblxuICAgICAgICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb25nb2RiL3NwZWNpZmljYXRpb25zL2Jsb2IvbWFzdGVyL3NvdXJjZS9yZWFkLXdyaXRlLWNvbmNlcm4vcmVhZC13cml0ZS1jb25jZXJuLnJzdCN1bmtub3duLWxldmVscy1hbmQtYWRkaXRpb25hbC1vcHRpb25zLWZvci1zdHJpbmctYmFzZWQtcmVhZGNvbmNlcm5zXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmxldmVsID0gZXhwb3J0cy5SZWFkQ29uY2VybkxldmVsW2xldmVsXSA/PyBsZXZlbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0IGEgUmVhZENvbmNlcm4gZ2l2ZW4gYW4gb3B0aW9ucyBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIG9iamVjdCBmcm9tIHdoaWNoIHRvIGV4dHJhY3QgdGhlIHdyaXRlIGNvbmNlcm4uXG4gICAgICovXG4gICAgc3RhdGljIGZyb21PcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnJlYWRDb25jZXJuKSB7XG4gICAgICAgICAgICBjb25zdCB7IHJlYWRDb25jZXJuIH0gPSBvcHRpb25zO1xuICAgICAgICAgICAgaWYgKHJlYWRDb25jZXJuIGluc3RhbmNlb2YgUmVhZENvbmNlcm4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVhZENvbmNlcm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgcmVhZENvbmNlcm4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWFkQ29uY2VybihyZWFkQ29uY2Vybik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgnbGV2ZWwnIGluIHJlYWRDb25jZXJuICYmIHJlYWRDb25jZXJuLmxldmVsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWFkQ29uY2VybihyZWFkQ29uY2Vybi5sZXZlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMubGV2ZWwpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVhZENvbmNlcm4ob3B0aW9ucy5sZXZlbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IE1BSk9SSVRZKCkge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5SZWFkQ29uY2VybkxldmVsLm1ham9yaXR5O1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IEFWQUlMQUJMRSgpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuUmVhZENvbmNlcm5MZXZlbC5hdmFpbGFibGU7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgTElORUFSSVpBQkxFKCkge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5SZWFkQ29uY2VybkxldmVsLmxpbmVhcml6YWJsZTtcbiAgICB9XG4gICAgc3RhdGljIGdldCBTTkFQU0hPVCgpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuUmVhZENvbmNlcm5MZXZlbC5zbmFwc2hvdDtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4geyBsZXZlbDogdGhpcy5sZXZlbCB9O1xuICAgIH1cbn1cbmV4cG9ydHMuUmVhZENvbmNlcm4gPSBSZWFkQ29uY2Vybjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWRfY29uY2Vybi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_concern.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_preference.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_preference.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ReadPreference = exports.ReadPreferenceMode = void 0;\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\n/** @public */\nexports.ReadPreferenceMode = Object.freeze({\n    primary: 'primary',\n    primaryPreferred: 'primaryPreferred',\n    secondary: 'secondary',\n    secondaryPreferred: 'secondaryPreferred',\n    nearest: 'nearest'\n});\n/**\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/core/read-preference/\n */\nclass ReadPreference {\n    /**\n     * @param mode - A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n     * @param tags - A tag set used to target reads to members with the specified tag(s). tagSet is not available if using read preference mode primary.\n     * @param options - Additional read preference options\n     */\n    constructor(mode, tags, options) {\n        if (!ReadPreference.isValid(mode)) {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference mode ${JSON.stringify(mode)}`);\n        }\n        if (options == null && typeof tags === 'object' && !Array.isArray(tags)) {\n            options = tags;\n            tags = undefined;\n        }\n        else if (tags && !Array.isArray(tags)) {\n            throw new error_1.MongoInvalidArgumentError('ReadPreference tags must be an array');\n        }\n        this.mode = mode;\n        this.tags = tags;\n        this.hedge = options?.hedge;\n        this.maxStalenessSeconds = undefined;\n        this.minWireVersion = undefined;\n        options = options ?? {};\n        if (options.maxStalenessSeconds != null) {\n            if (options.maxStalenessSeconds <= 0) {\n                throw new error_1.MongoInvalidArgumentError('maxStalenessSeconds must be a positive integer');\n            }\n            this.maxStalenessSeconds = options.maxStalenessSeconds;\n            // NOTE: The minimum required wire version is 5 for this read preference. If the existing\n            //       topology has a lower value then a MongoError will be thrown during server selection.\n            this.minWireVersion = 5;\n        }\n        if (this.mode === ReadPreference.PRIMARY) {\n            if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\n                throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with tags');\n            }\n            if (this.maxStalenessSeconds) {\n                throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with maxStalenessSeconds');\n            }\n            if (this.hedge) {\n                throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with hedge');\n            }\n        }\n    }\n    // Support the deprecated `preference` property introduced in the porcelain layer\n    get preference() {\n        return this.mode;\n    }\n    static fromString(mode) {\n        return new ReadPreference(mode);\n    }\n    /**\n     * Construct a ReadPreference given an options object.\n     *\n     * @param options - The options object from which to extract the read preference.\n     */\n    static fromOptions(options) {\n        if (!options)\n            return;\n        const readPreference = options.readPreference ?? options.session?.transaction.options.readPreference;\n        const readPreferenceTags = options.readPreferenceTags;\n        if (readPreference == null) {\n            return;\n        }\n        if (typeof readPreference === 'string') {\n            return new ReadPreference(readPreference, readPreferenceTags, {\n                maxStalenessSeconds: options.maxStalenessSeconds,\n                hedge: options.hedge\n            });\n        }\n        else if (!(readPreference instanceof ReadPreference) && typeof readPreference === 'object') {\n            const mode = readPreference.mode || readPreference.preference;\n            if (mode && typeof mode === 'string') {\n                return new ReadPreference(mode, readPreference.tags ?? readPreferenceTags, {\n                    maxStalenessSeconds: readPreference.maxStalenessSeconds,\n                    hedge: options.hedge\n                });\n            }\n        }\n        if (readPreferenceTags) {\n            readPreference.tags = readPreferenceTags;\n        }\n        return readPreference;\n    }\n    /**\n     * Replaces options.readPreference with a ReadPreference instance\n     */\n    static translate(options) {\n        if (options.readPreference == null)\n            return options;\n        const r = options.readPreference;\n        if (typeof r === 'string') {\n            options.readPreference = new ReadPreference(r);\n        }\n        else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n            const mode = r.mode || r.preference;\n            if (mode && typeof mode === 'string') {\n                options.readPreference = new ReadPreference(mode, r.tags, {\n                    maxStalenessSeconds: r.maxStalenessSeconds\n                });\n            }\n        }\n        else if (!(r instanceof ReadPreference)) {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference: ${r}`);\n        }\n        return options;\n    }\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */\n    static isValid(mode) {\n        const VALID_MODES = new Set([\n            ReadPreference.PRIMARY,\n            ReadPreference.PRIMARY_PREFERRED,\n            ReadPreference.SECONDARY,\n            ReadPreference.SECONDARY_PREFERRED,\n            ReadPreference.NEAREST,\n            null\n        ]);\n        return VALID_MODES.has(mode);\n    }\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */\n    isValid(mode) {\n        return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\n    }\n    /**\n     * Indicates that this readPreference needs the \"SecondaryOk\" bit when sent over the wire\n     * @see https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#op-query\n     */\n    secondaryOk() {\n        const NEEDS_SECONDARYOK = new Set([\n            ReadPreference.PRIMARY_PREFERRED,\n            ReadPreference.SECONDARY,\n            ReadPreference.SECONDARY_PREFERRED,\n            ReadPreference.NEAREST\n        ]);\n        return NEEDS_SECONDARYOK.has(this.mode);\n    }\n    /**\n     * Check if the two ReadPreferences are equivalent\n     *\n     * @param readPreference - The read preference with which to check equality\n     */\n    equals(readPreference) {\n        return readPreference.mode === this.mode;\n    }\n    /** Return JSON representation */\n    toJSON() {\n        const readPreference = { mode: this.mode };\n        if (Array.isArray(this.tags))\n            readPreference.tags = this.tags;\n        if (this.maxStalenessSeconds)\n            readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n        if (this.hedge)\n            readPreference.hedge = this.hedge;\n        return readPreference;\n    }\n}\nexports.ReadPreference = ReadPreference;\nReadPreference.PRIMARY = exports.ReadPreferenceMode.primary;\nReadPreference.PRIMARY_PREFERRED = exports.ReadPreferenceMode.primaryPreferred;\nReadPreference.SECONDARY = exports.ReadPreferenceMode.secondary;\nReadPreference.SECONDARY_PREFERRED = exports.ReadPreferenceMode.secondaryPreferred;\nReadPreference.NEAREST = exports.ReadPreferenceMode.nearest;\nReadPreference.primary = new ReadPreference(exports.ReadPreferenceMode.primary);\nReadPreference.primaryPreferred = new ReadPreference(exports.ReadPreferenceMode.primaryPreferred);\nReadPreference.secondary = new ReadPreference(exports.ReadPreferenceMode.secondary);\nReadPreference.secondaryPreferred = new ReadPreference(exports.ReadPreferenceMode.secondaryPreferred);\nReadPreference.nearest = new ReadPreference(exports.ReadPreferenceMode.nearest);\n//# sourceMappingURL=read_preference.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_preference.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/resource_management.js":
/*!********************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/resource_management.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.configureResourceManagement = configureResourceManagement;\nexports.configureExplicitResourceManagement = configureExplicitResourceManagement;\n/** @internal */\nfunction configureResourceManagement(target) {\n    Symbol.asyncDispose &&\n        Object.defineProperty(target, Symbol.asyncDispose, {\n            value: async function asyncDispose() {\n                await this.asyncDispose();\n            },\n            enumerable: false,\n            configurable: true,\n            writable: true\n        });\n}\n/**\n * @beta\n * @experimental\n *\n * Attaches `Symbol.asyncDispose` methods to the MongoClient, Cursors, sessions and change streams\n * if Symbol.asyncDispose is defined.\n *\n * It's usually not necessary to call this method - the driver attempts to attach these methods\n * itself when its loaded.  However, sometimes the driver may be loaded before `Symbol.asyncDispose`\n * is defined, in which case it is necessary to call this method directly.  This can happen if the\n * application is polyfilling `Symbol.asyncDispose`.\n *\n * Example:\n *\n * ```typescript\n * import { configureExplicitResourceManagement, MongoClient } from 'mongodb/lib/beta';\n *\n * Symbol.asyncDispose ??= Symbol('dispose');\n * load();\n *\n * await using client = new MongoClient(...);\n * ```\n */\nfunction configureExplicitResourceManagement() {\n    // We must import lazily here, because there's a circular dependency between the resource management\n    // file and each resources' file.  We could move `configureResourceManagement` to a separate\n    // function, but keeping all resource-management related code together seemed preferable and I chose\n    // lazy requiring of resources instead.\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    const { MongoClient } = __webpack_require__(/*! ./mongo_client */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_client.js\");\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    const { ClientSession } = __webpack_require__(/*! ./sessions */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sessions.js\");\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    const { AbstractCursor } = __webpack_require__(/*! ./cursor/abstract_cursor */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    const { ChangeStream } = __webpack_require__(/*! ./change_stream */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/change_stream.js\");\n    configureResourceManagement(MongoClient.prototype);\n    configureResourceManagement(ClientSession.prototype);\n    configureResourceManagement(AbstractCursor.prototype);\n    configureResourceManagement(ChangeStream.prototype);\n}\n//# sourceMappingURL=resource_management.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9yZXNvdXJjZV9tYW5hZ2VtZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1DQUFtQztBQUNuQywyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksbURBQW1EO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxjQUFjLEVBQUUsbUJBQU8sQ0FBQywyR0FBZ0I7QUFDcEQ7QUFDQSxZQUFZLGdCQUFnQixFQUFFLG1CQUFPLENBQUMsbUdBQVk7QUFDbEQ7QUFDQSxZQUFZLGlCQUFpQixFQUFFLG1CQUFPLENBQUMsK0hBQTBCO0FBQ2pFO0FBQ0EsWUFBWSxlQUFlLEVBQUUsbUJBQU8sQ0FBQyw2R0FBaUI7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9yZXNvdXJjZV9tYW5hZ2VtZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb25maWd1cmVSZXNvdXJjZU1hbmFnZW1lbnQgPSBjb25maWd1cmVSZXNvdXJjZU1hbmFnZW1lbnQ7XG5leHBvcnRzLmNvbmZpZ3VyZUV4cGxpY2l0UmVzb3VyY2VNYW5hZ2VtZW50ID0gY29uZmlndXJlRXhwbGljaXRSZXNvdXJjZU1hbmFnZW1lbnQ7XG4vKiogQGludGVybmFsICovXG5mdW5jdGlvbiBjb25maWd1cmVSZXNvdXJjZU1hbmFnZW1lbnQodGFyZ2V0KSB7XG4gICAgU3ltYm9sLmFzeW5jRGlzcG9zZSAmJlxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBTeW1ib2wuYXN5bmNEaXNwb3NlLCB7XG4gICAgICAgICAgICB2YWx1ZTogYXN5bmMgZnVuY3Rpb24gYXN5bmNEaXNwb3NlKCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYXN5bmNEaXNwb3NlKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbn1cbi8qKlxuICogQGJldGFcbiAqIEBleHBlcmltZW50YWxcbiAqXG4gKiBBdHRhY2hlcyBgU3ltYm9sLmFzeW5jRGlzcG9zZWAgbWV0aG9kcyB0byB0aGUgTW9uZ29DbGllbnQsIEN1cnNvcnMsIHNlc3Npb25zIGFuZCBjaGFuZ2Ugc3RyZWFtc1xuICogaWYgU3ltYm9sLmFzeW5jRGlzcG9zZSBpcyBkZWZpbmVkLlxuICpcbiAqIEl0J3MgdXN1YWxseSBub3QgbmVjZXNzYXJ5IHRvIGNhbGwgdGhpcyBtZXRob2QgLSB0aGUgZHJpdmVyIGF0dGVtcHRzIHRvIGF0dGFjaCB0aGVzZSBtZXRob2RzXG4gKiBpdHNlbGYgd2hlbiBpdHMgbG9hZGVkLiAgSG93ZXZlciwgc29tZXRpbWVzIHRoZSBkcml2ZXIgbWF5IGJlIGxvYWRlZCBiZWZvcmUgYFN5bWJvbC5hc3luY0Rpc3Bvc2VgXG4gKiBpcyBkZWZpbmVkLCBpbiB3aGljaCBjYXNlIGl0IGlzIG5lY2Vzc2FyeSB0byBjYWxsIHRoaXMgbWV0aG9kIGRpcmVjdGx5LiAgVGhpcyBjYW4gaGFwcGVuIGlmIHRoZVxuICogYXBwbGljYXRpb24gaXMgcG9seWZpbGxpbmcgYFN5bWJvbC5hc3luY0Rpc3Bvc2VgLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgY29uZmlndXJlRXhwbGljaXRSZXNvdXJjZU1hbmFnZW1lbnQsIE1vbmdvQ2xpZW50IH0gZnJvbSAnbW9uZ29kYi9saWIvYmV0YSc7XG4gKlxuICogU3ltYm9sLmFzeW5jRGlzcG9zZSA/Pz0gU3ltYm9sKCdkaXNwb3NlJyk7XG4gKiBsb2FkKCk7XG4gKlxuICogYXdhaXQgdXNpbmcgY2xpZW50ID0gbmV3IE1vbmdvQ2xpZW50KC4uLik7XG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gY29uZmlndXJlRXhwbGljaXRSZXNvdXJjZU1hbmFnZW1lbnQoKSB7XG4gICAgLy8gV2UgbXVzdCBpbXBvcnQgbGF6aWx5IGhlcmUsIGJlY2F1c2UgdGhlcmUncyBhIGNpcmN1bGFyIGRlcGVuZGVuY3kgYmV0d2VlbiB0aGUgcmVzb3VyY2UgbWFuYWdlbWVudFxuICAgIC8vIGZpbGUgYW5kIGVhY2ggcmVzb3VyY2VzJyBmaWxlLiAgV2UgY291bGQgbW92ZSBgY29uZmlndXJlUmVzb3VyY2VNYW5hZ2VtZW50YCB0byBhIHNlcGFyYXRlXG4gICAgLy8gZnVuY3Rpb24sIGJ1dCBrZWVwaW5nIGFsbCByZXNvdXJjZS1tYW5hZ2VtZW50IHJlbGF0ZWQgY29kZSB0b2dldGhlciBzZWVtZWQgcHJlZmVyYWJsZSBhbmQgSSBjaG9zZVxuICAgIC8vIGxhenkgcmVxdWlyaW5nIG9mIHJlc291cmNlcyBpbnN0ZWFkLlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVxdWlyZS1pbXBvcnRzXG4gICAgY29uc3QgeyBNb25nb0NsaWVudCB9ID0gcmVxdWlyZSgnLi9tb25nb19jbGllbnQnKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlcXVpcmUtaW1wb3J0c1xuICAgIGNvbnN0IHsgQ2xpZW50U2Vzc2lvbiB9ID0gcmVxdWlyZSgnLi9zZXNzaW9ucycpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVxdWlyZS1pbXBvcnRzXG4gICAgY29uc3QgeyBBYnN0cmFjdEN1cnNvciB9ID0gcmVxdWlyZSgnLi9jdXJzb3IvYWJzdHJhY3RfY3Vyc29yJyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZXF1aXJlLWltcG9ydHNcbiAgICBjb25zdCB7IENoYW5nZVN0cmVhbSB9ID0gcmVxdWlyZSgnLi9jaGFuZ2Vfc3RyZWFtJyk7XG4gICAgY29uZmlndXJlUmVzb3VyY2VNYW5hZ2VtZW50KE1vbmdvQ2xpZW50LnByb3RvdHlwZSk7XG4gICAgY29uZmlndXJlUmVzb3VyY2VNYW5hZ2VtZW50KENsaWVudFNlc3Npb24ucHJvdG90eXBlKTtcbiAgICBjb25maWd1cmVSZXNvdXJjZU1hbmFnZW1lbnQoQWJzdHJhY3RDdXJzb3IucHJvdG90eXBlKTtcbiAgICBjb25maWd1cmVSZXNvdXJjZU1hbmFnZW1lbnQoQ2hhbmdlU3RyZWFtLnByb3RvdHlwZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNvdXJjZV9tYW5hZ2VtZW50LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/resource_management.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/common.js":
/*!************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/common.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ServerType = exports.TopologyType = exports.STATE_CONNECTED = exports.STATE_CONNECTING = exports.STATE_CLOSED = exports.STATE_CLOSING = void 0;\nexports.drainTimerQueue = drainTimerQueue;\nexports._advanceClusterTime = _advanceClusterTime;\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\n// shared state names\nexports.STATE_CLOSING = 'closing';\nexports.STATE_CLOSED = 'closed';\nexports.STATE_CONNECTING = 'connecting';\nexports.STATE_CONNECTED = 'connected';\n/**\n * An enumeration of topology types we know about\n * @public\n */\nexports.TopologyType = Object.freeze({\n    Single: 'Single',\n    ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',\n    ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',\n    Sharded: 'Sharded',\n    Unknown: 'Unknown',\n    LoadBalanced: 'LoadBalanced'\n});\n/**\n * An enumeration of server types we know about\n * @public\n */\nexports.ServerType = Object.freeze({\n    Standalone: 'Standalone',\n    Mongos: 'Mongos',\n    PossiblePrimary: 'PossiblePrimary',\n    RSPrimary: 'RSPrimary',\n    RSSecondary: 'RSSecondary',\n    RSArbiter: 'RSArbiter',\n    RSOther: 'RSOther',\n    RSGhost: 'RSGhost',\n    Unknown: 'Unknown',\n    LoadBalancer: 'LoadBalancer'\n});\n/** @internal */\nfunction drainTimerQueue(queue) {\n    queue.forEach(timers_1.clearTimeout);\n    queue.clear();\n}\n/** Shared function to determine clusterTime for a given topology or session */\nfunction _advanceClusterTime(entity, $clusterTime) {\n    if (entity.clusterTime == null) {\n        entity.clusterTime = $clusterTime;\n    }\n    else {\n        if ($clusterTime.clusterTime.greaterThan(entity.clusterTime.clusterTime)) {\n            entity.clusterTime = $clusterTime;\n        }\n    }\n}\n//# sourceMappingURL=common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9zZGFtL2NvbW1vbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0IsR0FBRyxvQkFBb0IsR0FBRyx1QkFBdUIsR0FBRyx3QkFBd0IsR0FBRyxvQkFBb0IsR0FBRyxxQkFBcUI7QUFDN0ksdUJBQXVCO0FBQ3ZCLDJCQUEyQjtBQUMzQixpQkFBaUIsbUJBQU8sQ0FBQyxzQkFBUTtBQUNqQztBQUNBLHFCQUFxQjtBQUNyQixvQkFBb0I7QUFDcEIsd0JBQXdCO0FBQ3hCLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2xpbmt1cy9HaXRodWIvbW9ub3R3by9wYXlsb2FkLXBsdWdpbi1tZXRhL25vZGVfbW9kdWxlcy8ucG5wbS9tb25nb2RiQDYuMTAuMC9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvc2RhbS9jb21tb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNlcnZlclR5cGUgPSBleHBvcnRzLlRvcG9sb2d5VHlwZSA9IGV4cG9ydHMuU1RBVEVfQ09OTkVDVEVEID0gZXhwb3J0cy5TVEFURV9DT05ORUNUSU5HID0gZXhwb3J0cy5TVEFURV9DTE9TRUQgPSBleHBvcnRzLlNUQVRFX0NMT1NJTkcgPSB2b2lkIDA7XG5leHBvcnRzLmRyYWluVGltZXJRdWV1ZSA9IGRyYWluVGltZXJRdWV1ZTtcbmV4cG9ydHMuX2FkdmFuY2VDbHVzdGVyVGltZSA9IF9hZHZhbmNlQ2x1c3RlclRpbWU7XG5jb25zdCB0aW1lcnNfMSA9IHJlcXVpcmUoXCJ0aW1lcnNcIik7XG4vLyBzaGFyZWQgc3RhdGUgbmFtZXNcbmV4cG9ydHMuU1RBVEVfQ0xPU0lORyA9ICdjbG9zaW5nJztcbmV4cG9ydHMuU1RBVEVfQ0xPU0VEID0gJ2Nsb3NlZCc7XG5leHBvcnRzLlNUQVRFX0NPTk5FQ1RJTkcgPSAnY29ubmVjdGluZyc7XG5leHBvcnRzLlNUQVRFX0NPTk5FQ1RFRCA9ICdjb25uZWN0ZWQnO1xuLyoqXG4gKiBBbiBlbnVtZXJhdGlvbiBvZiB0b3BvbG9neSB0eXBlcyB3ZSBrbm93IGFib3V0XG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydHMuVG9wb2xvZ3lUeXBlID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgU2luZ2xlOiAnU2luZ2xlJyxcbiAgICBSZXBsaWNhU2V0Tm9QcmltYXJ5OiAnUmVwbGljYVNldE5vUHJpbWFyeScsXG4gICAgUmVwbGljYVNldFdpdGhQcmltYXJ5OiAnUmVwbGljYVNldFdpdGhQcmltYXJ5JyxcbiAgICBTaGFyZGVkOiAnU2hhcmRlZCcsXG4gICAgVW5rbm93bjogJ1Vua25vd24nLFxuICAgIExvYWRCYWxhbmNlZDogJ0xvYWRCYWxhbmNlZCdcbn0pO1xuLyoqXG4gKiBBbiBlbnVtZXJhdGlvbiBvZiBzZXJ2ZXIgdHlwZXMgd2Uga25vdyBhYm91dFxuICogQHB1YmxpY1xuICovXG5leHBvcnRzLlNlcnZlclR5cGUgPSBPYmplY3QuZnJlZXplKHtcbiAgICBTdGFuZGFsb25lOiAnU3RhbmRhbG9uZScsXG4gICAgTW9uZ29zOiAnTW9uZ29zJyxcbiAgICBQb3NzaWJsZVByaW1hcnk6ICdQb3NzaWJsZVByaW1hcnknLFxuICAgIFJTUHJpbWFyeTogJ1JTUHJpbWFyeScsXG4gICAgUlNTZWNvbmRhcnk6ICdSU1NlY29uZGFyeScsXG4gICAgUlNBcmJpdGVyOiAnUlNBcmJpdGVyJyxcbiAgICBSU090aGVyOiAnUlNPdGhlcicsXG4gICAgUlNHaG9zdDogJ1JTR2hvc3QnLFxuICAgIFVua25vd246ICdVbmtub3duJyxcbiAgICBMb2FkQmFsYW5jZXI6ICdMb2FkQmFsYW5jZXInXG59KTtcbi8qKiBAaW50ZXJuYWwgKi9cbmZ1bmN0aW9uIGRyYWluVGltZXJRdWV1ZShxdWV1ZSkge1xuICAgIHF1ZXVlLmZvckVhY2godGltZXJzXzEuY2xlYXJUaW1lb3V0KTtcbiAgICBxdWV1ZS5jbGVhcigpO1xufVxuLyoqIFNoYXJlZCBmdW5jdGlvbiB0byBkZXRlcm1pbmUgY2x1c3RlclRpbWUgZm9yIGEgZ2l2ZW4gdG9wb2xvZ3kgb3Igc2Vzc2lvbiAqL1xuZnVuY3Rpb24gX2FkdmFuY2VDbHVzdGVyVGltZShlbnRpdHksICRjbHVzdGVyVGltZSkge1xuICAgIGlmIChlbnRpdHkuY2x1c3RlclRpbWUgPT0gbnVsbCkge1xuICAgICAgICBlbnRpdHkuY2x1c3RlclRpbWUgPSAkY2x1c3RlclRpbWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoJGNsdXN0ZXJUaW1lLmNsdXN0ZXJUaW1lLmdyZWF0ZXJUaGFuKGVudGl0eS5jbHVzdGVyVGltZS5jbHVzdGVyVGltZSkpIHtcbiAgICAgICAgICAgIGVudGl0eS5jbHVzdGVyVGltZSA9ICRjbHVzdGVyVGltZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbW1vbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/common.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/events.js":
/*!************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/events.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ServerHeartbeatFailedEvent = exports.ServerHeartbeatSucceededEvent = exports.ServerHeartbeatStartedEvent = exports.TopologyClosedEvent = exports.TopologyOpeningEvent = exports.TopologyDescriptionChangedEvent = exports.ServerClosedEvent = exports.ServerOpeningEvent = exports.ServerDescriptionChangedEvent = void 0;\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/constants.js\");\n/**\n * Emitted when server description changes, but does NOT include changes to the RTT.\n * @public\n * @category Event\n */\nclass ServerDescriptionChangedEvent {\n    /** @internal */\n    constructor(topologyId, address, previousDescription, newDescription) {\n        this.name = constants_1.SERVER_DESCRIPTION_CHANGED;\n        this.topologyId = topologyId;\n        this.address = address;\n        this.previousDescription = previousDescription;\n        this.newDescription = newDescription;\n    }\n}\nexports.ServerDescriptionChangedEvent = ServerDescriptionChangedEvent;\n/**\n * Emitted when server is initialized.\n * @public\n * @category Event\n */\nclass ServerOpeningEvent {\n    /** @internal */\n    constructor(topologyId, address) {\n        /** @internal */\n        this.name = constants_1.SERVER_OPENING;\n        this.topologyId = topologyId;\n        this.address = address;\n    }\n}\nexports.ServerOpeningEvent = ServerOpeningEvent;\n/**\n * Emitted when server is closed.\n * @public\n * @category Event\n */\nclass ServerClosedEvent {\n    /** @internal */\n    constructor(topologyId, address) {\n        /** @internal */\n        this.name = constants_1.SERVER_CLOSED;\n        this.topologyId = topologyId;\n        this.address = address;\n    }\n}\nexports.ServerClosedEvent = ServerClosedEvent;\n/**\n * Emitted when topology description changes.\n * @public\n * @category Event\n */\nclass TopologyDescriptionChangedEvent {\n    /** @internal */\n    constructor(topologyId, previousDescription, newDescription) {\n        /** @internal */\n        this.name = constants_1.TOPOLOGY_DESCRIPTION_CHANGED;\n        this.topologyId = topologyId;\n        this.previousDescription = previousDescription;\n        this.newDescription = newDescription;\n    }\n}\nexports.TopologyDescriptionChangedEvent = TopologyDescriptionChangedEvent;\n/**\n * Emitted when topology is initialized.\n * @public\n * @category Event\n */\nclass TopologyOpeningEvent {\n    /** @internal */\n    constructor(topologyId) {\n        /** @internal */\n        this.name = constants_1.TOPOLOGY_OPENING;\n        this.topologyId = topologyId;\n    }\n}\nexports.TopologyOpeningEvent = TopologyOpeningEvent;\n/**\n * Emitted when topology is closed.\n * @public\n * @category Event\n */\nclass TopologyClosedEvent {\n    /** @internal */\n    constructor(topologyId) {\n        /** @internal */\n        this.name = constants_1.TOPOLOGY_CLOSED;\n        this.topologyId = topologyId;\n    }\n}\nexports.TopologyClosedEvent = TopologyClosedEvent;\n/**\n * Emitted when the server monitor’s hello command is started - immediately before\n * the hello command is serialized into raw BSON and written to the socket.\n *\n * @public\n * @category Event\n */\nclass ServerHeartbeatStartedEvent {\n    /** @internal */\n    constructor(connectionId, awaited) {\n        /** @internal */\n        this.name = constants_1.SERVER_HEARTBEAT_STARTED;\n        this.connectionId = connectionId;\n        this.awaited = awaited;\n    }\n}\nexports.ServerHeartbeatStartedEvent = ServerHeartbeatStartedEvent;\n/**\n * Emitted when the server monitor’s hello succeeds.\n * @public\n * @category Event\n */\nclass ServerHeartbeatSucceededEvent {\n    /** @internal */\n    constructor(connectionId, duration, reply, awaited) {\n        /** @internal */\n        this.name = constants_1.SERVER_HEARTBEAT_SUCCEEDED;\n        this.connectionId = connectionId;\n        this.duration = duration;\n        this.reply = reply ?? {};\n        this.awaited = awaited;\n    }\n}\nexports.ServerHeartbeatSucceededEvent = ServerHeartbeatSucceededEvent;\n/**\n * Emitted when the server monitor’s hello fails, either with an “ok: 0” or a socket exception.\n * @public\n * @category Event\n */\nclass ServerHeartbeatFailedEvent {\n    /** @internal */\n    constructor(connectionId, duration, failure, awaited) {\n        /** @internal */\n        this.name = constants_1.SERVER_HEARTBEAT_FAILED;\n        this.connectionId = connectionId;\n        this.duration = duration;\n        this.failure = failure;\n        this.awaited = awaited;\n    }\n}\nexports.ServerHeartbeatFailedEvent = ServerHeartbeatFailedEvent;\n//# sourceMappingURL=events.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9zZGFtL2V2ZW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQ0FBa0MsR0FBRyxxQ0FBcUMsR0FBRyxtQ0FBbUMsR0FBRywyQkFBMkIsR0FBRyw0QkFBNEIsR0FBRyx1Q0FBdUMsR0FBRyx5QkFBeUIsR0FBRywwQkFBMEIsR0FBRyxxQ0FBcUM7QUFDeFQsb0JBQW9CLG1CQUFPLENBQUMsc0dBQWM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9saW5rdXMvR2l0aHViL21vbm90d28vcGF5bG9hZC1wbHVnaW4tbWV0YS9ub2RlX21vZHVsZXMvLnBucG0vbW9uZ29kYkA2LjEwLjAvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL3NkYW0vZXZlbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TZXJ2ZXJIZWFydGJlYXRGYWlsZWRFdmVudCA9IGV4cG9ydHMuU2VydmVySGVhcnRiZWF0U3VjY2VlZGVkRXZlbnQgPSBleHBvcnRzLlNlcnZlckhlYXJ0YmVhdFN0YXJ0ZWRFdmVudCA9IGV4cG9ydHMuVG9wb2xvZ3lDbG9zZWRFdmVudCA9IGV4cG9ydHMuVG9wb2xvZ3lPcGVuaW5nRXZlbnQgPSBleHBvcnRzLlRvcG9sb2d5RGVzY3JpcHRpb25DaGFuZ2VkRXZlbnQgPSBleHBvcnRzLlNlcnZlckNsb3NlZEV2ZW50ID0gZXhwb3J0cy5TZXJ2ZXJPcGVuaW5nRXZlbnQgPSBleHBvcnRzLlNlcnZlckRlc2NyaXB0aW9uQ2hhbmdlZEV2ZW50ID0gdm9pZCAwO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuLyoqXG4gKiBFbWl0dGVkIHdoZW4gc2VydmVyIGRlc2NyaXB0aW9uIGNoYW5nZXMsIGJ1dCBkb2VzIE5PVCBpbmNsdWRlIGNoYW5nZXMgdG8gdGhlIFJUVC5cbiAqIEBwdWJsaWNcbiAqIEBjYXRlZ29yeSBFdmVudFxuICovXG5jbGFzcyBTZXJ2ZXJEZXNjcmlwdGlvbkNoYW5nZWRFdmVudCB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNvbnN0cnVjdG9yKHRvcG9sb2d5SWQsIGFkZHJlc3MsIHByZXZpb3VzRGVzY3JpcHRpb24sIG5ld0Rlc2NyaXB0aW9uKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IGNvbnN0YW50c18xLlNFUlZFUl9ERVNDUklQVElPTl9DSEFOR0VEO1xuICAgICAgICB0aGlzLnRvcG9sb2d5SWQgPSB0b3BvbG9neUlkO1xuICAgICAgICB0aGlzLmFkZHJlc3MgPSBhZGRyZXNzO1xuICAgICAgICB0aGlzLnByZXZpb3VzRGVzY3JpcHRpb24gPSBwcmV2aW91c0Rlc2NyaXB0aW9uO1xuICAgICAgICB0aGlzLm5ld0Rlc2NyaXB0aW9uID0gbmV3RGVzY3JpcHRpb247XG4gICAgfVxufVxuZXhwb3J0cy5TZXJ2ZXJEZXNjcmlwdGlvbkNoYW5nZWRFdmVudCA9IFNlcnZlckRlc2NyaXB0aW9uQ2hhbmdlZEV2ZW50O1xuLyoqXG4gKiBFbWl0dGVkIHdoZW4gc2VydmVyIGlzIGluaXRpYWxpemVkLlxuICogQHB1YmxpY1xuICogQGNhdGVnb3J5IEV2ZW50XG4gKi9cbmNsYXNzIFNlcnZlck9wZW5pbmdFdmVudCB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNvbnN0cnVjdG9yKHRvcG9sb2d5SWQsIGFkZHJlc3MpIHtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25zdGFudHNfMS5TRVJWRVJfT1BFTklORztcbiAgICAgICAgdGhpcy50b3BvbG9neUlkID0gdG9wb2xvZ3lJZDtcbiAgICAgICAgdGhpcy5hZGRyZXNzID0gYWRkcmVzcztcbiAgICB9XG59XG5leHBvcnRzLlNlcnZlck9wZW5pbmdFdmVudCA9IFNlcnZlck9wZW5pbmdFdmVudDtcbi8qKlxuICogRW1pdHRlZCB3aGVuIHNlcnZlciBpcyBjbG9zZWQuXG4gKiBAcHVibGljXG4gKiBAY2F0ZWdvcnkgRXZlbnRcbiAqL1xuY2xhc3MgU2VydmVyQ2xvc2VkRXZlbnQge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3Rvcih0b3BvbG9neUlkLCBhZGRyZXNzKSB7XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgdGhpcy5uYW1lID0gY29uc3RhbnRzXzEuU0VSVkVSX0NMT1NFRDtcbiAgICAgICAgdGhpcy50b3BvbG9neUlkID0gdG9wb2xvZ3lJZDtcbiAgICAgICAgdGhpcy5hZGRyZXNzID0gYWRkcmVzcztcbiAgICB9XG59XG5leHBvcnRzLlNlcnZlckNsb3NlZEV2ZW50ID0gU2VydmVyQ2xvc2VkRXZlbnQ7XG4vKipcbiAqIEVtaXR0ZWQgd2hlbiB0b3BvbG9neSBkZXNjcmlwdGlvbiBjaGFuZ2VzLlxuICogQHB1YmxpY1xuICogQGNhdGVnb3J5IEV2ZW50XG4gKi9cbmNsYXNzIFRvcG9sb2d5RGVzY3JpcHRpb25DaGFuZ2VkRXZlbnQge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3Rvcih0b3BvbG9neUlkLCBwcmV2aW91c0Rlc2NyaXB0aW9uLCBuZXdEZXNjcmlwdGlvbikge1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHRoaXMubmFtZSA9IGNvbnN0YW50c18xLlRPUE9MT0dZX0RFU0NSSVBUSU9OX0NIQU5HRUQ7XG4gICAgICAgIHRoaXMudG9wb2xvZ3lJZCA9IHRvcG9sb2d5SWQ7XG4gICAgICAgIHRoaXMucHJldmlvdXNEZXNjcmlwdGlvbiA9IHByZXZpb3VzRGVzY3JpcHRpb247XG4gICAgICAgIHRoaXMubmV3RGVzY3JpcHRpb24gPSBuZXdEZXNjcmlwdGlvbjtcbiAgICB9XG59XG5leHBvcnRzLlRvcG9sb2d5RGVzY3JpcHRpb25DaGFuZ2VkRXZlbnQgPSBUb3BvbG9neURlc2NyaXB0aW9uQ2hhbmdlZEV2ZW50O1xuLyoqXG4gKiBFbWl0dGVkIHdoZW4gdG9wb2xvZ3kgaXMgaW5pdGlhbGl6ZWQuXG4gKiBAcHVibGljXG4gKiBAY2F0ZWdvcnkgRXZlbnRcbiAqL1xuY2xhc3MgVG9wb2xvZ3lPcGVuaW5nRXZlbnQge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3Rvcih0b3BvbG9neUlkKSB7XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgdGhpcy5uYW1lID0gY29uc3RhbnRzXzEuVE9QT0xPR1lfT1BFTklORztcbiAgICAgICAgdGhpcy50b3BvbG9neUlkID0gdG9wb2xvZ3lJZDtcbiAgICB9XG59XG5leHBvcnRzLlRvcG9sb2d5T3BlbmluZ0V2ZW50ID0gVG9wb2xvZ3lPcGVuaW5nRXZlbnQ7XG4vKipcbiAqIEVtaXR0ZWQgd2hlbiB0b3BvbG9neSBpcyBjbG9zZWQuXG4gKiBAcHVibGljXG4gKiBAY2F0ZWdvcnkgRXZlbnRcbiAqL1xuY2xhc3MgVG9wb2xvZ3lDbG9zZWRFdmVudCB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNvbnN0cnVjdG9yKHRvcG9sb2d5SWQpIHtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25zdGFudHNfMS5UT1BPTE9HWV9DTE9TRUQ7XG4gICAgICAgIHRoaXMudG9wb2xvZ3lJZCA9IHRvcG9sb2d5SWQ7XG4gICAgfVxufVxuZXhwb3J0cy5Ub3BvbG9neUNsb3NlZEV2ZW50ID0gVG9wb2xvZ3lDbG9zZWRFdmVudDtcbi8qKlxuICogRW1pdHRlZCB3aGVuIHRoZSBzZXJ2ZXIgbW9uaXRvcuKAmXMgaGVsbG8gY29tbWFuZCBpcyBzdGFydGVkIC0gaW1tZWRpYXRlbHkgYmVmb3JlXG4gKiB0aGUgaGVsbG8gY29tbWFuZCBpcyBzZXJpYWxpemVkIGludG8gcmF3IEJTT04gYW5kIHdyaXR0ZW4gdG8gdGhlIHNvY2tldC5cbiAqXG4gKiBAcHVibGljXG4gKiBAY2F0ZWdvcnkgRXZlbnRcbiAqL1xuY2xhc3MgU2VydmVySGVhcnRiZWF0U3RhcnRlZEV2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3IoY29ubmVjdGlvbklkLCBhd2FpdGVkKSB7XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgdGhpcy5uYW1lID0gY29uc3RhbnRzXzEuU0VSVkVSX0hFQVJUQkVBVF9TVEFSVEVEO1xuICAgICAgICB0aGlzLmNvbm5lY3Rpb25JZCA9IGNvbm5lY3Rpb25JZDtcbiAgICAgICAgdGhpcy5hd2FpdGVkID0gYXdhaXRlZDtcbiAgICB9XG59XG5leHBvcnRzLlNlcnZlckhlYXJ0YmVhdFN0YXJ0ZWRFdmVudCA9IFNlcnZlckhlYXJ0YmVhdFN0YXJ0ZWRFdmVudDtcbi8qKlxuICogRW1pdHRlZCB3aGVuIHRoZSBzZXJ2ZXIgbW9uaXRvcuKAmXMgaGVsbG8gc3VjY2VlZHMuXG4gKiBAcHVibGljXG4gKiBAY2F0ZWdvcnkgRXZlbnRcbiAqL1xuY2xhc3MgU2VydmVySGVhcnRiZWF0U3VjY2VlZGVkRXZlbnQge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb25uZWN0aW9uSWQsIGR1cmF0aW9uLCByZXBseSwgYXdhaXRlZCkge1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHRoaXMubmFtZSA9IGNvbnN0YW50c18xLlNFUlZFUl9IRUFSVEJFQVRfU1VDQ0VFREVEO1xuICAgICAgICB0aGlzLmNvbm5lY3Rpb25JZCA9IGNvbm5lY3Rpb25JZDtcbiAgICAgICAgdGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgICAgICB0aGlzLnJlcGx5ID0gcmVwbHkgPz8ge307XG4gICAgICAgIHRoaXMuYXdhaXRlZCA9IGF3YWl0ZWQ7XG4gICAgfVxufVxuZXhwb3J0cy5TZXJ2ZXJIZWFydGJlYXRTdWNjZWVkZWRFdmVudCA9IFNlcnZlckhlYXJ0YmVhdFN1Y2NlZWRlZEV2ZW50O1xuLyoqXG4gKiBFbWl0dGVkIHdoZW4gdGhlIHNlcnZlciBtb25pdG9y4oCZcyBoZWxsbyBmYWlscywgZWl0aGVyIHdpdGggYW4g4oCcb2s6IDDigJ0gb3IgYSBzb2NrZXQgZXhjZXB0aW9uLlxuICogQHB1YmxpY1xuICogQGNhdGVnb3J5IEV2ZW50XG4gKi9cbmNsYXNzIFNlcnZlckhlYXJ0YmVhdEZhaWxlZEV2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3IoY29ubmVjdGlvbklkLCBkdXJhdGlvbiwgZmFpbHVyZSwgYXdhaXRlZCkge1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHRoaXMubmFtZSA9IGNvbnN0YW50c18xLlNFUlZFUl9IRUFSVEJFQVRfRkFJTEVEO1xuICAgICAgICB0aGlzLmNvbm5lY3Rpb25JZCA9IGNvbm5lY3Rpb25JZDtcbiAgICAgICAgdGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgICAgICB0aGlzLmZhaWx1cmUgPSBmYWlsdXJlO1xuICAgICAgICB0aGlzLmF3YWl0ZWQgPSBhd2FpdGVkO1xuICAgIH1cbn1cbmV4cG9ydHMuU2VydmVySGVhcnRiZWF0RmFpbGVkRXZlbnQgPSBTZXJ2ZXJIZWFydGJlYXRGYWlsZWRFdmVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV2ZW50cy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/events.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/monitor.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/monitor.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RTTSampler = exports.MonitorInterval = exports.RTTPinger = exports.Monitor = exports.ServerMonitoringMode = void 0;\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\");\nconst connect_1 = __webpack_require__(/*! ../cmap/connect */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/connect.js\");\nconst client_metadata_1 = __webpack_require__(/*! ../cmap/handshake/client_metadata */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/handshake/client_metadata.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst mongo_logger_1 = __webpack_require__(/*! ../mongo_logger */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_logger.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_types.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/common.js\");\nconst events_1 = __webpack_require__(/*! ./events */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/events.js\");\nconst server_1 = __webpack_require__(/*! ./server */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/server.js\");\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kMonitorId = Symbol('monitorId');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\nconst STATE_IDLE = 'idle';\nconst STATE_MONITORING = 'monitoring';\nconst stateTransition = (0, utils_1.makeStateMachine)({\n    [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, STATE_IDLE, common_1.STATE_CLOSED],\n    [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, STATE_MONITORING],\n    [STATE_IDLE]: [STATE_IDLE, STATE_MONITORING, common_1.STATE_CLOSING],\n    [STATE_MONITORING]: [STATE_MONITORING, STATE_IDLE, common_1.STATE_CLOSING]\n});\nconst INVALID_REQUEST_CHECK_STATES = new Set([common_1.STATE_CLOSING, common_1.STATE_CLOSED, STATE_MONITORING]);\nfunction isInCloseState(monitor) {\n    return monitor.s.state === common_1.STATE_CLOSED || monitor.s.state === common_1.STATE_CLOSING;\n}\n/** @public */\nexports.ServerMonitoringMode = Object.freeze({\n    auto: 'auto',\n    poll: 'poll',\n    stream: 'stream'\n});\n/** @internal */\nclass Monitor extends mongo_types_1.TypedEventEmitter {\n    constructor(server, options) {\n        super();\n        /** @internal */\n        this.component = mongo_logger_1.MongoLoggableComponent.TOPOLOGY;\n        this[kServer] = server;\n        this.connection = null;\n        this[kCancellationToken] = new mongo_types_1.CancellationToken();\n        this[kCancellationToken].setMaxListeners(Infinity);\n        this[kMonitorId] = undefined;\n        this.s = {\n            state: common_1.STATE_CLOSED\n        };\n        this.address = server.description.address;\n        this.options = Object.freeze({\n            connectTimeoutMS: options.connectTimeoutMS ?? 10000,\n            heartbeatFrequencyMS: options.heartbeatFrequencyMS ?? 10000,\n            minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS ?? 500,\n            serverMonitoringMode: options.serverMonitoringMode\n        });\n        this.isRunningInFaasEnv = (0, client_metadata_1.getFAASEnv)() != null;\n        this.mongoLogger = this[kServer].topology.client?.mongoLogger;\n        this.rttSampler = new RTTSampler(10);\n        const cancellationToken = this[kCancellationToken];\n        // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration\n        const connectOptions = {\n            id: '<monitor>',\n            generation: server.pool.generation,\n            cancellationToken,\n            hostAddress: server.description.hostAddress,\n            ...options,\n            // force BSON serialization options\n            raw: false,\n            useBigInt64: false,\n            promoteLongs: true,\n            promoteValues: true,\n            promoteBuffers: true\n        };\n        // ensure no authentication is used for monitoring\n        delete connectOptions.credentials;\n        if (connectOptions.autoEncrypter) {\n            delete connectOptions.autoEncrypter;\n        }\n        this.connectOptions = Object.freeze(connectOptions);\n    }\n    connect() {\n        if (this.s.state !== common_1.STATE_CLOSED) {\n            return;\n        }\n        // start\n        const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n        const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n        this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n            heartbeatFrequencyMS: heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: minHeartbeatFrequencyMS,\n            immediate: true\n        });\n    }\n    requestCheck() {\n        if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {\n            return;\n        }\n        this[kMonitorId]?.wake();\n    }\n    reset() {\n        const topologyVersion = this[kServer].description.topologyVersion;\n        if (isInCloseState(this) || topologyVersion == null) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        resetMonitorState(this);\n        // restart monitor\n        stateTransition(this, STATE_IDLE);\n        // restart monitoring\n        const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n        const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n        this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n            heartbeatFrequencyMS: heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: minHeartbeatFrequencyMS\n        });\n    }\n    close() {\n        if (isInCloseState(this)) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        resetMonitorState(this);\n        // close monitor\n        this.emit('close');\n        stateTransition(this, common_1.STATE_CLOSED);\n    }\n    get roundTripTime() {\n        return this.rttSampler.average();\n    }\n    get minRoundTripTime() {\n        return this.rttSampler.min();\n    }\n    get latestRtt() {\n        return this.rttSampler.last;\n    }\n    addRttSample(rtt) {\n        this.rttSampler.addSample(rtt);\n    }\n    clearRttSamples() {\n        this.rttSampler.clear();\n    }\n}\nexports.Monitor = Monitor;\nfunction resetMonitorState(monitor) {\n    monitor[kMonitorId]?.stop();\n    monitor[kMonitorId] = undefined;\n    monitor.rttPinger?.close();\n    monitor.rttPinger = undefined;\n    monitor[kCancellationToken].emit('cancel');\n    monitor.connection?.destroy();\n    monitor.connection = null;\n    monitor.clearRttSamples();\n}\nfunction useStreamingProtocol(monitor, topologyVersion) {\n    // If we have no topology version we always poll no matter\n    // what the user provided, since the server does not support\n    // the streaming protocol.\n    if (topologyVersion == null)\n        return false;\n    const serverMonitoringMode = monitor.options.serverMonitoringMode;\n    if (serverMonitoringMode === exports.ServerMonitoringMode.poll)\n        return false;\n    if (serverMonitoringMode === exports.ServerMonitoringMode.stream)\n        return true;\n    // If we are in auto mode, we need to figure out if we're in a FaaS\n    // environment or not and choose the appropriate mode.\n    if (monitor.isRunningInFaasEnv)\n        return false;\n    return true;\n}\nfunction checkServer(monitor, callback) {\n    let start;\n    let awaited;\n    const topologyVersion = monitor[kServer].description.topologyVersion;\n    const isAwaitable = useStreamingProtocol(monitor, topologyVersion);\n    monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_STARTED, monitor[kServer].topology.s.id, undefined, new events_1.ServerHeartbeatStartedEvent(monitor.address, isAwaitable));\n    function onHeartbeatFailed(err) {\n        monitor.connection?.destroy();\n        monitor.connection = null;\n        monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_FAILED, monitor[kServer].topology.s.id, undefined, new events_1.ServerHeartbeatFailedEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), err, awaited));\n        const error = !(err instanceof error_1.MongoError)\n            ? new error_1.MongoError(error_1.MongoError.buildErrorMessage(err), { cause: err })\n            : err;\n        error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n        if (error instanceof error_1.MongoNetworkTimeoutError) {\n            error.addErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);\n        }\n        monitor.emit('resetServer', error);\n        callback(err);\n    }\n    function onHeartbeatSucceeded(hello) {\n        if (!('isWritablePrimary' in hello)) {\n            // Provide hello-style response document.\n            hello.isWritablePrimary = hello[constants_1.LEGACY_HELLO_COMMAND];\n        }\n        // NOTE: here we use the latestRtt as this measurement corresponds with the value\n        // obtained for this successful heartbeat, if there is no latestRtt, then we calculate the\n        // duration\n        const duration = isAwaitable && monitor.rttPinger\n            ? (monitor.rttPinger.latestRtt ?? (0, utils_1.calculateDurationInMs)(start))\n            : (0, utils_1.calculateDurationInMs)(start);\n        monitor.addRttSample(duration);\n        monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, monitor[kServer].topology.s.id, hello.connectionId, new events_1.ServerHeartbeatSucceededEvent(monitor.address, duration, hello, isAwaitable));\n        if (isAwaitable) {\n            // If we are using the streaming protocol then we immediately issue another 'started'\n            // event, otherwise the \"check\" is complete and return to the main monitor loop\n            monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_STARTED, monitor[kServer].topology.s.id, undefined, new events_1.ServerHeartbeatStartedEvent(monitor.address, true));\n            // We have not actually sent an outgoing handshake, but when we get the next response we\n            // want the duration to reflect the time since we last heard from the server\n            start = (0, utils_1.now)();\n        }\n        else {\n            monitor.rttPinger?.close();\n            monitor.rttPinger = undefined;\n            callback(undefined, hello);\n        }\n    }\n    const { connection } = monitor;\n    if (connection && !connection.closed) {\n        const { serverApi, helloOk } = connection;\n        const connectTimeoutMS = monitor.options.connectTimeoutMS;\n        const maxAwaitTimeMS = monitor.options.heartbeatFrequencyMS;\n        const cmd = {\n            [serverApi?.version || helloOk ? 'hello' : constants_1.LEGACY_HELLO_COMMAND]: 1,\n            ...(isAwaitable && topologyVersion\n                ? { maxAwaitTimeMS, topologyVersion: makeTopologyVersion(topologyVersion) }\n                : {})\n        };\n        const options = isAwaitable\n            ? {\n                socketTimeoutMS: connectTimeoutMS ? connectTimeoutMS + maxAwaitTimeMS : 0,\n                exhaustAllowed: true\n            }\n            : { socketTimeoutMS: connectTimeoutMS };\n        if (isAwaitable && monitor.rttPinger == null) {\n            monitor.rttPinger = new RTTPinger(monitor);\n        }\n        // Record new start time before sending handshake\n        start = (0, utils_1.now)();\n        if (isAwaitable) {\n            awaited = true;\n            return connection.exhaustCommand((0, utils_1.ns)('admin.$cmd'), cmd, options, (error, hello) => {\n                if (error)\n                    return onHeartbeatFailed(error);\n                return onHeartbeatSucceeded(hello);\n            });\n        }\n        awaited = false;\n        connection\n            .command((0, utils_1.ns)('admin.$cmd'), cmd, options)\n            .then(onHeartbeatSucceeded, onHeartbeatFailed);\n        return;\n    }\n    // connecting does an implicit `hello`\n    (async () => {\n        const socket = await (0, connect_1.makeSocket)(monitor.connectOptions);\n        const connection = (0, connect_1.makeConnection)(monitor.connectOptions, socket);\n        // The start time is after socket creation but before the handshake\n        start = (0, utils_1.now)();\n        try {\n            await (0, connect_1.performInitialHandshake)(connection, monitor.connectOptions);\n            return connection;\n        }\n        catch (error) {\n            connection.destroy();\n            throw error;\n        }\n    })().then(connection => {\n        if (isInCloseState(monitor)) {\n            connection.destroy();\n            return;\n        }\n        const duration = (0, utils_1.calculateDurationInMs)(start);\n        monitor.addRttSample(duration);\n        monitor.connection = connection;\n        monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, monitor[kServer].topology.s.id, connection.hello?.connectionId, new events_1.ServerHeartbeatSucceededEvent(monitor.address, duration, connection.hello, useStreamingProtocol(monitor, connection.hello?.topologyVersion)));\n        callback(undefined, connection.hello);\n    }, error => {\n        monitor.connection = null;\n        awaited = false;\n        onHeartbeatFailed(error);\n    });\n}\nfunction monitorServer(monitor) {\n    return (callback) => {\n        if (monitor.s.state === STATE_MONITORING) {\n            process.nextTick(callback);\n            return;\n        }\n        stateTransition(monitor, STATE_MONITORING);\n        function done() {\n            if (!isInCloseState(monitor)) {\n                stateTransition(monitor, STATE_IDLE);\n            }\n            callback();\n        }\n        checkServer(monitor, (err, hello) => {\n            if (err) {\n                // otherwise an error occurred on initial discovery, also bail\n                if (monitor[kServer].description.type === common_1.ServerType.Unknown) {\n                    return done();\n                }\n            }\n            // if the check indicates streaming is supported, immediately reschedule monitoring\n            if (useStreamingProtocol(monitor, hello?.topologyVersion)) {\n                (0, timers_1.setTimeout)(() => {\n                    if (!isInCloseState(monitor)) {\n                        monitor[kMonitorId]?.wake();\n                    }\n                }, 0);\n            }\n            done();\n        });\n    };\n}\nfunction makeTopologyVersion(tv) {\n    return {\n        processId: tv.processId,\n        // tests mock counter as just number, but in a real situation counter should always be a Long\n        // TODO(NODE-2674): Preserve int64 sent from MongoDB\n        counter: bson_1.Long.isLong(tv.counter) ? tv.counter : bson_1.Long.fromNumber(tv.counter)\n    };\n}\n/** @internal */\nclass RTTPinger {\n    constructor(monitor) {\n        this.connection = undefined;\n        this[kCancellationToken] = monitor[kCancellationToken];\n        this.closed = false;\n        this.monitor = monitor;\n        this.latestRtt = monitor.latestRtt ?? undefined;\n        const heartbeatFrequencyMS = monitor.options.heartbeatFrequencyMS;\n        this[kMonitorId] = (0, timers_1.setTimeout)(() => this.measureRoundTripTime(), heartbeatFrequencyMS);\n    }\n    get roundTripTime() {\n        return this.monitor.roundTripTime;\n    }\n    get minRoundTripTime() {\n        return this.monitor.minRoundTripTime;\n    }\n    close() {\n        this.closed = true;\n        (0, timers_1.clearTimeout)(this[kMonitorId]);\n        this.connection?.destroy();\n        this.connection = undefined;\n    }\n    measureAndReschedule(start, conn) {\n        if (this.closed) {\n            conn?.destroy();\n            return;\n        }\n        if (this.connection == null) {\n            this.connection = conn;\n        }\n        this.latestRtt = (0, utils_1.calculateDurationInMs)(start);\n        this[kMonitorId] = (0, timers_1.setTimeout)(() => this.measureRoundTripTime(), this.monitor.options.heartbeatFrequencyMS);\n    }\n    measureRoundTripTime() {\n        const start = (0, utils_1.now)();\n        if (this.closed) {\n            return;\n        }\n        const connection = this.connection;\n        if (connection == null) {\n            (0, connect_1.connect)(this.monitor.connectOptions).then(connection => {\n                this.measureAndReschedule(start, connection);\n            }, () => {\n                this.connection = undefined;\n            });\n            return;\n        }\n        const commandName = connection.serverApi?.version || connection.helloOk ? 'hello' : constants_1.LEGACY_HELLO_COMMAND;\n        connection.command((0, utils_1.ns)('admin.$cmd'), { [commandName]: 1 }, undefined).then(() => this.measureAndReschedule(start), () => {\n            this.connection?.destroy();\n            this.connection = undefined;\n            return;\n        });\n    }\n}\nexports.RTTPinger = RTTPinger;\n/**\n * @internal\n */\nclass MonitorInterval {\n    constructor(fn, options = {}) {\n        this.isExpeditedCallToFnScheduled = false;\n        this.stopped = false;\n        this.isExecutionInProgress = false;\n        this.hasExecutedOnce = false;\n        this._executeAndReschedule = () => {\n            if (this.stopped)\n                return;\n            if (this.timerId) {\n                (0, timers_1.clearTimeout)(this.timerId);\n            }\n            this.isExpeditedCallToFnScheduled = false;\n            this.isExecutionInProgress = true;\n            this.fn(() => {\n                this.lastExecutionEnded = (0, utils_1.now)();\n                this.isExecutionInProgress = false;\n                this._reschedule(this.heartbeatFrequencyMS);\n            });\n        };\n        this.fn = fn;\n        this.lastExecutionEnded = -Infinity;\n        this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 1000;\n        this.minHeartbeatFrequencyMS = options.minHeartbeatFrequencyMS ?? 500;\n        if (options.immediate) {\n            this._executeAndReschedule();\n        }\n        else {\n            this._reschedule(undefined);\n        }\n    }\n    wake() {\n        const currentTime = (0, utils_1.now)();\n        const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n        // TODO(NODE-4674): Add error handling and logging to the monitor\n        if (timeSinceLastCall < 0) {\n            return this._executeAndReschedule();\n        }\n        if (this.isExecutionInProgress) {\n            return;\n        }\n        // debounce multiple calls to wake within the `minInterval`\n        if (this.isExpeditedCallToFnScheduled) {\n            return;\n        }\n        // reschedule a call as soon as possible, ensuring the call never happens\n        // faster than the `minInterval`\n        if (timeSinceLastCall < this.minHeartbeatFrequencyMS) {\n            this.isExpeditedCallToFnScheduled = true;\n            this._reschedule(this.minHeartbeatFrequencyMS - timeSinceLastCall);\n            return;\n        }\n        this._executeAndReschedule();\n    }\n    stop() {\n        this.stopped = true;\n        if (this.timerId) {\n            (0, timers_1.clearTimeout)(this.timerId);\n            this.timerId = undefined;\n        }\n        this.lastExecutionEnded = -Infinity;\n        this.isExpeditedCallToFnScheduled = false;\n    }\n    toString() {\n        return JSON.stringify(this);\n    }\n    toJSON() {\n        const currentTime = (0, utils_1.now)();\n        const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n        return {\n            timerId: this.timerId != null ? 'set' : 'cleared',\n            lastCallTime: this.lastExecutionEnded,\n            isExpeditedCheckScheduled: this.isExpeditedCallToFnScheduled,\n            stopped: this.stopped,\n            heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: this.minHeartbeatFrequencyMS,\n            currentTime,\n            timeSinceLastCall\n        };\n    }\n    _reschedule(ms) {\n        if (this.stopped)\n            return;\n        if (this.timerId) {\n            (0, timers_1.clearTimeout)(this.timerId);\n        }\n        this.timerId = (0, timers_1.setTimeout)(this._executeAndReschedule, ms || this.heartbeatFrequencyMS);\n    }\n}\nexports.MonitorInterval = MonitorInterval;\n/** @internal\n * This class implements the RTT sampling logic specified for [CSOT](https://github.com/mongodb/specifications/blob/bbb335e60cd7ea1e0f7cd9a9443cb95fc9d3b64d/source/client-side-operations-timeout/client-side-operations-timeout.md#drivers-use-minimum-rtt-to-short-circuit-operations)\n *\n * This is implemented as a [circular buffer](https://en.wikipedia.org/wiki/Circular_buffer) keeping\n * the most recent `windowSize` samples\n * */\nclass RTTSampler {\n    constructor(windowSize = 10) {\n        this.rttSamples = new Float64Array(windowSize);\n        this.length = 0;\n        this.writeIndex = 0;\n    }\n    /**\n     * Adds an rtt sample to the end of the circular buffer\n     * When `windowSize` samples have been collected, `addSample` overwrites the least recently added\n     * sample\n     */\n    addSample(sample) {\n        this.rttSamples[this.writeIndex++] = sample;\n        if (this.length < this.rttSamples.length) {\n            this.length++;\n        }\n        this.writeIndex %= this.rttSamples.length;\n    }\n    /**\n     * When \\< 2 samples have been collected, returns 0\n     * Otherwise computes the minimum value samples contained in the buffer\n     */\n    min() {\n        if (this.length < 2)\n            return 0;\n        let min = this.rttSamples[0];\n        for (let i = 1; i < this.length; i++) {\n            if (this.rttSamples[i] < min)\n                min = this.rttSamples[i];\n        }\n        return min;\n    }\n    /**\n     * Returns mean of samples contained in the buffer\n     */\n    average() {\n        if (this.length === 0)\n            return 0;\n        let sum = 0;\n        for (let i = 0; i < this.length; i++) {\n            sum += this.rttSamples[i];\n        }\n        return sum / this.length;\n    }\n    /**\n     * Returns most recently inserted element in the buffer\n     * Returns null if the buffer is empty\n     * */\n    get last() {\n        if (this.length === 0)\n            return null;\n        return this.rttSamples[this.writeIndex === 0 ? this.length - 1 : this.writeIndex - 1];\n    }\n    /**\n     * Clear the buffer\n     * NOTE: this does not overwrite the data held in the internal array, just the pointers into\n     * this array\n     */\n    clear() {\n        this.length = 0;\n        this.writeIndex = 0;\n    }\n}\nexports.RTTSampler = RTTSampler;\n//# sourceMappingURL=monitor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/monitor.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/server.js":
/*!************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/server.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Server = void 0;\nconst connection_1 = __webpack_require__(/*! ../cmap/connection */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/connection.js\");\nconst connection_pool_1 = __webpack_require__(/*! ../cmap/connection_pool */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/connection_pool.js\");\nconst errors_1 = __webpack_require__(/*! ../cmap/errors */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/errors.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_types.js\");\nconst transactions_1 = __webpack_require__(/*! ../transactions */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/transactions.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/write_concern.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/common.js\");\nconst monitor_1 = __webpack_require__(/*! ./monitor */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/monitor.js\");\nconst server_description_1 = __webpack_require__(/*! ./server_description */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/server_description.js\");\nconst stateTransition = (0, utils_1.makeStateMachine)({\n    [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n    [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n    [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n    [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\nclass Server extends mongo_types_1.TypedEventEmitter {\n    /**\n     * Create a server\n     */\n    constructor(topology, description, options) {\n        super();\n        this.serverApi = options.serverApi;\n        const poolOptions = { hostAddress: description.hostAddress, ...options };\n        this.topology = topology;\n        this.pool = new connection_pool_1.ConnectionPool(this, poolOptions);\n        this.s = {\n            description,\n            options,\n            state: common_1.STATE_CLOSED,\n            operationCount: 0\n        };\n        for (const event of [...constants_1.CMAP_EVENTS, ...constants_1.APM_EVENTS]) {\n            this.pool.on(event, (e) => this.emit(event, e));\n        }\n        this.pool.on(connection_1.Connection.CLUSTER_TIME_RECEIVED, (clusterTime) => {\n            this.clusterTime = clusterTime;\n        });\n        if (this.loadBalanced) {\n            this.monitor = null;\n            // monitoring is disabled in load balancing mode\n            return;\n        }\n        // create the monitor\n        this.monitor = new monitor_1.Monitor(this, this.s.options);\n        for (const event of constants_1.HEARTBEAT_EVENTS) {\n            this.monitor.on(event, (e) => this.emit(event, e));\n        }\n        this.monitor.on('resetServer', (error) => markServerUnknown(this, error));\n        this.monitor.on(Server.SERVER_HEARTBEAT_SUCCEEDED, (event) => {\n            this.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(this.description.hostAddress, event.reply, {\n                roundTripTime: this.monitor?.roundTripTime,\n                minRoundTripTime: this.monitor?.minRoundTripTime\n            }));\n            if (this.s.state === common_1.STATE_CONNECTING) {\n                stateTransition(this, common_1.STATE_CONNECTED);\n                this.emit(Server.CONNECT, this);\n            }\n        });\n    }\n    get clusterTime() {\n        return this.topology.clusterTime;\n    }\n    set clusterTime(clusterTime) {\n        this.topology.clusterTime = clusterTime;\n    }\n    get description() {\n        return this.s.description;\n    }\n    get name() {\n        return this.s.description.address;\n    }\n    get autoEncrypter() {\n        if (this.s.options && this.s.options.autoEncrypter) {\n            return this.s.options.autoEncrypter;\n        }\n        return;\n    }\n    get loadBalanced() {\n        return this.topology.description.type === common_1.TopologyType.LoadBalanced;\n    }\n    /**\n     * Initiate server connect\n     */\n    connect() {\n        if (this.s.state !== common_1.STATE_CLOSED) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CONNECTING);\n        // If in load balancer mode we automatically set the server to\n        // a load balancer. It never transitions out of this state and\n        // has no monitor.\n        if (!this.loadBalanced) {\n            this.monitor?.connect();\n        }\n        else {\n            stateTransition(this, common_1.STATE_CONNECTED);\n            this.emit(Server.CONNECT, this);\n        }\n    }\n    /** Destroy the server connection */\n    destroy() {\n        if (this.s.state === common_1.STATE_CLOSED) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        if (!this.loadBalanced) {\n            this.monitor?.close();\n        }\n        this.pool.close();\n        stateTransition(this, common_1.STATE_CLOSED);\n        this.emit('closed');\n    }\n    /**\n     * Immediately schedule monitoring of this server. If there already an attempt being made\n     * this will be a no-op.\n     */\n    requestCheck() {\n        if (!this.loadBalanced) {\n            this.monitor?.requestCheck();\n        }\n    }\n    async command(ns, cmd, options, responseType) {\n        if (ns.db == null || typeof ns === 'string') {\n            throw new error_1.MongoInvalidArgumentError('Namespace must not be a string');\n        }\n        if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n            throw new error_1.MongoServerClosedError();\n        }\n        // Clone the options\n        const finalOptions = Object.assign({}, options, {\n            wireProtocolCommand: false,\n            directConnection: this.topology.s.options.directConnection\n        });\n        // There are cases where we need to flag the read preference not to get sent in\n        // the command, such as pre-5.0 servers attempting to perform an aggregate write\n        // with a non-primary read preference. In this case the effective read preference\n        // (primary) is not the same as the provided and must be removed completely.\n        if (finalOptions.omitReadPreference) {\n            delete finalOptions.readPreference;\n        }\n        const session = finalOptions.session;\n        let conn = session?.pinnedConnection;\n        this.incrementOperationCount();\n        if (conn == null) {\n            try {\n                conn = await this.pool.checkOut();\n                if (this.loadBalanced && isPinnableCommand(cmd, session)) {\n                    session?.pin(conn);\n                }\n            }\n            catch (checkoutError) {\n                this.decrementOperationCount();\n                if (!(checkoutError instanceof errors_1.PoolClearedError))\n                    this.handleError(checkoutError);\n                throw checkoutError;\n            }\n        }\n        try {\n            try {\n                const res = await conn.command(ns, cmd, finalOptions, responseType);\n                (0, write_concern_1.throwIfWriteConcernError)(res);\n                return res;\n            }\n            catch (commandError) {\n                throw this.decorateCommandError(conn, cmd, finalOptions, commandError);\n            }\n        }\n        catch (operationError) {\n            if (operationError instanceof error_1.MongoError &&\n                operationError.code === error_1.MONGODB_ERROR_CODES.Reauthenticate) {\n                await this.pool.reauthenticate(conn);\n                try {\n                    const res = await conn.command(ns, cmd, finalOptions, responseType);\n                    (0, write_concern_1.throwIfWriteConcernError)(res);\n                    return res;\n                }\n                catch (commandError) {\n                    throw this.decorateCommandError(conn, cmd, finalOptions, commandError);\n                }\n            }\n            else {\n                throw operationError;\n            }\n        }\n        finally {\n            this.decrementOperationCount();\n            if (session?.pinnedConnection !== conn) {\n                this.pool.checkIn(conn);\n            }\n        }\n    }\n    /**\n     * Handle SDAM error\n     * @internal\n     */\n    handleError(error, connection) {\n        if (!(error instanceof error_1.MongoError)) {\n            return;\n        }\n        const isStaleError = error.connectionGeneration && error.connectionGeneration < this.pool.generation;\n        if (isStaleError) {\n            return;\n        }\n        const isNetworkNonTimeoutError = error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError);\n        const isNetworkTimeoutBeforeHandshakeError = (0, error_1.isNetworkErrorBeforeHandshake)(error);\n        const isAuthHandshakeError = error.hasErrorLabel(error_1.MongoErrorLabel.HandshakeError);\n        if (isNetworkNonTimeoutError || isNetworkTimeoutBeforeHandshakeError || isAuthHandshakeError) {\n            // In load balanced mode we never mark the server as unknown and always\n            // clear for the specific service id.\n            if (!this.loadBalanced) {\n                error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n                markServerUnknown(this, error);\n            }\n            else if (connection) {\n                this.pool.clear({ serviceId: connection.serviceId });\n            }\n        }\n        else {\n            if ((0, error_1.isSDAMUnrecoverableError)(error)) {\n                if (shouldHandleStateChangeError(this, error)) {\n                    const shouldClearPool = (0, utils_1.maxWireVersion)(this) <= 7 || (0, error_1.isNodeShuttingDownError)(error);\n                    if (this.loadBalanced && connection && shouldClearPool) {\n                        this.pool.clear({ serviceId: connection.serviceId });\n                    }\n                    if (!this.loadBalanced) {\n                        if (shouldClearPool) {\n                            error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n                        }\n                        markServerUnknown(this, error);\n                        process.nextTick(() => this.requestCheck());\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Ensure that error is properly decorated and internal state is updated before throwing\n     * @internal\n     */\n    decorateCommandError(connection, cmd, options, error) {\n        if (typeof error !== 'object' || error == null || !('name' in error)) {\n            throw new error_1.MongoRuntimeError('An unexpected error type: ' + typeof error);\n        }\n        if (error.name === 'AbortError' && 'cause' in error && error.cause instanceof error_1.MongoError) {\n            error = error.cause;\n        }\n        if (!(error instanceof error_1.MongoError)) {\n            // Node.js or some other error we have not special handling for\n            return error;\n        }\n        if (connectionIsStale(this.pool, connection)) {\n            return error;\n        }\n        const session = options?.session;\n        if (error instanceof error_1.MongoNetworkError) {\n            if (session && !session.hasEnded && session.serverSession) {\n                session.serverSession.isDirty = true;\n            }\n            // inActiveTransaction check handles commit and abort.\n            if (inActiveTransaction(session, cmd) &&\n                !error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n                error.addErrorLabel(error_1.MongoErrorLabel.TransientTransactionError);\n            }\n            if ((isRetryableWritesEnabled(this.topology) || (0, transactions_1.isTransactionCommand)(cmd)) &&\n                (0, utils_1.supportsRetryableWrites)(this) &&\n                !inActiveTransaction(session, cmd)) {\n                error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n            }\n        }\n        else {\n            if ((isRetryableWritesEnabled(this.topology) || (0, transactions_1.isTransactionCommand)(cmd)) &&\n                (0, error_1.needsRetryableWriteLabel)(error, (0, utils_1.maxWireVersion)(this), this.description.type) &&\n                !inActiveTransaction(session, cmd)) {\n                error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n            }\n        }\n        if (session &&\n            session.isPinned &&\n            error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n            session.unpin({ force: true });\n        }\n        this.handleError(error, connection);\n        return error;\n    }\n    /**\n     * Decrement the operation count, returning the new count.\n     */\n    decrementOperationCount() {\n        return (this.s.operationCount -= 1);\n    }\n    /**\n     * Increment the operation count, returning the new count.\n     */\n    incrementOperationCount() {\n        return (this.s.operationCount += 1);\n    }\n}\nexports.Server = Server;\n/** @event */\nServer.SERVER_HEARTBEAT_STARTED = constants_1.SERVER_HEARTBEAT_STARTED;\n/** @event */\nServer.SERVER_HEARTBEAT_SUCCEEDED = constants_1.SERVER_HEARTBEAT_SUCCEEDED;\n/** @event */\nServer.SERVER_HEARTBEAT_FAILED = constants_1.SERVER_HEARTBEAT_FAILED;\n/** @event */\nServer.CONNECT = constants_1.CONNECT;\n/** @event */\nServer.DESCRIPTION_RECEIVED = constants_1.DESCRIPTION_RECEIVED;\n/** @event */\nServer.CLOSED = constants_1.CLOSED;\n/** @event */\nServer.ENDED = constants_1.ENDED;\nfunction markServerUnknown(server, error) {\n    // Load balancer servers can never be marked unknown.\n    if (server.loadBalanced) {\n        return;\n    }\n    if (error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError)) {\n        server.monitor?.reset();\n    }\n    server.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(server.description.hostAddress, undefined, { error }));\n}\nfunction isPinnableCommand(cmd, session) {\n    if (session) {\n        return (session.inTransaction() ||\n            (session.transaction.isCommitted && 'commitTransaction' in cmd) ||\n            'aggregate' in cmd ||\n            'find' in cmd ||\n            'getMore' in cmd ||\n            'listCollections' in cmd ||\n            'listIndexes' in cmd ||\n            'bulkWrite' in cmd);\n    }\n    return false;\n}\nfunction connectionIsStale(pool, connection) {\n    if (connection.serviceId) {\n        return (connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString()));\n    }\n    return connection.generation !== pool.generation;\n}\nfunction shouldHandleStateChangeError(server, err) {\n    const etv = err.topologyVersion;\n    const stv = server.description.topologyVersion;\n    return (0, server_description_1.compareTopologyVersion)(stv, etv) < 0;\n}\nfunction inActiveTransaction(session, cmd) {\n    return session && session.inTransaction() && !(0, transactions_1.isTransactionCommand)(cmd);\n}\n/** this checks the retryWrites option passed down from the client options, it\n * does not check if the server supports retryable writes */\nfunction isRetryableWritesEnabled(topology) {\n    return topology.s.options.retryWrites !== false;\n}\n//# sourceMappingURL=server.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/server.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/server_description.js":
/*!************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/server_description.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ServerDescription = void 0;\nexports.parseServerType = parseServerType;\nexports.compareTopologyVersion = compareTopologyVersion;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/common.js\");\nconst WRITABLE_SERVER_TYPES = new Set([\n    common_1.ServerType.RSPrimary,\n    common_1.ServerType.Standalone,\n    common_1.ServerType.Mongos,\n    common_1.ServerType.LoadBalancer\n]);\nconst DATA_BEARING_SERVER_TYPES = new Set([\n    common_1.ServerType.RSPrimary,\n    common_1.ServerType.RSSecondary,\n    common_1.ServerType.Mongos,\n    common_1.ServerType.Standalone,\n    common_1.ServerType.LoadBalancer\n]);\n/**\n * The client's view of a single server, based on the most recent hello outcome.\n *\n * Internal type, not meant to be directly instantiated\n * @public\n */\nclass ServerDescription {\n    /**\n     * Create a ServerDescription\n     * @internal\n     *\n     * @param address - The address of the server\n     * @param hello - An optional hello response for this server\n     */\n    constructor(address, hello, options = {}) {\n        if (address == null || address === '') {\n            throw new error_1.MongoRuntimeError('ServerDescription must be provided with a non-empty address');\n        }\n        this.address =\n            typeof address === 'string'\n                ? utils_1.HostAddress.fromString(address).toString() // Use HostAddress to normalize\n                : address.toString();\n        this.type = parseServerType(hello, options);\n        this.hosts = hello?.hosts?.map((host) => host.toLowerCase()) ?? [];\n        this.passives = hello?.passives?.map((host) => host.toLowerCase()) ?? [];\n        this.arbiters = hello?.arbiters?.map((host) => host.toLowerCase()) ?? [];\n        this.tags = hello?.tags ?? {};\n        this.minWireVersion = hello?.minWireVersion ?? 0;\n        this.maxWireVersion = hello?.maxWireVersion ?? 0;\n        this.roundTripTime = options?.roundTripTime ?? -1;\n        this.minRoundTripTime = options?.minRoundTripTime ?? 0;\n        this.lastUpdateTime = (0, utils_1.now)();\n        this.lastWriteDate = hello?.lastWrite?.lastWriteDate ?? 0;\n        this.error = options.error ?? null;\n        // TODO(NODE-2674): Preserve int64 sent from MongoDB\n        this.topologyVersion = this.error?.topologyVersion ?? hello?.topologyVersion ?? null;\n        this.setName = hello?.setName ?? null;\n        this.setVersion = hello?.setVersion ?? null;\n        this.electionId = hello?.electionId ?? null;\n        this.logicalSessionTimeoutMinutes = hello?.logicalSessionTimeoutMinutes ?? null;\n        this.maxMessageSizeBytes = hello?.maxMessageSizeBytes ?? null;\n        this.maxWriteBatchSize = hello?.maxWriteBatchSize ?? null;\n        this.maxBsonObjectSize = hello?.maxBsonObjectSize ?? null;\n        this.primary = hello?.primary ?? null;\n        this.me = hello?.me?.toLowerCase() ?? null;\n        this.$clusterTime = hello?.$clusterTime ?? null;\n    }\n    get hostAddress() {\n        return utils_1.HostAddress.fromString(this.address);\n    }\n    get allHosts() {\n        return this.hosts.concat(this.arbiters).concat(this.passives);\n    }\n    /** Is this server available for reads*/\n    get isReadable() {\n        return this.type === common_1.ServerType.RSSecondary || this.isWritable;\n    }\n    /** Is this server data bearing */\n    get isDataBearing() {\n        return DATA_BEARING_SERVER_TYPES.has(this.type);\n    }\n    /** Is this server available for writes */\n    get isWritable() {\n        return WRITABLE_SERVER_TYPES.has(this.type);\n    }\n    get host() {\n        const chopLength = `:${this.port}`.length;\n        return this.address.slice(0, -chopLength);\n    }\n    get port() {\n        const port = this.address.split(':').pop();\n        return port ? Number.parseInt(port, 10) : 27017;\n    }\n    /**\n     * Determines if another `ServerDescription` is equal to this one per the rules defined\n     * in the {@link https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#serverdescription|SDAM spec}\n     */\n    equals(other) {\n        // Despite using the comparator that would determine a nullish topologyVersion as greater than\n        // for equality we should only always perform direct equality comparison\n        const topologyVersionsEqual = this.topologyVersion === other?.topologyVersion ||\n            compareTopologyVersion(this.topologyVersion, other?.topologyVersion) === 0;\n        const electionIdsEqual = this.electionId != null && other?.electionId != null\n            ? (0, utils_1.compareObjectId)(this.electionId, other.electionId) === 0\n            : this.electionId === other?.electionId;\n        return (other != null &&\n            (0, utils_1.errorStrictEqual)(this.error, other.error) &&\n            this.type === other.type &&\n            this.minWireVersion === other.minWireVersion &&\n            (0, utils_1.arrayStrictEqual)(this.hosts, other.hosts) &&\n            tagsStrictEqual(this.tags, other.tags) &&\n            this.setName === other.setName &&\n            this.setVersion === other.setVersion &&\n            electionIdsEqual &&\n            this.primary === other.primary &&\n            this.logicalSessionTimeoutMinutes === other.logicalSessionTimeoutMinutes &&\n            topologyVersionsEqual);\n    }\n}\nexports.ServerDescription = ServerDescription;\n// Parses a `hello` message and determines the server type\nfunction parseServerType(hello, options) {\n    if (options?.loadBalanced) {\n        return common_1.ServerType.LoadBalancer;\n    }\n    if (!hello || !hello.ok) {\n        return common_1.ServerType.Unknown;\n    }\n    if (hello.isreplicaset) {\n        return common_1.ServerType.RSGhost;\n    }\n    if (hello.msg && hello.msg === 'isdbgrid') {\n        return common_1.ServerType.Mongos;\n    }\n    if (hello.setName) {\n        if (hello.hidden) {\n            return common_1.ServerType.RSOther;\n        }\n        else if (hello.isWritablePrimary) {\n            return common_1.ServerType.RSPrimary;\n        }\n        else if (hello.secondary) {\n            return common_1.ServerType.RSSecondary;\n        }\n        else if (hello.arbiterOnly) {\n            return common_1.ServerType.RSArbiter;\n        }\n        else {\n            return common_1.ServerType.RSOther;\n        }\n    }\n    return common_1.ServerType.Standalone;\n}\nfunction tagsStrictEqual(tags, tags2) {\n    const tagsKeys = Object.keys(tags);\n    const tags2Keys = Object.keys(tags2);\n    return (tagsKeys.length === tags2Keys.length &&\n        tagsKeys.every((key) => tags2[key] === tags[key]));\n}\n/**\n * Compares two topology versions.\n *\n * 1. If the response topologyVersion is unset or the ServerDescription's\n *    topologyVersion is null, the client MUST assume the response is more recent.\n * 1. If the response's topologyVersion.processId is not equal to the\n *    ServerDescription's, the client MUST assume the response is more recent.\n * 1. If the response's topologyVersion.processId is equal to the\n *    ServerDescription's, the client MUST use the counter field to determine\n *    which topologyVersion is more recent.\n *\n * ```ts\n * currentTv <   newTv === -1\n * currentTv === newTv === 0\n * currentTv >   newTv === 1\n * ```\n */\nfunction compareTopologyVersion(currentTv, newTv) {\n    if (currentTv == null || newTv == null) {\n        return -1;\n    }\n    if (!currentTv.processId.equals(newTv.processId)) {\n        return -1;\n    }\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    const currentCounter = typeof currentTv.counter === 'bigint'\n        ? bson_1.Long.fromBigInt(currentTv.counter)\n        : bson_1.Long.isLong(currentTv.counter)\n            ? currentTv.counter\n            : bson_1.Long.fromNumber(currentTv.counter);\n    const newCounter = typeof newTv.counter === 'bigint'\n        ? bson_1.Long.fromBigInt(newTv.counter)\n        : bson_1.Long.isLong(newTv.counter)\n            ? newTv.counter\n            : bson_1.Long.fromNumber(newTv.counter);\n    return currentCounter.compare(newCounter);\n}\n//# sourceMappingURL=server_description.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/server_description.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/server_selection.js":
/*!**********************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/server_selection.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MIN_SECONDARY_WRITE_WIRE_VERSION = void 0;\nexports.writableServerSelector = writableServerSelector;\nexports.sameServerSelector = sameServerSelector;\nexports.secondaryWritableServerSelector = secondaryWritableServerSelector;\nexports.readPreferenceServerSelector = readPreferenceServerSelector;\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_preference.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/common.js\");\n// max staleness constants\nconst IDLE_WRITE_PERIOD = 10000;\nconst SMALLEST_MAX_STALENESS_SECONDS = 90;\n//  Minimum version to try writes on secondaries.\nexports.MIN_SECONDARY_WRITE_WIRE_VERSION = 13;\n/**\n * Returns a server selector that selects for writable servers\n */\nfunction writableServerSelector() {\n    return function writableServer(topologyDescription, servers) {\n        return latencyWindowReducer(topologyDescription, servers.filter((s) => s.isWritable));\n    };\n}\n/**\n * The purpose of this selector is to select the same server, only\n * if it is in a state that it can have commands sent to it.\n */\nfunction sameServerSelector(description) {\n    return function sameServerSelector(topologyDescription, servers) {\n        if (!description)\n            return [];\n        // Filter the servers to match the provided description only if\n        // the type is not unknown.\n        return servers.filter(sd => {\n            return sd.address === description.address && sd.type !== common_1.ServerType.Unknown;\n        });\n    };\n}\n/**\n * Returns a server selector that uses a read preference to select a\n * server potentially for a write on a secondary.\n */\nfunction secondaryWritableServerSelector(wireVersion, readPreference) {\n    // If server version < 5.0, read preference always primary.\n    // If server version >= 5.0...\n    // - If read preference is supplied, use that.\n    // - If no read preference is supplied, use primary.\n    if (!readPreference ||\n        !wireVersion ||\n        (wireVersion && wireVersion < exports.MIN_SECONDARY_WRITE_WIRE_VERSION)) {\n        return readPreferenceServerSelector(read_preference_1.ReadPreference.primary);\n    }\n    return readPreferenceServerSelector(readPreference);\n}\n/**\n * Reduces the passed in array of servers by the rules of the \"Max Staleness\" specification\n * found here: https://github.com/mongodb/specifications/blob/master/source/max-staleness/max-staleness.rst\n *\n * @param readPreference - The read preference providing max staleness guidance\n * @param topologyDescription - The topology description\n * @param servers - The list of server descriptions to be reduced\n * @returns The list of servers that satisfy the requirements of max staleness\n */\nfunction maxStalenessReducer(readPreference, topologyDescription, servers) {\n    if (readPreference.maxStalenessSeconds == null || readPreference.maxStalenessSeconds < 0) {\n        return servers;\n    }\n    const maxStaleness = readPreference.maxStalenessSeconds;\n    const maxStalenessVariance = (topologyDescription.heartbeatFrequencyMS + IDLE_WRITE_PERIOD) / 1000;\n    if (maxStaleness < maxStalenessVariance) {\n        throw new error_1.MongoInvalidArgumentError(`Option \"maxStalenessSeconds\" must be at least ${maxStalenessVariance} seconds`);\n    }\n    if (maxStaleness < SMALLEST_MAX_STALENESS_SECONDS) {\n        throw new error_1.MongoInvalidArgumentError(`Option \"maxStalenessSeconds\" must be at least ${SMALLEST_MAX_STALENESS_SECONDS} seconds`);\n    }\n    if (topologyDescription.type === common_1.TopologyType.ReplicaSetWithPrimary) {\n        const primary = Array.from(topologyDescription.servers.values()).filter(primaryFilter)[0];\n        return servers.reduce((result, server) => {\n            const stalenessMS = server.lastUpdateTime -\n                server.lastWriteDate -\n                (primary.lastUpdateTime - primary.lastWriteDate) +\n                topologyDescription.heartbeatFrequencyMS;\n            const staleness = stalenessMS / 1000;\n            const maxStalenessSeconds = readPreference.maxStalenessSeconds ?? 0;\n            if (staleness <= maxStalenessSeconds) {\n                result.push(server);\n            }\n            return result;\n        }, []);\n    }\n    if (topologyDescription.type === common_1.TopologyType.ReplicaSetNoPrimary) {\n        if (servers.length === 0) {\n            return servers;\n        }\n        const sMax = servers.reduce((max, s) => s.lastWriteDate > max.lastWriteDate ? s : max);\n        return servers.reduce((result, server) => {\n            const stalenessMS = sMax.lastWriteDate - server.lastWriteDate + topologyDescription.heartbeatFrequencyMS;\n            const staleness = stalenessMS / 1000;\n            const maxStalenessSeconds = readPreference.maxStalenessSeconds ?? 0;\n            if (staleness <= maxStalenessSeconds) {\n                result.push(server);\n            }\n            return result;\n        }, []);\n    }\n    return servers;\n}\n/**\n * Determines whether a server's tags match a given set of tags\n *\n * @param tagSet - The requested tag set to match\n * @param serverTags - The server's tags\n */\nfunction tagSetMatch(tagSet, serverTags) {\n    const keys = Object.keys(tagSet);\n    const serverTagKeys = Object.keys(serverTags);\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i];\n        if (serverTagKeys.indexOf(key) === -1 || serverTags[key] !== tagSet[key]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Reduces a set of server descriptions based on tags requested by the read preference\n *\n * @param readPreference - The read preference providing the requested tags\n * @param servers - The list of server descriptions to reduce\n * @returns The list of servers matching the requested tags\n */\nfunction tagSetReducer(readPreference, servers) {\n    if (readPreference.tags == null ||\n        (Array.isArray(readPreference.tags) && readPreference.tags.length === 0)) {\n        return servers;\n    }\n    for (let i = 0; i < readPreference.tags.length; ++i) {\n        const tagSet = readPreference.tags[i];\n        const serversMatchingTagset = servers.reduce((matched, server) => {\n            if (tagSetMatch(tagSet, server.tags))\n                matched.push(server);\n            return matched;\n        }, []);\n        if (serversMatchingTagset.length) {\n            return serversMatchingTagset;\n        }\n    }\n    return [];\n}\n/**\n * Reduces a list of servers to ensure they fall within an acceptable latency window. This is\n * further specified in the \"Server Selection\" specification, found here:\n * https://github.com/mongodb/specifications/blob/master/source/server-selection/server-selection.rst\n *\n * @param topologyDescription - The topology description\n * @param servers - The list of servers to reduce\n * @returns The servers which fall within an acceptable latency window\n */\nfunction latencyWindowReducer(topologyDescription, servers) {\n    const low = servers.reduce((min, server) => Math.min(server.roundTripTime, min), Infinity);\n    const high = low + topologyDescription.localThresholdMS;\n    return servers.reduce((result, server) => {\n        if (server.roundTripTime <= high && server.roundTripTime >= low)\n            result.push(server);\n        return result;\n    }, []);\n}\n// filters\nfunction primaryFilter(server) {\n    return server.type === common_1.ServerType.RSPrimary;\n}\nfunction secondaryFilter(server) {\n    return server.type === common_1.ServerType.RSSecondary;\n}\nfunction nearestFilter(server) {\n    return server.type === common_1.ServerType.RSSecondary || server.type === common_1.ServerType.RSPrimary;\n}\nfunction knownFilter(server) {\n    return server.type !== common_1.ServerType.Unknown;\n}\nfunction loadBalancerFilter(server) {\n    return server.type === common_1.ServerType.LoadBalancer;\n}\n/**\n * Returns a function which selects servers based on a provided read preference\n *\n * @param readPreference - The read preference to select with\n */\nfunction readPreferenceServerSelector(readPreference) {\n    if (!readPreference.isValid()) {\n        throw new error_1.MongoInvalidArgumentError('Invalid read preference specified');\n    }\n    return function readPreferenceServers(topologyDescription, servers, deprioritized = []) {\n        const commonWireVersion = topologyDescription.commonWireVersion;\n        if (commonWireVersion &&\n            readPreference.minWireVersion &&\n            readPreference.minWireVersion > commonWireVersion) {\n            throw new error_1.MongoCompatibilityError(`Minimum wire version '${readPreference.minWireVersion}' required, but found '${commonWireVersion}'`);\n        }\n        if (topologyDescription.type === common_1.TopologyType.LoadBalanced) {\n            return servers.filter(loadBalancerFilter);\n        }\n        if (topologyDescription.type === common_1.TopologyType.Unknown) {\n            return [];\n        }\n        if (topologyDescription.type === common_1.TopologyType.Single) {\n            return latencyWindowReducer(topologyDescription, servers.filter(knownFilter));\n        }\n        if (topologyDescription.type === common_1.TopologyType.Sharded) {\n            const filtered = servers.filter(server => {\n                return !deprioritized.includes(server);\n            });\n            const selectable = filtered.length > 0 ? filtered : deprioritized;\n            return latencyWindowReducer(topologyDescription, selectable.filter(knownFilter));\n        }\n        const mode = readPreference.mode;\n        if (mode === read_preference_1.ReadPreference.PRIMARY) {\n            return servers.filter(primaryFilter);\n        }\n        if (mode === read_preference_1.ReadPreference.PRIMARY_PREFERRED) {\n            const result = servers.filter(primaryFilter);\n            if (result.length) {\n                return result;\n            }\n        }\n        const filter = mode === read_preference_1.ReadPreference.NEAREST ? nearestFilter : secondaryFilter;\n        const selectedServers = latencyWindowReducer(topologyDescription, tagSetReducer(readPreference, maxStalenessReducer(readPreference, topologyDescription, servers.filter(filter))));\n        if (mode === read_preference_1.ReadPreference.SECONDARY_PREFERRED && selectedServers.length === 0) {\n            return servers.filter(primaryFilter);\n        }\n        return selectedServers;\n    };\n}\n//# sourceMappingURL=server_selection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/server_selection.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/server_selection_events.js":
/*!*****************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/server_selection_events.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WaitingForSuitableServerEvent = exports.ServerSelectionSucceededEvent = exports.ServerSelectionFailedEvent = exports.ServerSelectionStartedEvent = exports.ServerSelectionEvent = void 0;\nconst utils_1 = __webpack_require__(/*! .././utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/constants.js\");\n/**\n * The base export class for all logs published from server selection\n * @internal\n * @category Log Type\n */\nclass ServerSelectionEvent {\n    /** @internal */\n    constructor(selector, topologyDescription, operation) {\n        this.selector = selector;\n        this.operation = operation;\n        this.topologyDescription = topologyDescription;\n    }\n}\nexports.ServerSelectionEvent = ServerSelectionEvent;\n/**\n * An event published when server selection starts\n * @internal\n * @category Event\n */\nclass ServerSelectionStartedEvent extends ServerSelectionEvent {\n    /** @internal */\n    constructor(selector, topologyDescription, operation) {\n        super(selector, topologyDescription, operation);\n        /** @internal */\n        this.name = constants_1.SERVER_SELECTION_STARTED;\n        this.message = 'Server selection started';\n    }\n}\nexports.ServerSelectionStartedEvent = ServerSelectionStartedEvent;\n/**\n * An event published when a server selection fails\n * @internal\n * @category Event\n */\nclass ServerSelectionFailedEvent extends ServerSelectionEvent {\n    /** @internal */\n    constructor(selector, topologyDescription, error, operation) {\n        super(selector, topologyDescription, operation);\n        /** @internal */\n        this.name = constants_1.SERVER_SELECTION_FAILED;\n        this.message = 'Server selection failed';\n        this.failure = error;\n    }\n}\nexports.ServerSelectionFailedEvent = ServerSelectionFailedEvent;\n/**\n * An event published when server selection succeeds\n * @internal\n * @category Event\n */\nclass ServerSelectionSucceededEvent extends ServerSelectionEvent {\n    /** @internal */\n    constructor(selector, topologyDescription, address, operation) {\n        super(selector, topologyDescription, operation);\n        /** @internal */\n        this.name = constants_1.SERVER_SELECTION_SUCCEEDED;\n        this.message = 'Server selection succeeded';\n        const { host, port } = utils_1.HostAddress.fromString(address).toHostPort();\n        this.serverHost = host;\n        this.serverPort = port;\n    }\n}\nexports.ServerSelectionSucceededEvent = ServerSelectionSucceededEvent;\n/**\n * An event published when server selection is waiting for a suitable server to become available\n * @internal\n * @category Event\n */\nclass WaitingForSuitableServerEvent extends ServerSelectionEvent {\n    /** @internal */\n    constructor(selector, topologyDescription, remainingTimeMS, operation) {\n        super(selector, topologyDescription, operation);\n        /** @internal */\n        this.name = constants_1.WAITING_FOR_SUITABLE_SERVER;\n        this.message = 'Waiting for suitable server to become available';\n        this.remainingTimeMS = remainingTimeMS;\n    }\n}\nexports.WaitingForSuitableServerEvent = WaitingForSuitableServerEvent;\n//# sourceMappingURL=server_selection_events.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9zZGFtL3NlcnZlcl9zZWxlY3Rpb25fZXZlbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFDQUFxQyxHQUFHLHFDQUFxQyxHQUFHLGtDQUFrQyxHQUFHLG1DQUFtQyxHQUFHLDRCQUE0QjtBQUN2TCxnQkFBZ0IsbUJBQU8sQ0FBQyxnR0FBWTtBQUNwQyxvQkFBb0IsbUJBQU8sQ0FBQyxzR0FBYztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsYUFBYTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9saW5rdXMvR2l0aHViL21vbm90d28vcGF5bG9hZC1wbHVnaW4tbWV0YS9ub2RlX21vZHVsZXMvLnBucG0vbW9uZ29kYkA2LjEwLjAvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL3NkYW0vc2VydmVyX3NlbGVjdGlvbl9ldmVudHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLldhaXRpbmdGb3JTdWl0YWJsZVNlcnZlckV2ZW50ID0gZXhwb3J0cy5TZXJ2ZXJTZWxlY3Rpb25TdWNjZWVkZWRFdmVudCA9IGV4cG9ydHMuU2VydmVyU2VsZWN0aW9uRmFpbGVkRXZlbnQgPSBleHBvcnRzLlNlcnZlclNlbGVjdGlvblN0YXJ0ZWRFdmVudCA9IGV4cG9ydHMuU2VydmVyU2VsZWN0aW9uRXZlbnQgPSB2b2lkIDA7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uLy4vdXRpbHNcIik7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG4vKipcbiAqIFRoZSBiYXNlIGV4cG9ydCBjbGFzcyBmb3IgYWxsIGxvZ3MgcHVibGlzaGVkIGZyb20gc2VydmVyIHNlbGVjdGlvblxuICogQGludGVybmFsXG4gKiBAY2F0ZWdvcnkgTG9nIFR5cGVcbiAqL1xuY2xhc3MgU2VydmVyU2VsZWN0aW9uRXZlbnQge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3RvcihzZWxlY3RvciwgdG9wb2xvZ3lEZXNjcmlwdGlvbiwgb3BlcmF0aW9uKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgICAgICAgdGhpcy5vcGVyYXRpb24gPSBvcGVyYXRpb247XG4gICAgICAgIHRoaXMudG9wb2xvZ3lEZXNjcmlwdGlvbiA9IHRvcG9sb2d5RGVzY3JpcHRpb247XG4gICAgfVxufVxuZXhwb3J0cy5TZXJ2ZXJTZWxlY3Rpb25FdmVudCA9IFNlcnZlclNlbGVjdGlvbkV2ZW50O1xuLyoqXG4gKiBBbiBldmVudCBwdWJsaXNoZWQgd2hlbiBzZXJ2ZXIgc2VsZWN0aW9uIHN0YXJ0c1xuICogQGludGVybmFsXG4gKiBAY2F0ZWdvcnkgRXZlbnRcbiAqL1xuY2xhc3MgU2VydmVyU2VsZWN0aW9uU3RhcnRlZEV2ZW50IGV4dGVuZHMgU2VydmVyU2VsZWN0aW9uRXZlbnQge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3RvcihzZWxlY3RvciwgdG9wb2xvZ3lEZXNjcmlwdGlvbiwgb3BlcmF0aW9uKSB7XG4gICAgICAgIHN1cGVyKHNlbGVjdG9yLCB0b3BvbG9neURlc2NyaXB0aW9uLCBvcGVyYXRpb24pO1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHRoaXMubmFtZSA9IGNvbnN0YW50c18xLlNFUlZFUl9TRUxFQ1RJT05fU1RBUlRFRDtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gJ1NlcnZlciBzZWxlY3Rpb24gc3RhcnRlZCc7XG4gICAgfVxufVxuZXhwb3J0cy5TZXJ2ZXJTZWxlY3Rpb25TdGFydGVkRXZlbnQgPSBTZXJ2ZXJTZWxlY3Rpb25TdGFydGVkRXZlbnQ7XG4vKipcbiAqIEFuIGV2ZW50IHB1Ymxpc2hlZCB3aGVuIGEgc2VydmVyIHNlbGVjdGlvbiBmYWlsc1xuICogQGludGVybmFsXG4gKiBAY2F0ZWdvcnkgRXZlbnRcbiAqL1xuY2xhc3MgU2VydmVyU2VsZWN0aW9uRmFpbGVkRXZlbnQgZXh0ZW5kcyBTZXJ2ZXJTZWxlY3Rpb25FdmVudCB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNvbnN0cnVjdG9yKHNlbGVjdG9yLCB0b3BvbG9neURlc2NyaXB0aW9uLCBlcnJvciwgb3BlcmF0aW9uKSB7XG4gICAgICAgIHN1cGVyKHNlbGVjdG9yLCB0b3BvbG9neURlc2NyaXB0aW9uLCBvcGVyYXRpb24pO1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHRoaXMubmFtZSA9IGNvbnN0YW50c18xLlNFUlZFUl9TRUxFQ1RJT05fRkFJTEVEO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSAnU2VydmVyIHNlbGVjdGlvbiBmYWlsZWQnO1xuICAgICAgICB0aGlzLmZhaWx1cmUgPSBlcnJvcjtcbiAgICB9XG59XG5leHBvcnRzLlNlcnZlclNlbGVjdGlvbkZhaWxlZEV2ZW50ID0gU2VydmVyU2VsZWN0aW9uRmFpbGVkRXZlbnQ7XG4vKipcbiAqIEFuIGV2ZW50IHB1Ymxpc2hlZCB3aGVuIHNlcnZlciBzZWxlY3Rpb24gc3VjY2VlZHNcbiAqIEBpbnRlcm5hbFxuICogQGNhdGVnb3J5IEV2ZW50XG4gKi9cbmNsYXNzIFNlcnZlclNlbGVjdGlvblN1Y2NlZWRlZEV2ZW50IGV4dGVuZHMgU2VydmVyU2VsZWN0aW9uRXZlbnQge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3RvcihzZWxlY3RvciwgdG9wb2xvZ3lEZXNjcmlwdGlvbiwgYWRkcmVzcywgb3BlcmF0aW9uKSB7XG4gICAgICAgIHN1cGVyKHNlbGVjdG9yLCB0b3BvbG9neURlc2NyaXB0aW9uLCBvcGVyYXRpb24pO1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHRoaXMubmFtZSA9IGNvbnN0YW50c18xLlNFUlZFUl9TRUxFQ1RJT05fU1VDQ0VFREVEO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSAnU2VydmVyIHNlbGVjdGlvbiBzdWNjZWVkZWQnO1xuICAgICAgICBjb25zdCB7IGhvc3QsIHBvcnQgfSA9IHV0aWxzXzEuSG9zdEFkZHJlc3MuZnJvbVN0cmluZyhhZGRyZXNzKS50b0hvc3RQb3J0KCk7XG4gICAgICAgIHRoaXMuc2VydmVySG9zdCA9IGhvc3Q7XG4gICAgICAgIHRoaXMuc2VydmVyUG9ydCA9IHBvcnQ7XG4gICAgfVxufVxuZXhwb3J0cy5TZXJ2ZXJTZWxlY3Rpb25TdWNjZWVkZWRFdmVudCA9IFNlcnZlclNlbGVjdGlvblN1Y2NlZWRlZEV2ZW50O1xuLyoqXG4gKiBBbiBldmVudCBwdWJsaXNoZWQgd2hlbiBzZXJ2ZXIgc2VsZWN0aW9uIGlzIHdhaXRpbmcgZm9yIGEgc3VpdGFibGUgc2VydmVyIHRvIGJlY29tZSBhdmFpbGFibGVcbiAqIEBpbnRlcm5hbFxuICogQGNhdGVnb3J5IEV2ZW50XG4gKi9cbmNsYXNzIFdhaXRpbmdGb3JTdWl0YWJsZVNlcnZlckV2ZW50IGV4dGVuZHMgU2VydmVyU2VsZWN0aW9uRXZlbnQge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3RvcihzZWxlY3RvciwgdG9wb2xvZ3lEZXNjcmlwdGlvbiwgcmVtYWluaW5nVGltZU1TLCBvcGVyYXRpb24pIHtcbiAgICAgICAgc3VwZXIoc2VsZWN0b3IsIHRvcG9sb2d5RGVzY3JpcHRpb24sIG9wZXJhdGlvbik7XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgdGhpcy5uYW1lID0gY29uc3RhbnRzXzEuV0FJVElOR19GT1JfU1VJVEFCTEVfU0VSVkVSO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSAnV2FpdGluZyBmb3Igc3VpdGFibGUgc2VydmVyIHRvIGJlY29tZSBhdmFpbGFibGUnO1xuICAgICAgICB0aGlzLnJlbWFpbmluZ1RpbWVNUyA9IHJlbWFpbmluZ1RpbWVNUztcbiAgICB9XG59XG5leHBvcnRzLldhaXRpbmdGb3JTdWl0YWJsZVNlcnZlckV2ZW50ID0gV2FpdGluZ0ZvclN1aXRhYmxlU2VydmVyRXZlbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXJ2ZXJfc2VsZWN0aW9uX2V2ZW50cy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/server_selection_events.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/srv_polling.js":
/*!*****************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/srv_polling.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SrvPoller = exports.SrvPollingEvent = void 0;\nconst dns = __webpack_require__(/*! dns */ \"dns\");\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_types.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\n/**\n * @internal\n * @category Event\n */\nclass SrvPollingEvent {\n    constructor(srvRecords) {\n        this.srvRecords = srvRecords;\n    }\n    hostnames() {\n        return new Set(this.srvRecords.map(r => utils_1.HostAddress.fromSrvRecord(r).toString()));\n    }\n}\nexports.SrvPollingEvent = SrvPollingEvent;\n/** @internal */\nclass SrvPoller extends mongo_types_1.TypedEventEmitter {\n    constructor(options) {\n        super();\n        if (!options || !options.srvHost) {\n            throw new error_1.MongoRuntimeError('Options for SrvPoller must exist and include srvHost');\n        }\n        this.srvHost = options.srvHost;\n        this.srvMaxHosts = options.srvMaxHosts ?? 0;\n        this.srvServiceName = options.srvServiceName ?? 'mongodb';\n        this.rescanSrvIntervalMS = 60000;\n        this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 10000;\n        this.haMode = false;\n        this.generation = 0;\n        this._timeout = undefined;\n    }\n    get srvAddress() {\n        return `_${this.srvServiceName}._tcp.${this.srvHost}`;\n    }\n    get intervalMS() {\n        return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMS;\n    }\n    start() {\n        if (!this._timeout) {\n            this.schedule();\n        }\n    }\n    stop() {\n        if (this._timeout) {\n            (0, timers_1.clearTimeout)(this._timeout);\n            this.generation += 1;\n            this._timeout = undefined;\n        }\n    }\n    // TODO(NODE-4994): implement new logging logic for SrvPoller failures\n    schedule() {\n        if (this._timeout) {\n            (0, timers_1.clearTimeout)(this._timeout);\n        }\n        this._timeout = (0, timers_1.setTimeout)(() => {\n            this._poll().then(undefined, utils_1.squashError);\n        }, this.intervalMS);\n    }\n    success(srvRecords) {\n        this.haMode = false;\n        this.schedule();\n        this.emit(SrvPoller.SRV_RECORD_DISCOVERY, new SrvPollingEvent(srvRecords));\n    }\n    failure() {\n        this.haMode = true;\n        this.schedule();\n    }\n    async _poll() {\n        const generation = this.generation;\n        let srvRecords;\n        try {\n            srvRecords = await dns.promises.resolveSrv(this.srvAddress);\n        }\n        catch {\n            this.failure();\n            return;\n        }\n        if (generation !== this.generation) {\n            return;\n        }\n        const finalAddresses = [];\n        for (const record of srvRecords) {\n            try {\n                (0, utils_1.checkParentDomainMatch)(record.name, this.srvHost);\n                finalAddresses.push(record);\n            }\n            catch (error) {\n                (0, utils_1.squashError)(error);\n            }\n        }\n        if (!finalAddresses.length) {\n            this.failure();\n            return;\n        }\n        this.success(finalAddresses);\n    }\n}\nexports.SrvPoller = SrvPoller;\n/** @event */\nSrvPoller.SRV_RECORD_DISCOVERY = 'srvRecordDiscovery';\n//# sourceMappingURL=srv_polling.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9zZGFtL3Nydl9wb2xsaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQixHQUFHLHVCQUF1QjtBQUMzQyxZQUFZLG1CQUFPLENBQUMsZ0JBQUs7QUFDekIsaUJBQWlCLG1CQUFPLENBQUMsc0JBQVE7QUFDakMsZ0JBQWdCLG1CQUFPLENBQUMsOEZBQVU7QUFDbEMsc0JBQXNCLG1CQUFPLENBQUMsMEdBQWdCO0FBQzlDLGdCQUFnQixtQkFBTyxDQUFDLDhGQUFVO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG9CQUFvQixRQUFRLGFBQWE7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9saW5rdXMvR2l0aHViL21vbm90d28vcGF5bG9hZC1wbHVnaW4tbWV0YS9ub2RlX21vZHVsZXMvLnBucG0vbW9uZ29kYkA2LjEwLjAvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL3NkYW0vc3J2X3BvbGxpbmcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNydlBvbGxlciA9IGV4cG9ydHMuU3J2UG9sbGluZ0V2ZW50ID0gdm9pZCAwO1xuY29uc3QgZG5zID0gcmVxdWlyZShcImRuc1wiKTtcbmNvbnN0IHRpbWVyc18xID0gcmVxdWlyZShcInRpbWVyc1wiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCBtb25nb190eXBlc18xID0gcmVxdWlyZShcIi4uL21vbmdvX3R5cGVzXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbi8qKlxuICogQGludGVybmFsXG4gKiBAY2F0ZWdvcnkgRXZlbnRcbiAqL1xuY2xhc3MgU3J2UG9sbGluZ0V2ZW50IHtcbiAgICBjb25zdHJ1Y3RvcihzcnZSZWNvcmRzKSB7XG4gICAgICAgIHRoaXMuc3J2UmVjb3JkcyA9IHNydlJlY29yZHM7XG4gICAgfVxuICAgIGhvc3RuYW1lcygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTZXQodGhpcy5zcnZSZWNvcmRzLm1hcChyID0+IHV0aWxzXzEuSG9zdEFkZHJlc3MuZnJvbVNydlJlY29yZChyKS50b1N0cmluZygpKSk7XG4gICAgfVxufVxuZXhwb3J0cy5TcnZQb2xsaW5nRXZlbnQgPSBTcnZQb2xsaW5nRXZlbnQ7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBTcnZQb2xsZXIgZXh0ZW5kcyBtb25nb190eXBlc18xLlR5cGVkRXZlbnRFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5zcnZIb3N0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1J1bnRpbWVFcnJvcignT3B0aW9ucyBmb3IgU3J2UG9sbGVyIG11c3QgZXhpc3QgYW5kIGluY2x1ZGUgc3J2SG9zdCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3J2SG9zdCA9IG9wdGlvbnMuc3J2SG9zdDtcbiAgICAgICAgdGhpcy5zcnZNYXhIb3N0cyA9IG9wdGlvbnMuc3J2TWF4SG9zdHMgPz8gMDtcbiAgICAgICAgdGhpcy5zcnZTZXJ2aWNlTmFtZSA9IG9wdGlvbnMuc3J2U2VydmljZU5hbWUgPz8gJ21vbmdvZGInO1xuICAgICAgICB0aGlzLnJlc2NhblNydkludGVydmFsTVMgPSA2MDAwMDtcbiAgICAgICAgdGhpcy5oZWFydGJlYXRGcmVxdWVuY3lNUyA9IG9wdGlvbnMuaGVhcnRiZWF0RnJlcXVlbmN5TVMgPz8gMTAwMDA7XG4gICAgICAgIHRoaXMuaGFNb2RlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZ2VuZXJhdGlvbiA9IDA7XG4gICAgICAgIHRoaXMuX3RpbWVvdXQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGdldCBzcnZBZGRyZXNzKCkge1xuICAgICAgICByZXR1cm4gYF8ke3RoaXMuc3J2U2VydmljZU5hbWV9Ll90Y3AuJHt0aGlzLnNydkhvc3R9YDtcbiAgICB9XG4gICAgZ2V0IGludGVydmFsTVMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhTW9kZSA/IHRoaXMuaGVhcnRiZWF0RnJlcXVlbmN5TVMgOiB0aGlzLnJlc2NhblNydkludGVydmFsTVM7XG4gICAgfVxuICAgIHN0YXJ0KCkge1xuICAgICAgICBpZiAoIXRoaXMuX3RpbWVvdXQpIHtcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdG9wKCkge1xuICAgICAgICBpZiAodGhpcy5fdGltZW91dCkge1xuICAgICAgICAgICAgKDAsIHRpbWVyc18xLmNsZWFyVGltZW91dCkodGhpcy5fdGltZW91dCk7XG4gICAgICAgICAgICB0aGlzLmdlbmVyYXRpb24gKz0gMTtcbiAgICAgICAgICAgIHRoaXMuX3RpbWVvdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gVE9ETyhOT0RFLTQ5OTQpOiBpbXBsZW1lbnQgbmV3IGxvZ2dpbmcgbG9naWMgZm9yIFNydlBvbGxlciBmYWlsdXJlc1xuICAgIHNjaGVkdWxlKCkge1xuICAgICAgICBpZiAodGhpcy5fdGltZW91dCkge1xuICAgICAgICAgICAgKDAsIHRpbWVyc18xLmNsZWFyVGltZW91dCkodGhpcy5fdGltZW91dCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdGltZW91dCA9ICgwLCB0aW1lcnNfMS5zZXRUaW1lb3V0KSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9wb2xsKCkudGhlbih1bmRlZmluZWQsIHV0aWxzXzEuc3F1YXNoRXJyb3IpO1xuICAgICAgICB9LCB0aGlzLmludGVydmFsTVMpO1xuICAgIH1cbiAgICBzdWNjZXNzKHNydlJlY29yZHMpIHtcbiAgICAgICAgdGhpcy5oYU1vZGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZSgpO1xuICAgICAgICB0aGlzLmVtaXQoU3J2UG9sbGVyLlNSVl9SRUNPUkRfRElTQ09WRVJZLCBuZXcgU3J2UG9sbGluZ0V2ZW50KHNydlJlY29yZHMpKTtcbiAgICB9XG4gICAgZmFpbHVyZSgpIHtcbiAgICAgICAgdGhpcy5oYU1vZGUgPSB0cnVlO1xuICAgICAgICB0aGlzLnNjaGVkdWxlKCk7XG4gICAgfVxuICAgIGFzeW5jIF9wb2xsKCkge1xuICAgICAgICBjb25zdCBnZW5lcmF0aW9uID0gdGhpcy5nZW5lcmF0aW9uO1xuICAgICAgICBsZXQgc3J2UmVjb3JkcztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHNydlJlY29yZHMgPSBhd2FpdCBkbnMucHJvbWlzZXMucmVzb2x2ZVNydih0aGlzLnNydkFkZHJlc3MpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgIHRoaXMuZmFpbHVyZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChnZW5lcmF0aW9uICE9PSB0aGlzLmdlbmVyYXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmaW5hbEFkZHJlc3NlcyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHJlY29yZCBvZiBzcnZSZWNvcmRzKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICgwLCB1dGlsc18xLmNoZWNrUGFyZW50RG9tYWluTWF0Y2gpKHJlY29yZC5uYW1lLCB0aGlzLnNydkhvc3QpO1xuICAgICAgICAgICAgICAgIGZpbmFsQWRkcmVzc2VzLnB1c2gocmVjb3JkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICgwLCB1dGlsc18xLnNxdWFzaEVycm9yKShlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFmaW5hbEFkZHJlc3Nlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuZmFpbHVyZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3VjY2VzcyhmaW5hbEFkZHJlc3Nlcyk7XG4gICAgfVxufVxuZXhwb3J0cy5TcnZQb2xsZXIgPSBTcnZQb2xsZXI7XG4vKiogQGV2ZW50ICovXG5TcnZQb2xsZXIuU1JWX1JFQ09SRF9ESVNDT1ZFUlkgPSAnc3J2UmVjb3JkRGlzY292ZXJ5Jztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNydl9wb2xsaW5nLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/srv_polling.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/topology.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/topology.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ServerCapabilities = exports.Topology = void 0;\nconst connection_string_1 = __webpack_require__(/*! ../connection_string */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/connection_string.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst mongo_logger_1 = __webpack_require__(/*! ../mongo_logger */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_logger.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_types.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_preference.js\");\nconst timeout_1 = __webpack_require__(/*! ../timeout */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/timeout.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/common.js\");\nconst events_1 = __webpack_require__(/*! ./events */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/events.js\");\nconst server_1 = __webpack_require__(/*! ./server */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/server.js\");\nconst server_description_1 = __webpack_require__(/*! ./server_description */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/server_description.js\");\nconst server_selection_1 = __webpack_require__(/*! ./server_selection */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/server_selection.js\");\nconst server_selection_events_1 = __webpack_require__(/*! ./server_selection_events */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/server_selection_events.js\");\nconst srv_polling_1 = __webpack_require__(/*! ./srv_polling */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/srv_polling.js\");\nconst topology_description_1 = __webpack_require__(/*! ./topology_description */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/topology_description.js\");\n// Global state\nlet globalTopologyCounter = 0;\nconst stateTransition = (0, utils_1.makeStateMachine)({\n    [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n    [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n    [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n    [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n * @internal\n */\nclass Topology extends mongo_types_1.TypedEventEmitter {\n    /**\n     * @param seedlist - a list of HostAddress instances to connect to\n     */\n    constructor(client, seeds, options) {\n        super();\n        this.client = client;\n        // Options should only be undefined in tests, MongoClient will always have defined options\n        options = options ?? {\n            hosts: [utils_1.HostAddress.fromString('localhost:27017')],\n            ...Object.fromEntries(connection_string_1.DEFAULT_OPTIONS.entries()),\n            ...Object.fromEntries(connection_string_1.FEATURE_FLAGS.entries())\n        };\n        if (typeof seeds === 'string') {\n            seeds = [utils_1.HostAddress.fromString(seeds)];\n        }\n        else if (!Array.isArray(seeds)) {\n            seeds = [seeds];\n        }\n        const seedlist = [];\n        for (const seed of seeds) {\n            if (typeof seed === 'string') {\n                seedlist.push(utils_1.HostAddress.fromString(seed));\n            }\n            else if (seed instanceof utils_1.HostAddress) {\n                seedlist.push(seed);\n            }\n            else {\n                // FIXME(NODE-3483): May need to be a MongoParseError\n                throw new error_1.MongoRuntimeError(`Topology cannot be constructed from ${JSON.stringify(seed)}`);\n            }\n        }\n        const topologyType = topologyTypeFromOptions(options);\n        const topologyId = globalTopologyCounter++;\n        const selectedHosts = options.srvMaxHosts == null ||\n            options.srvMaxHosts === 0 ||\n            options.srvMaxHosts >= seedlist.length\n            ? seedlist\n            : (0, utils_1.shuffle)(seedlist, options.srvMaxHosts);\n        const serverDescriptions = new Map();\n        for (const hostAddress of selectedHosts) {\n            serverDescriptions.set(hostAddress.toString(), new server_description_1.ServerDescription(hostAddress));\n        }\n        this[kWaitQueue] = new utils_1.List();\n        this.s = {\n            // the id of this topology\n            id: topologyId,\n            // passed in options\n            options,\n            // initial seedlist of servers to connect to\n            seedlist,\n            // initial state\n            state: common_1.STATE_CLOSED,\n            // the topology description\n            description: new topology_description_1.TopologyDescription(topologyType, serverDescriptions, options.replicaSet, undefined, undefined, undefined, options),\n            serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n            heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n            // a map of server instances to normalized addresses\n            servers: new Map(),\n            credentials: options?.credentials,\n            clusterTime: undefined,\n            // timer management\n            connectionTimers: new Set(),\n            detectShardedTopology: ev => this.detectShardedTopology(ev),\n            detectSrvRecords: ev => this.detectSrvRecords(ev)\n        };\n        this.mongoLogger = client.mongoLogger;\n        this.component = 'topology';\n        if (options.srvHost && !options.loadBalanced) {\n            this.s.srvPoller =\n                options.srvPoller ??\n                    new srv_polling_1.SrvPoller({\n                        heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n                        srvHost: options.srvHost,\n                        srvMaxHosts: options.srvMaxHosts,\n                        srvServiceName: options.srvServiceName\n                    });\n            this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n        }\n        this.connectionLock = undefined;\n    }\n    detectShardedTopology(event) {\n        const previousType = event.previousDescription.type;\n        const newType = event.newDescription.type;\n        const transitionToSharded = previousType !== common_1.TopologyType.Sharded && newType === common_1.TopologyType.Sharded;\n        const srvListeners = this.s.srvPoller?.listeners(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY);\n        const listeningToSrvPolling = !!srvListeners?.includes(this.s.detectSrvRecords);\n        if (transitionToSharded && !listeningToSrvPolling) {\n            this.s.srvPoller?.on(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n            this.s.srvPoller?.start();\n        }\n    }\n    detectSrvRecords(ev) {\n        const previousTopologyDescription = this.s.description;\n        this.s.description = this.s.description.updateFromSrvPollingEvent(ev, this.s.options.srvMaxHosts);\n        if (this.s.description === previousTopologyDescription) {\n            // Nothing changed, so return\n            return;\n        }\n        updateServers(this);\n        this.emitAndLog(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n    }\n    /**\n     * @returns A `TopologyDescription` for this topology\n     */\n    get description() {\n        return this.s.description;\n    }\n    get loadBalanced() {\n        return this.s.options.loadBalanced;\n    }\n    get serverApi() {\n        return this.s.options.serverApi;\n    }\n    get capabilities() {\n        return new ServerCapabilities(this.lastHello());\n    }\n    /** Initiate server connect */\n    async connect(options) {\n        this.connectionLock ??= this._connect(options);\n        try {\n            await this.connectionLock;\n            return this;\n        }\n        finally {\n            this.connectionLock = undefined;\n        }\n        return this;\n    }\n    async _connect(options) {\n        options = options ?? {};\n        if (this.s.state === common_1.STATE_CONNECTED) {\n            return this;\n        }\n        stateTransition(this, common_1.STATE_CONNECTING);\n        // emit SDAM monitoring events\n        this.emitAndLog(Topology.TOPOLOGY_OPENING, new events_1.TopologyOpeningEvent(this.s.id));\n        // emit an event for the topology change\n        this.emitAndLog(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, new topology_description_1.TopologyDescription(common_1.TopologyType.Unknown), // initial is always Unknown\n        this.s.description));\n        // connect all known servers, then attempt server selection to connect\n        const serverDescriptions = Array.from(this.s.description.servers.values());\n        this.s.servers = new Map(serverDescriptions.map(serverDescription => [\n            serverDescription.address,\n            createAndConnectServer(this, serverDescription)\n        ]));\n        // In load balancer mode we need to fake a server description getting\n        // emitted from the monitor, since the monitor doesn't exist.\n        if (this.s.options.loadBalanced) {\n            for (const description of serverDescriptions) {\n                const newDescription = new server_description_1.ServerDescription(description.hostAddress, undefined, {\n                    loadBalanced: this.s.options.loadBalanced\n                });\n                this.serverUpdateHandler(newDescription);\n            }\n        }\n        const readPreference = options.readPreference ?? read_preference_1.ReadPreference.primary;\n        const selectServerOptions = { operationName: 'ping', ...options };\n        try {\n            const server = await this.selectServer((0, server_selection_1.readPreferenceServerSelector)(readPreference), selectServerOptions);\n            const skipPingOnConnect = this.s.options[Symbol.for('@@mdb.skipPingOnConnect')] === true;\n            if (!skipPingOnConnect && server && this.s.credentials) {\n                await server.command((0, utils_1.ns)('admin.$cmd'), { ping: 1 }, {});\n                stateTransition(this, common_1.STATE_CONNECTED);\n                this.emit(Topology.OPEN, this);\n                this.emit(Topology.CONNECT, this);\n                return this;\n            }\n            stateTransition(this, common_1.STATE_CONNECTED);\n            this.emit(Topology.OPEN, this);\n            this.emit(Topology.CONNECT, this);\n            return this;\n        }\n        catch (error) {\n            this.close();\n            throw error;\n        }\n    }\n    /** Close this topology */\n    close() {\n        if (this.s.state === common_1.STATE_CLOSED || this.s.state === common_1.STATE_CLOSING) {\n            return;\n        }\n        for (const server of this.s.servers.values()) {\n            destroyServer(server, this);\n        }\n        this.s.servers.clear();\n        stateTransition(this, common_1.STATE_CLOSING);\n        drainWaitQueue(this[kWaitQueue], new error_1.MongoTopologyClosedError());\n        (0, common_1.drainTimerQueue)(this.s.connectionTimers);\n        if (this.s.srvPoller) {\n            this.s.srvPoller.stop();\n            this.s.srvPoller.removeListener(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n        }\n        this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n        stateTransition(this, common_1.STATE_CLOSED);\n        // emit an event for close\n        this.emitAndLog(Topology.TOPOLOGY_CLOSED, new events_1.TopologyClosedEvent(this.s.id));\n    }\n    /**\n     * Selects a server according to the selection predicate provided\n     *\n     * @param selector - An optional selector to select servers by, defaults to a random selection within a latency window\n     * @param options - Optional settings related to server selection\n     * @param callback - The callback used to indicate success or failure\n     * @returns An instance of a `Server` meeting the criteria of the predicate provided\n     */\n    async selectServer(selector, options) {\n        let serverSelector;\n        if (typeof selector !== 'function') {\n            if (typeof selector === 'string') {\n                serverSelector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.fromString(selector));\n            }\n            else {\n                let readPreference;\n                if (selector instanceof read_preference_1.ReadPreference) {\n                    readPreference = selector;\n                }\n                else {\n                    read_preference_1.ReadPreference.translate(options);\n                    readPreference = options.readPreference || read_preference_1.ReadPreference.primary;\n                }\n                serverSelector = (0, server_selection_1.readPreferenceServerSelector)(readPreference);\n            }\n        }\n        else {\n            serverSelector = selector;\n        }\n        options = { serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS, ...options };\n        if (this.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n            this.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionStartedEvent(selector, this.description, options.operationName));\n        }\n        const isSharded = this.description.type === common_1.TopologyType.Sharded;\n        const session = options.session;\n        const transaction = session && session.transaction;\n        if (isSharded && transaction && transaction.server) {\n            if (this.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n                this.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionSucceededEvent(selector, this.description, transaction.server.pool.address, options.operationName));\n            }\n            return transaction.server;\n        }\n        const { promise: serverPromise, resolve, reject } = (0, utils_1.promiseWithResolvers)();\n        const timeout = timeout_1.Timeout.expires(options.serverSelectionTimeoutMS ?? 0);\n        const waitQueueMember = {\n            serverSelector,\n            topologyDescription: this.description,\n            mongoLogger: this.client.mongoLogger,\n            transaction,\n            resolve,\n            reject,\n            timeout,\n            startTime: (0, utils_1.now)(),\n            operationName: options.operationName,\n            waitingLogged: false,\n            previousServer: options.previousServer\n        };\n        this[kWaitQueue].push(waitQueueMember);\n        processWaitQueue(this);\n        try {\n            return await Promise.race([serverPromise, waitQueueMember.timeout]);\n        }\n        catch (error) {\n            if (timeout_1.TimeoutError.is(error)) {\n                // Timeout\n                waitQueueMember[kCancelled] = true;\n                timeout.clear();\n                const timeoutError = new error_1.MongoServerSelectionError(`Server selection timed out after ${options.serverSelectionTimeoutMS} ms`, this.description);\n                if (this.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n                    this.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(selector, this.description, timeoutError, options.operationName));\n                }\n                throw timeoutError;\n            }\n            // Other server selection error\n            throw error;\n        }\n    }\n    /**\n     * Update the internal TopologyDescription with a ServerDescription\n     *\n     * @param serverDescription - The server to update in the internal list of server descriptions\n     */\n    serverUpdateHandler(serverDescription) {\n        if (!this.s.description.hasServer(serverDescription.address)) {\n            return;\n        }\n        // ignore this server update if its from an outdated topologyVersion\n        if (isStaleServerDescription(this.s.description, serverDescription)) {\n            return;\n        }\n        // these will be used for monitoring events later\n        const previousTopologyDescription = this.s.description;\n        const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n        if (!previousServerDescription) {\n            return;\n        }\n        // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n        // a server it MUST compare it to the current highest seen cluster time\n        // for the deployment. If the new cluster time is higher than the\n        // highest seen cluster time it MUST become the new highest seen cluster\n        // time. Two cluster times are compared using only the BsonTimestamp\n        // value of the clusterTime embedded field.\"\n        const clusterTime = serverDescription.$clusterTime;\n        if (clusterTime) {\n            (0, common_1._advanceClusterTime)(this, clusterTime);\n        }\n        // If we already know all the information contained in this updated description, then\n        // we don't need to emit SDAM events, but still need to update the description, in order\n        // to keep client-tracked attributes like last update time and round trip time up to date\n        const equalDescriptions = previousServerDescription && previousServerDescription.equals(serverDescription);\n        // first update the TopologyDescription\n        this.s.description = this.s.description.update(serverDescription);\n        if (this.s.description.compatibilityError) {\n            this.emit(Topology.ERROR, new error_1.MongoCompatibilityError(this.s.description.compatibilityError));\n            return;\n        }\n        // emit monitoring events for this change\n        if (!equalDescriptions) {\n            const newDescription = this.s.description.servers.get(serverDescription.address);\n            if (newDescription) {\n                this.emit(Topology.SERVER_DESCRIPTION_CHANGED, new events_1.ServerDescriptionChangedEvent(this.s.id, serverDescription.address, previousServerDescription, newDescription));\n            }\n        }\n        // update server list from updated descriptions\n        updateServers(this, serverDescription);\n        // attempt to resolve any outstanding server selection attempts\n        if (this[kWaitQueue].length > 0) {\n            processWaitQueue(this);\n        }\n        if (!equalDescriptions) {\n            this.emitAndLog(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n        }\n    }\n    auth(credentials, callback) {\n        if (typeof credentials === 'function')\n            (callback = credentials), (credentials = undefined);\n        if (typeof callback === 'function')\n            callback(undefined, true);\n    }\n    get clientMetadata() {\n        return this.s.options.metadata;\n    }\n    isConnected() {\n        return this.s.state === common_1.STATE_CONNECTED;\n    }\n    isDestroyed() {\n        return this.s.state === common_1.STATE_CLOSED;\n    }\n    // NOTE: There are many places in code where we explicitly check the last hello\n    //       to do feature support detection. This should be done any other way, but for\n    //       now we will just return the first hello seen, which should suffice.\n    lastHello() {\n        const serverDescriptions = Array.from(this.description.servers.values());\n        if (serverDescriptions.length === 0)\n            return {};\n        const sd = serverDescriptions.filter((sd) => sd.type !== common_1.ServerType.Unknown)[0];\n        const result = sd || { maxWireVersion: this.description.commonWireVersion };\n        return result;\n    }\n    get commonWireVersion() {\n        return this.description.commonWireVersion;\n    }\n    get logicalSessionTimeoutMinutes() {\n        return this.description.logicalSessionTimeoutMinutes;\n    }\n    get clusterTime() {\n        return this.s.clusterTime;\n    }\n    set clusterTime(clusterTime) {\n        this.s.clusterTime = clusterTime;\n    }\n}\nexports.Topology = Topology;\n/** @event */\nTopology.SERVER_OPENING = constants_1.SERVER_OPENING;\n/** @event */\nTopology.SERVER_CLOSED = constants_1.SERVER_CLOSED;\n/** @event */\nTopology.SERVER_DESCRIPTION_CHANGED = constants_1.SERVER_DESCRIPTION_CHANGED;\n/** @event */\nTopology.TOPOLOGY_OPENING = constants_1.TOPOLOGY_OPENING;\n/** @event */\nTopology.TOPOLOGY_CLOSED = constants_1.TOPOLOGY_CLOSED;\n/** @event */\nTopology.TOPOLOGY_DESCRIPTION_CHANGED = constants_1.TOPOLOGY_DESCRIPTION_CHANGED;\n/** @event */\nTopology.ERROR = constants_1.ERROR;\n/** @event */\nTopology.OPEN = constants_1.OPEN;\n/** @event */\nTopology.CONNECT = constants_1.CONNECT;\n/** @event */\nTopology.CLOSE = constants_1.CLOSE;\n/** @event */\nTopology.TIMEOUT = constants_1.TIMEOUT;\n/** Destroys a server, and removes all event listeners from the instance */\nfunction destroyServer(server, topology) {\n    for (const event of constants_1.LOCAL_SERVER_EVENTS) {\n        server.removeAllListeners(event);\n    }\n    server.destroy();\n    topology.emitAndLog(Topology.SERVER_CLOSED, new events_1.ServerClosedEvent(topology.s.id, server.description.address));\n    for (const event of constants_1.SERVER_RELAY_EVENTS) {\n        server.removeAllListeners(event);\n    }\n}\n/** Predicts the TopologyType from options */\nfunction topologyTypeFromOptions(options) {\n    if (options?.directConnection) {\n        return common_1.TopologyType.Single;\n    }\n    if (options?.replicaSet) {\n        return common_1.TopologyType.ReplicaSetNoPrimary;\n    }\n    if (options?.loadBalanced) {\n        return common_1.TopologyType.LoadBalanced;\n    }\n    return common_1.TopologyType.Unknown;\n}\n/**\n * Creates new server instances and attempts to connect them\n *\n * @param topology - The topology that this server belongs to\n * @param serverDescription - The description for the server to initialize and connect to\n */\nfunction createAndConnectServer(topology, serverDescription) {\n    topology.emitAndLog(Topology.SERVER_OPENING, new events_1.ServerOpeningEvent(topology.s.id, serverDescription.address));\n    const server = new server_1.Server(topology, serverDescription, topology.s.options);\n    for (const event of constants_1.SERVER_RELAY_EVENTS) {\n        server.on(event, (e) => topology.emit(event, e));\n    }\n    server.on(server_1.Server.DESCRIPTION_RECEIVED, description => topology.serverUpdateHandler(description));\n    server.connect();\n    return server;\n}\n/**\n * @param topology - Topology to update.\n * @param incomingServerDescription - New server description.\n */\nfunction updateServers(topology, incomingServerDescription) {\n    // update the internal server's description\n    if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n        const server = topology.s.servers.get(incomingServerDescription.address);\n        if (server) {\n            server.s.description = incomingServerDescription;\n            if (incomingServerDescription.error instanceof error_1.MongoError &&\n                incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.ResetPool)) {\n                const interruptInUseConnections = incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);\n                server.pool.clear({ interruptInUseConnections });\n            }\n            else if (incomingServerDescription.error == null) {\n                const newTopologyType = topology.s.description.type;\n                const shouldMarkPoolReady = incomingServerDescription.isDataBearing ||\n                    (incomingServerDescription.type !== common_1.ServerType.Unknown &&\n                        newTopologyType === common_1.TopologyType.Single);\n                if (shouldMarkPoolReady) {\n                    server.pool.ready();\n                }\n            }\n        }\n    }\n    // add new servers for all descriptions we currently don't know about locally\n    for (const serverDescription of topology.description.servers.values()) {\n        if (!topology.s.servers.has(serverDescription.address)) {\n            const server = createAndConnectServer(topology, serverDescription);\n            topology.s.servers.set(serverDescription.address, server);\n        }\n    }\n    // for all servers no longer known, remove their descriptions and destroy their instances\n    for (const entry of topology.s.servers) {\n        const serverAddress = entry[0];\n        if (topology.description.hasServer(serverAddress)) {\n            continue;\n        }\n        if (!topology.s.servers.has(serverAddress)) {\n            continue;\n        }\n        const server = topology.s.servers.get(serverAddress);\n        topology.s.servers.delete(serverAddress);\n        // prepare server for garbage collection\n        if (server) {\n            destroyServer(server, topology);\n        }\n    }\n}\nfunction drainWaitQueue(queue, drainError) {\n    while (queue.length) {\n        const waitQueueMember = queue.shift();\n        if (!waitQueueMember) {\n            continue;\n        }\n        waitQueueMember.timeout.clear();\n        if (!waitQueueMember[kCancelled]) {\n            if (waitQueueMember.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n                waitQueueMember.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(waitQueueMember.serverSelector, waitQueueMember.topologyDescription, drainError, waitQueueMember.operationName));\n            }\n            waitQueueMember.reject(drainError);\n        }\n    }\n}\nfunction processWaitQueue(topology) {\n    if (topology.s.state === common_1.STATE_CLOSED) {\n        drainWaitQueue(topology[kWaitQueue], new error_1.MongoTopologyClosedError());\n        return;\n    }\n    const isSharded = topology.description.type === common_1.TopologyType.Sharded;\n    const serverDescriptions = Array.from(topology.description.servers.values());\n    const membersToProcess = topology[kWaitQueue].length;\n    for (let i = 0; i < membersToProcess; ++i) {\n        const waitQueueMember = topology[kWaitQueue].shift();\n        if (!waitQueueMember) {\n            continue;\n        }\n        if (waitQueueMember[kCancelled]) {\n            continue;\n        }\n        let selectedDescriptions;\n        try {\n            const serverSelector = waitQueueMember.serverSelector;\n            const previousServer = waitQueueMember.previousServer;\n            selectedDescriptions = serverSelector\n                ? serverSelector(topology.description, serverDescriptions, previousServer ? [previousServer] : [])\n                : serverDescriptions;\n        }\n        catch (selectorError) {\n            waitQueueMember.timeout.clear();\n            if (topology.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n                topology.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(waitQueueMember.serverSelector, topology.description, selectorError, waitQueueMember.operationName));\n            }\n            waitQueueMember.reject(selectorError);\n            continue;\n        }\n        let selectedServer;\n        if (selectedDescriptions.length === 0) {\n            if (!waitQueueMember.waitingLogged) {\n                if (topology.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.INFORMATIONAL)) {\n                    topology.client.mongoLogger?.info(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.WaitingForSuitableServerEvent(waitQueueMember.serverSelector, topology.description, topology.s.serverSelectionTimeoutMS !== 0\n                        ? topology.s.serverSelectionTimeoutMS - ((0, utils_1.now)() - waitQueueMember.startTime)\n                        : -1, waitQueueMember.operationName));\n                }\n                waitQueueMember.waitingLogged = true;\n            }\n            topology[kWaitQueue].push(waitQueueMember);\n            continue;\n        }\n        else if (selectedDescriptions.length === 1) {\n            selectedServer = topology.s.servers.get(selectedDescriptions[0].address);\n        }\n        else {\n            const descriptions = (0, utils_1.shuffle)(selectedDescriptions, 2);\n            const server1 = topology.s.servers.get(descriptions[0].address);\n            const server2 = topology.s.servers.get(descriptions[1].address);\n            selectedServer =\n                server1 && server2 && server1.s.operationCount < server2.s.operationCount\n                    ? server1\n                    : server2;\n        }\n        if (!selectedServer) {\n            const serverSelectionError = new error_1.MongoServerSelectionError('server selection returned a server description but the server was not found in the topology', topology.description);\n            if (topology.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n                topology.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(waitQueueMember.serverSelector, topology.description, serverSelectionError, waitQueueMember.operationName));\n            }\n            waitQueueMember.reject(serverSelectionError);\n            return;\n        }\n        const transaction = waitQueueMember.transaction;\n        if (isSharded && transaction && transaction.isActive && selectedServer) {\n            transaction.pinServer(selectedServer);\n        }\n        waitQueueMember.timeout.clear();\n        if (topology.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n            topology.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionSucceededEvent(waitQueueMember.serverSelector, waitQueueMember.topologyDescription, selectedServer.pool.address, waitQueueMember.operationName));\n        }\n        waitQueueMember.resolve(selectedServer);\n    }\n    if (topology[kWaitQueue].length > 0) {\n        // ensure all server monitors attempt monitoring soon\n        for (const [, server] of topology.s.servers) {\n            process.nextTick(function scheduleServerCheck() {\n                return server.requestCheck();\n            });\n        }\n    }\n}\nfunction isStaleServerDescription(topologyDescription, incomingServerDescription) {\n    const currentServerDescription = topologyDescription.servers.get(incomingServerDescription.address);\n    const currentTopologyVersion = currentServerDescription?.topologyVersion;\n    return ((0, server_description_1.compareTopologyVersion)(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0);\n}\n/** @public */\nclass ServerCapabilities {\n    constructor(hello) {\n        this.minWireVersion = hello.minWireVersion || 0;\n        this.maxWireVersion = hello.maxWireVersion || 0;\n    }\n    get hasAggregationCursor() {\n        return this.maxWireVersion >= 1;\n    }\n    get hasWriteCommands() {\n        return this.maxWireVersion >= 2;\n    }\n    get hasTextSearch() {\n        return this.minWireVersion >= 0;\n    }\n    get hasAuthCommands() {\n        return this.maxWireVersion >= 1;\n    }\n    get hasListCollectionsCommand() {\n        return this.maxWireVersion >= 3;\n    }\n    get hasListIndexesCommand() {\n        return this.maxWireVersion >= 3;\n    }\n    get supportsSnapshotReads() {\n        return this.maxWireVersion >= 13;\n    }\n    get commandsTakeWriteConcern() {\n        return this.maxWireVersion >= 5;\n    }\n    get commandsTakeCollation() {\n        return this.maxWireVersion >= 5;\n    }\n}\nexports.ServerCapabilities = ServerCapabilities;\n//# sourceMappingURL=topology.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/topology.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/topology_description.js":
/*!**************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/topology_description.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TopologyDescription = void 0;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\");\nconst WIRE_CONSTANTS = __webpack_require__(/*! ../cmap/wire_protocol/constants */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/common.js\");\nconst server_description_1 = __webpack_require__(/*! ./server_description */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/server_description.js\");\n// constants related to compatibility checks\nconst MIN_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_SERVER_VERSION;\nconst MAX_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_SERVER_VERSION;\nconst MIN_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_WIRE_VERSION;\nconst MAX_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_WIRE_VERSION;\nconst MONGOS_OR_UNKNOWN = new Set([common_1.ServerType.Mongos, common_1.ServerType.Unknown]);\nconst MONGOS_OR_STANDALONE = new Set([common_1.ServerType.Mongos, common_1.ServerType.Standalone]);\nconst NON_PRIMARY_RS_MEMBERS = new Set([\n    common_1.ServerType.RSSecondary,\n    common_1.ServerType.RSArbiter,\n    common_1.ServerType.RSOther\n]);\n/**\n * Representation of a deployment of servers\n * @public\n */\nclass TopologyDescription {\n    /**\n     * Create a TopologyDescription\n     */\n    constructor(topologyType, serverDescriptions = null, setName = null, maxSetVersion = null, maxElectionId = null, commonWireVersion = null, options = null) {\n        options = options ?? {};\n        this.type = topologyType ?? common_1.TopologyType.Unknown;\n        this.servers = serverDescriptions ?? new Map();\n        this.stale = false;\n        this.compatible = true;\n        this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 0;\n        this.localThresholdMS = options.localThresholdMS ?? 15;\n        this.setName = setName ?? null;\n        this.maxElectionId = maxElectionId ?? null;\n        this.maxSetVersion = maxSetVersion ?? null;\n        this.commonWireVersion = commonWireVersion ?? 0;\n        // determine server compatibility\n        for (const serverDescription of this.servers.values()) {\n            // Load balancer mode is always compatible.\n            if (serverDescription.type === common_1.ServerType.Unknown ||\n                serverDescription.type === common_1.ServerType.LoadBalancer) {\n                continue;\n            }\n            if (serverDescription.minWireVersion > MAX_SUPPORTED_WIRE_VERSION) {\n                this.compatible = false;\n                this.compatibilityError = `Server at ${serverDescription.address} requires wire version ${serverDescription.minWireVersion}, but this version of the driver only supports up to ${MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${MAX_SUPPORTED_SERVER_VERSION})`;\n            }\n            if (serverDescription.maxWireVersion < MIN_SUPPORTED_WIRE_VERSION) {\n                this.compatible = false;\n                this.compatibilityError = `Server at ${serverDescription.address} reports wire version ${serverDescription.maxWireVersion}, but this version of the driver requires at least ${MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${MIN_SUPPORTED_SERVER_VERSION}).`;\n                break;\n            }\n        }\n        // Whenever a client updates the TopologyDescription from a hello response, it MUST set\n        // TopologyDescription.logicalSessionTimeoutMinutes to the smallest logicalSessionTimeoutMinutes\n        // value among ServerDescriptions of all data-bearing server types. If any have a null\n        // logicalSessionTimeoutMinutes, then TopologyDescription.logicalSessionTimeoutMinutes MUST be\n        // set to null.\n        this.logicalSessionTimeoutMinutes = null;\n        for (const [, server] of this.servers) {\n            if (server.isReadable) {\n                if (server.logicalSessionTimeoutMinutes == null) {\n                    // If any of the servers have a null logicalSessionsTimeout, then the whole topology does\n                    this.logicalSessionTimeoutMinutes = null;\n                    break;\n                }\n                if (this.logicalSessionTimeoutMinutes == null) {\n                    // First server with a non null logicalSessionsTimeout\n                    this.logicalSessionTimeoutMinutes = server.logicalSessionTimeoutMinutes;\n                    continue;\n                }\n                // Always select the smaller of the:\n                // current server logicalSessionsTimeout and the topologies logicalSessionsTimeout\n                this.logicalSessionTimeoutMinutes = Math.min(this.logicalSessionTimeoutMinutes, server.logicalSessionTimeoutMinutes);\n            }\n        }\n    }\n    /**\n     * Returns a new TopologyDescription based on the SrvPollingEvent\n     * @internal\n     */\n    updateFromSrvPollingEvent(ev, srvMaxHosts = 0) {\n        /** The SRV addresses defines the set of addresses we should be using */\n        const incomingHostnames = ev.hostnames();\n        const currentHostnames = new Set(this.servers.keys());\n        const hostnamesToAdd = new Set(incomingHostnames);\n        const hostnamesToRemove = new Set();\n        for (const hostname of currentHostnames) {\n            // filter hostnamesToAdd (made from incomingHostnames) down to what is *not* present in currentHostnames\n            hostnamesToAdd.delete(hostname);\n            if (!incomingHostnames.has(hostname)) {\n                // If the SRV Records no longer include this hostname\n                // we have to stop using it\n                hostnamesToRemove.add(hostname);\n            }\n        }\n        if (hostnamesToAdd.size === 0 && hostnamesToRemove.size === 0) {\n            // No new hosts to add and none to remove\n            return this;\n        }\n        const serverDescriptions = new Map(this.servers);\n        for (const removedHost of hostnamesToRemove) {\n            serverDescriptions.delete(removedHost);\n        }\n        if (hostnamesToAdd.size > 0) {\n            if (srvMaxHosts === 0) {\n                // Add all!\n                for (const hostToAdd of hostnamesToAdd) {\n                    serverDescriptions.set(hostToAdd, new server_description_1.ServerDescription(hostToAdd));\n                }\n            }\n            else if (serverDescriptions.size < srvMaxHosts) {\n                // Add only the amount needed to get us back to srvMaxHosts\n                const selectedHosts = (0, utils_1.shuffle)(hostnamesToAdd, srvMaxHosts - serverDescriptions.size);\n                for (const selectedHostToAdd of selectedHosts) {\n                    serverDescriptions.set(selectedHostToAdd, new server_description_1.ServerDescription(selectedHostToAdd));\n                }\n            }\n        }\n        return new TopologyDescription(this.type, serverDescriptions, this.setName, this.maxSetVersion, this.maxElectionId, this.commonWireVersion, { heartbeatFrequencyMS: this.heartbeatFrequencyMS, localThresholdMS: this.localThresholdMS });\n    }\n    /**\n     * Returns a copy of this description updated with a given ServerDescription\n     * @internal\n     */\n    update(serverDescription) {\n        const address = serverDescription.address;\n        // potentially mutated values\n        let { type: topologyType, setName, maxSetVersion, maxElectionId, commonWireVersion } = this;\n        const serverType = serverDescription.type;\n        const serverDescriptions = new Map(this.servers);\n        // update common wire version\n        if (serverDescription.maxWireVersion !== 0) {\n            if (commonWireVersion == null) {\n                commonWireVersion = serverDescription.maxWireVersion;\n            }\n            else {\n                commonWireVersion = Math.min(commonWireVersion, serverDescription.maxWireVersion);\n            }\n        }\n        if (typeof serverDescription.setName === 'string' &&\n            typeof setName === 'string' &&\n            serverDescription.setName !== setName) {\n            if (topologyType === common_1.TopologyType.Single) {\n                // \"Single\" Topology with setName mismatch is direct connection usage, mark unknown do not remove\n                serverDescription = new server_description_1.ServerDescription(address);\n            }\n            else {\n                serverDescriptions.delete(address);\n            }\n        }\n        // update the actual server description\n        serverDescriptions.set(address, serverDescription);\n        if (topologyType === common_1.TopologyType.Single) {\n            // once we are defined as single, that never changes\n            return new TopologyDescription(common_1.TopologyType.Single, serverDescriptions, setName, maxSetVersion, maxElectionId, commonWireVersion, { heartbeatFrequencyMS: this.heartbeatFrequencyMS, localThresholdMS: this.localThresholdMS });\n        }\n        if (topologyType === common_1.TopologyType.Unknown) {\n            if (serverType === common_1.ServerType.Standalone && this.servers.size !== 1) {\n                serverDescriptions.delete(address);\n            }\n            else {\n                topologyType = topologyTypeForServerType(serverType);\n            }\n        }\n        if (topologyType === common_1.TopologyType.Sharded) {\n            if (!MONGOS_OR_UNKNOWN.has(serverType)) {\n                serverDescriptions.delete(address);\n            }\n        }\n        if (topologyType === common_1.TopologyType.ReplicaSetNoPrimary) {\n            if (MONGOS_OR_STANDALONE.has(serverType)) {\n                serverDescriptions.delete(address);\n            }\n            if (serverType === common_1.ServerType.RSPrimary) {\n                const result = updateRsFromPrimary(serverDescriptions, serverDescription, setName, maxSetVersion, maxElectionId);\n                topologyType = result[0];\n                setName = result[1];\n                maxSetVersion = result[2];\n                maxElectionId = result[3];\n            }\n            else if (NON_PRIMARY_RS_MEMBERS.has(serverType)) {\n                const result = updateRsNoPrimaryFromMember(serverDescriptions, serverDescription, setName);\n                topologyType = result[0];\n                setName = result[1];\n            }\n        }\n        if (topologyType === common_1.TopologyType.ReplicaSetWithPrimary) {\n            if (MONGOS_OR_STANDALONE.has(serverType)) {\n                serverDescriptions.delete(address);\n                topologyType = checkHasPrimary(serverDescriptions);\n            }\n            else if (serverType === common_1.ServerType.RSPrimary) {\n                const result = updateRsFromPrimary(serverDescriptions, serverDescription, setName, maxSetVersion, maxElectionId);\n                topologyType = result[0];\n                setName = result[1];\n                maxSetVersion = result[2];\n                maxElectionId = result[3];\n            }\n            else if (NON_PRIMARY_RS_MEMBERS.has(serverType)) {\n                topologyType = updateRsWithPrimaryFromMember(serverDescriptions, serverDescription, setName);\n            }\n            else {\n                topologyType = checkHasPrimary(serverDescriptions);\n            }\n        }\n        return new TopologyDescription(topologyType, serverDescriptions, setName, maxSetVersion, maxElectionId, commonWireVersion, { heartbeatFrequencyMS: this.heartbeatFrequencyMS, localThresholdMS: this.localThresholdMS });\n    }\n    get error() {\n        const descriptionsWithError = Array.from(this.servers.values()).filter((sd) => sd.error);\n        if (descriptionsWithError.length > 0) {\n            return descriptionsWithError[0].error;\n        }\n        return null;\n    }\n    /**\n     * Determines if the topology description has any known servers\n     */\n    get hasKnownServers() {\n        return Array.from(this.servers.values()).some((sd) => sd.type !== common_1.ServerType.Unknown);\n    }\n    /**\n     * Determines if this topology description has a data-bearing server available.\n     */\n    get hasDataBearingServers() {\n        return Array.from(this.servers.values()).some((sd) => sd.isDataBearing);\n    }\n    /**\n     * Determines if the topology has a definition for the provided address\n     * @internal\n     */\n    hasServer(address) {\n        return this.servers.has(address);\n    }\n    /**\n     * Returns a JSON-serializable representation of the TopologyDescription.  This is primarily\n     * intended for use with JSON.stringify().\n     *\n     * This method will not throw.\n     */\n    toJSON() {\n        return bson_1.EJSON.serialize(this);\n    }\n}\nexports.TopologyDescription = TopologyDescription;\nfunction topologyTypeForServerType(serverType) {\n    switch (serverType) {\n        case common_1.ServerType.Standalone:\n            return common_1.TopologyType.Single;\n        case common_1.ServerType.Mongos:\n            return common_1.TopologyType.Sharded;\n        case common_1.ServerType.RSPrimary:\n            return common_1.TopologyType.ReplicaSetWithPrimary;\n        case common_1.ServerType.RSOther:\n        case common_1.ServerType.RSSecondary:\n            return common_1.TopologyType.ReplicaSetNoPrimary;\n        default:\n            return common_1.TopologyType.Unknown;\n    }\n}\nfunction updateRsFromPrimary(serverDescriptions, serverDescription, setName = null, maxSetVersion = null, maxElectionId = null) {\n    setName = setName || serverDescription.setName;\n    if (setName !== serverDescription.setName) {\n        serverDescriptions.delete(serverDescription.address);\n        return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n    }\n    if (serverDescription.maxWireVersion >= 17) {\n        const electionIdComparison = (0, utils_1.compareObjectId)(maxElectionId, serverDescription.electionId);\n        const maxElectionIdIsEqual = electionIdComparison === 0;\n        const maxElectionIdIsLess = electionIdComparison === -1;\n        const maxSetVersionIsLessOrEqual = (maxSetVersion ?? -1) <= (serverDescription.setVersion ?? -1);\n        if (maxElectionIdIsLess || (maxElectionIdIsEqual && maxSetVersionIsLessOrEqual)) {\n            // The reported electionId was greater\n            // or the electionId was equal and reported setVersion was greater\n            // Always update both values, they are a tuple\n            maxElectionId = serverDescription.electionId;\n            maxSetVersion = serverDescription.setVersion;\n        }\n        else {\n            // Stale primary\n            // replace serverDescription with a default ServerDescription of type \"Unknown\"\n            serverDescriptions.set(serverDescription.address, new server_description_1.ServerDescription(serverDescription.address));\n            return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n        }\n    }\n    else {\n        const electionId = serverDescription.electionId ? serverDescription.electionId : null;\n        if (serverDescription.setVersion && electionId) {\n            if (maxSetVersion && maxElectionId) {\n                if (maxSetVersion > serverDescription.setVersion ||\n                    (0, utils_1.compareObjectId)(maxElectionId, electionId) > 0) {\n                    // this primary is stale, we must remove it\n                    serverDescriptions.set(serverDescription.address, new server_description_1.ServerDescription(serverDescription.address));\n                    return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n                }\n            }\n            maxElectionId = serverDescription.electionId;\n        }\n        if (serverDescription.setVersion != null &&\n            (maxSetVersion == null || serverDescription.setVersion > maxSetVersion)) {\n            maxSetVersion = serverDescription.setVersion;\n        }\n    }\n    // We've heard from the primary. Is it the same primary as before?\n    for (const [address, server] of serverDescriptions) {\n        if (server.type === common_1.ServerType.RSPrimary && server.address !== serverDescription.address) {\n            // Reset old primary's type to Unknown.\n            serverDescriptions.set(address, new server_description_1.ServerDescription(server.address));\n            // There can only be one primary\n            break;\n        }\n    }\n    // Discover new hosts from this primary's response.\n    serverDescription.allHosts.forEach((address) => {\n        if (!serverDescriptions.has(address)) {\n            serverDescriptions.set(address, new server_description_1.ServerDescription(address));\n        }\n    });\n    // Remove hosts not in the response.\n    const currentAddresses = Array.from(serverDescriptions.keys());\n    const responseAddresses = serverDescription.allHosts;\n    currentAddresses\n        .filter((addr) => responseAddresses.indexOf(addr) === -1)\n        .forEach((address) => {\n        serverDescriptions.delete(address);\n    });\n    return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n}\nfunction updateRsWithPrimaryFromMember(serverDescriptions, serverDescription, setName = null) {\n    if (setName == null) {\n        // TODO(NODE-3483): should be an appropriate runtime error\n        throw new error_1.MongoRuntimeError('Argument \"setName\" is required if connected to a replica set');\n    }\n    if (setName !== serverDescription.setName ||\n        (serverDescription.me && serverDescription.address !== serverDescription.me)) {\n        serverDescriptions.delete(serverDescription.address);\n    }\n    return checkHasPrimary(serverDescriptions);\n}\nfunction updateRsNoPrimaryFromMember(serverDescriptions, serverDescription, setName = null) {\n    const topologyType = common_1.TopologyType.ReplicaSetNoPrimary;\n    setName = setName ?? serverDescription.setName;\n    if (setName !== serverDescription.setName) {\n        serverDescriptions.delete(serverDescription.address);\n        return [topologyType, setName];\n    }\n    serverDescription.allHosts.forEach((address) => {\n        if (!serverDescriptions.has(address)) {\n            serverDescriptions.set(address, new server_description_1.ServerDescription(address));\n        }\n    });\n    if (serverDescription.me && serverDescription.address !== serverDescription.me) {\n        serverDescriptions.delete(serverDescription.address);\n    }\n    return [topologyType, setName];\n}\nfunction checkHasPrimary(serverDescriptions) {\n    for (const serverDescription of serverDescriptions.values()) {\n        if (serverDescription.type === common_1.ServerType.RSPrimary) {\n            return common_1.TopologyType.ReplicaSetWithPrimary;\n        }\n    }\n    return common_1.TopologyType.ReplicaSetNoPrimary;\n}\n//# sourceMappingURL=topology_description.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/topology_description.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sessions.js":
/*!*********************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sessions.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ServerSessionPool = exports.ServerSession = exports.ClientSession = void 0;\nexports.maybeClearPinnedConnection = maybeClearPinnedConnection;\nexports.applySession = applySession;\nexports.updateSessionFromResponse = updateSessionFromResponse;\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\");\nconst metrics_1 = __webpack_require__(/*! ./cmap/metrics */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/metrics.js\");\nconst shared_1 = __webpack_require__(/*! ./cmap/wire_protocol/shared */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/shared.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ./mongo_types */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/mongo_types.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/execute_operation.js\");\nconst run_command_1 = __webpack_require__(/*! ./operations/run_command */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/operations/run_command.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_preference.js\");\nconst resource_management_1 = __webpack_require__(/*! ./resource_management */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/resource_management.js\");\nconst common_1 = __webpack_require__(/*! ./sdam/common */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/common.js\");\nconst transactions_1 = __webpack_require__(/*! ./transactions */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/transactions.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/write_concern.js\");\nconst minWireVersionForShardedTransactions = 8;\n/** @internal */\nconst kServerSession = Symbol('serverSession');\n/** @internal */\nconst kSnapshotTime = Symbol('snapshotTime');\n/** @internal */\nconst kSnapshotEnabled = Symbol('snapshotEnabled');\n/** @internal */\nconst kPinnedConnection = Symbol('pinnedConnection');\n/** @internal Accumulates total number of increments to add to txnNumber when applying session to command */\nconst kTxnNumberIncrement = Symbol('txnNumberIncrement');\n/**\n * A class representing a client session on the server\n *\n * NOTE: not meant to be instantiated directly.\n * @public\n */\nclass ClientSession extends mongo_types_1.TypedEventEmitter {\n    /**\n     * Create a client session.\n     * @internal\n     * @param client - The current client\n     * @param sessionPool - The server session pool (Internal Class)\n     * @param options - Optional settings\n     * @param clientOptions - Optional settings provided when creating a MongoClient\n     */\n    constructor(client, sessionPool, options, clientOptions) {\n        super();\n        /** @internal */\n        this[_a] = false;\n        if (client == null) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError('ClientSession requires a MongoClient');\n        }\n        if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError('ClientSession requires a ServerSessionPool');\n        }\n        options = options ?? {};\n        if (options.snapshot === true) {\n            this[kSnapshotEnabled] = true;\n            if (options.causalConsistency === true) {\n                throw new error_1.MongoInvalidArgumentError('Properties \"causalConsistency\" and \"snapshot\" are mutually exclusive');\n            }\n        }\n        this.client = client;\n        this.sessionPool = sessionPool;\n        this.hasEnded = false;\n        this.clientOptions = clientOptions;\n        this.timeoutMS = options.defaultTimeoutMS ?? client.s.options?.timeoutMS;\n        this.explicit = !!options.explicit;\n        this[kServerSession] = this.explicit ? this.sessionPool.acquire() : null;\n        this[kTxnNumberIncrement] = 0;\n        const defaultCausalConsistencyValue = this.explicit && options.snapshot !== true;\n        this.supports = {\n            // if we can enable causal consistency, do so by default\n            causalConsistency: options.causalConsistency ?? defaultCausalConsistencyValue\n        };\n        this.clusterTime = options.initialClusterTime;\n        this.operationTime = undefined;\n        this.owner = options.owner;\n        this.defaultTransactionOptions = { ...options.defaultTransactionOptions };\n        this.transaction = new transactions_1.Transaction();\n    }\n    /** The server id associated with this session */\n    get id() {\n        return this[kServerSession]?.id;\n    }\n    get serverSession() {\n        let serverSession = this[kServerSession];\n        if (serverSession == null) {\n            if (this.explicit) {\n                throw new error_1.MongoRuntimeError('Unexpected null serverSession for an explicit session');\n            }\n            if (this.hasEnded) {\n                throw new error_1.MongoRuntimeError('Unexpected null serverSession for an ended implicit session');\n            }\n            serverSession = this.sessionPool.acquire();\n            this[kServerSession] = serverSession;\n        }\n        return serverSession;\n    }\n    /** Whether or not this session is configured for snapshot reads */\n    get snapshotEnabled() {\n        return this[kSnapshotEnabled];\n    }\n    get loadBalanced() {\n        return this.client.topology?.description.type === common_1.TopologyType.LoadBalanced;\n    }\n    /** @internal */\n    get pinnedConnection() {\n        return this[kPinnedConnection];\n    }\n    /** @internal */\n    pin(conn) {\n        if (this[kPinnedConnection]) {\n            throw TypeError('Cannot pin multiple connections to the same session');\n        }\n        this[kPinnedConnection] = conn;\n        conn.emit(constants_1.PINNED, this.inTransaction() ? metrics_1.ConnectionPoolMetrics.TXN : metrics_1.ConnectionPoolMetrics.CURSOR);\n    }\n    /** @internal */\n    unpin(options) {\n        if (this.loadBalanced) {\n            return maybeClearPinnedConnection(this, options);\n        }\n        this.transaction.unpinServer();\n    }\n    get isPinned() {\n        return this.loadBalanced ? !!this[kPinnedConnection] : this.transaction.isPinned;\n    }\n    /**\n     * Frees any client-side resources held by the current session.  If a session is in a transaction,\n     * the transaction is aborted.\n     *\n     * Does not end the session on the server.\n     *\n     * @param options - Optional settings. Currently reserved for future use\n     */\n    async endSession(options) {\n        try {\n            if (this.inTransaction()) {\n                await this.abortTransaction();\n            }\n            if (!this.hasEnded) {\n                const serverSession = this[kServerSession];\n                if (serverSession != null) {\n                    // release the server session back to the pool\n                    this.sessionPool.release(serverSession);\n                    // Make sure a new serverSession never makes it onto this ClientSession\n                    Object.defineProperty(this, kServerSession, {\n                        value: ServerSession.clone(serverSession),\n                        writable: false\n                    });\n                }\n                // mark the session as ended, and emit a signal\n                this.hasEnded = true;\n                this.emit('ended', this);\n            }\n        }\n        catch (error) {\n            // spec indicates that we should ignore all errors for `endSessions`\n            (0, utils_1.squashError)(error);\n        }\n        finally {\n            maybeClearPinnedConnection(this, { force: true, ...options });\n        }\n    }\n    /** @internal */\n    async asyncDispose() {\n        await this.endSession({ force: true });\n    }\n    /**\n     * Advances the operationTime for a ClientSession.\n     *\n     * @param operationTime - the `BSON.Timestamp` of the operation type it is desired to advance to\n     */\n    advanceOperationTime(operationTime) {\n        if (this.operationTime == null) {\n            this.operationTime = operationTime;\n            return;\n        }\n        if (operationTime.greaterThan(this.operationTime)) {\n            this.operationTime = operationTime;\n        }\n    }\n    /**\n     * Advances the clusterTime for a ClientSession to the provided clusterTime of another ClientSession\n     *\n     * @param clusterTime - the $clusterTime returned by the server from another session in the form of a document containing the `BSON.Timestamp` clusterTime and signature\n     */\n    advanceClusterTime(clusterTime) {\n        if (!clusterTime || typeof clusterTime !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('input cluster time must be an object');\n        }\n        if (!clusterTime.clusterTime || clusterTime.clusterTime._bsontype !== 'Timestamp') {\n            throw new error_1.MongoInvalidArgumentError('input cluster time \"clusterTime\" property must be a valid BSON Timestamp');\n        }\n        if (!clusterTime.signature ||\n            clusterTime.signature.hash?._bsontype !== 'Binary' ||\n            (typeof clusterTime.signature.keyId !== 'bigint' &&\n                typeof clusterTime.signature.keyId !== 'number' &&\n                clusterTime.signature.keyId?._bsontype !== 'Long') // apparently we decode the key to number?\n        ) {\n            throw new error_1.MongoInvalidArgumentError('input cluster time must have a valid \"signature\" property with BSON Binary hash and BSON Long keyId');\n        }\n        (0, common_1._advanceClusterTime)(this, clusterTime);\n    }\n    /**\n     * Used to determine if this session equals another\n     *\n     * @param session - The session to compare to\n     */\n    equals(session) {\n        if (!(session instanceof ClientSession)) {\n            return false;\n        }\n        if (this.id == null || session.id == null) {\n            return false;\n        }\n        return utils_1.ByteUtils.equals(this.id.id.buffer, session.id.id.buffer);\n    }\n    /**\n     * Increment the transaction number on the internal ServerSession\n     *\n     * @privateRemarks\n     * This helper increments a value stored on the client session that will be\n     * added to the serverSession's txnNumber upon applying it to a command.\n     * This is because the serverSession is lazily acquired after a connection is obtained\n     */\n    incrementTransactionNumber() {\n        this[kTxnNumberIncrement] += 1;\n    }\n    /** @returns whether this session is currently in a transaction or not */\n    inTransaction() {\n        return this.transaction.isActive;\n    }\n    /**\n     * Starts a new transaction with the given options.\n     *\n     * @remarks\n     * **IMPORTANT**: Running operations in parallel is not supported during a transaction. The use of `Promise.all`,\n     * `Promise.allSettled`, `Promise.race`, etc to parallelize operations inside a transaction is\n     * undefined behaviour.\n     *\n     * @param options - Options for the transaction\n     */\n    startTransaction(options) {\n        if (this[kSnapshotEnabled]) {\n            throw new error_1.MongoCompatibilityError('Transactions are not supported in snapshot sessions');\n        }\n        if (this.inTransaction()) {\n            throw new error_1.MongoTransactionError('Transaction already in progress');\n        }\n        if (this.isPinned && this.transaction.isCommitted) {\n            this.unpin();\n        }\n        const topologyMaxWireVersion = (0, utils_1.maxWireVersion)(this.client.topology);\n        if ((0, shared_1.isSharded)(this.client.topology) &&\n            topologyMaxWireVersion != null &&\n            topologyMaxWireVersion < minWireVersionForShardedTransactions) {\n            throw new error_1.MongoCompatibilityError('Transactions are not supported on sharded clusters in MongoDB < 4.2.');\n        }\n        this.commitAttempted = false;\n        // increment txnNumber\n        this.incrementTransactionNumber();\n        // create transaction state\n        this.transaction = new transactions_1.Transaction({\n            readConcern: options?.readConcern ??\n                this.defaultTransactionOptions.readConcern ??\n                this.clientOptions?.readConcern,\n            writeConcern: options?.writeConcern ??\n                this.defaultTransactionOptions.writeConcern ??\n                this.clientOptions?.writeConcern,\n            readPreference: options?.readPreference ??\n                this.defaultTransactionOptions.readPreference ??\n                this.clientOptions?.readPreference,\n            maxCommitTimeMS: options?.maxCommitTimeMS ?? this.defaultTransactionOptions.maxCommitTimeMS\n        });\n        this.transaction.transition(transactions_1.TxnState.STARTING_TRANSACTION);\n    }\n    /**\n     * Commits the currently active transaction in this session.\n     */\n    async commitTransaction() {\n        if (this.transaction.state === transactions_1.TxnState.NO_TRANSACTION) {\n            throw new error_1.MongoTransactionError('No transaction started');\n        }\n        if (this.transaction.state === transactions_1.TxnState.STARTING_TRANSACTION ||\n            this.transaction.state === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n            // the transaction was never started, we can safely exit here\n            this.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY);\n            return;\n        }\n        if (this.transaction.state === transactions_1.TxnState.TRANSACTION_ABORTED) {\n            throw new error_1.MongoTransactionError('Cannot call commitTransaction after calling abortTransaction');\n        }\n        const command = { commitTransaction: 1 };\n        const wc = this.transaction.options.writeConcern ?? this.clientOptions?.writeConcern;\n        if (wc != null) {\n            write_concern_1.WriteConcern.apply(command, { wtimeoutMS: 10000, w: 'majority', ...wc });\n        }\n        if (this.transaction.state === transactions_1.TxnState.TRANSACTION_COMMITTED || this.commitAttempted) {\n            write_concern_1.WriteConcern.apply(command, { wtimeoutMS: 10000, ...wc, w: 'majority' });\n        }\n        if (typeof this.transaction.options.maxTimeMS === 'number') {\n            command.maxTimeMS = this.transaction.options.maxTimeMS;\n        }\n        if (this.transaction.recoveryToken) {\n            command.recoveryToken = this.transaction.recoveryToken;\n        }\n        const operation = new run_command_1.RunAdminCommandOperation(command, {\n            session: this,\n            readPreference: read_preference_1.ReadPreference.primary,\n            bypassPinningCheck: true\n        });\n        try {\n            await (0, execute_operation_1.executeOperation)(this.client, operation);\n            this.commitAttempted = undefined;\n            return;\n        }\n        catch (firstCommitError) {\n            this.commitAttempted = true;\n            if (firstCommitError instanceof error_1.MongoError && (0, error_1.isRetryableWriteError)(firstCommitError)) {\n                // SPEC-1185: apply majority write concern when retrying commitTransaction\n                write_concern_1.WriteConcern.apply(command, { wtimeoutMS: 10000, ...wc, w: 'majority' });\n                // per txns spec, must unpin session in this case\n                this.unpin({ force: true });\n                try {\n                    await (0, execute_operation_1.executeOperation)(this.client, new run_command_1.RunAdminCommandOperation(command, {\n                        session: this,\n                        readPreference: read_preference_1.ReadPreference.primary,\n                        bypassPinningCheck: true\n                    }));\n                    return;\n                }\n                catch (retryCommitError) {\n                    // If the retry failed, we process that error instead of the original\n                    if (shouldAddUnknownTransactionCommitResultLabel(retryCommitError)) {\n                        retryCommitError.addErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult);\n                    }\n                    if (shouldUnpinAfterCommitError(retryCommitError)) {\n                        this.unpin({ error: retryCommitError });\n                    }\n                    throw retryCommitError;\n                }\n            }\n            if (shouldAddUnknownTransactionCommitResultLabel(firstCommitError)) {\n                firstCommitError.addErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult);\n            }\n            if (shouldUnpinAfterCommitError(firstCommitError)) {\n                this.unpin({ error: firstCommitError });\n            }\n            throw firstCommitError;\n        }\n        finally {\n            this.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED);\n        }\n    }\n    /**\n     * Aborts the currently active transaction in this session.\n     */\n    async abortTransaction() {\n        if (this.transaction.state === transactions_1.TxnState.NO_TRANSACTION) {\n            throw new error_1.MongoTransactionError('No transaction started');\n        }\n        if (this.transaction.state === transactions_1.TxnState.STARTING_TRANSACTION) {\n            // the transaction was never started, we can safely exit here\n            this.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n            return;\n        }\n        if (this.transaction.state === transactions_1.TxnState.TRANSACTION_ABORTED) {\n            throw new error_1.MongoTransactionError('Cannot call abortTransaction twice');\n        }\n        if (this.transaction.state === transactions_1.TxnState.TRANSACTION_COMMITTED ||\n            this.transaction.state === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n            throw new error_1.MongoTransactionError('Cannot call abortTransaction after calling commitTransaction');\n        }\n        const command = { abortTransaction: 1 };\n        const wc = this.transaction.options.writeConcern ?? this.clientOptions?.writeConcern;\n        if (wc != null) {\n            write_concern_1.WriteConcern.apply(command, { wtimeoutMS: 10000, w: 'majority', ...wc });\n        }\n        if (this.transaction.recoveryToken) {\n            command.recoveryToken = this.transaction.recoveryToken;\n        }\n        const operation = new run_command_1.RunAdminCommandOperation(command, {\n            session: this,\n            readPreference: read_preference_1.ReadPreference.primary,\n            bypassPinningCheck: true\n        });\n        try {\n            await (0, execute_operation_1.executeOperation)(this.client, operation);\n            this.unpin();\n            return;\n        }\n        catch (firstAbortError) {\n            this.unpin();\n            if (firstAbortError instanceof error_1.MongoError && (0, error_1.isRetryableWriteError)(firstAbortError)) {\n                try {\n                    await (0, execute_operation_1.executeOperation)(this.client, operation);\n                    return;\n                }\n                catch {\n                    // we do not retry the retry\n                }\n            }\n            // The spec indicates that if the operation times out or fails with a non-retryable error, we should ignore all errors on `abortTransaction`\n        }\n        finally {\n            this.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n            if (this.loadBalanced) {\n                maybeClearPinnedConnection(this, { force: false });\n            }\n        }\n    }\n    /**\n     * This is here to ensure that ClientSession is never serialized to BSON.\n     */\n    toBSON() {\n        throw new error_1.MongoRuntimeError('ClientSession cannot be serialized to BSON.');\n    }\n    /**\n     * Starts a transaction and runs a provided function, ensuring the commitTransaction is always attempted when all operations run in the function have completed.\n     *\n     * **IMPORTANT:** This method requires the function passed in to return a Promise. That promise must be made by `await`-ing all operations in such a way that rejections are propagated to the returned promise.\n     *\n     * **IMPORTANT:** Running operations in parallel is not supported during a transaction. The use of `Promise.all`,\n     * `Promise.allSettled`, `Promise.race`, etc to parallelize operations inside a transaction is\n     * undefined behaviour.\n     *\n     *\n     * @remarks\n     * - If all operations successfully complete and the `commitTransaction` operation is successful, then the provided function will return the result of the provided function.\n     * - If the transaction is unable to complete or an error is thrown from within the provided function, then the provided function will throw an error.\n     *   - If the transaction is manually aborted within the provided function it will not throw.\n     * - If the driver needs to attempt to retry the operations, the provided function may be called multiple times.\n     *\n     * Checkout a descriptive example here:\n     * @see https://www.mongodb.com/blog/post/quick-start-nodejs--mongodb--how-to-implement-transactions\n     *\n     * If a command inside withTransaction fails:\n     * - It may cause the transaction on the server to be aborted.\n     * - This situation is normally handled transparently by the driver.\n     * - However, if the application catches such an error and does not rethrow it, the driver will not be able to determine whether the transaction was aborted or not.\n     * - The driver will then retry the transaction indefinitely.\n     *\n     * To avoid this situation, the application must not silently handle errors within the provided function.\n     * If the application needs to handle errors within, it must await all operations such that if an operation is rejected it becomes the rejection of the callback function passed into withTransaction.\n     *\n     * @param fn - callback to run within a transaction\n     * @param options - optional settings for the transaction\n     * @returns A raw command response or undefined\n     */\n    async withTransaction(fn, options) {\n        const MAX_TIMEOUT = 120000;\n        const startTime = (0, utils_1.now)();\n        let committed = false;\n        let result;\n        while (!committed) {\n            this.startTransaction(options); // may throw on error\n            try {\n                const promise = fn(this);\n                if (!(0, utils_1.isPromiseLike)(promise)) {\n                    throw new error_1.MongoInvalidArgumentError('Function provided to `withTransaction` must return a Promise');\n                }\n                result = await promise;\n                if (this.transaction.state === transactions_1.TxnState.NO_TRANSACTION ||\n                    this.transaction.state === transactions_1.TxnState.TRANSACTION_COMMITTED ||\n                    this.transaction.state === transactions_1.TxnState.TRANSACTION_ABORTED) {\n                    // Assume callback intentionally ended the transaction\n                    return result;\n                }\n            }\n            catch (fnError) {\n                if (!(fnError instanceof error_1.MongoError) || fnError instanceof error_1.MongoInvalidArgumentError) {\n                    await this.abortTransaction();\n                    throw fnError;\n                }\n                if (this.transaction.state === transactions_1.TxnState.STARTING_TRANSACTION ||\n                    this.transaction.state === transactions_1.TxnState.TRANSACTION_IN_PROGRESS) {\n                    await this.abortTransaction();\n                }\n                if (fnError.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError) &&\n                    (0, utils_1.now)() - startTime < MAX_TIMEOUT) {\n                    continue;\n                }\n                throw fnError;\n            }\n            while (!committed) {\n                try {\n                    /*\n                     * We will rely on ClientSession.commitTransaction() to\n                     * apply a majority write concern if commitTransaction is\n                     * being retried (see: DRIVERS-601)\n                     */\n                    await this.commitTransaction();\n                    committed = true;\n                }\n                catch (commitError) {\n                    /*\n                     * Note: a maxTimeMS error will have the MaxTimeMSExpired\n                     * code (50) and can be reported as a top-level error or\n                     * inside writeConcernError, ex.\n                     * { ok:0, code: 50, codeName: 'MaxTimeMSExpired' }\n                     * { ok:1, writeConcernError: { code: 50, codeName: 'MaxTimeMSExpired' } }\n                     */\n                    if (!isMaxTimeMSExpiredError(commitError) &&\n                        commitError.hasErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult) &&\n                        (0, utils_1.now)() - startTime < MAX_TIMEOUT) {\n                        continue;\n                    }\n                    if (commitError.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError) &&\n                        (0, utils_1.now)() - startTime < MAX_TIMEOUT) {\n                        break;\n                    }\n                    throw commitError;\n                }\n            }\n        }\n        return result;\n    }\n}\nexports.ClientSession = ClientSession;\n_a = kSnapshotEnabled;\n(0, resource_management_1.configureResourceManagement)(ClientSession.prototype);\nconst NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set([\n    'CannotSatisfyWriteConcern',\n    'UnknownReplWriteConcern',\n    'UnsatisfiableWriteConcern'\n]);\nfunction shouldUnpinAfterCommitError(commitError) {\n    if (commitError instanceof error_1.MongoError) {\n        if ((0, error_1.isRetryableWriteError)(commitError) ||\n            commitError instanceof error_1.MongoWriteConcernError ||\n            isMaxTimeMSExpiredError(commitError)) {\n            if (isUnknownTransactionCommitResult(commitError)) {\n                // per txns spec, must unpin session in this case\n                return true;\n            }\n        }\n        else if (commitError.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction shouldAddUnknownTransactionCommitResultLabel(commitError) {\n    let ok = (0, error_1.isRetryableWriteError)(commitError);\n    ok ||= commitError instanceof error_1.MongoWriteConcernError;\n    ok ||= isMaxTimeMSExpiredError(commitError);\n    ok &&= isUnknownTransactionCommitResult(commitError);\n    return ok;\n}\nfunction isUnknownTransactionCommitResult(err) {\n    const isNonDeterministicWriteConcernError = err instanceof error_1.MongoServerError &&\n        err.codeName &&\n        NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName);\n    return (isMaxTimeMSExpiredError(err) ||\n        (!isNonDeterministicWriteConcernError &&\n            err.code !== error_1.MONGODB_ERROR_CODES.UnsatisfiableWriteConcern &&\n            err.code !== error_1.MONGODB_ERROR_CODES.UnknownReplWriteConcern));\n}\nfunction maybeClearPinnedConnection(session, options) {\n    // unpin a connection if it has been pinned\n    const conn = session[kPinnedConnection];\n    const error = options?.error;\n    if (session.inTransaction() &&\n        error &&\n        error instanceof error_1.MongoError &&\n        error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n        return;\n    }\n    const topology = session.client.topology;\n    // NOTE: the spec talks about what to do on a network error only, but the tests seem to\n    //       to validate that we don't unpin on _all_ errors?\n    if (conn && topology != null) {\n        const servers = Array.from(topology.s.servers.values());\n        const loadBalancer = servers[0];\n        if (options?.error == null || options?.force) {\n            loadBalancer.pool.checkIn(conn);\n            session[kPinnedConnection] = undefined;\n            conn.emit(constants_1.UNPINNED, session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION\n                ? metrics_1.ConnectionPoolMetrics.TXN\n                : metrics_1.ConnectionPoolMetrics.CURSOR);\n            if (options?.forceClear) {\n                loadBalancer.pool.clear({ serviceId: conn.serviceId });\n            }\n        }\n    }\n}\nfunction isMaxTimeMSExpiredError(err) {\n    if (err == null || !(err instanceof error_1.MongoServerError)) {\n        return false;\n    }\n    return (err.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired ||\n        err.writeConcernError?.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired);\n}\n/**\n * Reflects the existence of a session on the server. Can be reused by the session pool.\n * WARNING: not meant to be instantiated directly. For internal use only.\n * @public\n */\nclass ServerSession {\n    /** @internal */\n    constructor() {\n        this.id = { id: new bson_1.Binary((0, utils_1.uuidV4)(), bson_1.Binary.SUBTYPE_UUID) };\n        this.lastUse = (0, utils_1.now)();\n        this.txnNumber = 0;\n        this.isDirty = false;\n    }\n    /**\n     * Determines if the server session has timed out.\n     *\n     * @param sessionTimeoutMinutes - The server's \"logicalSessionTimeoutMinutes\"\n     */\n    hasTimedOut(sessionTimeoutMinutes) {\n        // Take the difference of the lastUse timestamp and now, which will result in a value in\n        // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\n        const idleTimeMinutes = Math.round((((0, utils_1.calculateDurationInMs)(this.lastUse) % 86400000) % 3600000) / 60000);\n        return idleTimeMinutes > sessionTimeoutMinutes - 1;\n    }\n    /**\n     * @internal\n     * Cloning meant to keep a readable reference to the server session data\n     * after ClientSession has ended\n     */\n    static clone(serverSession) {\n        const arrayBuffer = new ArrayBuffer(16);\n        const idBytes = Buffer.from(arrayBuffer);\n        idBytes.set(serverSession.id.id.buffer);\n        const id = new bson_1.Binary(idBytes, serverSession.id.id.sub_type);\n        // Manual prototype construction to avoid modifying the constructor of this class\n        return Object.setPrototypeOf({\n            id: { id },\n            lastUse: serverSession.lastUse,\n            txnNumber: serverSession.txnNumber,\n            isDirty: serverSession.isDirty\n        }, ServerSession.prototype);\n    }\n}\nexports.ServerSession = ServerSession;\n/**\n * Maintains a pool of Server Sessions.\n * For internal use only\n * @internal\n */\nclass ServerSessionPool {\n    constructor(client) {\n        if (client == null) {\n            throw new error_1.MongoRuntimeError('ServerSessionPool requires a MongoClient');\n        }\n        this.client = client;\n        this.sessions = new utils_1.List();\n    }\n    /**\n     * Acquire a Server Session from the pool.\n     * Iterates through each session in the pool, removing any stale sessions\n     * along the way. The first non-stale session found is removed from the\n     * pool and returned. If no non-stale session is found, a new ServerSession is created.\n     */\n    acquire() {\n        const sessionTimeoutMinutes = this.client.topology?.logicalSessionTimeoutMinutes ?? 10;\n        let session = null;\n        // Try to obtain from session pool\n        while (this.sessions.length > 0) {\n            const potentialSession = this.sessions.shift();\n            if (potentialSession != null &&\n                (!!this.client.topology?.loadBalanced ||\n                    !potentialSession.hasTimedOut(sessionTimeoutMinutes))) {\n                session = potentialSession;\n                break;\n            }\n        }\n        // If nothing valid came from the pool make a new one\n        if (session == null) {\n            session = new ServerSession();\n        }\n        return session;\n    }\n    /**\n     * Release a session to the session pool\n     * Adds the session back to the session pool if the session has not timed out yet.\n     * This method also removes any stale sessions from the pool.\n     *\n     * @param session - The session to release to the pool\n     */\n    release(session) {\n        const sessionTimeoutMinutes = this.client.topology?.logicalSessionTimeoutMinutes ?? 10;\n        if (this.client.topology?.loadBalanced && !sessionTimeoutMinutes) {\n            this.sessions.unshift(session);\n        }\n        if (!sessionTimeoutMinutes) {\n            return;\n        }\n        this.sessions.prune(session => session.hasTimedOut(sessionTimeoutMinutes));\n        if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n            if (session.isDirty) {\n                return;\n            }\n            // otherwise, readd this session to the session pool\n            this.sessions.unshift(session);\n        }\n    }\n}\nexports.ServerSessionPool = ServerSessionPool;\n/**\n * Optionally decorate a command with sessions specific keys\n *\n * @param session - the session tracking transaction state\n * @param command - the command to decorate\n * @param options - Optional settings passed to calling operation\n *\n * @internal\n */\nfunction applySession(session, command, options) {\n    if (session.hasEnded) {\n        return new error_1.MongoExpiredSessionError();\n    }\n    // May acquire serverSession here\n    const serverSession = session.serverSession;\n    if (serverSession == null) {\n        return new error_1.MongoRuntimeError('Unable to acquire server session');\n    }\n    if (options.writeConcern?.w === 0) {\n        if (session && session.explicit) {\n            // Error if user provided an explicit session to an unacknowledged write (SPEC-1019)\n            return new error_1.MongoAPIError('Cannot have explicit session with unacknowledged writes');\n        }\n        return;\n    }\n    // mark the last use of this session, and apply the `lsid`\n    serverSession.lastUse = (0, utils_1.now)();\n    command.lsid = serverSession.id;\n    const inTxnOrTxnCommand = session.inTransaction() || (0, transactions_1.isTransactionCommand)(command);\n    const isRetryableWrite = !!options.willRetryWrite;\n    if (isRetryableWrite || inTxnOrTxnCommand) {\n        serverSession.txnNumber += session[kTxnNumberIncrement];\n        session[kTxnNumberIncrement] = 0;\n        // TODO(NODE-2674): Preserve int64 sent from MongoDB\n        command.txnNumber = bson_1.Long.fromNumber(serverSession.txnNumber);\n    }\n    if (!inTxnOrTxnCommand) {\n        if (session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION) {\n            session.transaction.transition(transactions_1.TxnState.NO_TRANSACTION);\n        }\n        if (session.supports.causalConsistency &&\n            session.operationTime &&\n            (0, utils_1.commandSupportsReadConcern)(command)) {\n            command.readConcern = command.readConcern || {};\n            Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n        }\n        else if (session[kSnapshotEnabled]) {\n            command.readConcern = command.readConcern || { level: read_concern_1.ReadConcernLevel.snapshot };\n            if (session[kSnapshotTime] != null) {\n                Object.assign(command.readConcern, { atClusterTime: session[kSnapshotTime] });\n            }\n        }\n        return;\n    }\n    // now attempt to apply transaction-specific sessions data\n    // `autocommit` must always be false to differentiate from retryable writes\n    command.autocommit = false;\n    if (session.transaction.state === transactions_1.TxnState.STARTING_TRANSACTION) {\n        session.transaction.transition(transactions_1.TxnState.TRANSACTION_IN_PROGRESS);\n        command.startTransaction = true;\n        const readConcern = session.transaction.options.readConcern || session?.clientOptions?.readConcern;\n        if (readConcern) {\n            command.readConcern = readConcern;\n        }\n        if (session.supports.causalConsistency && session.operationTime) {\n            command.readConcern = command.readConcern || {};\n            Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n        }\n    }\n    return;\n}\nfunction updateSessionFromResponse(session, document) {\n    if (document.$clusterTime) {\n        (0, common_1._advanceClusterTime)(session, document.$clusterTime);\n    }\n    if (document.operationTime && session && session.supports.causalConsistency) {\n        session.advanceOperationTime(document.operationTime);\n    }\n    if (document.recoveryToken && session && session.inTransaction()) {\n        session.transaction._recoveryToken = document.recoveryToken;\n    }\n    if (session?.[kSnapshotEnabled] && session[kSnapshotTime] == null) {\n        // find and aggregate commands return atClusterTime on the cursor\n        // distinct includes it in the response body\n        const atClusterTime = document.atClusterTime;\n        if (atClusterTime) {\n            session[kSnapshotTime] = atClusterTime;\n        }\n    }\n}\n//# sourceMappingURL=sessions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sessions.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sort.js":
/*!*****************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sort.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.formatSort = formatSort;\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\n/** @internal */\nfunction prepareDirection(direction = 1) {\n    const value = `${direction}`.toLowerCase();\n    if (isMeta(direction))\n        return direction;\n    switch (value) {\n        case 'ascending':\n        case 'asc':\n        case '1':\n            return 1;\n        case 'descending':\n        case 'desc':\n        case '-1':\n            return -1;\n        default:\n            throw new error_1.MongoInvalidArgumentError(`Invalid sort direction: ${JSON.stringify(direction)}`);\n    }\n}\n/** @internal */\nfunction isMeta(t) {\n    return typeof t === 'object' && t != null && '$meta' in t && typeof t.$meta === 'string';\n}\n/** @internal */\nfunction isPair(t) {\n    if (Array.isArray(t) && t.length === 2) {\n        try {\n            prepareDirection(t[1]);\n            return true;\n        }\n        catch {\n            return false;\n        }\n    }\n    return false;\n}\nfunction isDeep(t) {\n    return Array.isArray(t) && Array.isArray(t[0]);\n}\nfunction isMap(t) {\n    return t instanceof Map && t.size > 0;\n}\n/** @internal */\nfunction pairToMap(v) {\n    return new Map([[`${v[0]}`, prepareDirection([v[1]])]]);\n}\n/** @internal */\nfunction deepToMap(t) {\n    const sortEntries = t.map(([k, v]) => [`${k}`, prepareDirection(v)]);\n    return new Map(sortEntries);\n}\n/** @internal */\nfunction stringsToMap(t) {\n    const sortEntries = t.map(key => [`${key}`, 1]);\n    return new Map(sortEntries);\n}\n/** @internal */\nfunction objectToMap(t) {\n    const sortEntries = Object.entries(t).map(([k, v]) => [\n        `${k}`,\n        prepareDirection(v)\n    ]);\n    return new Map(sortEntries);\n}\n/** @internal */\nfunction mapToMap(t) {\n    const sortEntries = Array.from(t).map(([k, v]) => [\n        `${k}`,\n        prepareDirection(v)\n    ]);\n    return new Map(sortEntries);\n}\n/** converts a Sort type into a type that is valid for the server (SortForCmd) */\nfunction formatSort(sort, direction) {\n    if (sort == null)\n        return undefined;\n    if (typeof sort === 'string')\n        return new Map([[sort, prepareDirection(direction)]]);\n    if (typeof sort !== 'object') {\n        throw new error_1.MongoInvalidArgumentError(`Invalid sort format: ${JSON.stringify(sort)} Sort must be a valid object`);\n    }\n    if (!Array.isArray(sort)) {\n        return isMap(sort) ? mapToMap(sort) : Object.keys(sort).length ? objectToMap(sort) : undefined;\n    }\n    if (!sort.length)\n        return undefined;\n    if (isDeep(sort))\n        return deepToMap(sort);\n    if (isPair(sort))\n        return pairToMap(sort);\n    return stringsToMap(sort);\n}\n//# sourceMappingURL=sort.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9zb3J0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQjtBQUNsQixnQkFBZ0IsbUJBQU8sQ0FBQyw2RkFBUztBQUNqQztBQUNBO0FBQ0EscUJBQXFCLFVBQVU7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUZBQW1GLDBCQUEwQjtBQUM3RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsS0FBSztBQUM3QjtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsRUFBRTtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxJQUFJO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0RUFBNEUsc0JBQXNCO0FBQ2xHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9zb3J0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mb3JtYXRTb3J0ID0gZm9ybWF0U29ydDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi9lcnJvclwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmZ1bmN0aW9uIHByZXBhcmVEaXJlY3Rpb24oZGlyZWN0aW9uID0gMSkge1xuICAgIGNvbnN0IHZhbHVlID0gYCR7ZGlyZWN0aW9ufWAudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoaXNNZXRhKGRpcmVjdGlvbikpXG4gICAgICAgIHJldHVybiBkaXJlY3Rpb247XG4gICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICBjYXNlICdhc2NlbmRpbmcnOlxuICAgICAgICBjYXNlICdhc2MnOlxuICAgICAgICBjYXNlICcxJzpcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICBjYXNlICdkZXNjZW5kaW5nJzpcbiAgICAgICAgY2FzZSAnZGVzYyc6XG4gICAgICAgIGNhc2UgJy0xJzpcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoYEludmFsaWQgc29ydCBkaXJlY3Rpb246ICR7SlNPTi5zdHJpbmdpZnkoZGlyZWN0aW9uKX1gKTtcbiAgICB9XG59XG4vKiogQGludGVybmFsICovXG5mdW5jdGlvbiBpc01ldGEodCkge1xuICAgIHJldHVybiB0eXBlb2YgdCA9PT0gJ29iamVjdCcgJiYgdCAhPSBudWxsICYmICckbWV0YScgaW4gdCAmJiB0eXBlb2YgdC4kbWV0YSA9PT0gJ3N0cmluZyc7XG59XG4vKiogQGludGVybmFsICovXG5mdW5jdGlvbiBpc1BhaXIodCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHQpICYmIHQubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwcmVwYXJlRGlyZWN0aW9uKHRbMV0pO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2gge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzRGVlcCh0KSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodCkgJiYgQXJyYXkuaXNBcnJheSh0WzBdKTtcbn1cbmZ1bmN0aW9uIGlzTWFwKHQpIHtcbiAgICByZXR1cm4gdCBpbnN0YW5jZW9mIE1hcCAmJiB0LnNpemUgPiAwO1xufVxuLyoqIEBpbnRlcm5hbCAqL1xuZnVuY3Rpb24gcGFpclRvTWFwKHYpIHtcbiAgICByZXR1cm4gbmV3IE1hcChbW2Ake3ZbMF19YCwgcHJlcGFyZURpcmVjdGlvbihbdlsxXV0pXV0pO1xufVxuLyoqIEBpbnRlcm5hbCAqL1xuZnVuY3Rpb24gZGVlcFRvTWFwKHQpIHtcbiAgICBjb25zdCBzb3J0RW50cmllcyA9IHQubWFwKChbaywgdl0pID0+IFtgJHtrfWAsIHByZXBhcmVEaXJlY3Rpb24odildKTtcbiAgICByZXR1cm4gbmV3IE1hcChzb3J0RW50cmllcyk7XG59XG4vKiogQGludGVybmFsICovXG5mdW5jdGlvbiBzdHJpbmdzVG9NYXAodCkge1xuICAgIGNvbnN0IHNvcnRFbnRyaWVzID0gdC5tYXAoa2V5ID0+IFtgJHtrZXl9YCwgMV0pO1xuICAgIHJldHVybiBuZXcgTWFwKHNvcnRFbnRyaWVzKTtcbn1cbi8qKiBAaW50ZXJuYWwgKi9cbmZ1bmN0aW9uIG9iamVjdFRvTWFwKHQpIHtcbiAgICBjb25zdCBzb3J0RW50cmllcyA9IE9iamVjdC5lbnRyaWVzKHQpLm1hcCgoW2ssIHZdKSA9PiBbXG4gICAgICAgIGAke2t9YCxcbiAgICAgICAgcHJlcGFyZURpcmVjdGlvbih2KVxuICAgIF0pO1xuICAgIHJldHVybiBuZXcgTWFwKHNvcnRFbnRyaWVzKTtcbn1cbi8qKiBAaW50ZXJuYWwgKi9cbmZ1bmN0aW9uIG1hcFRvTWFwKHQpIHtcbiAgICBjb25zdCBzb3J0RW50cmllcyA9IEFycmF5LmZyb20odCkubWFwKChbaywgdl0pID0+IFtcbiAgICAgICAgYCR7a31gLFxuICAgICAgICBwcmVwYXJlRGlyZWN0aW9uKHYpXG4gICAgXSk7XG4gICAgcmV0dXJuIG5ldyBNYXAoc29ydEVudHJpZXMpO1xufVxuLyoqIGNvbnZlcnRzIGEgU29ydCB0eXBlIGludG8gYSB0eXBlIHRoYXQgaXMgdmFsaWQgZm9yIHRoZSBzZXJ2ZXIgKFNvcnRGb3JDbWQpICovXG5mdW5jdGlvbiBmb3JtYXRTb3J0KHNvcnQsIGRpcmVjdGlvbikge1xuICAgIGlmIChzb3J0ID09IG51bGwpXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgaWYgKHR5cGVvZiBzb3J0ID09PSAnc3RyaW5nJylcbiAgICAgICAgcmV0dXJuIG5ldyBNYXAoW1tzb3J0LCBwcmVwYXJlRGlyZWN0aW9uKGRpcmVjdGlvbildXSk7XG4gICAgaWYgKHR5cGVvZiBzb3J0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKGBJbnZhbGlkIHNvcnQgZm9ybWF0OiAke0pTT04uc3RyaW5naWZ5KHNvcnQpfSBTb3J0IG11c3QgYmUgYSB2YWxpZCBvYmplY3RgKTtcbiAgICB9XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHNvcnQpKSB7XG4gICAgICAgIHJldHVybiBpc01hcChzb3J0KSA/IG1hcFRvTWFwKHNvcnQpIDogT2JqZWN0LmtleXMoc29ydCkubGVuZ3RoID8gb2JqZWN0VG9NYXAoc29ydCkgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICghc29ydC5sZW5ndGgpXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgaWYgKGlzRGVlcChzb3J0KSlcbiAgICAgICAgcmV0dXJuIGRlZXBUb01hcChzb3J0KTtcbiAgICBpZiAoaXNQYWlyKHNvcnQpKVxuICAgICAgICByZXR1cm4gcGFpclRvTWFwKHNvcnQpO1xuICAgIHJldHVybiBzdHJpbmdzVG9NYXAoc29ydCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zb3J0LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sort.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/timeout.js":
/*!********************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/timeout.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Timeout = exports.TimeoutError = void 0;\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\");\n/** @internal */\nclass TimeoutError extends Error {\n    get name() {\n        return 'TimeoutError';\n    }\n    constructor(message, options) {\n        super(message, options);\n    }\n    static is(error) {\n        return (error != null && typeof error === 'object' && 'name' in error && error.name === 'TimeoutError');\n    }\n}\nexports.TimeoutError = TimeoutError;\n/**\n * @internal\n * This class is an abstraction over timeouts\n * The Timeout class can only be in the pending or rejected states. It is guaranteed not to resolve\n * if interacted with exclusively through its public API\n * */\nclass Timeout extends Promise {\n    get [Symbol.toStringTag]() {\n        return 'MongoDBTimeout';\n    }\n    /** Create a new timeout that expires in `duration` ms */\n    constructor(executor = () => null, duration, unref = false) {\n        let reject;\n        if (duration < 0) {\n            throw new error_1.MongoInvalidArgumentError('Cannot create a Timeout with a negative duration');\n        }\n        super((_, promiseReject) => {\n            reject = promiseReject;\n            executor(utils_1.noop, promiseReject);\n        });\n        this.ended = null;\n        this.timedOut = false;\n        this.duration = duration;\n        this.start = Math.trunc(performance.now());\n        if (this.duration > 0) {\n            this.id = (0, timers_1.setTimeout)(() => {\n                this.ended = Math.trunc(performance.now());\n                this.timedOut = true;\n                reject(new TimeoutError(`Expired after ${duration}ms`));\n            }, this.duration);\n            if (typeof this.id.unref === 'function' && unref) {\n                // Ensure we do not keep the Node.js event loop running\n                this.id.unref();\n            }\n        }\n    }\n    /**\n     * Clears the underlying timeout. This method is idempotent\n     */\n    clear() {\n        (0, timers_1.clearTimeout)(this.id);\n        this.id = undefined;\n    }\n    static expires(durationMS, unref) {\n        return new Timeout(undefined, durationMS, unref);\n    }\n    static is(timeout) {\n        return (typeof timeout === 'object' &&\n            timeout != null &&\n            Symbol.toStringTag in timeout &&\n            timeout[Symbol.toStringTag] === 'MongoDBTimeout' &&\n            'then' in timeout &&\n            typeof timeout.then === 'function');\n    }\n}\nexports.Timeout = Timeout;\n//# sourceMappingURL=timeout.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi90aW1lb3V0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGVBQWUsR0FBRyxvQkFBb0I7QUFDdEMsaUJBQWlCLG1CQUFPLENBQUMsc0JBQVE7QUFDakMsZ0JBQWdCLG1CQUFPLENBQUMsNkZBQVM7QUFDakMsZ0JBQWdCLG1CQUFPLENBQUMsNkZBQVM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsU0FBUztBQUNsRSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9saW5rdXMvR2l0aHViL21vbm90d28vcGF5bG9hZC1wbHVnaW4tbWV0YS9ub2RlX21vZHVsZXMvLnBucG0vbW9uZ29kYkA2LjEwLjAvbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL3RpbWVvdXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRpbWVvdXQgPSBleHBvcnRzLlRpbWVvdXRFcnJvciA9IHZvaWQgMDtcbmNvbnN0IHRpbWVyc18xID0gcmVxdWlyZShcInRpbWVyc1wiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi9lcnJvclwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIFRpbWVvdXRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdUaW1lb3V0RXJyb3InO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgaXMoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIChlcnJvciAhPSBudWxsICYmIHR5cGVvZiBlcnJvciA9PT0gJ29iamVjdCcgJiYgJ25hbWUnIGluIGVycm9yICYmIGVycm9yLm5hbWUgPT09ICdUaW1lb3V0RXJyb3InKTtcbiAgICB9XG59XG5leHBvcnRzLlRpbWVvdXRFcnJvciA9IFRpbWVvdXRFcnJvcjtcbi8qKlxuICogQGludGVybmFsXG4gKiBUaGlzIGNsYXNzIGlzIGFuIGFic3RyYWN0aW9uIG92ZXIgdGltZW91dHNcbiAqIFRoZSBUaW1lb3V0IGNsYXNzIGNhbiBvbmx5IGJlIGluIHRoZSBwZW5kaW5nIG9yIHJlamVjdGVkIHN0YXRlcy4gSXQgaXMgZ3VhcmFudGVlZCBub3QgdG8gcmVzb2x2ZVxuICogaWYgaW50ZXJhY3RlZCB3aXRoIGV4Y2x1c2l2ZWx5IHRocm91Z2ggaXRzIHB1YmxpYyBBUElcbiAqICovXG5jbGFzcyBUaW1lb3V0IGV4dGVuZHMgUHJvbWlzZSB7XG4gICAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgICAgICByZXR1cm4gJ01vbmdvREJUaW1lb3V0JztcbiAgICB9XG4gICAgLyoqIENyZWF0ZSBhIG5ldyB0aW1lb3V0IHRoYXQgZXhwaXJlcyBpbiBgZHVyYXRpb25gIG1zICovXG4gICAgY29uc3RydWN0b3IoZXhlY3V0b3IgPSAoKSA9PiBudWxsLCBkdXJhdGlvbiwgdW5yZWYgPSBmYWxzZSkge1xuICAgICAgICBsZXQgcmVqZWN0O1xuICAgICAgICBpZiAoZHVyYXRpb24gPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdDYW5ub3QgY3JlYXRlIGEgVGltZW91dCB3aXRoIGEgbmVnYXRpdmUgZHVyYXRpb24nKTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcigoXywgcHJvbWlzZVJlamVjdCkgPT4ge1xuICAgICAgICAgICAgcmVqZWN0ID0gcHJvbWlzZVJlamVjdDtcbiAgICAgICAgICAgIGV4ZWN1dG9yKHV0aWxzXzEubm9vcCwgcHJvbWlzZVJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVuZGVkID0gbnVsbDtcbiAgICAgICAgdGhpcy50aW1lZE91dCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgICAgIHRoaXMuc3RhcnQgPSBNYXRoLnRydW5jKHBlcmZvcm1hbmNlLm5vdygpKTtcbiAgICAgICAgaWYgKHRoaXMuZHVyYXRpb24gPiAwKSB7XG4gICAgICAgICAgICB0aGlzLmlkID0gKDAsIHRpbWVyc18xLnNldFRpbWVvdXQpKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmVuZGVkID0gTWF0aC50cnVuYyhwZXJmb3JtYW5jZS5ub3coKSk7XG4gICAgICAgICAgICAgICAgdGhpcy50aW1lZE91dCA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBUaW1lb3V0RXJyb3IoYEV4cGlyZWQgYWZ0ZXIgJHtkdXJhdGlvbn1tc2ApKTtcbiAgICAgICAgICAgIH0sIHRoaXMuZHVyYXRpb24pO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmlkLnVucmVmID09PSAnZnVuY3Rpb24nICYmIHVucmVmKSB7XG4gICAgICAgICAgICAgICAgLy8gRW5zdXJlIHdlIGRvIG5vdCBrZWVwIHRoZSBOb2RlLmpzIGV2ZW50IGxvb3AgcnVubmluZ1xuICAgICAgICAgICAgICAgIHRoaXMuaWQudW5yZWYoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbGVhcnMgdGhlIHVuZGVybHlpbmcgdGltZW91dC4gVGhpcyBtZXRob2QgaXMgaWRlbXBvdGVudFxuICAgICAqL1xuICAgIGNsZWFyKCkge1xuICAgICAgICAoMCwgdGltZXJzXzEuY2xlYXJUaW1lb3V0KSh0aGlzLmlkKTtcbiAgICAgICAgdGhpcy5pZCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgc3RhdGljIGV4cGlyZXMoZHVyYXRpb25NUywgdW5yZWYpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUaW1lb3V0KHVuZGVmaW5lZCwgZHVyYXRpb25NUywgdW5yZWYpO1xuICAgIH1cbiAgICBzdGF0aWMgaXModGltZW91dCkge1xuICAgICAgICByZXR1cm4gKHR5cGVvZiB0aW1lb3V0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgdGltZW91dCAhPSBudWxsICYmXG4gICAgICAgICAgICBTeW1ib2wudG9TdHJpbmdUYWcgaW4gdGltZW91dCAmJlxuICAgICAgICAgICAgdGltZW91dFtTeW1ib2wudG9TdHJpbmdUYWddID09PSAnTW9uZ29EQlRpbWVvdXQnICYmXG4gICAgICAgICAgICAndGhlbicgaW4gdGltZW91dCAmJlxuICAgICAgICAgICAgdHlwZW9mIHRpbWVvdXQudGhlbiA9PT0gJ2Z1bmN0aW9uJyk7XG4gICAgfVxufVxuZXhwb3J0cy5UaW1lb3V0ID0gVGltZW91dDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVvdXQuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/timeout.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/transactions.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/transactions.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Transaction = exports.TxnState = void 0;\nexports.isTransactionCommand = isTransactionCommand;\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_preference.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/write_concern.js\");\n/** @internal */\nexports.TxnState = Object.freeze({\n    NO_TRANSACTION: 'NO_TRANSACTION',\n    STARTING_TRANSACTION: 'STARTING_TRANSACTION',\n    TRANSACTION_IN_PROGRESS: 'TRANSACTION_IN_PROGRESS',\n    TRANSACTION_COMMITTED: 'TRANSACTION_COMMITTED',\n    TRANSACTION_COMMITTED_EMPTY: 'TRANSACTION_COMMITTED_EMPTY',\n    TRANSACTION_ABORTED: 'TRANSACTION_ABORTED'\n});\nconst stateMachine = {\n    [exports.TxnState.NO_TRANSACTION]: [exports.TxnState.NO_TRANSACTION, exports.TxnState.STARTING_TRANSACTION],\n    [exports.TxnState.STARTING_TRANSACTION]: [\n        exports.TxnState.TRANSACTION_IN_PROGRESS,\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.TRANSACTION_ABORTED\n    ],\n    [exports.TxnState.TRANSACTION_IN_PROGRESS]: [\n        exports.TxnState.TRANSACTION_IN_PROGRESS,\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_ABORTED\n    ],\n    [exports.TxnState.TRANSACTION_COMMITTED]: [\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.STARTING_TRANSACTION,\n        exports.TxnState.NO_TRANSACTION\n    ],\n    [exports.TxnState.TRANSACTION_ABORTED]: [exports.TxnState.STARTING_TRANSACTION, exports.TxnState.NO_TRANSACTION],\n    [exports.TxnState.TRANSACTION_COMMITTED_EMPTY]: [\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.NO_TRANSACTION\n    ]\n};\nconst ACTIVE_STATES = new Set([\n    exports.TxnState.STARTING_TRANSACTION,\n    exports.TxnState.TRANSACTION_IN_PROGRESS\n]);\nconst COMMITTED_STATES = new Set([\n    exports.TxnState.TRANSACTION_COMMITTED,\n    exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n    exports.TxnState.TRANSACTION_ABORTED\n]);\n/**\n * @public\n * A class maintaining state related to a server transaction. Internal Only\n */\nclass Transaction {\n    /** Create a transaction @internal */\n    constructor(options) {\n        options = options ?? {};\n        this.state = exports.TxnState.NO_TRANSACTION;\n        this.options = {};\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        if (writeConcern) {\n            if (writeConcern.w === 0) {\n                throw new error_1.MongoTransactionError('Transactions do not support unacknowledged write concern');\n            }\n            this.options.writeConcern = writeConcern;\n        }\n        if (options.readConcern) {\n            this.options.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n        }\n        if (options.readPreference) {\n            this.options.readPreference = read_preference_1.ReadPreference.fromOptions(options);\n        }\n        if (options.maxCommitTimeMS) {\n            this.options.maxTimeMS = options.maxCommitTimeMS;\n        }\n        // TODO: This isn't technically necessary\n        this._pinnedServer = undefined;\n        this._recoveryToken = undefined;\n    }\n    /** @internal */\n    get server() {\n        return this._pinnedServer;\n    }\n    get recoveryToken() {\n        return this._recoveryToken;\n    }\n    get isPinned() {\n        return !!this.server;\n    }\n    /** @returns Whether the transaction has started */\n    get isStarting() {\n        return this.state === exports.TxnState.STARTING_TRANSACTION;\n    }\n    /**\n     * @returns Whether this session is presently in a transaction\n     */\n    get isActive() {\n        return ACTIVE_STATES.has(this.state);\n    }\n    get isCommitted() {\n        return COMMITTED_STATES.has(this.state);\n    }\n    /**\n     * Transition the transaction in the state machine\n     * @internal\n     * @param nextState - The new state to transition to\n     */\n    transition(nextState) {\n        const nextStates = stateMachine[this.state];\n        if (nextStates && nextStates.includes(nextState)) {\n            this.state = nextState;\n            if (this.state === exports.TxnState.NO_TRANSACTION ||\n                this.state === exports.TxnState.STARTING_TRANSACTION ||\n                this.state === exports.TxnState.TRANSACTION_ABORTED) {\n                this.unpinServer();\n            }\n            return;\n        }\n        throw new error_1.MongoRuntimeError(`Attempted illegal state transition from [${this.state}] to [${nextState}]`);\n    }\n    /** @internal */\n    pinServer(server) {\n        if (this.isActive) {\n            this._pinnedServer = server;\n        }\n    }\n    /** @internal */\n    unpinServer() {\n        this._pinnedServer = undefined;\n    }\n}\nexports.Transaction = Transaction;\nfunction isTransactionCommand(command) {\n    return !!(command.commitTransaction || command.abortTransaction);\n}\n//# sourceMappingURL=transactions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/transactions.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js":
/*!******************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.randomBytes = exports.COSMOS_DB_MSG = exports.DOCUMENT_DB_MSG = exports.COSMOS_DB_CHECK = exports.DOCUMENT_DB_CHECK = exports.MONGODB_WARNING_CODE = exports.DEFAULT_PK_FACTORY = exports.HostAddress = exports.BufferPool = exports.List = exports.MongoDBCollectionNamespace = exports.MongoDBNamespace = exports.ByteUtils = void 0;\nexports.isUint8Array = isUint8Array;\nexports.hostMatchesWildcards = hostMatchesWildcards;\nexports.normalizeHintField = normalizeHintField;\nexports.isObject = isObject;\nexports.mergeOptions = mergeOptions;\nexports.filterOptions = filterOptions;\nexports.applyRetryableWrites = applyRetryableWrites;\nexports.isPromiseLike = isPromiseLike;\nexports.decorateWithCollation = decorateWithCollation;\nexports.decorateWithReadConcern = decorateWithReadConcern;\nexports.decorateWithExplain = decorateWithExplain;\nexports.getTopology = getTopology;\nexports.ns = ns;\nexports.makeCounter = makeCounter;\nexports.uuidV4 = uuidV4;\nexports.maxWireVersion = maxWireVersion;\nexports.arrayStrictEqual = arrayStrictEqual;\nexports.errorStrictEqual = errorStrictEqual;\nexports.makeStateMachine = makeStateMachine;\nexports.now = now;\nexports.calculateDurationInMs = calculateDurationInMs;\nexports.hasAtomicOperators = hasAtomicOperators;\nexports.resolveOptions = resolveOptions;\nexports.isSuperset = isSuperset;\nexports.isHello = isHello;\nexports.setDifference = setDifference;\nexports.isRecord = isRecord;\nexports.deepCopy = deepCopy;\nexports.emitWarning = emitWarning;\nexports.emitWarningOnce = emitWarningOnce;\nexports.enumToString = enumToString;\nexports.supportsRetryableWrites = supportsRetryableWrites;\nexports.shuffle = shuffle;\nexports.commandSupportsReadConcern = commandSupportsReadConcern;\nexports.compareObjectId = compareObjectId;\nexports.parseInteger = parseInteger;\nexports.parseUnsignedInteger = parseUnsignedInteger;\nexports.checkParentDomainMatch = checkParentDomainMatch;\nexports.get = get;\nexports.request = request;\nexports.isHostMatch = isHostMatch;\nexports.promiseWithResolvers = promiseWithResolvers;\nexports.squashError = squashError;\nexports.once = once;\nexports.maybeAddIdToDocuments = maybeAddIdToDocuments;\nexports.fileIsAccessible = fileIsAccessible;\nexports.noop = noop;\nexports.decorateDecryptionResult = decorateDecryptionResult;\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst url = __webpack_require__(/*! url */ \"url\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/bson.js\");\nconst constants_1 = __webpack_require__(/*! ./cmap/wire_protocol/constants */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\nconst constants_2 = __webpack_require__(/*! ./constants */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/read_preference.js\");\nconst common_1 = __webpack_require__(/*! ./sdam/common */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/sdam/common.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/write_concern.js\");\nexports.ByteUtils = {\n    toLocalBufferType(buffer) {\n        return Buffer.isBuffer(buffer)\n            ? buffer\n            : Buffer.from(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n    },\n    equals(seqA, seqB) {\n        return exports.ByteUtils.toLocalBufferType(seqA).equals(seqB);\n    },\n    compare(seqA, seqB) {\n        return exports.ByteUtils.toLocalBufferType(seqA).compare(seqB);\n    },\n    toBase64(uint8array) {\n        return exports.ByteUtils.toLocalBufferType(uint8array).toString('base64');\n    }\n};\n/**\n * Returns true if value is a Uint8Array or a Buffer\n * @param value - any value that may be a Uint8Array\n */\nfunction isUint8Array(value) {\n    return (value != null &&\n        typeof value === 'object' &&\n        Symbol.toStringTag in value &&\n        value[Symbol.toStringTag] === 'Uint8Array');\n}\n/**\n * Determines if a connection's address matches a user provided list\n * of domain wildcards.\n */\nfunction hostMatchesWildcards(host, wildcards) {\n    for (const wildcard of wildcards) {\n        if (host === wildcard ||\n            (wildcard.startsWith('*.') && host?.endsWith(wildcard.substring(2, wildcard.length))) ||\n            (wildcard.startsWith('*/') && host?.endsWith(wildcard.substring(2, wildcard.length)))) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Ensure Hint field is in a shape we expect:\n * - object of index names mapping to 1 or -1\n * - just an index name\n * @internal\n */\nfunction normalizeHintField(hint) {\n    let finalHint = undefined;\n    if (typeof hint === 'string') {\n        finalHint = hint;\n    }\n    else if (Array.isArray(hint)) {\n        finalHint = {};\n        hint.forEach(param => {\n            finalHint[param] = 1;\n        });\n    }\n    else if (hint != null && typeof hint === 'object') {\n        finalHint = {};\n        for (const name in hint) {\n            finalHint[name] = hint[name];\n        }\n    }\n    return finalHint;\n}\nconst TO_STRING = (object) => Object.prototype.toString.call(object);\n/**\n * Checks if arg is an Object:\n * - **NOTE**: the check is based on the `[Symbol.toStringTag]() === 'Object'`\n * @internal\n */\nfunction isObject(arg) {\n    return '[object Object]' === TO_STRING(arg);\n}\n/** @internal */\nfunction mergeOptions(target, source) {\n    return { ...target, ...source };\n}\n/** @internal */\nfunction filterOptions(options, names) {\n    const filterOptions = {};\n    for (const name in options) {\n        if (names.includes(name)) {\n            filterOptions[name] = options[name];\n        }\n    }\n    // Filtered options\n    return filterOptions;\n}\n/**\n * Applies retryWrites: true to a command if retryWrites is set on the command's database.\n * @internal\n *\n * @param target - The target command to which we will apply retryWrites.\n * @param db - The database from which we can inherit a retryWrites value.\n */\nfunction applyRetryableWrites(target, db) {\n    if (db && db.s.options?.retryWrites) {\n        target.retryWrites = true;\n    }\n    return target;\n}\n/**\n * Applies a write concern to a command based on well defined inheritance rules, optionally\n * detecting support for the write concern in the first place.\n * @internal\n *\n * @param target - the target command we will be applying the write concern to\n * @param sources - sources where we can inherit default write concerns from\n * @param options - optional settings passed into a command for write concern overrides\n */\n/**\n * Checks if a given value is a Promise\n *\n * @typeParam T - The resolution type of the possible promise\n * @param value - An object that could be a promise\n * @returns true if the provided value is a Promise\n */\nfunction isPromiseLike(value) {\n    return (value != null &&\n        typeof value === 'object' &&\n        'then' in value &&\n        typeof value.then === 'function');\n}\n/**\n * Applies collation to a given command.\n * @internal\n *\n * @param command - the command on which to apply collation\n * @param target - target of command\n * @param options - options containing collation settings\n */\nfunction decorateWithCollation(command, target, options) {\n    const capabilities = getTopology(target).capabilities;\n    if (options.collation && typeof options.collation === 'object') {\n        if (capabilities && capabilities.commandsTakeCollation) {\n            command.collation = options.collation;\n        }\n        else {\n            throw new error_1.MongoCompatibilityError(`Current topology does not support collation`);\n        }\n    }\n}\n/**\n * Applies a read concern to a given command.\n * @internal\n *\n * @param command - the command on which to apply the read concern\n * @param coll - the parent collection of the operation calling this method\n */\nfunction decorateWithReadConcern(command, coll, options) {\n    if (options && options.session && options.session.inTransaction()) {\n        return;\n    }\n    const readConcern = Object.assign({}, command.readConcern || {});\n    if (coll.s.readConcern) {\n        Object.assign(readConcern, coll.s.readConcern);\n    }\n    if (Object.keys(readConcern).length > 0) {\n        Object.assign(command, { readConcern: readConcern });\n    }\n}\n/**\n * Applies an explain to a given command.\n * @internal\n *\n * @param command - the command on which to apply the explain\n * @param options - the options containing the explain verbosity\n */\nfunction decorateWithExplain(command, explain) {\n    const { verbosity, maxTimeMS } = explain;\n    const baseCommand = { explain: command, verbosity };\n    if (typeof maxTimeMS === 'number') {\n        baseCommand.maxTimeMS = maxTimeMS;\n    }\n    return baseCommand;\n}\n/**\n * A helper function to get the topology from a given provider. Throws\n * if the topology cannot be found.\n * @throws MongoNotConnectedError\n * @internal\n */\nfunction getTopology(provider) {\n    // MongoClient or ClientSession or AbstractCursor\n    if ('topology' in provider && provider.topology) {\n        return provider.topology;\n    }\n    else if ('client' in provider && provider.client.topology) {\n        return provider.client.topology;\n    }\n    throw new error_1.MongoNotConnectedError('MongoClient must be connected to perform this operation');\n}\n/** @internal */\nfunction ns(ns) {\n    return MongoDBNamespace.fromString(ns);\n}\n/** @public */\nclass MongoDBNamespace {\n    /**\n     * Create a namespace object\n     *\n     * @param db - database name\n     * @param collection - collection name\n     */\n    constructor(db, collection) {\n        this.db = db;\n        this.collection = collection;\n        this.collection = collection === '' ? undefined : collection;\n    }\n    toString() {\n        return this.collection ? `${this.db}.${this.collection}` : this.db;\n    }\n    withCollection(collection) {\n        return new MongoDBCollectionNamespace(this.db, collection);\n    }\n    static fromString(namespace) {\n        if (typeof namespace !== 'string' || namespace === '') {\n            // TODO(NODE-3483): Replace with MongoNamespaceError\n            throw new error_1.MongoRuntimeError(`Cannot parse namespace from \"${namespace}\"`);\n        }\n        const [db, ...collectionParts] = namespace.split('.');\n        const collection = collectionParts.join('.');\n        return new MongoDBNamespace(db, collection === '' ? undefined : collection);\n    }\n}\nexports.MongoDBNamespace = MongoDBNamespace;\n/**\n * @public\n *\n * A class representing a collection's namespace.  This class enforces (through Typescript) that\n * the `collection` portion of the namespace is defined and should only be\n * used in scenarios where this can be guaranteed.\n */\nclass MongoDBCollectionNamespace extends MongoDBNamespace {\n    constructor(db, collection) {\n        super(db, collection);\n        this.collection = collection;\n    }\n    static fromString(namespace) {\n        return super.fromString(namespace);\n    }\n}\nexports.MongoDBCollectionNamespace = MongoDBCollectionNamespace;\n/** @internal */\nfunction* makeCounter(seed = 0) {\n    let count = seed;\n    while (true) {\n        const newCount = count;\n        count += 1;\n        yield newCount;\n    }\n}\n/**\n * Synchronously Generate a UUIDv4\n * @internal\n */\nfunction uuidV4() {\n    const result = crypto.randomBytes(16);\n    result[6] = (result[6] & 0x0f) | 0x40;\n    result[8] = (result[8] & 0x3f) | 0x80;\n    return result;\n}\n/**\n * A helper function for determining `maxWireVersion` between legacy and new topology instances\n * @internal\n */\nfunction maxWireVersion(topologyOrServer) {\n    if (topologyOrServer) {\n        if (topologyOrServer.loadBalanced || topologyOrServer.serverApi?.version) {\n            // Since we do not have a monitor in the load balanced mode,\n            // we assume the load-balanced server is always pointed at the latest mongodb version.\n            // There is a risk that for on-prem deployments\n            // that don't upgrade immediately that this could alert to the\n            // application that a feature is available that is actually not.\n            // We also return the max supported wire version for serverAPI.\n            return constants_1.MAX_SUPPORTED_WIRE_VERSION;\n        }\n        if (topologyOrServer.hello) {\n            return topologyOrServer.hello.maxWireVersion;\n        }\n        if ('lastHello' in topologyOrServer && typeof topologyOrServer.lastHello === 'function') {\n            const lastHello = topologyOrServer.lastHello();\n            if (lastHello) {\n                return lastHello.maxWireVersion;\n            }\n        }\n        if (topologyOrServer.description &&\n            'maxWireVersion' in topologyOrServer.description &&\n            topologyOrServer.description.maxWireVersion != null) {\n            return topologyOrServer.description.maxWireVersion;\n        }\n    }\n    return 0;\n}\n/** @internal */\nfunction arrayStrictEqual(arr, arr2) {\n    if (!Array.isArray(arr) || !Array.isArray(arr2)) {\n        return false;\n    }\n    return arr.length === arr2.length && arr.every((elt, idx) => elt === arr2[idx]);\n}\n/** @internal */\nfunction errorStrictEqual(lhs, rhs) {\n    if (lhs === rhs) {\n        return true;\n    }\n    if (!lhs || !rhs) {\n        return lhs === rhs;\n    }\n    if ((lhs == null && rhs != null) || (lhs != null && rhs == null)) {\n        return false;\n    }\n    if (lhs.constructor.name !== rhs.constructor.name) {\n        return false;\n    }\n    if (lhs.message !== rhs.message) {\n        return false;\n    }\n    return true;\n}\n/** @internal */\nfunction makeStateMachine(stateTable) {\n    return function stateTransition(target, newState) {\n        const legalStates = stateTable[target.s.state];\n        if (legalStates && legalStates.indexOf(newState) < 0) {\n            throw new error_1.MongoRuntimeError(`illegal state transition from [${target.s.state}] => [${newState}], allowed: [${legalStates}]`);\n        }\n        target.emit('stateChanged', target.s.state, newState);\n        target.s.state = newState;\n    };\n}\n/** @internal */\nfunction now() {\n    const hrtime = process.hrtime();\n    return Math.floor(hrtime[0] * 1000 + hrtime[1] / 1000000);\n}\n/** @internal */\nfunction calculateDurationInMs(started) {\n    if (typeof started !== 'number') {\n        return -1;\n    }\n    const elapsed = now() - started;\n    return elapsed < 0 ? 0 : elapsed;\n}\n/** @internal */\nfunction hasAtomicOperators(doc) {\n    if (Array.isArray(doc)) {\n        for (const document of doc) {\n            if (hasAtomicOperators(document)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    const keys = Object.keys(doc);\n    return keys.length > 0 && keys[0][0] === '$';\n}\n/**\n * Merge inherited properties from parent into options, prioritizing values from options,\n * then values from parent.\n * @internal\n */\nfunction resolveOptions(parent, options) {\n    const result = Object.assign({}, options, (0, bson_1.resolveBSONOptions)(options, parent));\n    // Users cannot pass a readConcern/writeConcern to operations in a transaction\n    const session = options?.session;\n    if (!session?.inTransaction()) {\n        const readConcern = read_concern_1.ReadConcern.fromOptions(options) ?? parent?.readConcern;\n        if (readConcern) {\n            result.readConcern = readConcern;\n        }\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options) ?? parent?.writeConcern;\n        if (writeConcern) {\n            result.writeConcern = writeConcern;\n        }\n    }\n    const readPreference = read_preference_1.ReadPreference.fromOptions(options) ?? parent?.readPreference;\n    if (readPreference) {\n        result.readPreference = readPreference;\n    }\n    return result;\n}\nfunction isSuperset(set, subset) {\n    set = Array.isArray(set) ? new Set(set) : set;\n    subset = Array.isArray(subset) ? new Set(subset) : subset;\n    for (const elem of subset) {\n        if (!set.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Checks if the document is a Hello request\n * @internal\n */\nfunction isHello(doc) {\n    return doc[constants_2.LEGACY_HELLO_COMMAND] || doc.hello ? true : false;\n}\n/** Returns the items that are uniquely in setA */\nfunction setDifference(setA, setB) {\n    const difference = new Set(setA);\n    for (const elem of setB) {\n        difference.delete(elem);\n    }\n    return difference;\n}\nconst HAS_OWN = (object, prop) => Object.prototype.hasOwnProperty.call(object, prop);\nfunction isRecord(value, requiredKeys = undefined) {\n    if (!isObject(value)) {\n        return false;\n    }\n    const ctor = value.constructor;\n    if (ctor && ctor.prototype) {\n        if (!isObject(ctor.prototype)) {\n            return false;\n        }\n        // Check to see if some method exists from the Object exists\n        if (!HAS_OWN(ctor.prototype, 'isPrototypeOf')) {\n            return false;\n        }\n    }\n    if (requiredKeys) {\n        const keys = Object.keys(value);\n        return isSuperset(keys, requiredKeys);\n    }\n    return true;\n}\n/**\n * Make a deep copy of an object\n *\n * NOTE: This is not meant to be the perfect implementation of a deep copy,\n * but instead something that is good enough for the purposes of\n * command monitoring.\n */\nfunction deepCopy(value) {\n    if (value == null) {\n        return value;\n    }\n    else if (Array.isArray(value)) {\n        return value.map(item => deepCopy(item));\n    }\n    else if (isRecord(value)) {\n        const res = {};\n        for (const key in value) {\n            res[key] = deepCopy(value[key]);\n        }\n        return res;\n    }\n    const ctor = value.constructor;\n    if (ctor) {\n        switch (ctor.name.toLowerCase()) {\n            case 'date':\n                return new ctor(Number(value));\n            case 'map':\n                return new Map(value);\n            case 'set':\n                return new Set(value);\n            case 'buffer':\n                return Buffer.from(value);\n        }\n    }\n    return value;\n}\n/**\n * A sequential list of items in a circularly linked list\n * @remarks\n * The head node is special, it is always defined and has a value of null.\n * It is never \"included\" in the list, in that, it is not returned by pop/shift or yielded by the iterator.\n * The circular linkage and always defined head node are to reduce checks for null next/prev references to zero.\n * New nodes are declared as object literals with keys always in the same order: next, prev, value.\n * @internal\n */\nclass List {\n    get length() {\n        return this.count;\n    }\n    get [Symbol.toStringTag]() {\n        return 'List';\n    }\n    constructor() {\n        this.count = 0;\n        // this is carefully crafted:\n        // declaring a complete and consistently key ordered\n        // object is beneficial to the runtime optimizations\n        this.head = {\n            next: null,\n            prev: null,\n            value: null\n        };\n        this.head.next = this.head;\n        this.head.prev = this.head;\n    }\n    toArray() {\n        return Array.from(this);\n    }\n    toString() {\n        return `head <=> ${this.toArray().join(' <=> ')} <=> head`;\n    }\n    *[Symbol.iterator]() {\n        for (const node of this.nodes()) {\n            yield node.value;\n        }\n    }\n    *nodes() {\n        let ptr = this.head.next;\n        while (ptr !== this.head) {\n            // Save next before yielding so that we make removing within iteration safe\n            const { next } = ptr;\n            yield ptr;\n            ptr = next;\n        }\n    }\n    /** Insert at end of list */\n    push(value) {\n        this.count += 1;\n        const newNode = {\n            next: this.head,\n            prev: this.head.prev,\n            value\n        };\n        this.head.prev.next = newNode;\n        this.head.prev = newNode;\n    }\n    /** Inserts every item inside an iterable instead of the iterable itself */\n    pushMany(iterable) {\n        for (const value of iterable) {\n            this.push(value);\n        }\n    }\n    /** Insert at front of list */\n    unshift(value) {\n        this.count += 1;\n        const newNode = {\n            next: this.head.next,\n            prev: this.head,\n            value\n        };\n        this.head.next.prev = newNode;\n        this.head.next = newNode;\n    }\n    remove(node) {\n        if (node === this.head || this.length === 0) {\n            return null;\n        }\n        this.count -= 1;\n        const prevNode = node.prev;\n        const nextNode = node.next;\n        prevNode.next = nextNode;\n        nextNode.prev = prevNode;\n        return node.value;\n    }\n    /** Removes the first node at the front of the list */\n    shift() {\n        return this.remove(this.head.next);\n    }\n    /** Removes the last node at the end of the list */\n    pop() {\n        return this.remove(this.head.prev);\n    }\n    /** Iterates through the list and removes nodes where filter returns true */\n    prune(filter) {\n        for (const node of this.nodes()) {\n            if (filter(node.value)) {\n                this.remove(node);\n            }\n        }\n    }\n    clear() {\n        this.count = 0;\n        this.head.next = this.head;\n        this.head.prev = this.head;\n    }\n    /** Returns the first item in the list, does not remove */\n    first() {\n        // If the list is empty, value will be the head's null\n        return this.head.next.value;\n    }\n    /** Returns the last item in the list, does not remove */\n    last() {\n        // If the list is empty, value will be the head's null\n        return this.head.prev.value;\n    }\n}\nexports.List = List;\n/**\n * A pool of Buffers which allow you to read them as if they were one\n * @internal\n */\nclass BufferPool {\n    constructor() {\n        this.buffers = new List();\n        this.totalByteLength = 0;\n    }\n    get length() {\n        return this.totalByteLength;\n    }\n    /** Adds a buffer to the internal buffer pool list */\n    append(buffer) {\n        this.buffers.push(buffer);\n        this.totalByteLength += buffer.length;\n    }\n    /**\n     * If BufferPool contains 4 bytes or more construct an int32 from the leading bytes,\n     * otherwise return null. Size can be negative, caller should error check.\n     */\n    getInt32() {\n        if (this.totalByteLength < 4) {\n            return null;\n        }\n        const firstBuffer = this.buffers.first();\n        if (firstBuffer != null && firstBuffer.byteLength >= 4) {\n            return firstBuffer.readInt32LE(0);\n        }\n        // Unlikely case: an int32 is split across buffers.\n        // Use read and put the returned buffer back on top\n        const top4Bytes = this.read(4);\n        const value = top4Bytes.readInt32LE(0);\n        // Put it back.\n        this.totalByteLength += 4;\n        this.buffers.unshift(top4Bytes);\n        return value;\n    }\n    /** Reads the requested number of bytes, optionally consuming them */\n    read(size) {\n        if (typeof size !== 'number' || size < 0) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"size\" must be a non-negative number');\n        }\n        // oversized request returns empty buffer\n        if (size > this.totalByteLength) {\n            return Buffer.alloc(0);\n        }\n        // We know we have enough, we just don't know how it is spread across chunks\n        // TODO(NODE-4732): alloc API should change based on raw option\n        const result = Buffer.allocUnsafe(size);\n        for (let bytesRead = 0; bytesRead < size;) {\n            const buffer = this.buffers.shift();\n            if (buffer == null) {\n                break;\n            }\n            const bytesRemaining = size - bytesRead;\n            const bytesReadable = Math.min(bytesRemaining, buffer.byteLength);\n            const bytes = buffer.subarray(0, bytesReadable);\n            result.set(bytes, bytesRead);\n            bytesRead += bytesReadable;\n            this.totalByteLength -= bytesReadable;\n            if (bytesReadable < buffer.byteLength) {\n                this.buffers.unshift(buffer.subarray(bytesReadable));\n            }\n        }\n        return result;\n    }\n}\nexports.BufferPool = BufferPool;\n/** @public */\nclass HostAddress {\n    constructor(hostString) {\n        this.host = undefined;\n        this.port = undefined;\n        this.socketPath = undefined;\n        this.isIPv6 = false;\n        const escapedHost = hostString.split(' ').join('%20'); // escape spaces, for socket path hosts\n        if (escapedHost.endsWith('.sock')) {\n            // heuristically determine if we're working with a domain socket\n            this.socketPath = decodeURIComponent(escapedHost);\n            return;\n        }\n        const urlString = `iLoveJS://${escapedHost}`;\n        let url;\n        try {\n            url = new url_1.URL(urlString);\n        }\n        catch (urlError) {\n            const runtimeError = new error_1.MongoRuntimeError(`Unable to parse ${escapedHost} with URL`);\n            runtimeError.cause = urlError;\n            throw runtimeError;\n        }\n        const hostname = url.hostname;\n        const port = url.port;\n        let normalized = decodeURIComponent(hostname).toLowerCase();\n        if (normalized.startsWith('[') && normalized.endsWith(']')) {\n            this.isIPv6 = true;\n            normalized = normalized.substring(1, hostname.length - 1);\n        }\n        this.host = normalized.toLowerCase();\n        if (typeof port === 'number') {\n            this.port = port;\n        }\n        else if (typeof port === 'string' && port !== '') {\n            this.port = Number.parseInt(port, 10);\n        }\n        else {\n            this.port = 27017;\n        }\n        if (this.port === 0) {\n            throw new error_1.MongoParseError('Invalid port (zero) with hostname');\n        }\n        Object.freeze(this);\n    }\n    [Symbol.for('nodejs.util.inspect.custom')]() {\n        return this.inspect();\n    }\n    inspect() {\n        return `new HostAddress('${this.toString()}')`;\n    }\n    toString() {\n        if (typeof this.host === 'string') {\n            if (this.isIPv6) {\n                return `[${this.host}]:${this.port}`;\n            }\n            return `${this.host}:${this.port}`;\n        }\n        return `${this.socketPath}`;\n    }\n    static fromString(s) {\n        return new HostAddress(s);\n    }\n    static fromHostPort(host, port) {\n        if (host.includes(':')) {\n            host = `[${host}]`; // IPv6 address\n        }\n        return HostAddress.fromString(`${host}:${port}`);\n    }\n    static fromSrvRecord({ name, port }) {\n        return HostAddress.fromHostPort(name, port);\n    }\n    toHostPort() {\n        if (this.socketPath) {\n            return { host: this.socketPath, port: 0 };\n        }\n        const host = this.host ?? '';\n        const port = this.port ?? 0;\n        return { host, port };\n    }\n}\nexports.HostAddress = HostAddress;\nexports.DEFAULT_PK_FACTORY = {\n    // We prefer not to rely on ObjectId having a createPk method\n    createPk() {\n        return new bson_1.ObjectId();\n    }\n};\n/**\n * When the driver used emitWarning the code will be equal to this.\n * @public\n *\n * @example\n * ```ts\n * process.on('warning', (warning) => {\n *  if (warning.code === MONGODB_WARNING_CODE) console.error('Ah an important warning! :)')\n * })\n * ```\n */\nexports.MONGODB_WARNING_CODE = 'MONGODB DRIVER';\n/** @internal */\nfunction emitWarning(message) {\n    return process.emitWarning(message, { code: exports.MONGODB_WARNING_CODE });\n}\nconst emittedWarnings = new Set();\n/**\n * Will emit a warning once for the duration of the application.\n * Uses the message to identify if it has already been emitted\n * so using string interpolation can cause multiple emits\n * @internal\n */\nfunction emitWarningOnce(message) {\n    if (!emittedWarnings.has(message)) {\n        emittedWarnings.add(message);\n        return emitWarning(message);\n    }\n}\n/**\n * Takes a JS object and joins the values into a string separated by ', '\n */\nfunction enumToString(en) {\n    return Object.values(en).join(', ');\n}\n/**\n * Determine if a server supports retryable writes.\n *\n * @internal\n */\nfunction supportsRetryableWrites(server) {\n    if (!server) {\n        return false;\n    }\n    if (server.loadBalanced) {\n        // Loadbalanced topologies will always support retry writes\n        return true;\n    }\n    if (server.description.logicalSessionTimeoutMinutes != null) {\n        // that supports sessions\n        if (server.description.type !== common_1.ServerType.Standalone) {\n            // and that is not a standalone\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Fisher–Yates Shuffle\n *\n * Reference: https://bost.ocks.org/mike/shuffle/\n * @param sequence - items to be shuffled\n * @param limit - Defaults to `0`. If nonzero shuffle will slice the randomized array e.g, `.slice(0, limit)` otherwise will return the entire randomized array.\n */\nfunction shuffle(sequence, limit = 0) {\n    const items = Array.from(sequence); // shallow copy in order to never shuffle the input\n    if (limit > items.length) {\n        throw new error_1.MongoRuntimeError('Limit must be less than the number of items');\n    }\n    let remainingItemsToShuffle = items.length;\n    const lowerBound = limit % items.length === 0 ? 1 : items.length - limit;\n    while (remainingItemsToShuffle > lowerBound) {\n        // Pick a remaining element\n        const randomIndex = Math.floor(Math.random() * remainingItemsToShuffle);\n        remainingItemsToShuffle -= 1;\n        // And swap it with the current element\n        const swapHold = items[remainingItemsToShuffle];\n        items[remainingItemsToShuffle] = items[randomIndex];\n        items[randomIndex] = swapHold;\n    }\n    return limit % items.length === 0 ? items : items.slice(lowerBound);\n}\n// TODO(NODE-4936): read concern eligibility for commands should be codified in command construction\n// @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern\nfunction commandSupportsReadConcern(command) {\n    if (command.aggregate || command.count || command.distinct || command.find || command.geoNear) {\n        return true;\n    }\n    return false;\n}\n/**\n * Compare objectIds. `null` is always less\n * - `+1 = oid1 is greater than oid2`\n * - `-1 = oid1 is less than oid2`\n * - `+0 = oid1 is equal oid2`\n */\nfunction compareObjectId(oid1, oid2) {\n    if (oid1 == null && oid2 == null) {\n        return 0;\n    }\n    if (oid1 == null) {\n        return -1;\n    }\n    if (oid2 == null) {\n        return 1;\n    }\n    return exports.ByteUtils.compare(oid1.id, oid2.id);\n}\nfunction parseInteger(value) {\n    if (typeof value === 'number')\n        return Math.trunc(value);\n    const parsedValue = Number.parseInt(String(value), 10);\n    return Number.isNaN(parsedValue) ? null : parsedValue;\n}\nfunction parseUnsignedInteger(value) {\n    const parsedInt = parseInteger(value);\n    return parsedInt != null && parsedInt >= 0 ? parsedInt : null;\n}\n/**\n * This function throws a MongoAPIError in the event that either of the following is true:\n * * If the provided address domain does not match the provided parent domain\n * * If the parent domain contains less than three `.` separated parts and the provided address does not contain at least one more domain level than its parent\n *\n * If a DNS server were to become compromised SRV records would still need to\n * advertise addresses that are under the same domain as the srvHost.\n *\n * @param address - The address to check against a domain\n * @param srvHost - The domain to check the provided address against\n * @returns void\n */\nfunction checkParentDomainMatch(address, srvHost) {\n    // Remove trailing dot if exists on either the resolved address or the srv hostname\n    const normalizedAddress = address.endsWith('.') ? address.slice(0, address.length - 1) : address;\n    const normalizedSrvHost = srvHost.endsWith('.') ? srvHost.slice(0, srvHost.length - 1) : srvHost;\n    const allCharacterBeforeFirstDot = /^.*?\\./;\n    const srvIsLessThanThreeParts = normalizedSrvHost.split('.').length < 3;\n    // Remove all characters before first dot\n    // Add leading dot back to string so\n    //   an srvHostDomain = '.trusted.site'\n    //   will not satisfy an addressDomain that endsWith '.fake-trusted.site'\n    const addressDomain = `.${normalizedAddress.replace(allCharacterBeforeFirstDot, '')}`;\n    let srvHostDomain = srvIsLessThanThreeParts\n        ? normalizedSrvHost\n        : `.${normalizedSrvHost.replace(allCharacterBeforeFirstDot, '')}`;\n    if (!srvHostDomain.startsWith('.')) {\n        srvHostDomain = '.' + srvHostDomain;\n    }\n    if (srvIsLessThanThreeParts &&\n        normalizedAddress.split('.').length <= normalizedSrvHost.split('.').length) {\n        throw new error_1.MongoAPIError('Server record does not have at least one more domain level than parent URI');\n    }\n    if (!addressDomain.endsWith(srvHostDomain)) {\n        throw new error_1.MongoAPIError('Server record does not share hostname with parent URI');\n    }\n}\n/**\n * Perform a get request that returns status and body.\n * @internal\n */\nfunction get(url, options = {}) {\n    return new Promise((resolve, reject) => {\n        /* eslint-disable prefer-const */\n        let timeoutId;\n        const request = http\n            .get(url, options, response => {\n            response.setEncoding('utf8');\n            let body = '';\n            response.on('data', chunk => (body += chunk));\n            response.on('end', () => {\n                (0, timers_1.clearTimeout)(timeoutId);\n                resolve({ status: response.statusCode, body });\n            });\n        })\n            .on('error', error => {\n            (0, timers_1.clearTimeout)(timeoutId);\n            reject(error);\n        })\n            .end();\n        timeoutId = (0, timers_1.setTimeout)(() => {\n            request.destroy(new error_1.MongoNetworkTimeoutError(`request timed out after 10 seconds`));\n        }, 10000);\n    });\n}\nasync function request(uri, options = {}) {\n    return await new Promise((resolve, reject) => {\n        const requestOptions = {\n            method: 'GET',\n            timeout: 10000,\n            json: true,\n            ...url.parse(uri),\n            ...options\n        };\n        const req = http.request(requestOptions, res => {\n            res.setEncoding('utf8');\n            let data = '';\n            res.on('data', d => {\n                data += d;\n            });\n            res.once('end', () => {\n                if (options.json === false) {\n                    resolve(data);\n                    return;\n                }\n                try {\n                    const parsed = JSON.parse(data);\n                    resolve(parsed);\n                }\n                catch {\n                    // TODO(NODE-3483)\n                    reject(new error_1.MongoRuntimeError(`Invalid JSON response: \"${data}\"`));\n                }\n            });\n        });\n        req.once('timeout', () => req.destroy(new error_1.MongoNetworkTimeoutError(`Network request to ${uri} timed out after ${options.timeout} ms`)));\n        req.once('error', error => reject(error));\n        req.end();\n    });\n}\n/** @internal */\nexports.DOCUMENT_DB_CHECK = /(\\.docdb\\.amazonaws\\.com$)|(\\.docdb-elastic\\.amazonaws\\.com$)/;\n/** @internal */\nexports.COSMOS_DB_CHECK = /\\.cosmos\\.azure\\.com$/;\n/** @internal */\nexports.DOCUMENT_DB_MSG = 'You appear to be connected to a DocumentDB cluster. For more information regarding feature compatibility and support please visit https://www.mongodb.com/supportability/documentdb';\n/** @internal */\nexports.COSMOS_DB_MSG = 'You appear to be connected to a CosmosDB cluster. For more information regarding feature compatibility and support please visit https://www.mongodb.com/supportability/cosmosdb';\n/** @internal */\nfunction isHostMatch(match, host) {\n    return host && match.test(host.toLowerCase()) ? true : false;\n}\nfunction promiseWithResolvers() {\n    let resolve;\n    let reject;\n    const promise = new Promise(function withResolversExecutor(promiseResolve, promiseReject) {\n        resolve = promiseResolve;\n        reject = promiseReject;\n    });\n    return { promise, resolve, reject };\n}\n/**\n * A noop function intended for use in preventing unhandled rejections.\n *\n * @example\n * ```js\n * const promise = myAsyncTask();\n * // eslint-disable-next-line github/no-then\n * promise.then(undefined, squashError);\n * ```\n */\nfunction squashError(_error) {\n    return;\n}\nexports.randomBytes = (0, util_1.promisify)(crypto.randomBytes);\n/**\n * Replicates the events.once helper.\n *\n * Removes unused signal logic and It **only** supports 0 or 1 argument events.\n *\n * @param ee - An event emitter that may emit `ev`\n * @param name - An event name to wait for\n */\nasync function once(ee, name) {\n    const { promise, resolve, reject } = promiseWithResolvers();\n    const onEvent = (data) => resolve(data);\n    const onError = (error) => reject(error);\n    ee.once(name, onEvent).once('error', onError);\n    try {\n        const res = await promise;\n        ee.off('error', onError);\n        return res;\n    }\n    catch (error) {\n        ee.off(name, onEvent);\n        throw error;\n    }\n}\nfunction maybeAddIdToDocuments(coll, docOrDocs, options) {\n    const forceServerObjectId = typeof options.forceServerObjectId === 'boolean'\n        ? options.forceServerObjectId\n        : coll.s.db.options?.forceServerObjectId;\n    // no need to modify the docs if server sets the ObjectId\n    if (forceServerObjectId === true) {\n        return docOrDocs;\n    }\n    const transform = (doc) => {\n        if (doc._id == null) {\n            doc._id = coll.s.pkFactory.createPk();\n        }\n        return doc;\n    };\n    return Array.isArray(docOrDocs) ? docOrDocs.map(transform) : transform(docOrDocs);\n}\nasync function fileIsAccessible(fileName, mode) {\n    try {\n        await fs_1.promises.access(fileName, mode);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\nfunction noop() {\n    return;\n}\n/**\n * Recurse through the (identically-shaped) `decrypted` and `original`\n * objects and attach a `decryptedKeys` property on each sub-object that\n * contained encrypted fields. Because we only call this on BSON responses,\n * we do not need to worry about circular references.\n *\n * @internal\n */\nfunction decorateDecryptionResult(decrypted, original, isTopLevelDecorateCall = true) {\n    if (isTopLevelDecorateCall) {\n        // The original value could have been either a JS object or a BSON buffer\n        if (Buffer.isBuffer(original)) {\n            original = (0, bson_1.deserialize)(original);\n        }\n        if (Buffer.isBuffer(decrypted)) {\n            throw new error_1.MongoRuntimeError('Expected result of decryption to be deserialized BSON object');\n        }\n    }\n    if (!decrypted || typeof decrypted !== 'object')\n        return;\n    for (const k of Object.keys(decrypted)) {\n        const originalValue = original[k];\n        // An object was decrypted by libmongocrypt if and only if it was\n        // a BSON Binary object with subtype 6.\n        if (originalValue && originalValue._bsontype === 'Binary' && originalValue.sub_type === 6) {\n            if (!decrypted[constants_2.kDecoratedKeys]) {\n                Object.defineProperty(decrypted, constants_2.kDecoratedKeys, {\n                    value: [],\n                    configurable: true,\n                    enumerable: false,\n                    writable: false\n                });\n            }\n            // this is defined in the preceding if-statement\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            decrypted[constants_2.kDecoratedKeys].push(k);\n            // Do not recurse into this decrypted value. It could be a sub-document/array,\n            // in which case there is no original value associated with its subfields.\n            continue;\n        }\n        decorateDecryptionResult(decrypted[k], originalValue, false);\n    }\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/utils.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/write_concern.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/write_concern.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WriteConcern = exports.WRITE_CONCERN_KEYS = void 0;\nexports.throwIfWriteConcernError = throwIfWriteConcernError;\nconst responses_1 = __webpack_require__(/*! ./cmap/wire_protocol/responses */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/cmap/wire_protocol/responses.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/error.js\");\nexports.WRITE_CONCERN_KEYS = ['w', 'wtimeout', 'j', 'journal', 'fsync'];\n/**\n * A MongoDB WriteConcern, which describes the level of acknowledgement\n * requested from MongoDB for write operations.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/reference/write-concern/\n */\nclass WriteConcern {\n    /**\n     * Constructs a WriteConcern from the write concern properties.\n     * @param w - request acknowledgment that the write operation has propagated to a specified number of mongod instances or to mongod instances with specified tags.\n     * @param wtimeoutMS - specify a time limit to prevent write operations from blocking indefinitely\n     * @param journal - request acknowledgment that the write operation has been written to the on-disk journal\n     * @param fsync - equivalent to the j option. Is deprecated and will be removed in the next major version.\n     */\n    constructor(w, wtimeoutMS, journal, fsync) {\n        if (w != null) {\n            if (!Number.isNaN(Number(w))) {\n                this.w = Number(w);\n            }\n            else {\n                this.w = w;\n            }\n        }\n        if (wtimeoutMS != null) {\n            this.wtimeoutMS = this.wtimeout = wtimeoutMS;\n        }\n        if (journal != null) {\n            this.journal = this.j = journal;\n        }\n        if (fsync != null) {\n            this.journal = this.j = fsync ? true : false;\n        }\n    }\n    /**\n     * Apply a write concern to a command document. Will modify and return the command.\n     */\n    static apply(command, writeConcern) {\n        const wc = {};\n        // The write concern document sent to the server has w/wtimeout/j fields.\n        if (writeConcern.w != null)\n            wc.w = writeConcern.w;\n        if (writeConcern.wtimeoutMS != null)\n            wc.wtimeout = writeConcern.wtimeoutMS;\n        if (writeConcern.journal != null)\n            wc.j = writeConcern.j;\n        command.writeConcern = wc;\n        return command;\n    }\n    /** Construct a WriteConcern given an options object. */\n    static fromOptions(options, inherit) {\n        if (options == null)\n            return undefined;\n        inherit = inherit ?? {};\n        let opts;\n        if (typeof options === 'string' || typeof options === 'number') {\n            opts = { w: options };\n        }\n        else if (options instanceof WriteConcern) {\n            opts = options;\n        }\n        else {\n            opts = options.writeConcern;\n        }\n        const parentOpts = inherit instanceof WriteConcern ? inherit : inherit.writeConcern;\n        const { w = undefined, wtimeout = undefined, j = undefined, fsync = undefined, journal = undefined, wtimeoutMS = undefined } = {\n            ...parentOpts,\n            ...opts\n        };\n        if (w != null ||\n            wtimeout != null ||\n            wtimeoutMS != null ||\n            j != null ||\n            journal != null ||\n            fsync != null) {\n            return new WriteConcern(w, wtimeout ?? wtimeoutMS, j ?? journal, fsync);\n        }\n        return undefined;\n    }\n}\nexports.WriteConcern = WriteConcern;\n/** Called with either a plain object or MongoDBResponse */\nfunction throwIfWriteConcernError(response) {\n    if (typeof response === 'object' && response != null) {\n        const writeConcernError = responses_1.MongoDBResponse.is(response) && response.has('writeConcernError')\n            ? response.toObject()\n            : !responses_1.MongoDBResponse.is(response) && 'writeConcernError' in response\n                ? response\n                : null;\n        if (writeConcernError != null) {\n            throw new error_1.MongoWriteConcernError(writeConcernError);\n        }\n    }\n}\n//# sourceMappingURL=write_concern.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21vbmdvZGJANi4xMC4wL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi93cml0ZV9jb25jZXJuLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLDBCQUEwQjtBQUNqRCxnQ0FBZ0M7QUFDaEMsb0JBQW9CLG1CQUFPLENBQUMsMklBQWdDO0FBQzVELGdCQUFnQixtQkFBTyxDQUFDLDZGQUFTO0FBQ2pDLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IscUhBQXFIO0FBQ3JJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2xpbmt1cy9HaXRodWIvbW9ub3R3by9wYXlsb2FkLXBsdWdpbi1tZXRhL25vZGVfbW9kdWxlcy8ucG5wbS9tb25nb2RiQDYuMTAuMC9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvd3JpdGVfY29uY2Vybi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuV3JpdGVDb25jZXJuID0gZXhwb3J0cy5XUklURV9DT05DRVJOX0tFWVMgPSB2b2lkIDA7XG5leHBvcnRzLnRocm93SWZXcml0ZUNvbmNlcm5FcnJvciA9IHRocm93SWZXcml0ZUNvbmNlcm5FcnJvcjtcbmNvbnN0IHJlc3BvbnNlc18xID0gcmVxdWlyZShcIi4vY21hcC93aXJlX3Byb3RvY29sL3Jlc3BvbnNlc1wiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi9lcnJvclwiKTtcbmV4cG9ydHMuV1JJVEVfQ09OQ0VSTl9LRVlTID0gWyd3JywgJ3d0aW1lb3V0JywgJ2onLCAnam91cm5hbCcsICdmc3luYyddO1xuLyoqXG4gKiBBIE1vbmdvREIgV3JpdGVDb25jZXJuLCB3aGljaCBkZXNjcmliZXMgdGhlIGxldmVsIG9mIGFja25vd2xlZGdlbWVudFxuICogcmVxdWVzdGVkIGZyb20gTW9uZ29EQiBmb3Igd3JpdGUgb3BlcmF0aW9ucy5cbiAqIEBwdWJsaWNcbiAqXG4gKiBAc2VlIGh0dHBzOi8vd3d3Lm1vbmdvZGIuY29tL2RvY3MvbWFudWFsL3JlZmVyZW5jZS93cml0ZS1jb25jZXJuL1xuICovXG5jbGFzcyBXcml0ZUNvbmNlcm4ge1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdHMgYSBXcml0ZUNvbmNlcm4gZnJvbSB0aGUgd3JpdGUgY29uY2VybiBwcm9wZXJ0aWVzLlxuICAgICAqIEBwYXJhbSB3IC0gcmVxdWVzdCBhY2tub3dsZWRnbWVudCB0aGF0IHRoZSB3cml0ZSBvcGVyYXRpb24gaGFzIHByb3BhZ2F0ZWQgdG8gYSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1vbmdvZCBpbnN0YW5jZXMgb3IgdG8gbW9uZ29kIGluc3RhbmNlcyB3aXRoIHNwZWNpZmllZCB0YWdzLlxuICAgICAqIEBwYXJhbSB3dGltZW91dE1TIC0gc3BlY2lmeSBhIHRpbWUgbGltaXQgdG8gcHJldmVudCB3cml0ZSBvcGVyYXRpb25zIGZyb20gYmxvY2tpbmcgaW5kZWZpbml0ZWx5XG4gICAgICogQHBhcmFtIGpvdXJuYWwgLSByZXF1ZXN0IGFja25vd2xlZGdtZW50IHRoYXQgdGhlIHdyaXRlIG9wZXJhdGlvbiBoYXMgYmVlbiB3cml0dGVuIHRvIHRoZSBvbi1kaXNrIGpvdXJuYWxcbiAgICAgKiBAcGFyYW0gZnN5bmMgLSBlcXVpdmFsZW50IHRvIHRoZSBqIG9wdGlvbi4gSXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24uXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iodywgd3RpbWVvdXRNUywgam91cm5hbCwgZnN5bmMpIHtcbiAgICAgICAgaWYgKHcgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKCFOdW1iZXIuaXNOYU4oTnVtYmVyKHcpKSkge1xuICAgICAgICAgICAgICAgIHRoaXMudyA9IE51bWJlcih3KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudyA9IHc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHd0aW1lb3V0TVMgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy53dGltZW91dE1TID0gdGhpcy53dGltZW91dCA9IHd0aW1lb3V0TVM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGpvdXJuYWwgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5qb3VybmFsID0gdGhpcy5qID0gam91cm5hbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZnN5bmMgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5qb3VybmFsID0gdGhpcy5qID0gZnN5bmMgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQXBwbHkgYSB3cml0ZSBjb25jZXJuIHRvIGEgY29tbWFuZCBkb2N1bWVudC4gV2lsbCBtb2RpZnkgYW5kIHJldHVybiB0aGUgY29tbWFuZC5cbiAgICAgKi9cbiAgICBzdGF0aWMgYXBwbHkoY29tbWFuZCwgd3JpdGVDb25jZXJuKSB7XG4gICAgICAgIGNvbnN0IHdjID0ge307XG4gICAgICAgIC8vIFRoZSB3cml0ZSBjb25jZXJuIGRvY3VtZW50IHNlbnQgdG8gdGhlIHNlcnZlciBoYXMgdy93dGltZW91dC9qIGZpZWxkcy5cbiAgICAgICAgaWYgKHdyaXRlQ29uY2Vybi53ICE9IG51bGwpXG4gICAgICAgICAgICB3Yy53ID0gd3JpdGVDb25jZXJuLnc7XG4gICAgICAgIGlmICh3cml0ZUNvbmNlcm4ud3RpbWVvdXRNUyAhPSBudWxsKVxuICAgICAgICAgICAgd2Mud3RpbWVvdXQgPSB3cml0ZUNvbmNlcm4ud3RpbWVvdXRNUztcbiAgICAgICAgaWYgKHdyaXRlQ29uY2Vybi5qb3VybmFsICE9IG51bGwpXG4gICAgICAgICAgICB3Yy5qID0gd3JpdGVDb25jZXJuLmo7XG4gICAgICAgIGNvbW1hbmQud3JpdGVDb25jZXJuID0gd2M7XG4gICAgICAgIHJldHVybiBjb21tYW5kO1xuICAgIH1cbiAgICAvKiogQ29uc3RydWN0IGEgV3JpdGVDb25jZXJuIGdpdmVuIGFuIG9wdGlvbnMgb2JqZWN0LiAqL1xuICAgIHN0YXRpYyBmcm9tT3B0aW9ucyhvcHRpb25zLCBpbmhlcml0KSB7XG4gICAgICAgIGlmIChvcHRpb25zID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICBpbmhlcml0ID0gaW5oZXJpdCA/PyB7fTtcbiAgICAgICAgbGV0IG9wdHM7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG9wdGlvbnMgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBvcHRzID0geyB3OiBvcHRpb25zIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3B0aW9ucyBpbnN0YW5jZW9mIFdyaXRlQ29uY2Vybikge1xuICAgICAgICAgICAgb3B0cyA9IG9wdGlvbnM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvcHRzID0gb3B0aW9ucy53cml0ZUNvbmNlcm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFyZW50T3B0cyA9IGluaGVyaXQgaW5zdGFuY2VvZiBXcml0ZUNvbmNlcm4gPyBpbmhlcml0IDogaW5oZXJpdC53cml0ZUNvbmNlcm47XG4gICAgICAgIGNvbnN0IHsgdyA9IHVuZGVmaW5lZCwgd3RpbWVvdXQgPSB1bmRlZmluZWQsIGogPSB1bmRlZmluZWQsIGZzeW5jID0gdW5kZWZpbmVkLCBqb3VybmFsID0gdW5kZWZpbmVkLCB3dGltZW91dE1TID0gdW5kZWZpbmVkIH0gPSB7XG4gICAgICAgICAgICAuLi5wYXJlbnRPcHRzLFxuICAgICAgICAgICAgLi4ub3B0c1xuICAgICAgICB9O1xuICAgICAgICBpZiAodyAhPSBudWxsIHx8XG4gICAgICAgICAgICB3dGltZW91dCAhPSBudWxsIHx8XG4gICAgICAgICAgICB3dGltZW91dE1TICE9IG51bGwgfHxcbiAgICAgICAgICAgIGogIT0gbnVsbCB8fFxuICAgICAgICAgICAgam91cm5hbCAhPSBudWxsIHx8XG4gICAgICAgICAgICBmc3luYyAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFdyaXRlQ29uY2Vybih3LCB3dGltZW91dCA/PyB3dGltZW91dE1TLCBqID8/IGpvdXJuYWwsIGZzeW5jKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn1cbmV4cG9ydHMuV3JpdGVDb25jZXJuID0gV3JpdGVDb25jZXJuO1xuLyoqIENhbGxlZCB3aXRoIGVpdGhlciBhIHBsYWluIG9iamVjdCBvciBNb25nb0RCUmVzcG9uc2UgKi9cbmZ1bmN0aW9uIHRocm93SWZXcml0ZUNvbmNlcm5FcnJvcihyZXNwb25zZSkge1xuICAgIGlmICh0eXBlb2YgcmVzcG9uc2UgPT09ICdvYmplY3QnICYmIHJlc3BvbnNlICE9IG51bGwpIHtcbiAgICAgICAgY29uc3Qgd3JpdGVDb25jZXJuRXJyb3IgPSByZXNwb25zZXNfMS5Nb25nb0RCUmVzcG9uc2UuaXMocmVzcG9uc2UpICYmIHJlc3BvbnNlLmhhcygnd3JpdGVDb25jZXJuRXJyb3InKVxuICAgICAgICAgICAgPyByZXNwb25zZS50b09iamVjdCgpXG4gICAgICAgICAgICA6ICFyZXNwb25zZXNfMS5Nb25nb0RCUmVzcG9uc2UuaXMocmVzcG9uc2UpICYmICd3cml0ZUNvbmNlcm5FcnJvcicgaW4gcmVzcG9uc2VcbiAgICAgICAgICAgICAgICA/IHJlc3BvbnNlXG4gICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICBpZiAod3JpdGVDb25jZXJuRXJyb3IgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29Xcml0ZUNvbmNlcm5FcnJvcih3cml0ZUNvbmNlcm5FcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD13cml0ZV9jb25jZXJuLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/lib/write_concern.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/package.json":
/*!******************************************************************************!*\
  !*** ../node_modules/.pnpm/mongodb@6.10.0/node_modules/mongodb/package.json ***!
  \******************************************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"name":"mongodb","version":"6.10.0","description":"The official MongoDB driver for Node.js","main":"lib/index.js","files":["lib","src","etc/prepare.js","mongodb.d.ts","tsconfig.json"],"types":"mongodb.d.ts","repository":{"type":"git","url":"git@github.com:mongodb/node-mongodb-native.git"},"keywords":["mongodb","driver","official"],"author":{"name":"The MongoDB NodeJS Team","email":"dbx-node@mongodb.com"},"dependencies":{"@mongodb-js/saslprep":"^1.1.5","bson":"^6.7.0","mongodb-connection-string-url":"^3.0.0"},"peerDependencies":{"@aws-sdk/credential-providers":"^3.188.0","@mongodb-js/zstd":"^1.1.0","gcp-metadata":"^5.2.0","kerberos":"^2.0.1","mongodb-client-encryption":">=6.0.0 <7","snappy":"^7.2.2","socks":"^2.7.1"},"peerDependenciesMeta":{"@aws-sdk/credential-providers":{"optional":true},"@mongodb-js/zstd":{"optional":true},"kerberos":{"optional":true},"snappy":{"optional":true},"mongodb-client-encryption":{"optional":true},"gcp-metadata":{"optional":true},"socks":{"optional":true}},"devDependencies":{"@aws-sdk/credential-providers":"^3.632.0","@iarna/toml":"^2.2.5","@istanbuljs/nyc-config-typescript":"^1.0.2","@microsoft/api-extractor":"^7.47.5","@microsoft/tsdoc-config":"^0.17.0","@mongodb-js/zstd":"^1.2.0","@types/chai":"^4.3.17","@types/chai-subset":"^1.3.5","@types/express":"^4.17.21","@types/kerberos":"^1.1.5","@types/mocha":"^10.0.7","@types/node":"^22.4.1","@types/saslprep":"^1.0.3","@types/semver":"^7.5.8","@types/sinon":"^17.0.3","@types/sinon-chai":"^3.2.12","@types/whatwg-url":"^11.0.5","@typescript-eslint/eslint-plugin":"^8.2.0","@typescript-eslint/parser":"^8.2.0","chai":"^4.4.1","chai-subset":"^1.6.0","chalk":"^4.1.2","eslint":"^9.0.0","eslint-config-prettier":"^9.1.0","eslint-plugin-mocha":"^10.4.1","eslint-plugin-prettier":"^5.2.1","eslint-plugin-simple-import-sort":"^12.1.1","eslint-plugin-tsdoc":"^0.3.0","eslint-plugin-unused-imports":"^4.0.0","express":"^4.19.2","gcp-metadata":"^5.3.0","js-yaml":"^4.1.0","mocha":"^10.4.0","mocha-sinon":"^2.1.2","mongodb-client-encryption":"^6.1.0","mongodb-legacy":"^6.1.0","nyc":"^15.1.0","prettier":"^3.3.3","semver":"^7.6.3","sinon":"^18.0.0","sinon-chai":"^3.7.0","snappy":"^7.2.2","socks":"^2.8.1","source-map-support":"^0.5.21","ts-node":"^10.9.2","tsd":"^0.31.1","typescript":"5.5","typescript-cached-transpile":"^0.0.6","v8-heapsnapshot":"^1.3.1","yargs":"^17.7.2"},"license":"Apache-2.0","engines":{"node":">=16.20.1"},"bugs":{"url":"https://jira.mongodb.org/projects/NODE/issues/"},"homepage":"https://github.com/mongodb/node-mongodb-native","scripts":{"build:evergreen":"node .evergreen/generate_evergreen_tasks.js","build:ts":"node ./node_modules/typescript/bin/tsc","build:dts":"npm run build:ts && api-extractor run && node etc/clean_definition_files.cjs && ESLINT_USE_FLAT_CONFIG=false eslint --no-ignore --fix mongodb.d.ts lib/beta.d.ts","build:docs":"./etc/docs/build.ts","build:typedoc":"typedoc","build:nightly":"node ./.github/scripts/nightly.mjs","check:bench":"node test/benchmarks/driverBench","check:coverage":"nyc npm run test:all","check:integration-coverage":"nyc npm run check:test","check:lambda":"mocha --config test/mocha_lambda.json test/integration/node-specific/examples/handler.test.js","check:lambda:aws":"mocha --config test/mocha_lambda.json test/integration/node-specific/examples/aws_handler.test.js","check:lint":"npm run build:dts && npm run check:dts && npm run check:eslint && npm run check:tsd","check:eslint":"npm run build:dts && ESLINT_USE_FLAT_CONFIG=false eslint -v && ESLINT_USE_FLAT_CONFIG=false eslint --max-warnings=0 --ext \'.js,.ts\' src test","check:tsd":"tsd --version && tsd","check:dependencies":"mocha test/action/dependency.test.ts","check:dts":"node ./node_modules/typescript/bin/tsc --noEmit mongodb.d.ts && tsd","check:search-indexes":"nyc mocha --config test/mocha_mongodb.json test/manual/search-index-management.prose.test.ts","check:test":"mocha --config test/mocha_mongodb.json test/integration","check:unit":"mocha test/unit","check:ts":"node ./node_modules/typescript/bin/tsc -v && node ./node_modules/typescript/bin/tsc --noEmit","check:atlas":"mocha --config test/manual/mocharc.json test/manual/atlas_connectivity.test.ts","check:resource-management":"mocha --config test/manual/mocharc.json test/manual/resource_management.test.ts","check:drivers-atlas-testing":"mocha --config test/mocha_mongodb.json test/atlas/drivers_atlas_testing.test.ts","check:adl":"mocha --config test/mocha_mongodb.json test/manual/atlas-data-lake-testing","check:aws":"nyc mocha --config test/mocha_mongodb.json test/integration/auth/mongodb_aws.test.ts","check:oidc-auth":"mocha --config test/mocha_mongodb.json test/integration/auth/auth.spec.test.ts","check:oidc-test":"mocha --config test/mocha_mongodb.json test/integration/auth/mongodb_oidc.prose.test.ts","check:oidc-azure":"mocha --config test/mocha_mongodb.json test/integration/auth/mongodb_oidc_azure.prose.05.test.ts","check:oidc-gcp":"mocha --config test/mocha_mongodb.json test/integration/auth/mongodb_oidc_gcp.prose.06.test.ts","check:ocsp":"mocha --config test/manual/mocharc.json test/manual/ocsp_support.test.js","check:kerberos":"nyc mocha --config test/manual/mocharc.json test/manual/kerberos.test.ts","check:tls":"mocha --config test/manual/mocharc.json test/manual/tls_support.test.ts","check:ldap":"nyc mocha --config test/manual/mocharc.json test/manual/ldap.test.js","check:socks5":"mocha --config test/manual/mocharc.json test/manual/socks5.test.ts","check:csfle":"mocha --config test/mocha_mongodb.json test/integration/client-side-encryption","check:snappy":"mocha test/unit/assorted/snappy.test.js","check:x509":"mocha test/manual/x509_auth.test.ts","fix:eslint":"npm run check:eslint -- --fix","prepare":"node etc/prepare.js","preview:docs":"ts-node etc/docs/preview.ts","test":"npm run check:lint && npm run test:all","test:all":"npm run check:unit && npm run check:test","update:docs":"npm run build:docs -- --yes"},"tsd":{"directory":"test/types","compilerOptions":{"strict":true,"target":"esnext","module":"commonjs","moduleResolution":"node"}}}');

/***/ })

};
;
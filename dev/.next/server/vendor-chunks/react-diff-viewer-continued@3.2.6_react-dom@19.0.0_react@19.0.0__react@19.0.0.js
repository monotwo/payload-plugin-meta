"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-diff-viewer-continued@3.2.6_react-dom@19.0.0_react@19.0.0__react@19.0.0";
exports.ids = ["vendor-chunks/react-diff-viewer-continued@3.2.6_react-dom@19.0.0_react@19.0.0__react@19.0.0"];
exports.modules = {

/***/ "(ssr)/../node_modules/.pnpm/react-diff-viewer-continued@3.2.6_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/react-diff-viewer-continued/lib/compute-lines.js":
/*!*************************************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/react-diff-viewer-continued@3.2.6_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/react-diff-viewer-continued/lib/compute-lines.js ***!
  \*************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.computeLineInformation = exports.DiffMethod = exports.DiffType = void 0;\nconst diff = __webpack_require__(/*! diff */ \"(ssr)/../node_modules/.pnpm/diff@5.2.0/node_modules/diff/lib/index.js\");\nconst jsDiff = diff;\nvar DiffType;\n(function (DiffType) {\n    DiffType[DiffType[\"DEFAULT\"] = 0] = \"DEFAULT\";\n    DiffType[DiffType[\"ADDED\"] = 1] = \"ADDED\";\n    DiffType[DiffType[\"REMOVED\"] = 2] = \"REMOVED\";\n    DiffType[DiffType[\"CHANGED\"] = 3] = \"CHANGED\";\n})(DiffType = exports.DiffType || (exports.DiffType = {}));\n// See https://github.com/kpdecker/jsdiff/tree/v4.0.1#api for more info on the below JsDiff methods\nvar DiffMethod;\n(function (DiffMethod) {\n    DiffMethod[\"CHARS\"] = \"diffChars\";\n    DiffMethod[\"WORDS\"] = \"diffWords\";\n    DiffMethod[\"WORDS_WITH_SPACE\"] = \"diffWordsWithSpace\";\n    DiffMethod[\"LINES\"] = \"diffLines\";\n    DiffMethod[\"TRIMMED_LINES\"] = \"diffTrimmedLines\";\n    DiffMethod[\"SENTENCES\"] = \"diffSentences\";\n    DiffMethod[\"CSS\"] = \"diffCss\";\n    DiffMethod[\"JSON\"] = \"diffJson\";\n})(DiffMethod = exports.DiffMethod || (exports.DiffMethod = {}));\n/**\n * Splits diff text by new line and computes final list of diff lines based on\n * conditions.\n *\n * @param value Diff text from the js diff module.\n */\nconst constructLines = (value) => {\n    if (value === '')\n        return [];\n    const lines = value.replace(/\\n$/, '').split('\\n');\n    return lines;\n};\n/**\n * Computes word diff information in the line.\n * [TODO]: Consider adding options argument for JsDiff text block comparison\n *\n * @param oldValue Old word in the line.\n * @param newValue New word in the line.\n * @param compareMethod JsDiff text diff method from https://github.com/kpdecker/jsdiff/tree/v4.0.1#api\n */\nconst computeDiff = (oldValue, newValue, compareMethod = DiffMethod.CHARS) => {\n    const diffArray = jsDiff[compareMethod](oldValue, newValue);\n    const computedDiff = {\n        left: [],\n        right: [],\n    };\n    diffArray.forEach(({ added, removed, value }) => {\n        const diffInformation = {};\n        if (added) {\n            diffInformation.type = DiffType.ADDED;\n            diffInformation.value = value;\n            computedDiff.right.push(diffInformation);\n        }\n        if (removed) {\n            diffInformation.type = DiffType.REMOVED;\n            diffInformation.value = value;\n            computedDiff.left.push(diffInformation);\n        }\n        if (!removed && !added) {\n            diffInformation.type = DiffType.DEFAULT;\n            diffInformation.value = value;\n            computedDiff.right.push(diffInformation);\n            computedDiff.left.push(diffInformation);\n        }\n        return diffInformation;\n    });\n    return computedDiff;\n};\n/**\n * [TODO]: Think about moving common left and right value assignment to a\n * common place. Better readability?\n *\n * Computes line wise information based in the js diff information passed. Each\n * line contains information about left and right section. Left side denotes\n * deletion and right side denotes addition.\n *\n * @param oldString Old string to compare.\n * @param newString New string to compare with old string.\n * @param disableWordDiff Flag to enable/disable word diff.\n * @param lineCompareMethod JsDiff text diff method from https://github.com/kpdecker/jsdiff/tree/v4.0.1#api\n * @param linesOffset line number to start counting from\n */\nconst computeLineInformation = (oldString, newString, disableWordDiff = false, lineCompareMethod = DiffMethod.CHARS, linesOffset = 0) => {\n    let diffArray = [];\n    // Use diffLines for strings, and diffJson for objects...\n    if (typeof oldString === 'string' && typeof newString === 'string') {\n        diffArray = diff.diffLines(oldString.trimRight(), newString.trimRight(), {\n            newlineIsToken: false,\n            ignoreWhitespace: false,\n            ignoreCase: false,\n        });\n    }\n    else {\n        diffArray = diff.diffJson(oldString, newString);\n    }\n    let rightLineNumber = linesOffset;\n    let leftLineNumber = linesOffset;\n    let lineInformation = [];\n    let counter = 0;\n    const diffLines = [];\n    const ignoreDiffIndexes = [];\n    const getLineInformation = (value, diffIndex, added, removed, evaluateOnlyFirstLine) => {\n        const lines = constructLines(value);\n        return lines\n            .map((line, lineIndex) => {\n            const left = {};\n            const right = {};\n            if (ignoreDiffIndexes.includes(`${diffIndex}-${lineIndex}`) ||\n                (evaluateOnlyFirstLine && lineIndex !== 0)) {\n                return undefined;\n            }\n            if (added || removed) {\n                let countAsChange = true;\n                if (removed) {\n                    leftLineNumber += 1;\n                    left.lineNumber = leftLineNumber;\n                    left.type = DiffType.REMOVED;\n                    left.value = line || ' ';\n                    // When the current line is of type REMOVED, check the next item in\n                    // the diff array whether it is of type ADDED. If true, the current\n                    // diff will be marked as both REMOVED and ADDED. Meaning, the\n                    // current line is a modification.\n                    const nextDiff = diffArray[diffIndex + 1];\n                    if (nextDiff && nextDiff.added) {\n                        const nextDiffLines = constructLines(nextDiff.value)[lineIndex];\n                        if (nextDiffLines) {\n                            const nextDiffLineInfo = getLineInformation(nextDiffLines, diffIndex, true, false, true);\n                            const { value: rightValue, lineNumber, type, } = nextDiffLineInfo[0].right;\n                            // When identified as modification, push the next diff to ignore\n                            // list as the next value will be added in this line computation as\n                            // right and left values.\n                            ignoreDiffIndexes.push(`${diffIndex + 1}-${lineIndex}`);\n                            right.lineNumber = lineNumber;\n                            if (left.value === rightValue) {\n                                // The new value is exactly the same as the old\n                                countAsChange = false;\n                                right.type = 0;\n                                left.type = 0;\n                                right.value = rightValue;\n                            }\n                            else {\n                                right.type = type;\n                                // Do char level diff and assign the corresponding values to the\n                                // left and right diff information object.\n                                if (disableWordDiff) {\n                                    right.value = rightValue;\n                                }\n                                else {\n                                    const computedDiff = computeDiff(line, rightValue, lineCompareMethod);\n                                    right.value = computedDiff.right;\n                                    left.value = computedDiff.left;\n                                }\n                            }\n                        }\n                    }\n                }\n                else {\n                    rightLineNumber += 1;\n                    right.lineNumber = rightLineNumber;\n                    right.type = DiffType.ADDED;\n                    right.value = line;\n                }\n                if (countAsChange && !evaluateOnlyFirstLine) {\n                    if (!diffLines.includes(counter)) {\n                        diffLines.push(counter);\n                    }\n                }\n            }\n            else {\n                leftLineNumber += 1;\n                rightLineNumber += 1;\n                left.lineNumber = leftLineNumber;\n                left.type = DiffType.DEFAULT;\n                left.value = line;\n                right.lineNumber = rightLineNumber;\n                right.type = DiffType.DEFAULT;\n                right.value = line;\n            }\n            if (!evaluateOnlyFirstLine) {\n                counter += 1;\n            }\n            return { right, left };\n        })\n            .filter(Boolean);\n    };\n    diffArray.forEach(({ added, removed, value }, index) => {\n        lineInformation = [\n            ...lineInformation,\n            ...getLineInformation(value, index, added, removed),\n        ];\n    });\n    return {\n        lineInformation,\n        diffLines,\n    };\n};\nexports.computeLineInformation = computeLineInformation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/react-diff-viewer-continued@3.2.6_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/react-diff-viewer-continued/lib/compute-lines.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/react-diff-viewer-continued@3.2.6_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/react-diff-viewer-continued/lib/index.js":
/*!*****************************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/react-diff-viewer-continued@3.2.6_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/react-diff-viewer-continued/lib/index.js ***!
  \*****************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DiffMethod = exports.LineNumberPrefix = void 0;\nconst React = __webpack_require__(/*! react */ \"(ssr)/../node_modules/.pnpm/next@15.1.0_@babel+core@7.26.0_babel-plugin-macros@3.1.0_react-dom@19.0.0_react@19.0.0__react@19.0.0_sass@1.77.4/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\nconst PropTypes = __webpack_require__(/*! prop-types */ \"(ssr)/../node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/index.js\");\nconst classnames_1 = __webpack_require__(/*! classnames */ \"(ssr)/../node_modules/.pnpm/classnames@2.5.1/node_modules/classnames/index.js\");\nconst compute_lines_1 = __webpack_require__(/*! ./compute-lines */ \"(ssr)/../node_modules/.pnpm/react-diff-viewer-continued@3.2.6_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/react-diff-viewer-continued/lib/compute-lines.js\");\nObject.defineProperty(exports, \"DiffMethod\", ({ enumerable: true, get: function () { return compute_lines_1.DiffMethod; } }));\nconst styles_1 = __webpack_require__(/*! ./styles */ \"(ssr)/../node_modules/.pnpm/react-diff-viewer-continued@3.2.6_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/react-diff-viewer-continued/lib/styles.js\");\nconst m = __webpack_require__(/*! memoize-one */ \"(ssr)/../node_modules/.pnpm/memoize-one@6.0.0/node_modules/memoize-one/dist/memoize-one.esm.js\");\nconst memoize = m.default || m;\nvar LineNumberPrefix;\n(function (LineNumberPrefix) {\n    LineNumberPrefix[\"LEFT\"] = \"L\";\n    LineNumberPrefix[\"RIGHT\"] = \"R\";\n})(LineNumberPrefix = exports.LineNumberPrefix || (exports.LineNumberPrefix = {}));\nclass DiffViewer extends React.Component {\n    constructor(props) {\n        super(props);\n        /**\n         * Resets code block expand to the initial stage. Will be exposed to the parent component via\n         * refs.\n         */\n        this.resetCodeBlocks = () => {\n            if (this.state.expandedBlocks.length > 0) {\n                this.setState({\n                    expandedBlocks: [],\n                });\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Pushes the target expanded code block to the state. During the re-render,\n         * this value is used to expand/fold unmodified code.\n         */\n        this.onBlockExpand = (id) => {\n            const prevState = this.state.expandedBlocks.slice();\n            prevState.push(id);\n            this.setState({\n                expandedBlocks: prevState,\n            });\n        };\n        /**\n         * Computes final styles for the diff viewer. It combines the default styles with the user\n         * supplied overrides. The computed styles are cached with performance in mind.\n         *\n         * @param styles User supplied style overrides.\n         */\n        this.computeStyles = memoize(styles_1.default);\n        /**\n         * Returns a function with clicked line number in the closure. Returns an no-op function when no\n         * onLineNumberClick handler is supplied.\n         *\n         * @param id Line id of a line.\n         */\n        this.onLineNumberClickProxy = (id) => {\n            if (this.props.onLineNumberClick) {\n                return (e) => this.props.onLineNumberClick(id, e);\n            }\n            return () => { };\n        };\n        /**\n         * Maps over the word diff and constructs the required React elements to show word diff.\n         *\n         * @param diffArray Word diff information derived from line information.\n         * @param renderer Optional renderer to format diff words. Useful for syntax highlighting.\n         */\n        this.renderWordDiff = (diffArray, renderer) => {\n            return diffArray.map((wordDiff, i) => {\n                return (React.createElement(\"span\", { key: i, className: (0, classnames_1.default)(this.styles.wordDiff, {\n                        [this.styles.wordAdded]: wordDiff.type === compute_lines_1.DiffType.ADDED,\n                        [this.styles.wordRemoved]: wordDiff.type === compute_lines_1.DiffType.REMOVED,\n                    }) }, renderer ? renderer(wordDiff.value) : wordDiff.value));\n            });\n        };\n        /**\n         * Maps over the line diff and constructs the required react elements to show line diff. It calls\n         * renderWordDiff when encountering word diff. This takes care of both inline and split view line\n         * renders.\n         *\n         * @param lineNumber Line number of the current line.\n         * @param type Type of diff of the current line.\n         * @param prefix Unique id to prefix with the line numbers.\n         * @param value Content of the line. It can be a string or a word diff array.\n         * @param additionalLineNumber Additional line number to be shown. Useful for rendering inline\n         *  diff view. Right line number will be passed as additionalLineNumber.\n         * @param additionalPrefix Similar to prefix but for additional line number.\n         */\n        this.renderLine = (lineNumber, type, prefix, value, additionalLineNumber, additionalPrefix) => {\n            const lineNumberTemplate = `${prefix}-${lineNumber}`;\n            const additionalLineNumberTemplate = `${additionalPrefix}-${additionalLineNumber}`;\n            const highlightLine = this.props.highlightLines.includes(lineNumberTemplate) ||\n                this.props.highlightLines.includes(additionalLineNumberTemplate);\n            const added = type === compute_lines_1.DiffType.ADDED;\n            const removed = type === compute_lines_1.DiffType.REMOVED;\n            const changed = type === compute_lines_1.DiffType.CHANGED;\n            let content;\n            if (Array.isArray(value)) {\n                content = this.renderWordDiff(value, this.props.renderContent);\n            }\n            else if (this.props.renderContent) {\n                content = this.props.renderContent(value);\n            }\n            else {\n                content = value;\n            }\n            return (React.createElement(React.Fragment, null,\n                !this.props.hideLineNumbers && (React.createElement(\"td\", { onClick: lineNumber && this.onLineNumberClickProxy(lineNumberTemplate), className: (0, classnames_1.default)(this.styles.gutter, {\n                        [this.styles.emptyGutter]: !lineNumber,\n                        [this.styles.diffAdded]: added,\n                        [this.styles.diffRemoved]: removed,\n                        [this.styles.diffChanged]: changed,\n                        [this.styles.highlightedGutter]: highlightLine,\n                    }) },\n                    React.createElement(\"pre\", { className: this.styles.lineNumber }, lineNumber))),\n                !this.props.splitView && !this.props.hideLineNumbers && (React.createElement(\"td\", { onClick: additionalLineNumber &&\n                        this.onLineNumberClickProxy(additionalLineNumberTemplate), className: (0, classnames_1.default)(this.styles.gutter, {\n                        [this.styles.emptyGutter]: !additionalLineNumber,\n                        [this.styles.diffAdded]: added,\n                        [this.styles.diffRemoved]: removed,\n                        [this.styles.diffChanged]: changed,\n                        [this.styles.highlightedGutter]: highlightLine,\n                    }) },\n                    React.createElement(\"pre\", { className: this.styles.lineNumber }, additionalLineNumber))),\n                this.props.renderGutter\n                    ? this.props.renderGutter({\n                        lineNumber,\n                        type,\n                        prefix,\n                        value,\n                        additionalLineNumber,\n                        additionalPrefix,\n                        styles: this.styles,\n                    })\n                    : null,\n                React.createElement(\"td\", { className: (0, classnames_1.default)(this.styles.marker, {\n                        [this.styles.emptyLine]: !content,\n                        [this.styles.diffAdded]: added,\n                        [this.styles.diffRemoved]: removed,\n                        [this.styles.diffChanged]: changed,\n                        [this.styles.highlightedLine]: highlightLine,\n                    }) },\n                    React.createElement(\"pre\", null,\n                        added && '+',\n                        removed && '-')),\n                React.createElement(\"td\", { className: (0, classnames_1.default)(this.styles.content, {\n                        [this.styles.emptyLine]: !content,\n                        [this.styles.diffAdded]: added,\n                        [this.styles.diffRemoved]: removed,\n                        [this.styles.diffChanged]: changed,\n                        [this.styles.highlightedLine]: highlightLine,\n                    }) },\n                    React.createElement(\"pre\", { className: this.styles.contentText }, content))));\n        };\n        /**\n         * Generates lines for split view.\n         *\n         * @param obj Line diff information.\n         * @param obj.left Life diff information for the left pane of the split view.\n         * @param obj.right Life diff information for the right pane of the split view.\n         * @param index React key for the lines.\n         */\n        this.renderSplitView = ({ left, right }, index) => {\n            return (React.createElement(\"tr\", { key: index, className: this.styles.line },\n                this.renderLine(left.lineNumber, left.type, LineNumberPrefix.LEFT, left.value),\n                this.renderLine(right.lineNumber, right.type, LineNumberPrefix.RIGHT, right.value)));\n        };\n        /**\n         * Generates lines for inline view.\n         *\n         * @param obj Line diff information.\n         * @param obj.left Life diff information for the added section of the inline view.\n         * @param obj.right Life diff information for the removed section of the inline view.\n         * @param index React key for the lines.\n         */\n        this.renderInlineView = ({ left, right }, index) => {\n            let content;\n            if (left.type === compute_lines_1.DiffType.REMOVED && right.type === compute_lines_1.DiffType.ADDED) {\n                return (React.createElement(React.Fragment, { key: index },\n                    React.createElement(\"tr\", { className: this.styles.line }, this.renderLine(left.lineNumber, left.type, LineNumberPrefix.LEFT, left.value, null)),\n                    React.createElement(\"tr\", { className: this.styles.line }, this.renderLine(null, right.type, LineNumberPrefix.RIGHT, right.value, right.lineNumber))));\n            }\n            if (left.type === compute_lines_1.DiffType.REMOVED) {\n                content = this.renderLine(left.lineNumber, left.type, LineNumberPrefix.LEFT, left.value, null);\n            }\n            if (left.type === compute_lines_1.DiffType.DEFAULT) {\n                content = this.renderLine(left.lineNumber, left.type, LineNumberPrefix.LEFT, left.value, right.lineNumber, LineNumberPrefix.RIGHT);\n            }\n            if (right.type === compute_lines_1.DiffType.ADDED) {\n                content = this.renderLine(null, right.type, LineNumberPrefix.RIGHT, right.value, right.lineNumber);\n            }\n            return (React.createElement(\"tr\", { key: index, className: this.styles.line }, content));\n        };\n        /**\n         * Returns a function with clicked block number in the closure.\n         *\n         * @param id Cold fold block id.\n         */\n        this.onBlockClickProxy = (id) => () => this.onBlockExpand(id);\n        /**\n         * Generates cold fold block. It also uses the custom message renderer when available to show\n         * cold fold messages.\n         *\n         * @param num Number of skipped lines between two blocks.\n         * @param blockNumber Code fold block id.\n         * @param leftBlockLineNumber First left line number after the current code fold block.\n         * @param rightBlockLineNumber First right line number after the current code fold block.\n         */\n        this.renderSkippedLineIndicator = (num, blockNumber, leftBlockLineNumber, rightBlockLineNumber) => {\n            const { hideLineNumbers, splitView } = this.props;\n            const message = this.props.codeFoldMessageRenderer ? (this.props.codeFoldMessageRenderer(num, leftBlockLineNumber, rightBlockLineNumber)) : (React.createElement(\"pre\", { className: this.styles.codeFoldContent },\n                \"Expand \",\n                num,\n                \" lines ...\"));\n            const content = (React.createElement(\"td\", null,\n                React.createElement(\"a\", { onClick: this.onBlockClickProxy(blockNumber), tabIndex: 0 }, message)));\n            const isUnifiedViewWithoutLineNumbers = !splitView && !hideLineNumbers;\n            return (React.createElement(\"tr\", { key: `${leftBlockLineNumber}-${rightBlockLineNumber}`, className: this.styles.codeFold },\n                !hideLineNumbers && React.createElement(\"td\", { className: this.styles.codeFoldGutter }),\n                this.props.renderGutter ? (React.createElement(\"td\", { className: this.styles.codeFoldGutter })) : null,\n                React.createElement(\"td\", { className: (0, classnames_1.default)({\n                        [this.styles.codeFoldGutter]: isUnifiedViewWithoutLineNumbers,\n                    }) }),\n                isUnifiedViewWithoutLineNumbers ? (React.createElement(React.Fragment, null,\n                    React.createElement(\"td\", null),\n                    content)) : (React.createElement(React.Fragment, null,\n                    content,\n                    this.props.renderGutter ? React.createElement(\"td\", null) : null,\n                    React.createElement(\"td\", null))),\n                React.createElement(\"td\", null),\n                React.createElement(\"td\", null)));\n        };\n        /**\n         * Generates the entire diff view.\n         */\n        this.renderDiff = () => {\n            const { oldValue, newValue, splitView, disableWordDiff, compareMethod, linesOffset, } = this.props;\n            const { lineInformation, diffLines } = (0, compute_lines_1.computeLineInformation)(oldValue, newValue, disableWordDiff, compareMethod, linesOffset);\n            const extraLines = this.props.extraLinesSurroundingDiff < 0\n                ? 0\n                : this.props.extraLinesSurroundingDiff;\n            let skippedLines = [];\n            return lineInformation.map((line, i) => {\n                const diffBlockStart = diffLines[0];\n                const currentPosition = diffBlockStart - i;\n                if (this.props.showDiffOnly) {\n                    if (currentPosition === -extraLines) {\n                        skippedLines = [];\n                        diffLines.shift();\n                    }\n                    if (line.left.type === compute_lines_1.DiffType.DEFAULT &&\n                        (currentPosition > extraLines ||\n                            typeof diffBlockStart === 'undefined') &&\n                        !this.state.expandedBlocks.includes(diffBlockStart)) {\n                        skippedLines.push(i + 1);\n                        // show skipped line indicator only if there is more than one line to hide\n                        if (i === lineInformation.length - 1 && skippedLines.length > 1) {\n                            return this.renderSkippedLineIndicator(skippedLines.length, diffBlockStart, line.left.lineNumber, line.right.lineNumber);\n                            // if we are trying to hide the last line, just show it\n                        }\n                        else if (i < lineInformation.length - 1) {\n                            return null;\n                        }\n                    }\n                }\n                const diffNodes = splitView\n                    ? this.renderSplitView(line, i)\n                    : this.renderInlineView(line, i);\n                if (currentPosition === extraLines && skippedLines.length > 0) {\n                    const { length } = skippedLines;\n                    skippedLines = [];\n                    return (React.createElement(React.Fragment, { key: i },\n                        this.renderSkippedLineIndicator(length, diffBlockStart, line.left.lineNumber, line.right.lineNumber),\n                        diffNodes));\n                }\n                return diffNodes;\n            });\n        };\n        this.render = () => {\n            const { oldValue, newValue, useDarkTheme, leftTitle, rightTitle, splitView, hideLineNumbers, } = this.props;\n            if (this.props.compareMethod !== compute_lines_1.DiffMethod.JSON) {\n                if (typeof oldValue !== 'string' || typeof newValue !== 'string') {\n                    throw Error('\"oldValue\" and \"newValue\" should be strings');\n                }\n            }\n            this.styles = this.computeStyles(this.props.styles, useDarkTheme);\n            const nodes = this.renderDiff();\n            const colSpanOnSplitView = hideLineNumbers ? 2 : 3;\n            const colSpanOnInlineView = hideLineNumbers ? 2 : 4;\n            let columnExtension = this.props.renderGutter ? 1 : 0;\n            const title = (leftTitle || rightTitle) && (React.createElement(\"tr\", null,\n                React.createElement(\"td\", { colSpan: (splitView ? colSpanOnSplitView : colSpanOnInlineView) +\n                        columnExtension, className: this.styles.titleBlock },\n                    React.createElement(\"pre\", { className: this.styles.contentText }, leftTitle)),\n                splitView && (React.createElement(\"td\", { colSpan: colSpanOnSplitView + columnExtension, className: this.styles.titleBlock },\n                    React.createElement(\"pre\", { className: this.styles.contentText }, rightTitle)))));\n            return (React.createElement(\"table\", { className: (0, classnames_1.default)(this.styles.diffContainer, {\n                    [this.styles.splitView]: splitView,\n                }) },\n                React.createElement(\"tbody\", null,\n                    title,\n                    nodes)));\n        };\n        this.state = {\n            expandedBlocks: [],\n        };\n    }\n}\nDiffViewer.defaultProps = {\n    oldValue: '',\n    newValue: '',\n    splitView: true,\n    highlightLines: [],\n    disableWordDiff: false,\n    compareMethod: compute_lines_1.DiffMethod.CHARS,\n    styles: {},\n    hideLineNumbers: false,\n    extraLinesSurroundingDiff: 3,\n    showDiffOnly: true,\n    useDarkTheme: false,\n    linesOffset: 0,\n};\nDiffViewer.propTypes = {\n    oldValue: PropTypes.any.isRequired,\n    newValue: PropTypes.any.isRequired,\n    splitView: PropTypes.bool,\n    disableWordDiff: PropTypes.bool,\n    compareMethod: PropTypes.oneOf(Object.values(compute_lines_1.DiffMethod)),\n    renderContent: PropTypes.func,\n    renderGutter: PropTypes.func,\n    onLineNumberClick: PropTypes.func,\n    extraLinesSurroundingDiff: PropTypes.number,\n    styles: PropTypes.object,\n    hideLineNumbers: PropTypes.bool,\n    showDiffOnly: PropTypes.bool,\n    highlightLines: PropTypes.arrayOf(PropTypes.string),\n    leftTitle: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    rightTitle: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    linesOffset: PropTypes.number,\n};\nexports[\"default\"] = DiffViewer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/react-diff-viewer-continued@3.2.6_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/react-diff-viewer-continued/lib/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/react-diff-viewer-continued@3.2.6_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/react-diff-viewer-continued/lib/styles.js":
/*!******************************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/react-diff-viewer-continued@3.2.6_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/react-diff-viewer-continued/lib/styles.js ***!
  \******************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst css_1 = __webpack_require__(/*! @emotion/css */ \"(ssr)/../node_modules/.pnpm/@emotion+css@11.13.5/node_modules/@emotion/css/dist/emotion-css.development.esm.js\");\n// eslint-disable-next-line import/no-anonymous-default-export\nexports[\"default\"] = (styleOverride, useDarkTheme = false) => {\n    const { variables: overrideVariables = {} } = styleOverride, styles = __rest(styleOverride, [\"variables\"]);\n    const themeVariables = {\n        light: Object.assign({\n            diffViewerBackground: '#fff',\n            diffViewerColor: '#212529',\n            addedBackground: '#e6ffed',\n            addedColor: '#24292e',\n            removedBackground: '#ffeef0',\n            removedColor: '#24292e',\n            changedBackground: '#fffbdd',\n            wordAddedBackground: '#acf2bd',\n            wordRemovedBackground: '#fdb8c0',\n            addedGutterBackground: '#cdffd8',\n            removedGutterBackground: '#ffdce0',\n            gutterBackground: '#f7f7f7',\n            gutterBackgroundDark: '#f3f1f1',\n            highlightBackground: '#fffbdd',\n            highlightGutterBackground: '#fff5b1',\n            codeFoldGutterBackground: '#dbedff',\n            codeFoldBackground: '#f1f8ff',\n            emptyLineBackground: '#fafbfc',\n            gutterColor: '#212529',\n            addedGutterColor: '#212529',\n            removedGutterColor: '#212529',\n            codeFoldContentColor: '#212529',\n            diffViewerTitleBackground: '#fafbfc',\n            diffViewerTitleColor: '#212529',\n            diffViewerTitleBorderColor: '#eee',\n        }, (overrideVariables.light || {})),\n        dark: Object.assign({\n            diffViewerBackground: '#2e303c',\n            diffViewerColor: '#FFF',\n            addedBackground: '#044B53',\n            addedColor: 'white',\n            removedBackground: '#632F34',\n            removedColor: 'white',\n            changedBackground: '#3e302c',\n            wordAddedBackground: '#055d67',\n            wordRemovedBackground: '#7d383f',\n            addedGutterBackground: '#034148',\n            removedGutterBackground: '#632b30',\n            gutterBackground: '#2c2f3a',\n            gutterBackgroundDark: '#262933',\n            highlightBackground: '#2a3967',\n            highlightGutterBackground: '#2d4077',\n            codeFoldGutterBackground: '#21232b',\n            codeFoldBackground: '#262831',\n            emptyLineBackground: '#363946',\n            gutterColor: '#666c87',\n            addedGutterColor: '#8c8c8c',\n            removedGutterColor: '#8c8c8c',\n            codeFoldContentColor: '#656a8b',\n            diffViewerTitleBackground: '#2f323e',\n            diffViewerTitleColor: '#555a7b',\n            diffViewerTitleBorderColor: '#353846',\n        }, (overrideVariables.dark || {})),\n    };\n    const variables = useDarkTheme ? themeVariables.dark : themeVariables.light;\n    const content = (0, css_1.css)({\n        width: '100%',\n        label: 'content',\n    });\n    const splitView = (0, css_1.css)({\n        [`.${content}`]: {\n            width: '50%',\n        },\n        label: 'split-view',\n    });\n    const diffContainer = (0, css_1.css)({\n        width: '100%',\n        background: variables.diffViewerBackground,\n        pre: {\n            margin: 0,\n            whiteSpace: 'pre-wrap',\n            lineHeight: '25px',\n        },\n        label: 'diff-container',\n        borderCollapse: 'collapse',\n    });\n    const codeFoldContent = (0, css_1.css)({\n        color: variables.codeFoldContentColor,\n        label: 'code-fold-content',\n    });\n    const contentText = (0, css_1.css)({\n        color: variables.diffViewerColor,\n        label: 'content-text',\n    });\n    const titleBlock = (0, css_1.css)({\n        background: variables.diffViewerTitleBackground,\n        padding: 10,\n        borderBottom: `1px solid ${variables.diffViewerTitleBorderColor}`,\n        label: 'title-block',\n        ':last-child': {\n            borderLeft: `1px solid ${variables.diffViewerTitleBorderColor}`,\n        },\n        [`.${contentText}`]: {\n            color: variables.diffViewerTitleColor,\n        },\n    });\n    const lineNumber = (0, css_1.css)({\n        color: variables.gutterColor,\n        label: 'line-number',\n    });\n    const diffRemoved = (0, css_1.css)({\n        background: variables.removedBackground,\n        color: variables.removedColor,\n        pre: {\n            color: variables.removedColor,\n        },\n        [`.${lineNumber}`]: {\n            color: variables.removedGutterColor,\n        },\n        label: 'diff-removed',\n    });\n    const diffAdded = (0, css_1.css)({\n        background: variables.addedBackground,\n        color: variables.addedColor,\n        pre: {\n            color: variables.addedColor,\n        },\n        [`.${lineNumber}`]: {\n            color: variables.addedGutterColor,\n        },\n        label: 'diff-added',\n    });\n    const diffChanged = (0, css_1.css)({\n        background: variables.changedBackground,\n        [`.${lineNumber}`]: {\n            color: variables.gutterColor,\n        },\n        label: 'diff-changed',\n    });\n    const wordDiff = (0, css_1.css)({\n        padding: 2,\n        display: 'inline-flex',\n        borderRadius: 4,\n        wordBreak: 'break-all',\n        label: 'word-diff',\n    });\n    const wordAdded = (0, css_1.css)({\n        background: variables.wordAddedBackground,\n        label: 'word-added',\n    });\n    const wordRemoved = (0, css_1.css)({\n        background: variables.wordRemovedBackground,\n        label: 'word-removed',\n    });\n    const codeFoldGutter = (0, css_1.css)({\n        backgroundColor: variables.codeFoldGutterBackground,\n        label: 'code-fold-gutter',\n    });\n    const codeFold = (0, css_1.css)({\n        backgroundColor: variables.codeFoldBackground,\n        height: 40,\n        fontSize: 14,\n        fontWeight: 700,\n        label: 'code-fold',\n        a: {\n            textDecoration: 'underline !important',\n            cursor: 'pointer',\n            pre: {\n                display: 'inline',\n            },\n        },\n    });\n    const emptyLine = (0, css_1.css)({\n        backgroundColor: variables.emptyLineBackground,\n        label: 'empty-line',\n    });\n    const marker = (0, css_1.css)({\n        width: 25,\n        paddingLeft: 10,\n        paddingRight: 10,\n        userSelect: 'none',\n        label: 'marker',\n        [`&.${diffAdded}`]: {\n            pre: {\n                color: variables.addedColor,\n            },\n        },\n        [`&.${diffRemoved}`]: {\n            pre: {\n                color: variables.removedColor,\n            },\n        },\n    });\n    const highlightedLine = (0, css_1.css)({\n        background: variables.highlightBackground,\n        label: 'highlighted-line',\n        [`.${wordAdded}, .${wordRemoved}`]: {\n            backgroundColor: 'initial',\n        },\n    });\n    const highlightedGutter = (0, css_1.css)({\n        label: 'highlighted-gutter',\n    });\n    const gutter = (0, css_1.css)({\n        userSelect: 'none',\n        minWidth: 50,\n        padding: '0 10px',\n        whiteSpace: 'nowrap',\n        label: 'gutter',\n        textAlign: 'right',\n        background: variables.gutterBackground,\n        '&:hover': {\n            cursor: 'pointer',\n            background: variables.gutterBackgroundDark,\n            pre: {\n                opacity: 1,\n            },\n        },\n        pre: {\n            opacity: 0.5,\n        },\n        [`&.${diffAdded}`]: {\n            background: variables.addedGutterBackground,\n        },\n        [`&.${diffRemoved}`]: {\n            background: variables.removedGutterBackground,\n        },\n        [`&.${highlightedGutter}`]: {\n            background: variables.highlightGutterBackground,\n            '&:hover': {\n                background: variables.highlightGutterBackground,\n            },\n        },\n    });\n    const emptyGutter = (0, css_1.css)({\n        '&:hover': {\n            background: variables.gutterBackground,\n            cursor: 'initial',\n        },\n        label: 'empty-gutter',\n    });\n    const line = (0, css_1.css)({\n        verticalAlign: 'baseline',\n        label: 'line',\n    });\n    const defaultStyles = {\n        diffContainer,\n        diffRemoved,\n        diffAdded,\n        diffChanged,\n        splitView,\n        marker,\n        highlightedGutter,\n        highlightedLine,\n        gutter,\n        line,\n        wordDiff,\n        wordAdded,\n        wordRemoved,\n        codeFoldGutter,\n        codeFold,\n        emptyGutter,\n        emptyLine,\n        lineNumber,\n        contentText,\n        content,\n        codeFoldContent,\n        titleBlock,\n    };\n    const computerOverrideStyles = Object.keys(styles).reduce((acc, key) => (Object.assign(Object.assign({}, acc), {\n        [key]: (0, css_1.css)(styles[key]),\n    })), {});\n    return Object.keys(defaultStyles).reduce((acc, key) => (Object.assign(Object.assign({}, acc), {\n        [key]: computerOverrideStyles[key]\n            ? (0, css_1.cx)(defaultStyles[key], computerOverrideStyles[key])\n            : defaultStyles[key],\n    })), {});\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/react-diff-viewer-continued@3.2.6_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/react-diff-viewer-continued/lib/styles.js\n");

/***/ })

};
;
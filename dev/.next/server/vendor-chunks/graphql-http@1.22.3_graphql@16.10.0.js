"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/graphql-http@1.22.3_graphql@16.10.0";
exports.ids = ["vendor-chunks/graphql-http@1.22.3_graphql@16.10.0"];
exports.modules = {

/***/ "(rsc)/../node_modules/.pnpm/graphql-http@1.22.3_graphql@16.10.0/node_modules/graphql-http/lib/handler.mjs":
/*!***********************************************************************************************************!*\
  !*** ../node_modules/.pnpm/graphql-http@1.22.3_graphql@16.10.0/node_modules/graphql-http/lib/handler.mjs ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHandler: () => (/* binding */ createHandler),\n/* harmony export */   parseRequestParams: () => (/* binding */ parseRequestParams)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql */ \"graphql\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.mjs */ \"(rsc)/../node_modules/.pnpm/graphql-http@1.22.3_graphql@16.10.0/node_modules/graphql-http/lib/utils.mjs\");\n/**\n *\n * handler\n *\n */\n\n\n/** Checks whether the passed value is the `graphql-http` server agnostic response. */\nfunction isResponse(val) {\n    // Make sure the contents of body match string | null\n    if (!Array.isArray(val))\n        return false;\n    if (typeof val[0] !== 'string' && val[0] !== null)\n        return false;\n    if (!(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.isObject)(val[1]))\n        return false;\n    // Make sure the contents of init match ResponseInit\n    const init = val[1];\n    if (init.status && typeof init.status !== 'number')\n        return false;\n    if (init.statusText && typeof init.statusText !== 'string')\n        return false;\n    if (init.headers && !(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.isObject)(init.headers))\n        return false;\n    return true;\n}\n/**\n * The GraphQL over HTTP spec compliant request parser for an incoming GraphQL request.\n * It parses and validates the request itself, including the request method and the\n * content-type of the body.\n *\n * If the HTTP request itself is invalid or malformed, the function will return an\n * appropriate {@link Response}.\n *\n * If the HTTP request is valid, but is not a well-formatted GraphQL request, the\n * function will throw an error and it is up to the user to handle and respond as\n * they see fit.\n *\n * @category Server\n */\nasync function parseRequestParams(req) {\n    var _a, _b;\n    const method = req.method;\n    if (method !== 'GET' && method !== 'POST') {\n        return [\n            null,\n            {\n                status: 405,\n                statusText: 'Method Not Allowed',\n                headers: {\n                    allow: 'GET, POST',\n                },\n            },\n        ];\n    }\n    const [mediaType, charset = 'charset=utf-8', // utf-8 is assumed when not specified. this parameter is either \"charset\" or \"boundary\" (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Length)\n    ] = (getHeader(req, 'content-type') || '')\n        .replace(/\\s/g, '')\n        .toLowerCase()\n        .split(';');\n    const partParams = {};\n    switch (true) {\n        case method === 'GET': {\n            // TODO: what if content-type is specified and is not application/x-www-form-urlencoded?\n            try {\n                const [, search] = req.url.split('?');\n                const searchParams = new URLSearchParams(search);\n                partParams.operationName =\n                    (_a = searchParams.get('operationName')) !== null && _a !== void 0 ? _a : undefined;\n                partParams.query = (_b = searchParams.get('query')) !== null && _b !== void 0 ? _b : undefined;\n                const variables = searchParams.get('variables');\n                if (variables)\n                    partParams.variables = JSON.parse(variables);\n                const extensions = searchParams.get('extensions');\n                if (extensions)\n                    partParams.extensions = JSON.parse(extensions);\n            }\n            catch (_c) {\n                throw new Error('Unparsable URL');\n            }\n            break;\n        }\n        case method === 'POST' &&\n            mediaType === 'application/json' &&\n            charset === 'charset=utf-8':\n            {\n                if (!req.body) {\n                    throw new Error('Missing body');\n                }\n                let data;\n                try {\n                    const body = typeof req.body === 'function' ? await req.body() : req.body;\n                    data = typeof body === 'string' ? JSON.parse(body) : body;\n                }\n                catch (err) {\n                    throw new Error('Unparsable JSON body');\n                }\n                if (!(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.isObject)(data)) {\n                    throw new Error('JSON body must be an object');\n                }\n                partParams.operationName = data.operationName;\n                partParams.query = data.query;\n                partParams.variables = data.variables;\n                partParams.extensions = data.extensions;\n                break;\n            }\n        default: // graphql-http doesnt support any other content type\n            return [\n                null,\n                {\n                    status: 415,\n                    statusText: 'Unsupported Media Type',\n                },\n            ];\n    }\n    if (partParams.query == null)\n        throw new Error('Missing query');\n    if (typeof partParams.query !== 'string')\n        throw new Error('Invalid query');\n    if (partParams.variables != null &&\n        (typeof partParams.variables !== 'object' ||\n            Array.isArray(partParams.variables))) {\n        throw new Error('Invalid variables');\n    }\n    if (partParams.operationName != null &&\n        typeof partParams.operationName !== 'string') {\n        throw new Error('Invalid operationName');\n    }\n    if (partParams.extensions != null &&\n        (typeof partParams.extensions !== 'object' ||\n            Array.isArray(partParams.extensions))) {\n        throw new Error('Invalid extensions');\n    }\n    // request parameters are checked and now complete\n    return partParams;\n}\n/**\n * Makes a GraphQL over HTTP spec compliant server handler. The handler can\n * be used with your favorite server library.\n *\n * Beware that the handler resolves only after the whole operation completes.\n *\n * Errors thrown from **any** of the provided options or callbacks (or even due to\n * library misuse or potential bugs) will reject the handler's promise. They are\n * considered internal errors and you should take care of them accordingly.\n *\n * For production environments, its recommended not to transmit the exact internal\n * error details to the client, but instead report to an error logging tool or simply\n * the console.\n *\n * Simple example usage with Node:\n *\n * ```js\n * import http from 'http';\n * import { createHandler } from 'graphql-http';\n * import { schema } from './my-graphql-schema/index.mjs';\n *\n * // Create the GraphQL over HTTP handler\n * const handler = createHandler({ schema });\n *\n * // Create a HTTP server using the handler on `/graphql`\n * const server = http.createServer(async (req, res) => {\n *   if (!req.url.startsWith('/graphql')) {\n *     return res.writeHead(404).end();\n *   }\n *\n *   try {\n *     const [body, init] = await handler({\n *       url: req.url,\n *       method: req.method,\n *       headers: req.headers,\n *       body: () => new Promise((resolve) => {\n *         let body = '';\n *         req.on('data', (chunk) => (body += chunk));\n *         req.on('end', () => resolve(body));\n *       }),\n *       raw: req,\n *     });\n *     res.writeHead(init.status, init.statusText, init.headers).end(body);\n *   } catch (err) {\n *     // BEWARE not to transmit the exact internal error message in production environments\n *     res.writeHead(500).end(err.message);\n *   }\n * });\n *\n * server.listen(4000);\n * console.log('Listening to port 4000');\n * ```\n *\n * @category Server\n */\nfunction createHandler(options) {\n    const { schema, context, validate = graphql__WEBPACK_IMPORTED_MODULE_0__.validate, validationRules = [], execute = graphql__WEBPACK_IMPORTED_MODULE_0__.execute, parse = graphql__WEBPACK_IMPORTED_MODULE_0__.parse, getOperationAST = graphql__WEBPACK_IMPORTED_MODULE_0__.getOperationAST, rootValue, onSubscribe, onOperation, formatError = (err) => err, parseRequestParams: optionsParseRequestParams = parseRequestParams, } = options;\n    return async function handler(req) {\n        let acceptedMediaType = null;\n        const accepts = (getHeader(req, 'accept') || '*/*')\n            .replace(/\\s/g, '')\n            .toLowerCase()\n            .split(',');\n        for (const accept of accepts) {\n            // accept-charset became obsolete, shouldnt be used (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Charset)\n            // TODO: handle the weight parameter \"q\"\n            const [mediaType, ...params] = accept.split(';');\n            const charset = (params === null || params === void 0 ? void 0 : params.find((param) => param.includes('charset='))) || 'charset=utf-8'; // utf-8 is assumed when not specified;\n            if (mediaType === 'application/graphql-response+json' &&\n                charset === 'charset=utf-8') {\n                acceptedMediaType = 'application/graphql-response+json';\n                break;\n            }\n            // application/json should be the default until watershed\n            if ((mediaType === 'application/json' ||\n                mediaType === 'application/*' ||\n                mediaType === '*/*') &&\n                (charset === 'charset=utf-8' || charset === 'charset=utf8')) {\n                acceptedMediaType = 'application/json';\n                break;\n            }\n        }\n        if (!acceptedMediaType) {\n            return [\n                null,\n                {\n                    status: 406,\n                    statusText: 'Not Acceptable',\n                    headers: {\n                        accept: 'application/graphql-response+json; charset=utf-8, application/json; charset=utf-8',\n                    },\n                },\n            ];\n        }\n        let params;\n        try {\n            let paramsOrRes = await optionsParseRequestParams(req);\n            if (!paramsOrRes)\n                paramsOrRes = await parseRequestParams(req);\n            if (isResponse(paramsOrRes))\n                return paramsOrRes;\n            params = paramsOrRes;\n        }\n        catch (err) {\n            return makeResponse(err, acceptedMediaType, formatError);\n        }\n        let args;\n        const maybeResErrsOrArgs = await (onSubscribe === null || onSubscribe === void 0 ? void 0 : onSubscribe(req, params));\n        if (isResponse(maybeResErrsOrArgs))\n            return maybeResErrsOrArgs;\n        else if ((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.isExecutionResult)(maybeResErrsOrArgs) ||\n            areGraphQLErrors(maybeResErrsOrArgs))\n            return makeResponse(maybeResErrsOrArgs, acceptedMediaType, formatError);\n        else if (maybeResErrsOrArgs)\n            args = maybeResErrsOrArgs;\n        else {\n            if (!schema)\n                throw new Error('The GraphQL schema is not provided');\n            const { operationName, query, variables } = params;\n            let document;\n            try {\n                document = parse(query);\n            }\n            catch (err) {\n                return makeResponse(err, acceptedMediaType, formatError);\n            }\n            const resOrContext = typeof context === 'function' ? await context(req, params) : context;\n            if (isResponse(resOrContext))\n                return resOrContext;\n            const argsWithoutSchema = {\n                operationName,\n                document,\n                variableValues: variables,\n                contextValue: resOrContext,\n            };\n            if (typeof schema === 'function') {\n                const resOrSchema = await schema(req, argsWithoutSchema);\n                if (isResponse(resOrSchema))\n                    return resOrSchema;\n                args = Object.assign(Object.assign({}, argsWithoutSchema), { schema: resOrSchema });\n            }\n            else {\n                args = Object.assign(Object.assign({}, argsWithoutSchema), { schema });\n            }\n            let rules = graphql__WEBPACK_IMPORTED_MODULE_0__.specifiedRules;\n            if (typeof validationRules === 'function') {\n                rules = await validationRules(req, args, graphql__WEBPACK_IMPORTED_MODULE_0__.specifiedRules);\n            }\n            else {\n                rules = [...rules, ...validationRules];\n            }\n            const validationErrs = validate(args.schema, args.document, rules);\n            if (validationErrs.length) {\n                return makeResponse(validationErrs, acceptedMediaType, formatError);\n            }\n        }\n        let operation;\n        try {\n            const ast = getOperationAST(args.document, args.operationName);\n            if (!ast)\n                throw null;\n            operation = ast.operation;\n        }\n        catch (_a) {\n            return makeResponse(new graphql__WEBPACK_IMPORTED_MODULE_0__.GraphQLError('Unable to detect operation AST'), acceptedMediaType, formatError);\n        }\n        if (operation === 'subscription') {\n            return makeResponse(new graphql__WEBPACK_IMPORTED_MODULE_0__.GraphQLError('Subscriptions are not supported'), acceptedMediaType, formatError);\n        }\n        // mutations cannot happen over GETs\n        // https://graphql.github.io/graphql-over-http/draft/#sel-CALFJRPAAELBAAxwP\n        if (operation === 'mutation' && req.method === 'GET') {\n            return [\n                JSON.stringify({\n                    errors: [new graphql__WEBPACK_IMPORTED_MODULE_0__.GraphQLError('Cannot perform mutations over GET')],\n                }),\n                {\n                    status: 405,\n                    statusText: 'Method Not Allowed',\n                    headers: {\n                        allow: 'POST',\n                    },\n                },\n            ];\n        }\n        if (!('rootValue' in args)) {\n            args.rootValue = rootValue;\n        }\n        if (!('contextValue' in args)) {\n            const resOrContext = typeof context === 'function' ? await context(req, params) : context;\n            if (isResponse(resOrContext))\n                return resOrContext;\n            args.contextValue = resOrContext;\n        }\n        let result = await execute(args);\n        const maybeResponseOrResult = await (onOperation === null || onOperation === void 0 ? void 0 : onOperation(req, args, result));\n        if (isResponse(maybeResponseOrResult))\n            return maybeResponseOrResult;\n        else if (maybeResponseOrResult)\n            result = maybeResponseOrResult;\n        if ((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.isAsyncIterable)(result)) {\n            return makeResponse(new graphql__WEBPACK_IMPORTED_MODULE_0__.GraphQLError('Subscriptions are not supported'), acceptedMediaType, formatError);\n        }\n        return makeResponse(result, acceptedMediaType, formatError);\n    };\n}\n/**\n * Creates an appropriate GraphQL over HTTP response following the provided arguments.\n *\n * If the first argument is an `ExecutionResult`, the operation will be treated as \"successful\".\n *\n * If the first argument is (an array of) `GraphQLError`, or an `ExecutionResult` without the `data` field, it will be treated\n * the response will be constructed with the help of `acceptedMediaType` complying with the GraphQL over HTTP spec.\n *\n * If the first argument is an `Error`, the operation will be treated as a bad request responding with `400: Bad Request` and the\n * error will be present in the `ExecutionResult` style.\n */\nfunction makeResponse(resultOrErrors, acceptedMediaType, formatError) {\n    if (resultOrErrors instanceof Error &&\n        // because GraphQLError extends the Error class\n        !isGraphQLError(resultOrErrors)) {\n        return [\n            JSON.stringify({ errors: [formatError(resultOrErrors)] }, jsonErrorReplacer),\n            {\n                status: 400,\n                statusText: 'Bad Request',\n                headers: {\n                    'content-type': 'application/json; charset=utf-8',\n                },\n            },\n        ];\n    }\n    const errors = isGraphQLError(resultOrErrors)\n        ? [resultOrErrors]\n        : areGraphQLErrors(resultOrErrors)\n            ? resultOrErrors\n            : null;\n    if (errors) {\n        return [\n            JSON.stringify({ errors: errors.map(formatError) }, jsonErrorReplacer),\n            Object.assign(Object.assign({}, (acceptedMediaType === 'application/json'\n                ? {\n                    status: 200,\n                    statusText: 'OK',\n                }\n                : {\n                    status: 400,\n                    statusText: 'Bad Request',\n                })), { headers: {\n                    'content-type': acceptedMediaType === 'application/json'\n                        ? 'application/json; charset=utf-8'\n                        : 'application/graphql-response+json; charset=utf-8',\n                } }),\n        ];\n    }\n    return [\n        JSON.stringify('errors' in resultOrErrors && resultOrErrors.errors\n            ? Object.assign(Object.assign({}, resultOrErrors), { errors: resultOrErrors.errors.map(formatError) }) : resultOrErrors, jsonErrorReplacer),\n        {\n            status: 200,\n            statusText: 'OK',\n            headers: {\n                'content-type': acceptedMediaType === 'application/json'\n                    ? 'application/json; charset=utf-8'\n                    : 'application/graphql-response+json; charset=utf-8',\n            },\n        },\n    ];\n}\nfunction getHeader(req, key) {\n    if (typeof req.headers.get === 'function') {\n        return req.headers.get(key);\n    }\n    return Object(req.headers)[key];\n}\nfunction areGraphQLErrors(obj) {\n    return (Array.isArray(obj) &&\n        obj.length > 0 &&\n        // if one item in the array is a GraphQLError, we're good\n        obj.some(isGraphQLError));\n}\nfunction isGraphQLError(obj) {\n    return obj instanceof graphql__WEBPACK_IMPORTED_MODULE_0__.GraphQLError;\n}\nfunction jsonErrorReplacer(_key, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nval) {\n    if (val instanceof Error &&\n        // GraphQL errors implement their own stringer\n        !isGraphQLError(val)) {\n        const error = val;\n        return {\n            // name: error.name, name is included in message\n            message: error.message,\n            // stack: error.stack, can leak sensitive details\n        };\n    }\n    return val;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/graphql-http@1.22.3_graphql@16.10.0/node_modules/graphql-http/lib/handler.mjs\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/graphql-http@1.22.3_graphql@16.10.0/node_modules/graphql-http/lib/use/fetch.mjs":
/*!*************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/graphql-http@1.22.3_graphql@16.10.0/node_modules/graphql-http/lib/use/fetch.mjs ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHandler: () => (/* binding */ createHandler),\n/* harmony export */   parseRequestParams: () => (/* binding */ parseRequestParams)\n/* harmony export */ });\n/* harmony import */ var _handler_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../handler.mjs */ \"(rsc)/../node_modules/.pnpm/graphql-http@1.22.3_graphql@16.10.0/node_modules/graphql-http/lib/handler.mjs\");\n\n/**\n * The GraphQL over HTTP spec compliant request parser for an incoming GraphQL request.\n *\n * It is important to pass in the `abortedRef` so that the parser does not perform any\n * operations on a disposed request (see example).\n *\n * If the HTTP request _is not_ a [well-formatted GraphQL over HTTP request](https://graphql.github.io/graphql-over-http/draft/#sec-Request), the function will return a `Response`.\n *\n * If the HTTP request _is_ a [well-formatted GraphQL over HTTP request](https://graphql.github.io/graphql-over-http/draft/#sec-Request), but is invalid or malformed,\n * the function will throw an error and it is up to the user to handle and respond as they see fit.\n *\n * ```js\n * import http from 'http';\n * import { createServerAdapter } from '@whatwg-node/server'; // yarn add @whatwg-node/server\n * import { parseRequestParams } from 'graphql-http/lib/use/fetch';\n *\n * // Use this adapter in _any_ environment.\n * const adapter = createServerAdapter({\n *   handleRequest: async (req) => {\n *     try {\n *       const paramsOrResponse = await parseRequestParams(req);\n *       if (paramsOrResponse instanceof Response) {\n *         // not a well-formatted GraphQL over HTTP request,\n *         // parser created a response object to use\n *         return paramsOrResponse;\n *       }\n *\n *       // well-formatted GraphQL over HTTP request,\n *       // with valid parameters\n *       return new Response(JSON.stringify(paramsOrResponse, null, '  '), {\n *         status: 200,\n *       });\n *     } catch (err) {\n *       // well-formatted GraphQL over HTTP request,\n *       // but with invalid parameters\n *       return new Response(err.message, { status: 400 });\n *     }\n *   },\n * });\n *\n * const server = http.createServer(adapter);\n *\n * server.listen(4000);\n * console.log('Listening to port 4000');\n * ```\n *\n * @category Server/fetch\n */\nasync function parseRequestParams(req, api = {}) {\n    const rawReq = toRequest(req, api);\n    const paramsOrRes = await (0,_handler_mjs__WEBPACK_IMPORTED_MODULE_0__.parseRequestParams)(rawReq);\n    if (!('query' in paramsOrRes)) {\n        const [body, init] = paramsOrRes;\n        return new (api.Response || Response)(body, init);\n    }\n    return paramsOrRes;\n}\n/**\n * Create a GraphQL over HTTP spec compliant request handler for\n * a fetch environment like Deno, Bun, CloudFlare Workers, Lambdas, etc.\n *\n * You can use [@whatwg-node/server](https://github.com/ardatan/whatwg-node/tree/master/packages/server) to create a server adapter and\n * isomorphically use it in _any_ environment. See an example:\n *\n * ```js\n * import http from 'http';\n * import { createServerAdapter } from '@whatwg-node/server'; // yarn add @whatwg-node/server\n * import { createHandler } from 'graphql-http/lib/use/fetch';\n * import { schema } from './my-graphql-schema/index.mjs';\n *\n * // Use this adapter in _any_ environment.\n * const adapter = createServerAdapter({\n *   handleRequest: createHandler({ schema }),\n * });\n *\n * const server = http.createServer(adapter);\n *\n * server.listen(4000);\n * console.log('Listening to port 4000');\n * ```\n *\n * @param reqCtx - Custom fetch API engine, will use from global scope if left undefined.\n *\n * @category Server/fetch\n */\nfunction createHandler(options, reqCtx = {}) {\n    const api = {\n        Response: reqCtx.Response || Response,\n        TextEncoder: reqCtx.TextEncoder || TextEncoder,\n        ReadableStream: reqCtx.ReadableStream || ReadableStream,\n    };\n    const handler = (0,_handler_mjs__WEBPACK_IMPORTED_MODULE_0__.createHandler)(options);\n    return async function handleRequest(req) {\n        try {\n            const [body, init] = await handler(toRequest(req, api));\n            return new api.Response(body, init);\n        }\n        catch (err) {\n            // The handler shouldnt throw errors.\n            // If you wish to handle them differently, consider implementing your own request handler.\n            console.error('Internal error occurred during request handling. ' +\n                'Please check your implementation.', err);\n            return new api.Response(null, { status: 500 });\n        }\n    };\n}\nfunction toRequest(req, api = {}) {\n    return {\n        method: req.method,\n        url: req.url,\n        headers: req.headers,\n        body: () => req.text(),\n        raw: req,\n        context: {\n            Response: api.Response || Response,\n            TextEncoder: api.TextEncoder || TextEncoder,\n            ReadableStream: api.ReadableStream || ReadableStream,\n        },\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2dyYXBocWwtaHR0cEAxLjIyLjNfZ3JhcGhxbEAxNi4xMC4wL25vZGVfbW9kdWxlcy9ncmFwaHFsLWh0dHAvbGliL3VzZS9mZXRjaC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlIO0FBQ2pIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxzQkFBc0IsNEJBQTRCO0FBQzlELFlBQVkscUJBQXFCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLFNBQVM7QUFDVDtBQUNBO0FBQ0EsNENBQTRDLGFBQWE7QUFDekQ7QUFDQSxNQUFNO0FBQ04sSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLCtDQUErQztBQUN0RDtBQUNBLDhCQUE4QixnRUFBcUI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxzQkFBc0IsNEJBQTRCO0FBQzlELFlBQVksZ0JBQWdCO0FBQzVCLFlBQVksU0FBUztBQUNyQjtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsUUFBUTtBQUM1QyxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLDJDQUEyQztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDJEQUFnQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxhQUFhO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbGlua3VzL0dpdGh1Yi9tb25vdHdvL3BheWxvYWQtcGx1Z2luLW1ldGEvbm9kZV9tb2R1bGVzLy5wbnBtL2dyYXBocWwtaHR0cEAxLjIyLjNfZ3JhcGhxbEAxNi4xMC4wL25vZGVfbW9kdWxlcy9ncmFwaHFsLWh0dHAvbGliL3VzZS9mZXRjaC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlSGFuZGxlciBhcyBjcmVhdGVSYXdIYW5kbGVyLCBwYXJzZVJlcXVlc3RQYXJhbXMgYXMgcmF3UGFyc2VSZXF1ZXN0UGFyYW1zLCB9IGZyb20gJy4uL2hhbmRsZXIubWpzJztcbi8qKlxuICogVGhlIEdyYXBoUUwgb3ZlciBIVFRQIHNwZWMgY29tcGxpYW50IHJlcXVlc3QgcGFyc2VyIGZvciBhbiBpbmNvbWluZyBHcmFwaFFMIHJlcXVlc3QuXG4gKlxuICogSXQgaXMgaW1wb3J0YW50IHRvIHBhc3MgaW4gdGhlIGBhYm9ydGVkUmVmYCBzbyB0aGF0IHRoZSBwYXJzZXIgZG9lcyBub3QgcGVyZm9ybSBhbnlcbiAqIG9wZXJhdGlvbnMgb24gYSBkaXNwb3NlZCByZXF1ZXN0IChzZWUgZXhhbXBsZSkuXG4gKlxuICogSWYgdGhlIEhUVFAgcmVxdWVzdCBfaXMgbm90XyBhIFt3ZWxsLWZvcm1hdHRlZCBHcmFwaFFMIG92ZXIgSFRUUCByZXF1ZXN0XShodHRwczovL2dyYXBocWwuZ2l0aHViLmlvL2dyYXBocWwtb3Zlci1odHRwL2RyYWZ0LyNzZWMtUmVxdWVzdCksIHRoZSBmdW5jdGlvbiB3aWxsIHJldHVybiBhIGBSZXNwb25zZWAuXG4gKlxuICogSWYgdGhlIEhUVFAgcmVxdWVzdCBfaXNfIGEgW3dlbGwtZm9ybWF0dGVkIEdyYXBoUUwgb3ZlciBIVFRQIHJlcXVlc3RdKGh0dHBzOi8vZ3JhcGhxbC5naXRodWIuaW8vZ3JhcGhxbC1vdmVyLWh0dHAvZHJhZnQvI3NlYy1SZXF1ZXN0KSwgYnV0IGlzIGludmFsaWQgb3IgbWFsZm9ybWVkLFxuICogdGhlIGZ1bmN0aW9uIHdpbGwgdGhyb3cgYW4gZXJyb3IgYW5kIGl0IGlzIHVwIHRvIHRoZSB1c2VyIHRvIGhhbmRsZSBhbmQgcmVzcG9uZCBhcyB0aGV5IHNlZSBmaXQuXG4gKlxuICogYGBganNcbiAqIGltcG9ydCBodHRwIGZyb20gJ2h0dHAnO1xuICogaW1wb3J0IHsgY3JlYXRlU2VydmVyQWRhcHRlciB9IGZyb20gJ0B3aGF0d2ctbm9kZS9zZXJ2ZXInOyAvLyB5YXJuIGFkZCBAd2hhdHdnLW5vZGUvc2VydmVyXG4gKiBpbXBvcnQgeyBwYXJzZVJlcXVlc3RQYXJhbXMgfSBmcm9tICdncmFwaHFsLWh0dHAvbGliL3VzZS9mZXRjaCc7XG4gKlxuICogLy8gVXNlIHRoaXMgYWRhcHRlciBpbiBfYW55XyBlbnZpcm9ubWVudC5cbiAqIGNvbnN0IGFkYXB0ZXIgPSBjcmVhdGVTZXJ2ZXJBZGFwdGVyKHtcbiAqICAgaGFuZGxlUmVxdWVzdDogYXN5bmMgKHJlcSkgPT4ge1xuICogICAgIHRyeSB7XG4gKiAgICAgICBjb25zdCBwYXJhbXNPclJlc3BvbnNlID0gYXdhaXQgcGFyc2VSZXF1ZXN0UGFyYW1zKHJlcSk7XG4gKiAgICAgICBpZiAocGFyYW1zT3JSZXNwb25zZSBpbnN0YW5jZW9mIFJlc3BvbnNlKSB7XG4gKiAgICAgICAgIC8vIG5vdCBhIHdlbGwtZm9ybWF0dGVkIEdyYXBoUUwgb3ZlciBIVFRQIHJlcXVlc3QsXG4gKiAgICAgICAgIC8vIHBhcnNlciBjcmVhdGVkIGEgcmVzcG9uc2Ugb2JqZWN0IHRvIHVzZVxuICogICAgICAgICByZXR1cm4gcGFyYW1zT3JSZXNwb25zZTtcbiAqICAgICAgIH1cbiAqXG4gKiAgICAgICAvLyB3ZWxsLWZvcm1hdHRlZCBHcmFwaFFMIG92ZXIgSFRUUCByZXF1ZXN0LFxuICogICAgICAgLy8gd2l0aCB2YWxpZCBwYXJhbWV0ZXJzXG4gKiAgICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKEpTT04uc3RyaW5naWZ5KHBhcmFtc09yUmVzcG9uc2UsIG51bGwsICcgICcpLCB7XG4gKiAgICAgICAgIHN0YXR1czogMjAwLFxuICogICAgICAgfSk7XG4gKiAgICAgfSBjYXRjaCAoZXJyKSB7XG4gKiAgICAgICAvLyB3ZWxsLWZvcm1hdHRlZCBHcmFwaFFMIG92ZXIgSFRUUCByZXF1ZXN0LFxuICogICAgICAgLy8gYnV0IHdpdGggaW52YWxpZCBwYXJhbWV0ZXJzXG4gKiAgICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKGVyci5tZXNzYWdlLCB7IHN0YXR1czogNDAwIH0pO1xuICogICAgIH1cbiAqICAgfSxcbiAqIH0pO1xuICpcbiAqIGNvbnN0IHNlcnZlciA9IGh0dHAuY3JlYXRlU2VydmVyKGFkYXB0ZXIpO1xuICpcbiAqIHNlcnZlci5saXN0ZW4oNDAwMCk7XG4gKiBjb25zb2xlLmxvZygnTGlzdGVuaW5nIHRvIHBvcnQgNDAwMCcpO1xuICogYGBgXG4gKlxuICogQGNhdGVnb3J5IFNlcnZlci9mZXRjaFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcGFyc2VSZXF1ZXN0UGFyYW1zKHJlcSwgYXBpID0ge30pIHtcbiAgICBjb25zdCByYXdSZXEgPSB0b1JlcXVlc3QocmVxLCBhcGkpO1xuICAgIGNvbnN0IHBhcmFtc09yUmVzID0gYXdhaXQgcmF3UGFyc2VSZXF1ZXN0UGFyYW1zKHJhd1JlcSk7XG4gICAgaWYgKCEoJ3F1ZXJ5JyBpbiBwYXJhbXNPclJlcykpIHtcbiAgICAgICAgY29uc3QgW2JvZHksIGluaXRdID0gcGFyYW1zT3JSZXM7XG4gICAgICAgIHJldHVybiBuZXcgKGFwaS5SZXNwb25zZSB8fCBSZXNwb25zZSkoYm9keSwgaW5pdCk7XG4gICAgfVxuICAgIHJldHVybiBwYXJhbXNPclJlcztcbn1cbi8qKlxuICogQ3JlYXRlIGEgR3JhcGhRTCBvdmVyIEhUVFAgc3BlYyBjb21wbGlhbnQgcmVxdWVzdCBoYW5kbGVyIGZvclxuICogYSBmZXRjaCBlbnZpcm9ubWVudCBsaWtlIERlbm8sIEJ1biwgQ2xvdWRGbGFyZSBXb3JrZXJzLCBMYW1iZGFzLCBldGMuXG4gKlxuICogWW91IGNhbiB1c2UgW0B3aGF0d2ctbm9kZS9zZXJ2ZXJdKGh0dHBzOi8vZ2l0aHViLmNvbS9hcmRhdGFuL3doYXR3Zy1ub2RlL3RyZWUvbWFzdGVyL3BhY2thZ2VzL3NlcnZlcikgdG8gY3JlYXRlIGEgc2VydmVyIGFkYXB0ZXIgYW5kXG4gKiBpc29tb3JwaGljYWxseSB1c2UgaXQgaW4gX2FueV8gZW52aXJvbm1lbnQuIFNlZSBhbiBleGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiBpbXBvcnQgaHR0cCBmcm9tICdodHRwJztcbiAqIGltcG9ydCB7IGNyZWF0ZVNlcnZlckFkYXB0ZXIgfSBmcm9tICdAd2hhdHdnLW5vZGUvc2VydmVyJzsgLy8geWFybiBhZGQgQHdoYXR3Zy1ub2RlL3NlcnZlclxuICogaW1wb3J0IHsgY3JlYXRlSGFuZGxlciB9IGZyb20gJ2dyYXBocWwtaHR0cC9saWIvdXNlL2ZldGNoJztcbiAqIGltcG9ydCB7IHNjaGVtYSB9IGZyb20gJy4vbXktZ3JhcGhxbC1zY2hlbWEvaW5kZXgubWpzJztcbiAqXG4gKiAvLyBVc2UgdGhpcyBhZGFwdGVyIGluIF9hbnlfIGVudmlyb25tZW50LlxuICogY29uc3QgYWRhcHRlciA9IGNyZWF0ZVNlcnZlckFkYXB0ZXIoe1xuICogICBoYW5kbGVSZXF1ZXN0OiBjcmVhdGVIYW5kbGVyKHsgc2NoZW1hIH0pLFxuICogfSk7XG4gKlxuICogY29uc3Qgc2VydmVyID0gaHR0cC5jcmVhdGVTZXJ2ZXIoYWRhcHRlcik7XG4gKlxuICogc2VydmVyLmxpc3Rlbig0MDAwKTtcbiAqIGNvbnNvbGUubG9nKCdMaXN0ZW5pbmcgdG8gcG9ydCA0MDAwJyk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gcmVxQ3R4IC0gQ3VzdG9tIGZldGNoIEFQSSBlbmdpbmUsIHdpbGwgdXNlIGZyb20gZ2xvYmFsIHNjb3BlIGlmIGxlZnQgdW5kZWZpbmVkLlxuICpcbiAqIEBjYXRlZ29yeSBTZXJ2ZXIvZmV0Y2hcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUhhbmRsZXIob3B0aW9ucywgcmVxQ3R4ID0ge30pIHtcbiAgICBjb25zdCBhcGkgPSB7XG4gICAgICAgIFJlc3BvbnNlOiByZXFDdHguUmVzcG9uc2UgfHwgUmVzcG9uc2UsXG4gICAgICAgIFRleHRFbmNvZGVyOiByZXFDdHguVGV4dEVuY29kZXIgfHwgVGV4dEVuY29kZXIsXG4gICAgICAgIFJlYWRhYmxlU3RyZWFtOiByZXFDdHguUmVhZGFibGVTdHJlYW0gfHwgUmVhZGFibGVTdHJlYW0sXG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVyID0gY3JlYXRlUmF3SGFuZGxlcihvcHRpb25zKTtcbiAgICByZXR1cm4gYXN5bmMgZnVuY3Rpb24gaGFuZGxlUmVxdWVzdChyZXEpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IFtib2R5LCBpbml0XSA9IGF3YWl0IGhhbmRsZXIodG9SZXF1ZXN0KHJlcSwgYXBpKSk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IGFwaS5SZXNwb25zZShib2R5LCBpbml0KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAvLyBUaGUgaGFuZGxlciBzaG91bGRudCB0aHJvdyBlcnJvcnMuXG4gICAgICAgICAgICAvLyBJZiB5b3Ugd2lzaCB0byBoYW5kbGUgdGhlbSBkaWZmZXJlbnRseSwgY29uc2lkZXIgaW1wbGVtZW50aW5nIHlvdXIgb3duIHJlcXVlc3QgaGFuZGxlci5cbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ludGVybmFsIGVycm9yIG9jY3VycmVkIGR1cmluZyByZXF1ZXN0IGhhbmRsaW5nLiAnICtcbiAgICAgICAgICAgICAgICAnUGxlYXNlIGNoZWNrIHlvdXIgaW1wbGVtZW50YXRpb24uJywgZXJyKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgYXBpLlJlc3BvbnNlKG51bGwsIHsgc3RhdHVzOiA1MDAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gdG9SZXF1ZXN0KHJlcSwgYXBpID0ge30pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBtZXRob2Q6IHJlcS5tZXRob2QsXG4gICAgICAgIHVybDogcmVxLnVybCxcbiAgICAgICAgaGVhZGVyczogcmVxLmhlYWRlcnMsXG4gICAgICAgIGJvZHk6ICgpID0+IHJlcS50ZXh0KCksXG4gICAgICAgIHJhdzogcmVxLFxuICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICBSZXNwb25zZTogYXBpLlJlc3BvbnNlIHx8IFJlc3BvbnNlLFxuICAgICAgICAgICAgVGV4dEVuY29kZXI6IGFwaS5UZXh0RW5jb2RlciB8fCBUZXh0RW5jb2RlcixcbiAgICAgICAgICAgIFJlYWRhYmxlU3RyZWFtOiBhcGkuUmVhZGFibGVTdHJlYW0gfHwgUmVhZGFibGVTdHJlYW0sXG4gICAgICAgIH0sXG4gICAgfTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/graphql-http@1.22.3_graphql@16.10.0/node_modules/graphql-http/lib/use/fetch.mjs\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/graphql-http@1.22.3_graphql@16.10.0/node_modules/graphql-http/lib/utils.mjs":
/*!*********************************************************************************************************!*\
  !*** ../node_modules/.pnpm/graphql-http@1.22.3_graphql@16.10.0/node_modules/graphql-http/lib/utils.mjs ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extendedTypeof: () => (/* binding */ extendedTypeof),\n/* harmony export */   isAsyncIterable: () => (/* binding */ isAsyncIterable),\n/* harmony export */   isExecutionResult: () => (/* binding */ isExecutionResult),\n/* harmony export */   isObject: () => (/* binding */ isObject)\n/* harmony export */ });\n/**\n *\n * utils\n *\n */\n/** @private */\nfunction extendedTypeof(val) {\n    if (val === null) {\n        return 'null';\n    }\n    if (Array.isArray(val)) {\n        return 'array';\n    }\n    return typeof val;\n}\n/** @private */\nfunction isObject(val) {\n    return typeof val === 'object' && val !== null;\n}\n/** @private */\nfunction isExecutionResult(val) {\n    return (isObject(val) &&\n        ('data' in val || ('data' in val && val.data == null && 'errors' in val)));\n}\n/** @private */\nfunction isAsyncIterable(val) {\n    return typeof Object(val)[Symbol.asyncIterator] === 'function';\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2dyYXBocWwtaHR0cEAxLjIyLjNfZ3JhcGhxbEAxNi4xMC4wL25vZGVfbW9kdWxlcy9ncmFwaHFsLWh0dHAvbGliL3V0aWxzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9saW5rdXMvR2l0aHViL21vbm90d28vcGF5bG9hZC1wbHVnaW4tbWV0YS9ub2RlX21vZHVsZXMvLnBucG0vZ3JhcGhxbC1odHRwQDEuMjIuM19ncmFwaHFsQDE2LjEwLjAvbm9kZV9tb2R1bGVzL2dyYXBocWwtaHR0cC9saWIvdXRpbHMubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIHV0aWxzXG4gKlxuICovXG4vKiogQHByaXZhdGUgKi9cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmRlZFR5cGVvZih2YWwpIHtcbiAgICBpZiAodmFsID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAnbnVsbCc7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAgcmV0dXJuICdhcnJheSc7XG4gICAgfVxuICAgIHJldHVybiB0eXBlb2YgdmFsO1xufVxuLyoqIEBwcml2YXRlICovXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmIHZhbCAhPT0gbnVsbDtcbn1cbi8qKiBAcHJpdmF0ZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRXhlY3V0aW9uUmVzdWx0KHZhbCkge1xuICAgIHJldHVybiAoaXNPYmplY3QodmFsKSAmJlxuICAgICAgICAoJ2RhdGEnIGluIHZhbCB8fCAoJ2RhdGEnIGluIHZhbCAmJiB2YWwuZGF0YSA9PSBudWxsICYmICdlcnJvcnMnIGluIHZhbCkpKTtcbn1cbi8qKiBAcHJpdmF0ZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQXN5bmNJdGVyYWJsZSh2YWwpIHtcbiAgICByZXR1cm4gdHlwZW9mIE9iamVjdCh2YWwpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9PT0gJ2Z1bmN0aW9uJztcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/graphql-http@1.22.3_graphql@16.10.0/node_modules/graphql-http/lib/utils.mjs\n");

/***/ })

};
;